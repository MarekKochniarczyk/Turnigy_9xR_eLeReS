
er9x.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  0000e5bc  0000e650  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000e5bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000e9f  00800146  00800146  0000e696  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000e696  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000170  00000000  00000000  0000e6c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000248bb  00000000  00000000  0000e836  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000034fc  00000000  00000000  000330f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000a7a5  00000000  00000000  000365ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000025ac  00000000  00000000  00040d94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000046ff  00000000  00000000  00043340  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00015533  00000000  00000000  00047a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000c88  00000000  00000000  0005cf72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 43 10 	jmp	0x2086	; 0x2086 <__ctors_end>
       4:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__bad_interrupt>
       8:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__bad_interrupt>
       c:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__bad_interrupt>
      10:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__bad_interrupt>
      14:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__bad_interrupt>
      18:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__bad_interrupt>
      1c:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__bad_interrupt>
      20:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__bad_interrupt>
      24:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__bad_interrupt>
      28:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__vector_10>
      2c:	0c 94 09 2f 	jmp	0x5e12	; 0x5e12 <__vector_11>
      30:	0c 94 9d 31 	jmp	0x633a	; 0x633a <__vector_12>
      34:	0c 94 36 2f 	jmp	0x5e6c	; 0x5e6c <__vector_13>
      38:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__bad_interrupt>
      3c:	0c 94 87 15 	jmp	0x2b0e	; 0x2b0e <__vector_15>
      40:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <__vector_16>
      44:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__bad_interrupt>
      48:	0c 94 0f 6f 	jmp	0xde1e	; 0xde1e <__vector_18>
      4c:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__bad_interrupt>
      50:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__bad_interrupt>
      54:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__bad_interrupt>
      58:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__bad_interrupt>
      5c:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__bad_interrupt>
      60:	0c 94 20 32 	jmp	0x6440	; 0x6440 <__vector_24>
      64:	0c 94 ce 15 	jmp	0x2b9c	; 0x2b9c <__vector_25>
      68:	0c 94 9b 2f 	jmp	0x5f36	; 0x5f36 <__vector_26>
      6c:	0c 94 60 32 	jmp	0x64c0	; 0x64c0 <__vector_27>
      70:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__bad_interrupt>
      74:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__bad_interrupt>
      78:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__bad_interrupt>
      7c:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__bad_interrupt>
      80:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__bad_interrupt>
      84:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__bad_interrupt>
      88:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__bad_interrupt>
      8c:	57 17       	cp	r21, r23
      8e:	5b 17       	cp	r21, r27
      90:	20 17       	cp	r18, r16
      92:	26 17       	cp	r18, r22
      94:	2c 17       	cp	r18, r28
      96:	2c 17       	cp	r18, r28
      98:	2c 17       	cp	r18, r28
      9a:	4f 17       	cp	r20, r31
      9c:	53 17       	cp	r21, r19
      9e:	57 17       	cp	r21, r23
      a0:	5b 17       	cp	r21, r27
      a2:	68 17       	cp	r22, r24
      a4:	68 17       	cp	r22, r24
      a6:	5f 17       	cp	r21, r31
      a8:	4a 2b       	or	r20, r26
      aa:	38 2b       	or	r19, r24
      ac:	32 2b       	or	r19, r18
      ae:	3b 2b       	or	r19, r27
      b0:	3f 2b       	or	r19, r31
      b2:	43 2b       	or	r20, r19
      b4:	35 2b       	or	r19, r21
      b6:	47 2b       	or	r20, r23
      b8:	4c 2b       	or	r20, r28
      ba:	89 33       	cpi	r24, 0x39	; 57
      bc:	8b 33       	cpi	r24, 0x3B	; 59
      be:	8e 33       	cpi	r24, 0x3E	; 62
      c0:	93 33       	cpi	r25, 0x33	; 51
      c2:	a4 33       	cpi	r26, 0x34	; 52
      c4:	b3 33       	cpi	r27, 0x33	; 51
      c6:	c1 33       	cpi	r28, 0x31	; 49
      c8:	cb 33       	cpi	r28, 0x3B	; 59
      ca:	db 33       	cpi	r29, 0x3B	; 59
      cc:	eb 33       	cpi	r30, 0x3B	; 59
      ce:	f0 33       	cpi	r31, 0x30	; 48
      d0:	06 34       	cpi	r16, 0x46	; 70
      d2:	09 34       	cpi	r16, 0x49	; 73
      d4:	0d 34       	cpi	r16, 0x4D	; 77
      d6:	0f 34       	cpi	r16, 0x4F	; 79
      d8:	11 34       	cpi	r17, 0x41	; 65
      da:	16 34       	cpi	r17, 0x46	; 70
      dc:	1a 34       	cpi	r17, 0x4A	; 74
      de:	25 34       	cpi	r18, 0x45	; 69
      e0:	29 34       	cpi	r18, 0x49	; 73
      e2:	31 34       	cpi	r19, 0x41	; 65
      e4:	38 34       	cpi	r19, 0x48	; 72
      e6:	3c 34       	cpi	r19, 0x4C	; 76
      e8:	3e 34       	cpi	r19, 0x4E	; 78
      ea:	42 34       	cpi	r20, 0x42	; 66
      ec:	44 34       	cpi	r20, 0x44	; 68
      ee:	46 34       	cpi	r20, 0x46	; 70
      f0:	48 34       	cpi	r20, 0x48	; 72
      f2:	4c 34       	cpi	r20, 0x4C	; 76
      f4:	50 34       	cpi	r21, 0x40	; 64
      f6:	55 34       	cpi	r21, 0x45	; 69
      f8:	5a 34       	cpi	r21, 0x4A	; 74
      fa:	5f 34       	cpi	r21, 0x4F	; 79
      fc:	64 34       	cpi	r22, 0x44	; 68
      fe:	69 34       	cpi	r22, 0x49	; 73
     100:	73 37       	cpi	r23, 0x73	; 115
     102:	73 37       	cpi	r23, 0x73	; 115
     104:	73 37       	cpi	r23, 0x73	; 115
     106:	73 37       	cpi	r23, 0x73	; 115
     108:	9f 37       	cpi	r25, 0x7F	; 127
     10a:	96 37       	cpi	r25, 0x76	; 118
     10c:	96 37       	cpi	r25, 0x76	; 118
     10e:	96 37       	cpi	r25, 0x76	; 118
     110:	96 37       	cpi	r25, 0x76	; 118
     112:	96 37       	cpi	r25, 0x76	; 118
     114:	96 37       	cpi	r25, 0x76	; 118
     116:	96 37       	cpi	r25, 0x76	; 118
     118:	83 37       	cpi	r24, 0x73	; 115
     11a:	88 37       	cpi	r24, 0x78	; 120
     11c:	88 37       	cpi	r24, 0x78	; 120
     11e:	99 45       	sbci	r25, 0x59	; 89
     120:	a8 45       	sbci	r26, 0x58	; 88
     122:	52 46       	sbci	r21, 0x62	; 98
     124:	e5 47       	sbci	r30, 0x75	; 117
     126:	6c 48       	sbci	r22, 0x8C	; 140
     128:	ee 46       	sbci	r30, 0x6E	; 110
     12a:	c1 4a       	sbci	r28, 0xA1	; 161
     12c:	da 4a       	sbci	r29, 0xAA	; 170
     12e:	b2 49       	sbci	r27, 0x92	; 146
     130:	e8 48       	sbci	r30, 0x88	; 136
     132:	f0 48       	sbci	r31, 0x80	; 128
     134:	46 49       	sbci	r20, 0x96	; 150
     136:	f1 56       	subi	r31, 0x61	; 97
     138:	b1 56       	subi	r27, 0x61	; 97
     13a:	bc 56       	subi	r27, 0x6C	; 108
     13c:	cb 56       	subi	r28, 0x6B	; 107
     13e:	d1 56       	subi	r29, 0x61	; 97
     140:	d5 56       	subi	r29, 0x65	; 101
     142:	da 56       	subi	r29, 0x6A	; 106
     144:	e0 5d       	subi	r30, 0xD0	; 208
     146:	ef 5d       	subi	r30, 0xDF	; 223
     148:	00 5e       	subi	r16, 0xE0	; 224
     14a:	16 5e       	subi	r17, 0xE6	; 230
     14c:	1d 5e       	subi	r17, 0xED	; 237
     14e:	24 5e       	subi	r18, 0xE4	; 228
     150:	2f 5e       	subi	r18, 0xEF	; 239
     152:	46 5e       	subi	r20, 0xE6	; 230
     154:	5e 5e       	subi	r21, 0xEE	; 238
     156:	56 5f       	subi	r21, 0xF6	; 246
     158:	81 5f       	subi	r24, 0xF1	; 241
     15a:	8a 5f       	subi	r24, 0xFA	; 250
     15c:	93 5f       	subi	r25, 0xF3	; 243
     15e:	9f 5f       	subi	r25, 0xFF	; 255
     160:	c0 5f       	subi	r28, 0xF0	; 240
     162:	d0 5f       	subi	r29, 0xF0	; 240
     164:	fa 5f       	subi	r31, 0xFA	; 250
     166:	47 60       	ori	r20, 0x07	; 7
     168:	53 60       	ori	r21, 0x03	; 3
     16a:	91 60       	ori	r25, 0x01	; 1
     16c:	b4 60       	ori	r27, 0x04	; 4
     16e:	cb 60       	ori	r28, 0x0B	; 11
     170:	d7 60       	ori	r29, 0x07	; 7
     172:	e3 60       	ori	r30, 0x03	; 3
     174:	ef 60       	ori	r30, 0x0F	; 15
     176:	e2 63       	ori	r30, 0x32	; 50
     178:	d1 6d       	ori	r29, 0xD1	; 209
     17a:	61 66       	ori	r22, 0x61	; 97
     17c:	ec 6a       	ori	r30, 0xAC	; 172
     17e:	ec 66       	ori	r30, 0x6C	; 108
     180:	d1 6d       	ori	r29, 0xD1	; 209
     182:	d1 6d       	ori	r29, 0xD1	; 209
     184:	b9 69       	ori	r27, 0x99	; 153
     186:	59 6c       	ori	r21, 0xC9	; 201
     188:	d1 6d       	ori	r29, 0xD1	; 209
     18a:	d1 6d       	ori	r29, 0xD1	; 209
     18c:	9c 65       	ori	r25, 0x5C	; 92
     18e:	f2 63       	ori	r31, 0x32	; 50
     190:	ec 67       	ori	r30, 0x7C	; 124

00000192 <__trampolines_end>:
     192:	20 4f       	sbci	r18, 0xF0	; 240
     194:	6c 64       	ori	r22, 0x4C	; 76
     196:	20 56       	subi	r18, 0x60	; 96
     198:	65 72       	andi	r22, 0x25	; 37
     19a:	73 69       	ori	r23, 0x93	; 147
     19c:	6f 6e       	ori	r22, 0xEF	; 239
     19e:	20 45       	sbci	r18, 0x50	; 80
     1a0:	45 50       	subi	r20, 0x05	; 5
     1a2:	52 4f       	sbci	r21, 0xF2	; 242
     1a4:	4d 20       	and	r4, r13
     1a6:	20 20       	and	r2, r0
     1a8:	43 48       	sbci	r20, 0x83	; 131
     1aa:	45 43       	sbci	r20, 0x35	; 53
     1ac:	4b 20       	and	r4, r11
     1ae:	53 45       	sbci	r21, 0x53	; 83
     1b0:	54 54       	subi	r21, 0x44	; 68
     1b2:	49 4e       	sbci	r20, 0xE9	; 233
     1b4:	47 53       	subi	r20, 0x37	; 55
     1b6:	2f 43       	sbci	r18, 0x3F	; 63
     1b8:	41 4c       	sbci	r20, 0xC1	; 193
     1ba:	49 42       	sbci	r20, 0x29	; 41
	...

000001bd <_ZZL10checkAlarmvE3__c>:
     1bd:	41 6c 61 72 6d 73 20 44 69 73 61 62 6c 65 64 00     Alarms Disabled.

000001cd <_ZZL8checkMemvE3__c>:
     1cd:	45 45 50 52 4f 4d 20 6c 6f 77 20 6d 65 6d 00        EEPROM low mem.

000001dc <_ZZL16checkQuickSelectvE3__c>:
     1dc:	4c 4f 41 44 49 4e 47 00                             LOADING.

000001e4 <_ZZ8pushMenuPFvhEE3__c>:
     1e4:	6d 53 74 61 63 6b 20 6f 66 6c 6f 77 00              mStack oflow.

000001f1 <_ZZ7popMenubE3__c>:
     1f1:	6d 53 74 61 63 6b 20 75 66 6c 6f 77 00              mStack uflow.

000001fe <_ZZ6almessPKchE3__c_0>:
     1fe:	4d 45 53 53 41 47 45 00                             MESSAGE.

00000206 <_ZZ6almessPKchE3__c>:
     206:	70 72 65 73 73 20 61 6e 79 20 4b 65 79 00           press any Key.

00000214 <_ZZ13checkSwitchesvE3__c>:
     214:	53 77 69 74 63 68 20 57 61 72 6e 69 6e 67 00        Switch Warning.

00000223 <_ZZ13checkSwitchesvE3__c_0>:
     223:	50 6c 65 61 73 65 20 52 65 73 65 74 20 53 77 69     Please Reset Swi
     233:	74 63 68 65 73 00                                   tches.

00000239 <_ZZ8checkTHRvE3__c>:
     239:	54 68 72 6f 74 74 6c 65 20 6e 6f 74 20 69 64 6c     Throttle not idl
     249:	65 00                                               e.

0000024b <_ZZ8checkTHRvE3__c_0>:
     24b:	52 65 73 65 74 20 74 68 72 6f 74 74 6c 65 00        Reset throttle.

0000025a <_ZZ13alertMessagesPKcS0_E3__c>:
     25a:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 20 74 6f     Press any key to
     26a:	20 73 6b 69 70 00                                    skip.

00000270 <_ZZ11putsTmrModehhhhE3__c>:
     270:	4f 46 46 4f 4e 20 54 48 73 54 48 25 00              OFFON THsTH%.

0000027d <_ZZ14putsDrSwitcheshhahE3__c>:
     27d:	2d 2d 2d 00                                         ---.

00000281 <_ZZ10putsChnRawhhhhE3__c>:
     281:	2d 2d 2d 2d 00                                      ----.

00000286 <_ZL4rate>:
     286:	00 00 64 28 10 07 03 01                             ..d(....

0000028e <_ZL11csTypeTable>:
     28e:	00 00 00 00 01 01 01 02 02 02 02 01 01 03 00        ...............

0000029d <_ZL9Str_Alert>:
     29d:	20 41 4c 45 52 54 00                                 ALERT.

000002a4 <stickScramble>:
     2a4:	00 01 02 03 00 02 01 03 03 01 02 00 03 02 01 00     ................

000002b4 <modi12x3>:
     2b4:	04 52 75 64 20 45 6c 65 20 54 68 72 20 41 69 6c     .Rud Ele Thr Ail
     2c4:	20 00                                                .

000002c6 <Str_ON>:
     2c6:	4f 4e 20 00                                         ON .

000002ca <Str_OFF>:
     2ca:	4f 46 46 00                                         OFF.

000002ce <Str_Switches>:
     2ce:	03 54 48 52 52 55 44 45 4c 45 49 44 30 49 44 31     .THRRUDELEID0ID1
     2de:	49 44 32 41 49 4c 47 45 41 54 52 4e 4c 31 20 4c     ID2AILGEATRNL1 L
     2ee:	32 20 4c 33 20 4c 34 20 4c 35 20 4c 36 20 4c 37     2 L3 L4 L5 L6 L7
     2fe:	20 4c 38 20 4c 39 20 4c 41 20 4c 42 20 4c 43 20      L8 L9 LA LB LC 
	...

0000030f <bchout_ar>:
     30f:	1b 1e 27 2d 36 39 4b 4e 63 6c 72 78 87 8d 93 9c     ..'-69KNclrx....
     31f:	b1 b4 c6 c9 d2 d8 e1 e4                             ........

00000327 <s9xsplashMarker>:
     327:	53 70 6c 61 73 68 00                                Splash.

0000032e <s9xsplash>:
     32e:	80 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .@..............
	...
     37a:	00 80 c0 e0 e0 f0 f8 f8 fc fc fc f8 f8 f8 f0 40     ...............@
     38a:	00 00 00 00 00 80 80 80 00 00 00 00 00 00 00 00     ................
	...
     3a2:	00 00 00 80 c0 c0 e0 e0 e0 f0 f0 f0 e0 c0 00 00     ................
     3b2:	00 00 00 c0 f8 ff ff 9f 87 83 83 83 83 83 83 83     ................
     3c2:	83 83 83 83 83 83 83 83 83 83 83 83 83 83 83 03     ................
     3d2:	83 80 83 83 83 83 83 83 83 83 83 83 83 83 83 83     ................
     3e2:	83 83 83 83 83 83 83 83 83 c3 e3 73 3f 1f 00 00     ...........s?...
     3f2:	00 00 80 e0 f0 f8 fc fe ff ff ff ff 7f 3f 1f 1f     .............?..
     402:	0f 07 83 c3 e1 e1 e0 e0 c0 00 0e 1f 3f 7f 7f ff     ............?...
     412:	f3 e0 e0 80 00 00 00 00 00 00 00 00 00 00 80 f0     ................
     422:	fc fe ff ff ff ff 7f 3f 0f 03 01 01 01 00 00 00     .......?........
     432:	80 f0 fe ff ff c7 c1 c1 c1 c1 c1 c1 c1 c1 c1 c1     ................
     442:	c1 c1 c1 c1 c1 c1 c1 c1 c1 c1 c1 c1 01 c1 f0 fe     ................
     452:	ff 3f 0f 07 0f 0d 0d 0d 1d 19 19 19 19 31 31 31     .?...........111
     462:	31 71 61 61 61 e1 c1 c1 c1 81 00 00 00 80 e0 f8     1qaaa...........
     472:	fc ff ff ff ff 2f 17 0f 03 81 80 c0 e0 f0 f8 fc     ...../..........
     482:	fe ff ff ff ff ff ff 7f 01 00 00 00 00 00 00 00     ................
     492:	01 01 03 07 07 0e 1e 1c 38 70 e0 f0 f8 fe ff ff     ........8p......
     4a2:	7f 1f 0f 03 00 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     4ee:	7e ff ff ff ff ff ff fb f8 fc fc fe ff 7f 3f 1f     ~.............?.
     4fe:	0f 07 c3 ff ff ff ff ff ff 7f 07 00 00 00 00 00     ................
	...
     516:	00 c0 e0 f8 fe ff ff 7f 1f 0f 1f 3d 7c f8 f8 f0     ...........=|...
     526:	e0 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     56e:	00 00 01 01 01 01 01 03 07 07 07 03 01 00 00 00     ................
     57e:	e0 fc ff ff ff ff ff 1f 03 00 00 00 00 00 00 00     ................
     58e:	00 00 00 00 c0 f0 78 de 27 13 09 0e 07 03 00 00     ......x.'.......
     59e:	00 00 00 00 00 00 01 03 0f 7f ff fc 78 78 f8 00     ............xx..
	...
     5b6:	00 00 80 80 80 80 80 80 80 80 80 00 80 80 00 80     ................
     5c6:	80 00 00 00 00 00 00 00 80 80 80 80 80 80 80 80     ................
     5d6:	80 80 80 80 80 80 80 80 80 80 00 00 00 00 00 00     ................
	...
     5fa:	00 80 f0 fe ff ff ff ff 3f 0f 01 00 00 00 00 00     ........?.......
     60a:	00 00 00 c0 e0 38 1e 0f 03 00 01 00 00 00 00 00     .....8..........
	...
     62a:	00 03 03 01 00 00 00 00 00 00 00 00 00 00 0e 0e     ................
     63a:	02 02 02 02 02 03 03 00 0f 0f 00 0f 0f 08 08 08     ................
     64a:	08 08 08 08 0f 0f 08 08 08 08 08 0f 0f 00 00 00     ................
     65a:	00 0f 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     676:	00 00 00 c0 f8 bf ff ff ff 1f 7f 01 00 00 00 00     ................
     686:	00 00 00 00 f0 fc ff 7f 78 30 00 00 00 00 00 00     ........x0......
	...
     6f6:	00 30 1c 07 0e 0f 07 01 00 00 00 00 00 00 00 00     .0..............
	...

00000731 <Stamps>:
     731:	56 45 52 53 3a 20 56 31 2e 37 31 2d 6d 61 72 65     VERS: V1.71-mare
     741:	6b 1f 44 41 54 45 3a 20 30 33 2e 30 35 2e 32 30     k.DATE: 03.05.20
     751:	31 35 1f 54 49 4d 45 3a 20 32 32 3a 32 37 3a 34     15.TIME: 22:27:4
     761:	31 1f 20 53 56 4e 3a 20 65 72 39 78 2d 72 31 1f     1. SVN: er9x-r1.
     771:	20 4d 4f 44 3a 20 45 4c 45 52 45 53 20 20 20 20      MOD: ELERES    
	...

00000782 <_ZZ14eeWriteGeneralvE3__c_1>:
     782:	67 65 6e 77 72 69 74 65 20 65 72 72 6f 72 00        genwrite error.

00000791 <_ZZ14eeWriteGeneralvE3__c_0>:
     791:	45 45 50 52 4f 4d 20 46 6f 72 6d 61 74 74 69 6e     EEPROM Formattin
     7a1:	67 00                                               g.

000007a3 <_ZZ14eeWriteGeneralvE3__c>:
     7a3:	42 61 64 20 45 45 70 72 6f 6d 20 44 61 74 61 00     Bad EEprom Data.

000007b3 <_ZZ11eeLoadModelhE3__c_0>:
     7b3:	43 48 45 43 4b 20 4d 4f 44 45 4c 20 54 49 4d 45     CHECK MODEL TIME
     7c3:	52 53 00                                            RS.

000007c6 <_ZZ11eeLoadModelhE3__c>:
     7c6:	43 48 45 43 4b 20 4d 49 58 2f 44 52 20 53 4f 55     CHECK MIX/DR SOU
     7d6:	52 43 45 53 00                                      RCES.

000007db <_ZZ17modelDefaultWritehE3__c>:
     7db:	4d 4f 44 45 4c 20 20 20 20 20 00                    MODEL     .

000007e6 <_ZZ16eeGeneralDefaultvE3__c>:
     7e6:	4d 45 20 20 20 20 20 20 20 20 00                    ME        .

000007f1 <_ZL19Str_EEPROM_Overflow>:
     7f1:	45 45 50 52 4f 4d 20 6f 76 65 72 66 6c 6f 77 00     EEPROM overflow.

00000801 <_ZL7Lcdinit>:
     801:	e2 ae a1 a6 a4 a2 c0 2f 25 af                       ......./%.

0000080b <_ZL12font_dblsize>:
	...
     82b:	33 3b 1f 0f 00 00 00 00 c0 c0 c0 c0 c0 c0 c0 c0     3;..............
     83b:	c0 c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     853:	18 3c 3c 18 00 00 00 00 00 00 00 80 c0 e0 70 38     .<<...........p8
     863:	1c 0c 0c 0e 07 03 01 00 00 00 00 00 00 00 fc fe     ................
     873:	87 c3 e3 77 fe fc 00 00 0f 1f 3b 31 30 38 1f 0f     ...w......;108..
     883:	00 00 0c 0e ff ff 00 00 00 00 00 00 30 30 3f 3f     ............00??
     893:	30 30 00 00 00 00 0c 0e 07 83 c3 e7 7e 3c 00 00     00..........~<..
     8a3:	3c 3e 37 33 31 30 30 30 00 00 03 03 c3 c3 c3 e7     <>731000........
     8b3:	fe 3c 00 00 30 30 30 30 30 39 1f 0f 00 00 c0 e0     .<..000009......
     8c3:	70 38 1c 0e ff ff 00 00 03 03 03 03 03 03 3f 3f     p8............??
     8d3:	00 00 3f 3f 33 33 33 73 e3 c3 00 00 0c 1c 38 30     ..??333s......80
     8e3:	30 38 1f 0f 00 00 fc fe c7 c3 c3 c7 8e 0c 00 00     08..............
     8f3:	0f 1f 38 30 30 39 1f 0f 00 00 03 03 c3 e3 73 3b     ..8009........s;
     903:	1f 0f 00 00 00 00 3f 3f 00 00 00 00 00 00 3c fe     ......??......<.
     913:	e7 c3 c3 e7 fe 3c 00 00 0f 1f 39 30 30 39 1f 0f     .....<....9009..
     923:	00 00 3c 7e e7 c3 c3 e7 fe fc 00 00 00 00 30 38     ..<~..........08
     933:	1c 0e 07 03 00 00 18 3c 3c 18 00 00 00 00 00 00     .......<<.......
     943:	06 0f 0f 06 00 00 00 00 f0 f8 dc ce c7 c7 ce dc     ................
     953:	f8 f0 3f 3f 00 00 00 00 00 00 3f 3f ff ff c3 c3     ..??......??....
     963:	c3 c3 c3 e7 fe 3c 3f 3f 30 30 30 30 30 39 1f 0f     .....<??000009..
     973:	fc fe 07 03 03 03 03 07 0e 0c 0f 1f 38 30 30 30     ............8000
     983:	30 38 1c 0c ff ff 03 03 03 07 0e 1c f8 f0 3f 3f     08............??
     993:	30 30 30 38 1c 0e 07 03 ff ff c3 c3 c3 c3 c3 c3     0008............
     9a3:	03 03 3f 3f 30 30 30 30 30 30 30 30 ff ff c3 c3     ..??00000000....
     9b3:	c3 c3 c3 c3 03 03 3f 3f 00 00 00 00 00 00 00 00     ......??........
     9c3:	fc fe 07 03 c3 c3 c3 c7 ce cc 0f 1f 38 30 30 30     ............8000
     9d3:	30 30 3f 3f ff ff c0 c0 c0 c0 c0 c0 ff ff 3f 3f     00??..........??
     9e3:	00 00 00 00 00 00 3f 3f 00 00 03 03 ff ff 03 03     ......??........
     9f3:	00 00 00 00 30 30 3f 3f 30 30 00 00 00 00 00 00     ....00??00......
     a03:	03 03 ff ff 03 03 0c 1c 38 30 30 38 1f 0f 00 00     ........8008....
     a13:	ff ff c0 e0 f0 38 1c 0e 07 03 3f 3f 00 01 03 07     .....8....??....
     a23:	0e 1c 38 30 ff ff 00 00 00 00 00 00 00 00 3f 3f     ..80..........??
     a33:	30 30 30 30 30 30 30 30 ff ff 0e 1c f8 f8 1c 0e     00000000........
     a43:	ff ff 3f 3f 00 00 00 00 00 00 3f 3f ff ff 38 70     ..??......??..8p
     a53:	e0 c0 80 00 ff ff 3f 3f 00 00 00 01 03 03 3f 3f     ......??......??
     a63:	fc fe 07 03 03 03 03 07 fe fc 0f 1f 38 30 30 30     ............8000
     a73:	30 38 1f 0f ff ff c3 c3 c3 c3 c3 e7 7e 3c 3f 3f     08..........~<??
	...
     a8b:	fc fe 07 03 03 03 03 07 fe fc 0f 1f 38 30 33 37     ............8037
     a9b:	1e 1c 3f 33 ff ff c3 c3 c3 c3 c3 e7 7e 3c 3f 3f     ..?3........~<??
     aab:	00 00 03 07 0e 1c 38 30 3c 7e e7 c3 c3 c3 c3 c7     ......80<~......
     abb:	8e 0c 0c 1c 38 30 30 30 30 39 1f 0f 03 03 03 03     ....800009......
     acb:	ff ff 03 03 03 03 00 00 00 00 3f 3f 00 00 00 00     ..........??....
     adb:	ff ff 00 00 00 00 00 00 ff ff 0f 1f 38 30 30 30     ............8000
     aeb:	30 38 1f 0f ff ff 00 00 00 00 00 00 ff ff 03 07     08..............
     afb:	0e 1c 38 38 1c 0e 07 03 ff ff 00 00 00 00 00 00     ..88............
     b0b:	ff ff 0f 1f 38 38 1f 1f 38 38 1f 0f 0f 1f 38 f0     ....88..88....8.
     b1b:	e0 e0 f0 38 1f 0f 3c 3e 07 03 01 01 03 07 3e 3c     ...8..<>......><
     b2b:	3f 7f e0 c0 80 80 c0 e0 7f 3f 00 00 00 01 3f 3f     ?........?....??
     b3b:	01 00 00 00 03 03 03 83 c3 e3 73 3b 1f 0f 3c 3e     ..........s;..<>
     b4b:	37 33 31 30 30 30 30 30 00 00 00 00 00 00 00 00     73100000........
     b5b:	00 00 30 30 30 30 30 30 30 30 30 30 00 00 30 30     ..0000000000..00
     b6b:	30 30 30 70 e0 c0 0c 1e 3f 33 33 33 33 33 3f 3f     000p....?33333??
     b7b:	ff ff c0 e0 70 30 30 70 e0 c0 3f 3f 30 30 30 30     ....p00p..??0000
     b8b:	30 38 1f 0f c0 e0 70 30 30 30 30 30 00 00 0f 1f     08....p00000....
     b9b:	38 30 30 30 30 38 1c 0c c0 e0 70 30 30 70 e0 c0     800008....p00p..
     bab:	ff ff 0f 1f 38 30 30 30 30 30 3f 3f c0 e0 70 30     ....800000??..p0
     bbb:	30 30 30 70 e0 c0 0f 1f 3b 33 33 33 33 33 03 03     000p....;33333..
     bcb:	c0 c0 fc fe c7 c3 03 07 0e 0c 00 00 3f 3f 00 00     ............??..
     bdb:	00 00 00 00 f0 f8 9c 0c 0c 0c 0c 0c fc fc 00 01     ................
     beb:	33 33 33 33 33 3b 1f 0f ff ff c0 e0 70 30 30 70     33333;......p00p
     bfb:	e0 c0 3f 3f 00 00 00 00 00 00 3f 3f 00 00 30 30     ..??......??..00
     c0b:	f3 f3 00 00 00 00 00 00 30 30 3f 3f 30 30 00 00     ........00??00..
     c1b:	00 00 00 00 30 30 f3 f3 00 00 0c 1c 38 30 30 38     ....00......8008
     c2b:	1f 0f 00 00 ff ff 00 80 c0 e0 70 30 00 00 3f 3f     ..........p0..??
     c3b:	03 07 0f 1c 38 30 00 00 00 00 03 03 ff ff 00 00     ....80..........
     c4b:	00 00 00 00 30 30 3f 3f 30 30 00 00 f0 f0 30 70     ....00??00....0p
     c5b:	e0 e0 70 70 e0 c0 3f 3f 00 00 03 03 00 00 3f 3f     ..pp..??......??
     c6b:	f0 f0 c0 e0 70 30 30 70 e0 c0 3f 3f 00 00 00 00     ....p00p..??....
     c7b:	00 00 3f 3f c0 e0 70 30 30 30 30 70 e0 c0 0f 1f     ..??..p0000p....
     c8b:	38 30 30 30 30 38 1f 0f f0 f0 30 30 30 30 30 f0     800008....00000.
     c9b:	e0 c0 3f 3f 03 03 03 03 03 03 01 00 c0 e0 f0 30     ..??...........0
     cab:	30 30 e0 c0 f0 f0 00 01 03 03 03 03 03 03 3f 3f     00............??
     cbb:	f0 f0 c0 e0 70 30 30 70 e0 c0 3f 3f 00 00 00 00     ....p00p..??....
     ccb:	00 00 00 00 c0 e0 f0 30 30 30 30 30 00 00 30 31     .......00000..01
     cdb:	33 33 33 33 33 3f 1e 0c 30 30 ff ff 30 30 00 00     33333?..00..00..
     ceb:	00 00 00 00 0f 1f 38 30 30 38 1c 0c f0 f0 00 00     ......8008......
     cfb:	00 00 00 00 f0 f0 0f 1f 38 30 30 38 1c 0c 3f 3f     ........8008..??
     d0b:	f0 f0 00 00 00 00 00 00 f0 f0 03 07 0e 1c 38 38     ..............88
     d1b:	1c 0e 07 03 f0 f0 00 00 00 00 00 00 f0 f0 0f 1f     ................
     d2b:	38 38 1c 1c 38 38 1f 0f 30 70 e0 c0 80 80 c0 e0     88..88..0p......
     d3b:	70 30 30 38 1c 0f 07 07 0f 1c 38 30 f0 f0 80 00     p008......80....
     d4b:	00 00 00 00 f0 f0 00 01 33 33 33 33 33 3b 1f 0f     ........33333;..
     d5b:	30 30 30 30 30 b0 f0 f0 70 30 30 38 3c 3e 37 33     00000...p008<>73
     d6b:	31 30 30 30                                         1000

00000d6f <_ZL4font>:
	...
     d77:	6f 00 00 07 00 07 00 14 7f 14 7f 14 24 2a 7f 2a     o...........$*.*
     d87:	12 23 13 08 64 62 36 49 55 22 50 00 05 03 00 00     .#..db6IU"P.....
     d97:	00 1c 22 41 00 00 41 22 1c 00 14 08 3e 08 14 08     .."A..A"....>...
     da7:	08 3e 08 08 00 50 30 00 00 08 08 08 08 08 00 60     .>...P0........`
     db7:	60 00 00 20 10 08 04 02 00 3e 49 45 3e 00 00 42     `.. .....>IE>..B
     dc7:	7f 40 00 62 51 49 46 00 41 49 49 36 00 18 14 12     .@.bQIF.AII6....
     dd7:	7f 00 27 45 45 39 00 3e 49 49 32 00 01 79 05 03     ..'EE9.>II2..y..
     de7:	00 36 49 49 36 00 06 49 29 1e 00 00 36 36 00 00     .6II6..I)...66..
     df7:	00 56 36 00 00 08 14 22 41 14 14 14 14 14 41 22     .V6...."A.....A"
     e07:	14 08 00 02 01 51 09 06 00 06 09 09 06 7e 09 09     .....Q.......~..
     e17:	09 7e 7f 49 49 49 36 3e 41 41 41 22 7f 41 41 22     .~.III6>AAA".AA"
     e27:	1c 7f 49 49 49 41 7f 09 09 09 01 3e 41 49 49 7a     ..IIIA.....>AIIz
     e37:	7f 08 08 08 7f 00 41 7f 41 00 20 40 41 3f 01 7f     ......A.A. @A?..
     e47:	08 14 22 41 7f 40 40 40 40 7f 02 0c 02 7f 7f 04     .."A.@@@@.......
     e57:	08 10 7f 3e 41 41 41 3e 7f 09 09 09 06 3e 41 51     ...>AAA>.....>AQ
     e67:	21 5e 7f 09 19 29 46 26 49 49 49 32 01 01 7f 01     !^...)F&III2....
     e77:	01 3f 40 40 40 3f 1f 20 40 20 1f 3f 40 30 40 3f     .?@@@?. @ .?@0@?
     e87:	63 14 08 14 63 07 08 70 08 07 61 51 49 45 43 00     c...c..p..aQIEC.
     e97:	7f 41 41 00 02 04 08 10 20 00 41 41 7f 00 04 02     .AA..... .AA....
     ea7:	01 02 04 40 40 40 40 40 08 04 08 10 08 20 54 54     ...@@@@@..... TT
     eb7:	54 78 7f 48 44 44 38 38 44 44 44 20 38 44 44 48     Tx.HDD88DDD 8DDH
     ec7:	7f 38 54 54 54 18 08 7e 09 01 02 0c 52 52 52 3e     .8TTT..~....RRR>
     ed7:	7f 08 04 04 78 00 44 7d 40 00 20 40 44 3d 00 7f     ....x.D}@. @D=..
     ee7:	10 28 44 00 00 41 7f 40 00 7c 04 18 04 78 7c 08     .(D..A.@.|...x|.
     ef7:	04 04 78 38 44 44 44 38 7c 14 14 14 08 08 14 14     ..x8DDD8|.......
     f07:	18 7c 7c 08 04 04 08 48 54 54 54 20 04 3f 44 40     .||....HTTT .?D@
     f17:	20 3c 40 40 20 7c 1c 20 40 20 1c 3c 40 20 40 3c      <@@ |. @ .<@ @<
     f27:	44 28 10 28 44 0c 50 50 50 3c 44 64 54 4c 44 00     D(.(D.PPP<DdTLD.
     f37:	08 36 41 00 00 00 7f 00 00 00 41 36 08 00 08 08     .6A.......A6....
     f47:	22 1c 08 08 1c 22 08 08                             "...."..

00000f4f <_ZL8_bitmask>:
     f4f:	01 02 04 08 10 20 40 80                             ..... @.

00000f57 <_ZZ7per10msvE9crossTrim>:
     f57:	40 80 08 04 20 10 02 01                             @... ...

00000f5f <_ZL8heli_ar5>:
     f5f:	9c ce 00 32 64                                      ...2d

00000f64 <_ZL8heli_ar4>:
     f64:	e2 f1 00 32 64                                      ...2d

00000f69 <_ZL8heli_ar3>:
     f69:	64 5a 50 5a 64                                      dZPZd

00000f6e <_ZL8heli_ar2>:
     f6e:	50 46 3c 46 64                                      PF<Fd

00000f73 <_ZL8heli_ar1>:
     f73:	9c 14 1e 46 5a                                      ...FZ

00000f78 <_ZL8string_8>:
     f78:	53 65 72 76 6f 20 54 65 73 74 00                    Servo Test.

00000f83 <_ZL8string_7>:
     f83:	47 79 72 6f 20 53 65 74 75 70 00                    Gyro Setup.

00000f8e <_ZL8string_6>:
     f8e:	48 65 6c 69 20 53 65 74 75 70 00                    Heli Setup.

00000f99 <_ZL8string_5>:
     f99:	45 6c 65 76 6f 6e 5c 44 65 6c 74 61 00              Elevon\Delta.

00000fa6 <_ZL8string_4>:
     fa6:	56 2d 54 61 69 6c 00                                V-Tail.

00000fad <_ZL8string_3>:
     fad:	53 74 69 63 6b 79 20 54 2d 43 75 74 00              Sticky T-Cut.

00000fba <_ZL8string_2>:
     fba:	54 2d 43 75 74 00                                   T-Cut.

00000fc0 <_ZL8string_1>:
     fc0:	53 69 6d 70 6c 65 20 34 2d 43 48 00                 Simple 4-CH.

00000fcc <n_Templates>:
     fcc:	c0 0f ba 0f ad 0f a6 0f 99 0f 8e 0f 83 0f 78 0f     ..............x.

00000fdc <_ZL8CRCTable>:
     fdc:	00 00 89 11 12 23 9b 32 24 46 ad 57 36 65 bf 74     .....#.2$F.W6e.t
     fec:	48 8c c1 9d 5a af d3 be 6c ca e5 db 7e e9 f7 f8     H...Z...l...~...
     ffc:	81 10 08 01 93 33 1a 22 a5 56 2c 47 b7 75 3e 64     .....3.".V,G.u>d
    100c:	c9 9c 40 8d db bf 52 ae ed da 64 cb ff f9 76 e8     ..@...R...d...v.
    101c:	02 21 8b 30 10 02 99 13 26 67 af 76 34 44 bd 55     .!.0....&g.v4D.U
    102c:	4a ad c3 bc 58 8e d1 9f 6e eb e7 fa 7c c8 f5 d9     J...X...n...|...
    103c:	83 31 0a 20 91 12 18 03 a7 77 2e 66 b5 54 3c 45     .1. .....w.f.T<E
    104c:	cb bd 42 ac d9 9e 50 8f ef fb 66 ea fd d8 74 c9     ..B...P...f...t.
    105c:	04 42 8d 53 16 61 9f 70 20 04 a9 15 32 27 bb 36     .B.S.a.p ...2'.6
    106c:	4c ce c5 df 5e ed d7 fc 68 88 e1 99 7a ab f3 ba     L...^...h...z...
    107c:	85 52 0c 43 97 71 1e 60 a1 14 28 05 b3 37 3a 26     .R.C.q.`..(..7:&
    108c:	cd de 44 cf df fd 56 ec e9 98 60 89 fb bb 72 aa     ..D...V...`...r.
    109c:	06 63 8f 72 14 40 9d 51 22 25 ab 34 30 06 b9 17     .c.r.@.Q"%.40...
    10ac:	4e ef c7 fe 5c cc d5 dd 6a a9 e3 b8 78 8a f1 9b     N...\...j...x...
    10bc:	87 73 0e 62 95 50 1c 41 a3 35 2a 24 b1 16 38 07     .s.b.P.A.5*$..8.
    10cc:	cf ff 46 ee dd dc 54 cd eb b9 62 a8 f9 9a 70 8b     ..F...T...b...p.
    10dc:	08 84 81 95 1a a7 93 b6 2c c2 a5 d3 3e e1 b7 f0     ........,...>...
    10ec:	40 08 c9 19 52 2b db 3a 64 4e ed 5f 76 6d ff 7c     @...R+.:dN._vm.|
    10fc:	89 94 00 85 9b b7 12 a6 ad d2 24 c3 bf f1 36 e0     ..........$...6.
    110c:	c1 18 48 09 d3 3b 5a 2a e5 5e 6c 4f f7 7d 7e 6c     ..H..;Z*.^lO.}~l
    111c:	0a a5 83 b4 18 86 91 97 2e e3 a7 f2 3c c0 b5 d1     ............<...
    112c:	42 29 cb 38 50 0a d9 1b 66 6f ef 7e 74 4c fd 5d     B).8P...fo.~tL.]
    113c:	8b b5 02 a4 99 96 10 87 af f3 26 e2 bd d0 34 c1     ..........&...4.
    114c:	c3 39 4a 28 d1 1a 58 0b e7 7f 6e 6e f5 5c 7c 4d     .9J(..X...nn.\|M
    115c:	0c c6 85 d7 1e e5 97 f4 28 80 a1 91 3a a3 b3 b2     ........(...:...
    116c:	44 4a cd 5b 56 69 df 78 60 0c e9 1d 72 2f fb 3e     DJ.[Vi.x`...r/.>
    117c:	8d d6 04 c7 9f f5 16 e4 a9 90 20 81 bb b3 32 a2     .......... ...2.
    118c:	c5 5a 4c 4b d7 79 5e 68 e1 1c 68 0d f3 3f 7a 2e     .ZLK.y^h..h..?z.
    119c:	0e e7 87 f6 1c c4 95 d5 2a a1 a3 b0 38 82 b1 93     ........*...8...
    11ac:	46 6b cf 7a 54 48 dd 59 62 2d eb 3c 70 0e f9 1f     Fk.zTH.Yb-.<p...
    11bc:	8f f7 06 e6 9d d4 14 c5 ab b1 22 a0 b9 92 30 83     .........."...0.
    11cc:	c7 7b 4e 6a d5 58 5c 49 e3 3d 6a 2c f1 1e 78 0f     .{Nj.X\I.=j,..x.

000011dc <_ZZL22menuProcSafetySwitcheshE3__c_4>:
    11dc:	06 4f 4e 20 20 20 20 4f 46 46 20 20 20 42 4f 54     .ON    OFF   BOT
    11ec:	48 20 20 31 35 53 65 63 73 33 30 53 65 63 73 36     H  15Secs30Secs6
    11fc:	30 53 65 63 73 56 61 72 69 62 6c 00                 0SecsVaribl.

00001208 <_ZZL22menuProcSafetySwitcheshE3__c_3>:
    1208:	56 53 00                                            VS.

0000120b <_ZZL22menuProcSafetySwitcheshE3__c_2>:
    120b:	07 20 38 20 53 65 63 73 31 32 20 53 65 63 73 31     . 8 Secs12 Secs1
    121b:	36 20 53 65 63 73 00                                6 Secs.

00001222 <_ZZL22menuProcSafetySwitcheshE3__c_1>:
    1222:	01 53 41 56 58 00                                   .SAVX.

00001228 <_ZZL22menuProcSafetySwitcheshE3__c_0>:
    1228:	4e 75 6d 62 65 72 20 56 6f 69 63 65 20 53 77 00     Number Voice Sw.

00001238 <_ZZL22menuProcSafetySwitcheshE3__c>:
    1238:	53 61 66 65 74 79 20 53 77 69 74 63 68 65 73 00     Safety Switches.

00001248 <_ZZL14menuProcLimitshE3__c>:
    1248:	43 4f 50 59 20 54 52 49 4d 20 5b 4d 45 4e 55 5d     COPY TRIM [MENU]
	...

00001259 <_ZZL16menuProcSwitcheshE3__c_0>:
    1259:	0d 4f 6e 00                                         .On.

0000125d <_ZZL16menuProcSwitcheshE3__c>:
    125d:	4c 4f 47 49 43 41 4c 20 53 57 49 54 43 48 45 53     LOGICAL SWITCHES
	...

0000126e <_ZZL9editTimerhE3__c_0>:
    126e:	0a 43 6f 75 6e 74 20 44 6f 77 6e 43 6f 75 6e 74     .Count DownCount
    127e:	20 55 70 20 20 00                                    Up  .

00001284 <_ZZL9editTimerhE3__c>:
    1284:	54 69 6d 65 72 1f 54 72 69 67 67 65 72 41 1f 54     Timer.TriggerA.T
    1294:	72 69 67 67 65 72 42 1f 54 69 6d 65 72 1f 52 65     riggerB.Timer.Re
    12a4:	73 65 74 20 53 77 69 74 63 68 00                    set Switch.

000012af <_ZZ18menuProcModelIndexhE3__c_23>:
    12af:	03 41 6d 65 4a 61 70 45 75 72 00                    .AmeJapEur.

000012ba <_ZZ18menuProcModelIndexhE3__c_22>:
    12ba:	03 44 31 36 44 38 20 4c 52 50 00                    .D16D8 LRP.

000012c5 <_ZZ18menuProcModelIndexhE3__c_21>:
    12c5:	20 54 79 70 65 1f 20 43 6f 75 6e 74 72 79 1f 42      Type. Country.B
    12d5:	69 6e 64 1f 52 61 6e 67 65 00                       ind.Range.

000012df <_ZZ18menuProcModelIndexhE3__c_20>:
    12df:	09 4c 50 34 2f 4c 50 35 20 20 44 53 4d 32 6f 6e     .LP4/LP5  DSM2on
    12ef:	6c 79 20 44 53 4d 32 2f 44 53 4d 58 00              ly DSM2/DSMX.

000012fc <_ZZ18menuProcModelIndexhE3__c_19>:
    12fc:	44 53 4d 20 54 79 70 65 00                          DSM Type.

00001305 <_ZZ18menuProcModelIndexhE3__c_18>:
    1305:	03 50 4f 53 4e 45 47 00                             .POSNEG.

0000130d <_ZZ18menuProcModelIndexhE3__c_17>:
    130d:	53 68 69 66 74 20 53 65 6c 00                       Shift Sel.

00001317 <_ZZ18menuProcModelIndexhE3__c_16>:
    1317:	50 50 4d 20 46 72 4c 65 6e 0d 6d 53 65 63 00        PPM FrLen.mSec.

00001326 <_ZZ18menuProcModelIndexhE3__c_15>:
    1326:	0b 52 78 4e 75 6d 00                                .RxNum.

0000132d <_ZZ18menuProcModelIndexhE3__c_14>:
    132d:	04 34 43 48 20 36 43 48 20 38 43 48 20 31 30 43     .4CH 6CH 8CH 10C
    133d:	48 31 32 43 48 31 34 43 48 31 36 43 48 00           H12CH14CH16CH.

0000134b <_ZZ18menuProcModelIndexhE3__c_13>:
    134b:	13 75 53 00                                         .uS.

0000134f <_ZZ18menuProcModelIndexhE3__c_12>:
    134f:	06 50 50 4d 20 20 20 50 58 58 20 20 20 44 53 4d     .PPM   PXX   DSM
    135f:	32 20 20 50 50 4d 31 36 20 50 50 4d 53 49 4d 00     2  PPM16 PPMSIM.

0000136f <_ZZ18menuProcModelIndexhE3__c_11>:
    136f:	31 73 74 20 43 68 61 6e 1f 50 72 6f 74 6f 00        1st Chan.Proto.

0000137e <_ZZ18menuProcModelIndexhE3__c_10>:
    137e:	02 45 78 70 6f 1f 1f 01 57 65 69 67 68 74 1f 1f     .Expo...Weight..
    138e:	44 72 53 77 31 1f 44 72 53 77 32 00                 DrSw1.DrSw2.

0000139a <_ZZ18menuProcModelIndexhE3__c_9>:
    139a:	07 04 44 52 20 48 69 20 04 44 52 20 4d 69 64 04     ..DR Hi .DR Mid.
    13aa:	44 52 20 4c 6f 77 00                                DR Low.

000013b1 <_ZZ18menuProcModelIndexhE3__c_8>:
    13b1:	04 2d 2d 2d 2d 31 32 30 20 31 32 30 58 31 34 30     .----120 120X140
    13c1:	20 39 30 20 20 00                                    90  .

000013c7 <_ZZ18menuProcModelIndexhE3__c_7>:
    13c7:	53 77 61 73 68 20 54 79 70 65 1f 43 6f 6c 6c 65     Swash Type.Colle
    13d7:	63 74 69 76 65 1f 53 77 61 73 68 20 52 69 6e 67     ctive.Swash Ring
    13e7:	1f 45 4c 45 20 44 69 72 65 63 74 69 6f 6e 1f 41     .ELE Direction.A
    13f7:	49 4c 20 44 69 72 65 63 74 69 6f 6e 1f 43 4f 4c     IL Direction.COL
    1407:	20 44 69 72 65 63 74 69 6f 6e 00                     Direction.

00001412 <_ZZ18menuProcModelIndexhE3__c_6>:
    1412:	52 45 54 41 31 32 33 00                             RETA123.

0000141a <_ZZ18menuProcModelIndexhE3__c_5>:
    141a:	54 72 69 6d 20 53 77 1f 48 69 2e 52 65 73 20 53     Trim Sw.Hi.Res S
    142a:	6c 6f 77 2f 44 65 6c 61 79 1f 42 65 65 70 20 43     low/Delay.Beep C
    143a:	6e 74 00                                            nt.

0000143d <_ZZ18menuProcModelIndexhE3__c_4>:
    143d:	06 45 78 70 20 20 20 45 78 46 69 6e 65 46 69 6e     .Exp   ExFineFin
    144d:	65 20 20 4d 65 64 69 75 6d 43 6f 61 72 73 65 00     e  MediumCoarse.

0000145d <_ZZ18menuProcModelIndexhE3__c_3>:
    145d:	03 2d 2d 2d 50 31 20 50 32 20 50 33 20 47 56 34     .---P1 P2 P3 GV4
    146d:	47 56 35 47 56 36 47 56 37 00                       GV5GV6GV7.

00001477 <_ZZ18menuProcModelIndexhE3__c_2>:
    1477:	56 6f 6c 75 6d 65 20 43 6f 6e 74 72 6f 6c 1f 45     Volume Control.E
    1487:	2e 20 4c 69 6d 69 74 73 1f 54 72 61 69 6e 65 72     . Limits.Trainer
    1497:	1f 54 2d 54 72 69 6d 1f 54 2d 45 78 70 6f 1f 54     .T-Trim.T-Expo.T
    14a7:	72 69 6d 20 49 6e 63 00                             rim Inc.

000014af <_ZZ18menuProcModelIndexhE3__c_1>:
    14af:	05 2d 31 30 30 25 20 20 20 30 25 00                 .-100%   0%.

000014bb <_ZZ18menuProcModelIndexhE3__c_0>:
    14bb:	44 65 66 61 75 6c 74 20 53 77 1f 43 75 73 74 6f     Default Sw.Custo
    14cb:	6d 53 74 6b 4e 61 6d 65 73 1f 41 75 74 6f 20 4c     mStkNames.Auto L
    14db:	69 6d 69 74 73 1f 54 68 72 6f 74 74 6c 65 20 44     imits.Throttle D
    14eb:	65 66 61 75 6c 74 00                                efault.

000014f2 <_ZZ18menuProcModelIndexhE3__c>:
    14f2:	56 6f 69 63 65 20 49 6e 64 65 78 11 4d 45 4e 55     Voice Index.MENU
	...

00001503 <_ZZ18menuProcModelIndexhE9n_Strings>:
    1503:	a0 1b 43 1d 4e 1d 3b 1d 35 1d 2e 1d 95 1b 23 1d     ..C.N.;.5.....#.
    1513:	18 1d 8f 1b 8c 1e e9 1b 0f 1d                       ..........

0000151d <_ZZ18menuProcVoiceAlarmhE3__c_0>:
    151d:	56 41 00                                            VA.

00001520 <_ZZ18menuProcVoiceAlarmhE3__c>:
    1520:	56 6f 69 63 65 20 41 6c 61 72 6d 73 00              Voice Alarms.

0000152d <_ZZ16menuProcVoiceOnehE3__c_10>:
    152d:	4d 45 4e 55 20 4c 4f 4e 47 00                       MENU LONG.

00001537 <_ZZ16menuProcVoiceOnehE3__c_9>:
    1537:	44 65 6c 65 74 65 00                                Delete.

0000153e <_ZZ16menuProcVoiceOnehE3__c_8>:
    153e:	56 6f 69 63 65 20 46 69 6c 65 00                    Voice File.

00001549 <_ZZ16menuProcVoiceOnehE3__c_7>:
    1549:	06 2d 2d 2d 2d 2d 2d 4e 75 6d 62 65 72 20 41 75     .------Number Au
    1559:	64 69 6f 00                                         dio.

0000155d <_ZZ16menuProcVoiceOnehE3__c_6>:
    155d:	04 50 6c 61 79 4d 75 74 65 00                       .PlayMute.

00001567 <_ZZ16menuProcVoiceOnehE3__c_5>:
    1567:	06 4e 6f 20 20 20 20 42 65 66 6f 72 65 41 66 74     .No    BeforeAft
    1577:	65 72 20 00                                         er .

0000157b <_ZZ16menuProcVoiceOnehE3__c_4>:
    157b:	07 2d 2d 2d 2d 2d 2d 2d 48 61 70 74 69 63 31 48     .-------Haptic1H
    158b:	61 70 74 69 63 32 48 61 70 74 69 63 33 00           aptic2Haptic3.

00001599 <_ZZ16menuProcVoiceOnehE3__c_3>:
    1599:	07 76 60 3d 76 61 6c 20 76 3d 76 61 6c 20 20 00     .v`=val v=val  .

000015a9 <_ZZ16menuProcVoiceOnehE3__c_2>:
    15a9:	07 28 0d 29 00                                      .(.).

000015ae <_ZZ16menuProcVoiceOnehE3__c_1>:
    15ae:	50 6c 61 79 20 53 6f 75 72 63 65 1f 4f 6e 20 6e     Play Source.On n
    15be:	6f 20 54 65 6c 65 6d 65 74 72 79 1f 46 69 6c 65     o Telemetry.File
    15ce:	54 79 70 65 00                                      Type.

000015d3 <_ZZ16menuProcVoiceOnehE3__c_0>:
    15d3:	53 6f 75 72 63 65 1f 46 75 6e 63 74 69 6f 6e 1f     Source.Function.
    15e3:	56 61 6c 75 65 1f 53 77 69 74 63 68 1f 52 61 74     Value.Switch.Rat
    15f3:	65 1f 48 61 70 74 69 63 00                          e.Haptic.

000015fc <_ZZ16menuProcVoiceOnehE3__c>:
    15fc:	56 6f 69 63 65 20 41 6c 61 72 6d 00                 Voice Alarm.

00001608 <_ZZ13menuProcIndexhE3__c_32>:
    1608:	03 4d 4f 56 45 20 53 54 49 43 4b 53 2f 50 4f 54     .MOVE STICKS/POT
    1618:	53 00                                               S.

0000161a <_ZZ13menuProcIndexhE3__c_31>:
    161a:	05 53 45 54 20 4d 49 44 50 4f 49 4e 54 00           .SET MIDPOINT.

00001628 <_ZZ13menuProcIndexhE3__c_30>:
    1628:	03 5b 4d 45 4e 55 5d 20 54 4f 20 53 54 41 52 54     .[MENU] TO START
	...

00001639 <_ZZ13menuProcIndexhE3__c_29>:
    1639:	42 61 6e 64 47 61 70 00                             BandGap.

00001641 <_ZZ13menuProcIndexhE3__c_28>:
    1641:	43 61 6c 00                                         Cal.

00001645 <_ZZ13menuProcIndexhE3__c_27>:
    1645:	4d 75 6c 74 69 70 6c 69 65 72 00                    Multiplier.

00001650 <_ZZ13menuProcIndexhE3__c_26>:
    1650:	03 6f 66 66 20 2b 3d 20 3a 3d 00                    .off += :=.

0000165b <_ZZ13menuProcIndexhE3__c_25>:
    165b:	03 6d 6f 64 65 0a 25 20 73 72 63 20 20 73 77 00     .mode.% src  sw.

0000166b <_ZZ13menuProcIndexhE3__c_24>:
    166b:	07 53 6c 61 76 65 00                                .Slave.

00001672 <_ZZ13menuProcIndexhE3__c_23>:
    1672:	12 42 47 00                                         .BG.

00001676 <_ZZ13menuProcIndexhE3__c_22>:
    1676:	41 4e 41 00                                         ANA.

0000167a <_ZZ13menuProcIndexhE3__c_21>:
    167a:	54 72 69 6d 2d 20 2b 00                             Trim- +.

00001682 <_ZZ13menuProcIndexhE3__c_20>:
    1682:	20 4c 65 66 74 1f 52 69 67 68 74 1f 03 55 70 1f      Left.Right..Up.
    1692:	20 44 6f 77 6e 1f 20 45 78 69 74 1f 20 4d 65 6e      Down. Exit. Men
    16a2:	75 00                                               u.

000016a4 <_ZZ13menuProcIndexhE3__c_19>:
    16a4:	44 49 41 47 00                                      DIAG.

000016a9 <_ZZ13menuProcIndexhE3__c_18>:
    16a9:	53 74 69 63 6b 53 63 72 6f 6c 6c 00                 StickScroll.

000016b5 <_ZZ13menuProcIndexhE3__c_17>:
    16b5:	50 6f 74 53 63 72 6f 6c 6c 00                       PotScroll.

000016bf <_ZZ13menuProcIndexhE3__c_16>:
    16bf:	53 70 6c 61 73 68 20 4e 61 6d 65 00                 Splash Name.

000016cb <_ZZ13menuProcIndexhE3__c_15>:
    16cb:	53 70 6c 61 73 68 20 73 63 72 65 65 6e 00           Splash screen.

000016d9 <_ZZ13menuProcIndexhE3__c_14>:
    16d9:	41 6c 61 72 6d 20 57 61 72 6e 69 6e 67 00           Alarm Warning.

000016e7 <_ZZ13menuProcIndexhE3__c_13>:
    16e7:	4d 65 6d 6f 72 79 20 57 61 72 6e 69 6e 67 00        Memory Warning.

000016f6 <_ZZ13menuProcIndexhE3__c_12>:
    16f6:	54 68 72 6f 74 74 6c 65 20 57 61 72 6e 69 6e 67     Throttle Warning
	...

00001707 <_ZZ13menuProcIndexhE3__c_11>:
    1707:	42 61 74 74 65 72 79 20 77 61 72 6e 69 6e 67 1f     Battery warning.
    1717:	49 6e 61 63 74 69 76 69 74 79 20 61 6c 61 72 6d     Inactivity alarm
    1727:	13 6d 00                                            .m.

0000172a <_ZZ13menuProcIndexhE3__c_10>:
    172a:	01 43 68 61 6e 6e 65 6c 20 4f 72 64 65 72 1f 4d     .Channel Order.M
    173a:	6f 64 65 00                                         ode.

0000173e <_ZZ13menuProcIndexhE3__c_9>:
    173e:	45 6e 61 62 6c 65 20 50 50 4d 53 49 4d 00           Enable PPMSIM.

0000174c <_ZZ13menuProcIndexhE3__c_8>:
    174c:	54 68 72 6f 74 74 6c 65 20 72 65 76 65 72 73 65     Throttle reverse
	...

0000175d <_ZZ13menuProcIndexhE3__c_7>:
    175d:	43 72 6f 73 73 54 72 69 6d 00                       CrossTrim.

00001767 <_ZZ13menuProcIndexhE3__c_6>:
    1767:	20 48 61 70 74 69 63 20 53 74 72 65 6e 67 74 68      Haptic Strength
	...

00001778 <_ZZ13menuProcIndexhE3__c_5>:
    1778:	0a 42 65 65 70 65 72 20 20 20 20 50 69 53 70 6b     .Beeper    PiSpk
    1788:	72 20 20 20 20 42 65 65 70 72 56 6f 69 63 65 50     r    BeeprVoiceP
    1798:	69 53 70 6b 56 6f 69 63 65 4d 65 67 61 53 6f 75     iSpkVoiceMegaSou
    17a8:	6e 64 20 00                                         nd .

000017ac <_ZZ13menuProcIndexhE3__c_4>:
    17ac:	06 51 75 69 65 74 20 4e 6f 4b 65 79 20 78 53 68     .Quiet NoKey xSh
    17bc:	6f 72 74 53 68 6f 72 74 20 4e 6f 72 6d 20 20 4c     ortShort Norm  L
    17cc:	6f 6e 67 20 20 78 4c 6f 6e 67 20 00                 ong  xLong .

000017d8 <_ZZ13menuProcIndexhE3__c_3>:
    17d8:	56 6f 6c 75 6d 65 1f 42 65 65 70 65 72 1f 53 6f     Volume.Beeper.So
    17e8:	75 6e 64 20 4d 6f 64 65 1f 20 53 70 65 61 6b 65     und Mode. Speake
    17f8:	72 20 50 69 74 63 68 00                             r Pitch.

00001800 <_ZZ13menuProcIndexhE3__c_2>:
    1800:	46 6c 61 73 68 20 6f 6e 20 62 65 65 70 00           Flash on beep.

0000180e <_ZZ13menuProcIndexhE3__c_1>:
    180e:	42 61 63 6b 6c 69 67 68 74 20 69 6e 76 65 72 74     Backlight invert
	...

0000181f <_ZZ13menuProcIndexhE3__c_0>:
    181f:	4c 69 67 68 74 20 73 77 69 74 63 68 1f 1f 4c 69     Light switch..Li
    182f:	67 68 74 20 6f 66 66 20 61 66 74 65 72 13 73 1f     ght off after.s.
    183f:	4c 69 67 68 74 20 6f 6e 20 53 74 6b 20 4d 76 13     Light on Stk Mv.
    184f:	73 00                                               s.

00001851 <_ZZ13menuProcIndexhE3__c>:
    1851:	43 6f 6e 74 72 61 73 74 00                          Contrast.

0000185a <_ZZ13menuProcIndexhE9n_Strings>:
    185a:	01 1c b8 1b d9 1b e9 1b d0 1b e0 1b c4 1b f9 1b     ................
    186a:	f1 1b ae 1b a6 1b                                   ......

00001870 <_ZZ9menuProc0hE2xt>:
    1870:	22 04 7c 5e                                         ".|^

00001874 <_ZZ9menuProc0hE3__c_0>:
    1874:	54 54 6d 00                                         TTm.

00001878 <_ZZ9menuProc0hE3__c>:
    1878:	03 45 78 70 45 78 46 46 6e 65 4d 65 64 43 72 73     .ExpExFFneMedCrs
	...

00001889 <_ZZ17menuProcStatistichE3__c_2>:
    1889:	11 54 4f 54 1f 01 54 4d 45 11 54 53 57 1f 01 53     .TOT..TME.TSW..S
    1899:	54 4b 11 53 54 25 00                                TK.ST%.

000018a0 <_ZZ17menuProcStatistichE3__c_1>:
    18a0:	03 5b 4d 45 4e 55 5d 20 74 6f 20 72 65 66 72 65     .[MENU] to refre
    18b0:	73 68 00                                            sh.

000018b3 <_ZZ17menuProcStatistichE3__c_0>:
    18b3:	74 6d 72 31 4c 61 74 20 6d 61 78 12 75 73 1f 74     tmr1Lat max.us.t
    18c3:	6d 72 31 4c 61 74 20 6d 69 6e 12 75 73 1f 74 6d     mr1Lat min.us.tm
    18d3:	72 31 20 4a 69 74 74 65 72 12 75 73 1f 74 6d 61     r1 Jitter.us.tma
    18e3:	69 6e 12 6d 73 00                                   in.ms.

000018e9 <_ZZ17menuProcStatistichE3__c>:
    18e9:	53 54 41 54 00                                      STAT.

000018ee <_ZZ19menuProcModelSelecthE3__c_0>:
    18ee:	09 66 72 65 65 00                                   .free.

000018f4 <_ZZ19menuProcModelSelecthE3__c>:
    18f4:	4d 4f 44 45 4c 53 45 4c 00                          MODELSEL.

000018fd <_ZZ15menuModelPhaseshE3__c>:
    18fd:	20 46 4d 30 0a 52 45 54 41 00                        FM0.RETA.

00001907 <_ZZ18dispFlightModenamehhhE3__c>:
    1907:	20 46 4d 00                                          FM.

0000190b <_ZZ12menuPhaseOnehE3__c_0>:
    190b:	53 77 69 74 63 68 1f 54 72 69 6d 73 1f 46 61 64     Switch.Trims.Fad
    191b:	65 20 49 6e 1f 46 61 64 65 20 4f 75 74 00           e In.Fade Out.

00001929 <_ZZ12menuPhaseOnehE10mstate_tab>:
    1929:	00 03 00                                            ...

0000192c <_ZZ12menuPhaseOnehE3__c>:
    192c:	46 4c 20 4d 4f 44 45 00                             FL MODE.

00001934 <_ZZ13menuRangeBindhE3__c_0>:
    1934:	52 41 4e 47 45 20 43 48 45 43 4b 20 52 53 53 49     RANGE CHECK RSSI
    1944:	3a 00                                               :.

00001946 <_ZZ13menuRangeBindhE3__c>:
    1946:	06 42 49 4e 44 49 4e 47 00                          .BINDING.

0000194f <_ZZ18menuDeleteDupModelhE3__c_1>:
    194f:	44 75 70 6c 69 63 61 74 69 6e 67 20 6d 6f 64 65     Duplicating mode
    195f:	6c 00                                               l.

00001961 <_ZZ18menuDeleteDupModelhE3__c_0>:
    1961:	44 45 4c 45 54 45 20 4d 4f 44 45 4c 00              DELETE MODEL.

0000196e <_ZZ18menuDeleteDupModelhE3__c>:
    196e:	44 55 50 4c 49 43 41 54 45 20 4d 4f 44 45 4c 00     DUPLICATE MODEL.

0000197e <_ZZ11menuProcMixhE3__c_0>:
    197e:	01 2b 2a 52 00                                      .+*R.

00001983 <_ZZ11menuProcMixhE3__c>:
    1983:	4d 49 58 45 52 00                                   MIXER.

00001989 <_ZZL12popupDisplayPKchhE3__c>:
    1989:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                      .

00001998 <_ZZ13menuDeleteMixhE3__c>:
    1998:	44 45 4c 45 54 45 20 4d 49 58 3f 00                 DELETE MIX?.

000019a4 <_ZZ13yesNoMenuExitPKcE3__c>:
    19a4:	03 59 45 53 0b 4e 4f 1f 03 5b 4d 45 4e 55 5d 0b     .YES.NO..[MENU].
    19b4:	5b 45 58 49 54 5d 00                                [EXIT].

000019bb <_ZZ15menuMixersLimithE3__c>:
    19bb:	4d 61 78 20 6d 69 78 65 72 73 20 72 65 61 63 68     Max mixers reach
    19cb:	3a 20 33 32 1f 1f 50 72 65 73 73 20 5b 45 58 49     : 32..Press [EXI
    19db:	54 5d 20 74 6f 20 61 62 6f 72 74 00                 T] to abort.

000019e7 <_ZZ14menuProcMixOnehE3__c_5>:
    19e7:	08 41 64 64 20 20 20 20 20 4d 75 6c 74 69 70 6c     .Add     Multipl
    19f7:	79 52 65 70 6c 61 63 65 20 00                       yReplace .

00001a01 <_ZZ14menuProcMixOnehE3__c_4>:
    1a01:	43 75 72 76 65 00                                   Curve.

00001a07 <_ZZ14menuProcMixOnehE3__c_3>:
    1a07:	08 44 69 66 66 00                                   .Diff.

00001a0d <_ZZ14menuProcMixOnehE3__c_2>:
    1a0d:	11 45 78 70 6f 00                                   .Expo.

00001a13 <_ZZ14menuProcMixOnehE3__c_1>:
    1a13:	01 55 73 65 20 4f 75 74 70 75 74 20 20 20 00        .Use Output   .

00001a22 <_ZZ14menuProcMixOnehE3__c_0>:
    1a22:	01 53 6f 75 72 63 65 1f 01 57 65 69 67 68 74 1f     .Source..Weight.
    1a32:	01 4f 66 66 73 65 74 1f 01 46 69 78 20 4f 66 66     .Offset..Fix Off
    1a42:	73 65 74 1f 01 45 6e 61 62 6c 65 45 78 70 6f 44     set..EnableExpoD
    1a52:	52 1f 01 54 72 69 6d 1f 1f 1f 01 53 77 69 74 63     R..Trim....Switc
    1a62:	68 1f 01 4d 4f 44 45 53 1f 01 57 61 72 6e 69 6e     h..MODES..Warnin
    1a72:	67 1f 01 4d 75 6c 74 70 78 1f 01 44 65 6c 61 79     g..Multpx..Delay
    1a82:	20 44 6f 77 6e 1f 01 44 65 6c 61 79 20 55 70 1f      Down..Delay Up.
    1a92:	01 53 6c 6f 77 20 20 44 6f 77 6e 1f 01 53 6c 6f     .Slow  Down..Slo
    1aa2:	77 20 20 55 70 1f 53 57 43 48 20 53 77 69 74 63     w  Up.SWCH Switc
    1ab2:	68 00                                               h.

00001ab4 <_ZZ14menuProcMixOnehE3__c>:
    1ab4:	45 44 49 54 20 4d 49 58 20 00                       EDIT MIX .

00001abe <_ZZ12putsChnOpRawhhP9t_MixDatahE3__c>:
    1abe:	4f 50 00                                            OP.

00001ac1 <_ZZ17menuProcTemplateshE3__c_0>:
    1ac1:	43 4c 45 41 52 20 4d 49 58 45 53 20 5b 4d 45 4e     CLEAR MIXES [MEN
    1ad1:	55 5d 00                                            U].

00001ad4 <_ZZ17menuProcTemplateshE3__c>:
    1ad4:	54 45 4d 50 4c 41 54 45 53 00                       TEMPLATES.

00001ade <_ZZ15menuProcGlobalshE3__c_0>:
    1ade:	53 43 09 2b 0d 2a 12 2f 00                          SC.+.*./.

00001ae7 <_ZZ15menuProcGlobalshE3__c>:
    1ae7:	03 2d 2d 2d 52 74 6d 45 74 6d 54 74 6d 41 74 6d     .---RtmEtmTtmAtm
    1af7:	52 45 4e 52 75 64 45 6c 65 54 68 72 41 69 6c 50     RENRudEleThrAilP
    1b07:	31 20 50 32 20 50 33 20 00                          1 P2 P3 .

00001b10 <_ZZ15menuProcGlobalshE10mstate_tab>:
    1b10:	01 01 01 01 01 01 01 00                             ........

00001b18 <_ZZ12menuScaleOnehE3__c_1>:
    1b18:	05 46 69 72 73 74 4c 61 73 74 20 00                 .FirstLast .

00001b24 <_ZZ12menuScaleOnehE3__c_0>:
    1b24:	53 6f 75 72 63 65 1f 1f 4f 66 66 73 65 74 1f 4d     Source..Offset.M
    1b34:	75 6c 74 69 70 6c 69 65 72 1f 44 69 76 69 73 6f     ultiplier.Diviso
    1b44:	72 1f 55 6e 69 74 1f 53 69 67 6e 1f 44 65 63 69     r.Unit.Sign.Deci
    1b54:	6d 61 6c 73 1f 4f 66 66 73 65 74 20 41 74 00        mals.Offset At.

00001b63 <_ZZ12menuScaleOnehE3__c>:
    1b63:	53 43 00                                            SC.

00001b66 <_ZZ11displayNextvE3__c>:
    1b66:	5b 4d 6f 72 65 5d 00                                [More].

00001b6d <_ZZ13menuProcCurvehE3__c>:
    1b6d:	43 56 00                                            CV.

00001b70 <_ZZ16menuProcCurveOnehE3__c_0>:
    1b70:	50 52 45 53 45 54 00                                PRESET.

00001b77 <_ZZ16menuProcCurveOnehE3__c>:
    1b77:	43 55 52 56 45 00                                   CURVE.

00001b7d <_ZZ16menu_lcd_HYPHINVhhhhE3__c>:
    1b7d:	03 2d 2d 2d 49 4e 56 00                             .---INV.

00001b85 <_ZZ8editNamehhPhhhE3__c>:
    1b85:	4e 61 6d 65 00                                      Name.

00001b8a <_ZZ20putsAttIdxTelemItemshhhhE3__c>:
    1b8a:	53 57 52 20 00                                      SWR .

00001b8f <_ZL9Str_Voice>:
    1b8f:	56 6f 69 63 65 00                                   Voice.

00001b95 <_ZL13Str_Cswitches>:
    1b95:	4c 2e 53 77 69 74 63 68 65 73 00                    L.Switches.

00001ba0 <_ZL9Str_Mixer>:
    1ba0:	4d 69 78 65 72 00                                   Mixer.

00001ba6 <_ZL11Str_DiagAna>:
    1ba6:	44 69 61 67 41 6e 61 00                             DiagAna.

00001bae <_ZL13Str_DiagSwtch>:
    1bae:	44 69 61 67 53 77 74 63 68 00                       DiagSwtch.

00001bb8 <_ZL15Str_AudioHaptic>:
    1bb8:	41 75 64 69 6f 48 61 70 74 69 63 00                 AudioHaptic.

00001bc4 <_ZL15Str_Calibration>:
    1bc4:	43 61 6c 69 62 72 61 74 69 6f 6e 00                 Calibration.

00001bd0 <_ZL12Str_Controls>:
    1bd0:	43 6f 6e 74 72 6f 6c 73 00                          Controls.

00001bd9 <_ZL10Str_Alarms>:
    1bd9:	41 6c 61 72 6d 73 00                                Alarms.

00001be0 <_ZL12Str_Hardware>:
    1be0:	48 61 72 64 77 61 72 65 00                          Hardware.

00001be9 <_ZL11Str_General>:
    1be9:	47 65 6e 65 72 61 6c 00                             General.

00001bf1 <_ZL11Str_Version>:
    1bf1:	56 65 72 73 69 6f 6e 00                             Version.

00001bf9 <_ZL11Str_Trainer>:
    1bf9:	54 72 61 69 6e 65 72 00                             Trainer.

00001c01 <_ZL11Str_Display>:
    1c01:	44 69 73 70 6c 61 79 00                             Display.

00001c09 <_ZL12menuWhenDone>:
    1c09:	5b 4d 45 4e 55 5d 20 57 48 45 4e 20 44 4f 4e 45     [MENU] WHEN DONE
	...

00001c1a <_ZL12ModelPopList>:
    1c1a:	45 44 49 54 00 53 45 4c 45 43 54 00 53 45 4c 2f     EDIT.SELECT.SEL/
    1c2a:	45 44 49 54 00 43 4f 50 59 00 4d 4f 56 45 00 44     EDIT.COPY.MOVE.D
    1c3a:	45 4c 45 54 45 00                                   ELETE.

00001c40 <_ZL10MixPopList>:
    1c40:	45 44 49 54 00 49 4e 53 45 52 54 00 43 4f 50 59     EDIT.INSERT.COPY
    1c50:	00 4d 4f 56 45 00 44 45 4c 45 54 45 00              .MOVE.DELETE.

00001c5d <_ZL8SW_3_IDX>:
    1c5d:	04 73 49 44 78 73 54 48 52 73 52 55 44 73 45 4c     .sIDxsTHRsRUDsEL
    1c6d:	45 73 41 49 4c 73 47 45 41 73 54 52 4e 00           EsAILsGEAsTRN.

00001c7b <_ZL6sticks>:
    1c7b:	12 08 12 00 08 1c 08 08 08 1c 08 00 00 08 22 00     ..............".
    1c8b:	49 00 22 08 00 00 00 00 00 22 7f 22 00 00 00 08     I."......"."....
    1c9b:	22 00 49 00 22 08 00 00 08 22 00 49 00 22 08 00     ".I."....".I."..
    1cab:	00 00 22 7f 22 00 00 00 00 00 08 22 00 49 00 22     .."."......".I."
    1cbb:	08 00 00 08 1c 08 08 08 1c 08 00                    ...........

00001cc6 <_ZL6Str_GV>:
    1cc6:	47 56 00                                            GV.

00001cc9 <_ZL11UnitsString>:
    1cc9:	05 46 65 65 74 20 56 6f 6c 74 73 44 65 67 5f 43     .Feet VoltsDeg_C
    1cd9:	44 65 67 5f 46 6d 41 68 20 20 41 6d 70 73 20 4d     Deg_FmAh  Amps M
    1ce9:	65 74 72 65 57 61 74 74 73 00                       etreWatts.

00001cf3 <_ZL9UnitsText>:
    1cf3:	46 56 43 46 6d 41 6d 57                             FVCFmAmW

00001cfb <_ZL10UnitsVoice>:
    1cfb:	18 24 2f 2f 00 33 38 3b                             .$//.38;

00001d03 <_ZL11ProgColumns>:
    1d03:	00 02 03 04 06 09                                   ......

00001d09 <_ZL10Str_1_RETA>:
    1d09:	01 52 45 54 41 00                                   .RETA.

00001d0f <_ZL12Str_Protocol>:
    1d0f:	50 72 6f 74 6f 63 6f 6c 00                          Protocol.

00001d18 <_ZL11Str_Globals>:
    1d18:	47 6c 6f 62 61 6c 56 61 72 73 00                    GlobalVars.

00001d23 <_ZL10Str_Safety>:
    1d23:	53 61 66 65 74 79 20 53 77 73 00                    Safety Sws.

00001d2e <_ZL10Str_Curves>:
    1d2e:	43 75 72 76 65 73 00                                Curves.

00001d35 <_ZL9Str_Modes>:
    1d35:	4d 6f 64 65 73 00                                   Modes.

00001d3b <_ZL8Str_Expo>:
    1d3b:	45 78 70 6f 2f 44 72 00                             Expo/Dr.

00001d43 <_ZL14Str_heli_setup>:
    1d43:	48 65 6c 69 20 53 65 74 75 70 00                    Heli Setup.

00001d4e <_ZL10Str_limits>:
    1d4e:	4c 69 6d 69 74 73 00                                Limits.

00001d55 <_ZL14Str_Main_Popup>:
    1d55:	4d 6f 64 65 6c 20 53 65 6c 65 63 74 00 4d 6f 64     Model Select.Mod
    1d65:	65 6c 20 53 65 74 75 70 00 4c 61 73 74 20 4d 65     el Setup.Last Me
    1d75:	6e 75 00 52 61 64 69 6f 20 53 65 74 75 70 00 53     nu.Radio Setup.S
    1d85:	74 61 74 69 73 74 69 63 73 00                       tatistics.

00001d8f <_ZL18Str_Beep_Countdown>:
    1d8f:	42 65 65 70 20 63 6f 75 6e 74 64 6f 77 6e 00        Beep countdown.

00001d9e <_ZL15Str_minute_Beep>:
    1d9e:	4d 69 6e 75 74 65 20 62 65 65 70 00                 Minute beep.

00001daa <_ZL15Str_On_Off_Both>:
    1daa:	04 20 20 4f 4e 20 4f 46 46 42 4f 54 48 00           .  ON OFFBOTH.

00001db8 <_ZL11Str_Cswitch>:
    1db8:	07 2d 2d 2d 2d 20 20 20 76 3e 76 61 6c 20 20 76     .----   v>val  v
    1dc8:	3c 76 61 6c 20 20 7c 76 7c 3e 76 61 6c 7c 76 7c     <val  |v|>val|v|
    1dd8:	3c 76 61 6c 41 4e 44 20 20 20 20 4f 52 20 20 20     <valAND    OR   
    1de8:	20 20 58 4f 52 20 20 20 20 76 31 3d 3d 76 32 20       XOR    v1==v2 
    1df8:	76 31 21 3d 76 32 20 76 31 3e 76 32 20 20 76 31     v1!=v2 v1>v2  v1
    1e08:	3c 76 32 20 20 4c 61 74 63 68 20 20 46 2d 46 6c     <v2  Latch  F-Fl
    1e18:	6f 70 20 54 69 6d 65 4f 66 66 76 31 60 3d 76 61     op TimeOffv1`=va
    1e28:	6c 00                                               l.

00001e2a <_ZL10Str_Sounds>:
    1e2a:	06 57 61 72 6e 31 20 57 61 72 6e 32 20 43 68 65     .Warn1 Warn2 Che
    1e3a:	61 70 20 52 69 6e 67 20 20 53 63 69 46 69 20 52     ap Ring  SciFi R
    1e4a:	6f 62 6f 74 20 43 68 69 72 70 20 54 61 64 61 20     obot Chirp Tada 
    1e5a:	20 43 72 69 63 6b 74 53 69 72 65 6e 20 41 6c 6d      CricktSiren Alm
    1e6a:	43 6c 6b 52 61 74 61 74 61 54 69 63 6b 20 20 48     ClkRatataTick  H
    1e7a:	61 70 74 63 31 48 61 70 74 63 32 48 61 70 74 63     aptc1Haptc2Haptc
    1e8a:	33 00                                               3.

00001e8c <_ZL9Str_Timer>:
    1e8c:	54 69 6d 65 72 00                                   Timer.

00001e92 <_ZL12Str_TRE012AG>:
    1e92:	54 52 45 30 31 32 41 47 00                          TRE012AG.

00001e9b <_ZL9s_charTab>:
    1e9b:	20 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f      ABCDEFGHIJKLMNO
    1eab:	50 51 52 53 54 55 56 57 58 59 5a 61 62 63 64 65     PQRSTUVWXYZabcde
    1ebb:	66 67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75     fghijklmnopqrstu
    1ecb:	76 77 78 79 7a 30 31 32 33 34 35 36 37 38 39 5f     vwxyz0123456789_
    1edb:	2d 2e 00                                            -..

00001ede <TelemIndex>:
    1ede:	fe ff fd f6 f7 f8 f9 fa fb fc                       ..........

00001ee8 <Str_telemItems>:
    1ee8:	04 2d 2d 2d 2d 54 49 4d 31 54 49 4d 32 42 41 54     .----TIM1TIM2BAT
    1ef8:	54 47 76 72 31 47 76 72 32 47 76 72 33 47 76 72     TGvr1Gvr2Gvr3Gvr
    1f08:	34 47 76 72 35 47 76 72 36 47 76 72 37 00           4Gvr5Gvr6Gvr7.

00001f16 <Curve_Str>:
    1f16:	03 2d 2d 2d 78 3e 30 78 3c 30 7c 78 7c 66 3e 30     .---x>0x<0|x|f>0
    1f26:	66 3c 30 7c 66 7c 63 31 20 63 32 20 63 33 20 63     f<0|f|c1 c2 c3 c
    1f36:	34 20 63 35 20 63 36 20 63 37 20 63 38 20 63 39     4 c5 c6 c7 c8 c9
    1f46:	20 63 31 30 63 31 31 63 31 32 63 31 33 63 31 34      c10c11c12c13c14
    1f56:	63 31 35 63 31 36 00                                c15c16.

00001f5d <Str_Chans_Gv>:
    1f5d:	04 50 31 20 20 50 32 20 20 50 33 20 20 48 41 4c     .P1  P2  P3  HAL
    1f6d:	46 46 55 4c 4c 43 59 43 31 43 59 43 32 43 59 43     FFULLCYC1CYC2CYC
    1f7d:	33 50 50 4d 31 50 50 4d 32 50 50 4d 33 50 50 4d     3PPM1PPM2PPM3PPM
    1f8d:	34 50 50 4d 35 50 50 4d 36 50 50 4d 37 50 50 4d     4PPM5PPM6PPM7PPM
    1f9d:	38 43 48 31 20 43 48 32 20 43 48 33 20 43 48 34     8CH1 CH2 CH3 CH4
    1fad:	20 43 48 35 20 43 48 36 20 43 48 37 20 43 48 38      CH5 CH6 CH7 CH8
    1fbd:	20 43 48 39 20 43 48 31 30 43 48 31 31 43 48 31      CH9 CH10CH11CH1
    1fcd:	32 43 48 31 33 43 48 31 34 43 48 31 35 43 48 31     2CH13CH14CH15CH1
    1fdd:	36 53 57 43 48 47 56 31 20 47 56 32 20 47 56 33     6SWCHGV1 GV2 GV3
    1fed:	20 47 56 34 20 47 56 35 20 47 56 36 20 47 56 37      GV4 GV5 GV6 GV7
    1ffd:	20 54 48 49 53 00                                    THIS.

00002003 <Str_Switch_warn>:
    2003:	53 77 69 74 63 68 20 57 61 72 6e 69 6e 67 00        Switch Warning.

00002012 <_ZZ5titlecE3__c>:
    2012:	20 65 4c 65 52 65 53 20 54 65 6c 65 6d 65 74 72      eLeReS Telemetr
    2022:	79 20 3f 2f 33 00                                   y ?/3.

00002028 <_ZZ16menuProc_eleres3hE3__c_0>:
    2028:	53 50 45 45 44 20 7c 20 41 4c 54 49 54 55 44 45     SPEED | ALTITUDE
	...

00002039 <_ZZ16menuProc_eleres3hE3__c>:
    2039:	20 46 49 58 20 7c 20 53 41 54 20 7c 20 43 4f 55      FIX | SAT | COU
    2049:	52 53 45 00                                         RSE.

0000204d <_ZZ16menuProc_eleres2hE3__c_2>:
    204d:	48 44 4f 50 3a 00                                   HDOP:.

00002053 <_ZZ16menuProc_eleres2hE3__c_1>:
    2053:	54 49 4d 45 3a 00                                   TIME:.

00002059 <_ZZ16menuProc_eleres2hE3__c_0>:
    2059:	4c 4f 4e 47 2e 20 3a 00                             LONG. :.

00002061 <_ZZ16menuProc_eleres2hE3__c>:
    2061:	4c 41 54 49 54 2e 3a 00                             LATIT.:.

00002069 <_ZZ16menuProc_eleres1hE3__c>:
    2069:	56 52 78 3a 00                                      VRx:.

0000206e <_ZL3ant>:
    206e:	09 0e 02 18 24 42 19 f9 19 42 24 18 00 20 30 30     ....$B...B$.. 00
    207e:	3f 30 30 20 00 00                                   ?00 ..

00002084 <__ctors_start>:
    2084:	b6 71       	andi	r27, 0x16	; 22

00002086 <__ctors_end>:
    2086:	11 24       	eor	r1, r1
    2088:	1f be       	out	0x3f, r1	; 63
    208a:	cf ef       	ldi	r28, 0xFF	; 255
    208c:	d0 e1       	ldi	r29, 0x10	; 16
    208e:	de bf       	out	0x3e, r29	; 62
    2090:	cd bf       	out	0x3d, r28	; 61

00002092 <__do_copy_data>:
    2092:	11 e0       	ldi	r17, 0x01	; 1
    2094:	a0 e0       	ldi	r26, 0x00	; 0
    2096:	b1 e0       	ldi	r27, 0x01	; 1
    2098:	ec eb       	ldi	r30, 0xBC	; 188
    209a:	f5 ee       	ldi	r31, 0xE5	; 229
    209c:	02 c0       	rjmp	.+4      	; 0x20a2 <__do_copy_data+0x10>
    209e:	05 90       	lpm	r0, Z+
    20a0:	0d 92       	st	X+, r0
    20a2:	a6 34       	cpi	r26, 0x46	; 70
    20a4:	b1 07       	cpc	r27, r17
    20a6:	d9 f7       	brne	.-10     	; 0x209e <__do_copy_data+0xc>

000020a8 <__do_clear_bss>:
    20a8:	2f e0       	ldi	r18, 0x0F	; 15
    20aa:	a6 e4       	ldi	r26, 0x46	; 70
    20ac:	b1 e0       	ldi	r27, 0x01	; 1
    20ae:	01 c0       	rjmp	.+2      	; 0x20b2 <.do_clear_bss_start>

000020b0 <.do_clear_bss_loop>:
    20b0:	1d 92       	st	X+, r1

000020b2 <.do_clear_bss_start>:
    20b2:	a5 3e       	cpi	r26, 0xE5	; 229
    20b4:	b2 07       	cpc	r27, r18
    20b6:	e1 f7       	brne	.-8      	; 0x20b0 <.do_clear_bss_loop>

000020b8 <__do_global_ctors>:
    20b8:	10 e2       	ldi	r17, 0x20	; 32
    20ba:	c6 e8       	ldi	r28, 0x86	; 134
    20bc:	d0 e2       	ldi	r29, 0x20	; 32
    20be:	04 c0       	rjmp	.+8      	; 0x20c8 <__do_global_ctors+0x10>
    20c0:	22 97       	sbiw	r28, 0x02	; 2
    20c2:	fe 01       	movw	r30, r28
    20c4:	0e 94 3d 72 	call	0xe47a	; 0xe47a <__tablejump__>
    20c8:	c4 38       	cpi	r28, 0x84	; 132
    20ca:	d1 07       	cpc	r29, r17
    20cc:	c9 f7       	brne	.-14     	; 0x20c0 <__do_global_ctors+0x8>
    20ce:	0e 94 86 70 	call	0xe10c	; 0xe10c <main>
    20d2:	0c 94 dc 72 	jmp	0xe5b8	; 0xe5b8 <_exit>

000020d6 <__bad_interrupt>:
    20d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000020da <_Z12modeFixValueh>:
uint8_t Arduino = 0;
#endif

#ifdef FIX_MODE
uint8_t modeFixValue (uint8_t value) {
	return pgm_read_byte(stickScramble+g_eeGeneral.stickMode*4+value) + 1;
    20da:	e0 91 26 06 	lds	r30, 0x0626
    20de:	94 e0       	ldi	r25, 0x04	; 4
    20e0:	e9 9f       	mul	r30, r25
    20e2:	f0 01       	movw	r30, r0
    20e4:	11 24       	eor	r1, r1
    20e6:	e8 0f       	add	r30, r24
    20e8:	f1 1d       	adc	r31, r1
    20ea:	ec 55       	subi	r30, 0x5C	; 92
    20ec:	fd 4f       	sbci	r31, 0xFD	; 253
    20ee:	84 91       	lpm	r24, Z
}
    20f0:	8f 5f       	subi	r24, 0xFF	; 255
    20f2:	08 95       	ret

000020f4 <_Z11get_tmr10msv>:
};
#endif

uint16_t get_tmr10ms () {
	uint16_t time;
	cli();
    20f4:	f8 94       	cli
	time = g_tmr10ms;
    20f6:	80 91 d0 0a 	lds	r24, 0x0AD0
    20fa:	90 91 d1 0a 	lds	r25, 0x0AD1
	sei();
    20fe:	78 94       	sei
	return time;
}
    2100:	08 95       	ret

00002102 <_Z8CS_STATEh>:

uint8_t CS_STATE (uint8_t x) {
	return pgm_read_byte(csTypeTable + x - 1);
    2102:	e8 2f       	mov	r30, r24
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	e3 57       	subi	r30, 0x73	; 115
    2108:	fd 4f       	sbci	r31, 0xFD	; 253
    210a:	84 91       	lpm	r24, Z
//#ifdef VERSION3
//	return ((x)<CS_AND ? CS_VOFS : ((((x)<CS_EQUAL) || ((x)==CS_LATCH)|| ((x)==CS_FLIP)) ? CS_VBOOL : ((x)<CS_TIME ? CS_VCOMP : CS_TIMER))) ;
//#else
//	return ((x)<CS_AND ? CS_VOFS : ((x)<CS_EQUAL ? CS_VBOOL : ((x)<CS_TIME ? CS_VCOMP : CS_TIMER))) ;
//#endif
}
    210c:	08 95       	ret

0000210e <_Z10mixaddressh>:

MixData *mixaddress (uint8_t idx) {
	return &g_model.mixData[idx];
    210e:	2a e0       	ldi	r18, 0x0A	; 10
    2110:	82 9f       	mul	r24, r18
    2112:	c0 01       	movw	r24, r0
    2114:	11 24       	eor	r1, r1
}
    2116:	85 5c       	subi	r24, 0xC5	; 197
    2118:	9d 4f       	sbci	r25, 0xFD	; 253
    211a:	08 95       	ret

0000211c <_Z12limitaddressh>:

LimitData *limitaddress (uint8_t idx) {
	return &g_model.limitData[idx];
    211c:	25 e0       	ldi	r18, 0x05	; 5
    211e:	82 9f       	mul	r24, r18
    2120:	c0 01       	movw	r24, r0
    2122:	11 24       	eor	r1, r1
}
    2124:	85 58       	subi	r24, 0x85	; 133
    2126:	9c 4f       	sbci	r25, 0xFC	; 252
    2128:	08 95       	ret

0000212a <_Z10putsChnRawhhhh>:

void putsChnRaw (uint8_t x, uint8_t y, uint8_t idx, uint8_t att) {
    212a:	0f 93       	push	r16
    212c:	02 2f       	mov	r16, r18
	uint8_t chanLimit = NUM_XCHNRAW;
	uint8_t mix = att & MIX_SOURCE;
	if (mix) {
    212e:	24 ff       	sbrs	r18, 4
    2130:	03 c0       	rjmp	.+6      	; 0x2138 <_Z10putsChnRawhhhh+0xe>
#if GVARS
		chanLimit += MAX_GVARS + 1 + 1;
#else
		chanLimit += 1;
#endif
		att &= ~MIX_SOURCE;
    2132:	0f 7e       	andi	r16, 0xEF	; 239
void putsChnRaw (uint8_t x, uint8_t y, uint8_t idx, uint8_t att) {
	uint8_t chanLimit = NUM_XCHNRAW;
	uint8_t mix = att & MIX_SOURCE;
	if (mix) {
#if GVARS
		chanLimit += MAX_GVARS + 1 + 1;
    2134:	9d e2       	ldi	r25, 0x2D	; 45
    2136:	01 c0       	rjmp	.+2      	; 0x213a <_Z10putsChnRawhhhh+0x10>
LimitData *limitaddress (uint8_t idx) {
	return &g_model.limitData[idx];
}

void putsChnRaw (uint8_t x, uint8_t y, uint8_t idx, uint8_t att) {
	uint8_t chanLimit = NUM_XCHNRAW;
    2138:	94 e2       	ldi	r25, 0x24	; 36
#else
		chanLimit += 1;
#endif
		att &= ~MIX_SOURCE;
	}
	if (idx == 0) lcd_putsnAtt (x, y, PSTR("----"), 4, att);
    213a:	41 11       	cpse	r20, r1
    213c:	04 c0       	rjmp	.+8      	; 0x2146 <_Z10putsChnRawhhhh+0x1c>
    213e:	24 e0       	ldi	r18, 0x04	; 4
    2140:	41 e8       	ldi	r20, 0x81	; 129
    2142:	52 e0       	ldi	r21, 0x02	; 2
    2144:	0e c0       	rjmp	.+28     	; 0x2162 <_Z10putsChnRawhhhh+0x38>
	else if (idx <= 4)
    2146:	45 30       	cpi	r20, 0x05	; 5
    2148:	a0 f4       	brcc	.+40     	; 0x2172 <_Z10putsChnRawhhhh+0x48>

#ifdef FIX_MODE
			{
		if (g_model.useCustomStickNames) {
    214a:	90 91 92 05 	lds	r25, 0x0592
    214e:	94 ff       	sbrs	r25, 4
    2150:	0b c0       	rjmp	.+22     	; 0x2168 <_Z10putsChnRawhhhh+0x3e>
			lcd_putsnAtt (x, y, (char *) g_eeGeneral.customStickNames + 4 * (idx - 1), 4,
					att | BSS);
    2152:	00 61       	ori	r16, 0x10	; 16
	else if (idx <= 4)

#ifdef FIX_MODE
			{
		if (g_model.useCustomStickNames) {
			lcd_putsnAtt (x, y, (char *) g_eeGeneral.customStickNames + 4 * (idx - 1), 4,
    2154:	94 e0       	ldi	r25, 0x04	; 4
    2156:	49 9f       	mul	r20, r25
    2158:	a0 01       	movw	r20, r0
    215a:	11 24       	eor	r1, r1
					att | BSS);
    215c:	40 5c       	subi	r20, 0xC0	; 192
    215e:	59 4f       	sbci	r21, 0xF9	; 249
    2160:	24 e0       	ldi	r18, 0x04	; 4
    2162:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <_Z12lcd_putsnAtthhPKchh>
    2166:	0d c0       	rjmp	.+26     	; 0x2182 <_Z10putsChnRawhhhh+0x58>
		} else {
			lcd_putsAttIdx (x, y, modi12x3, (idx - 1), att);
    2168:	2f ef       	ldi	r18, 0xFF	; 255
    216a:	24 0f       	add	r18, r20
    216c:	44 eb       	ldi	r20, 0xB4	; 180
    216e:	52 e0       	ldi	r21, 0x02	; 2
    2170:	06 c0       	rjmp	.+12     	; 0x217e <_Z10putsChnRawhhhh+0x54>
		}
	}
#else
	lcd_putsnAtt(x,y,&modi12x3[(pgm_read_byte(modn12x3+g_eeGeneral.stickMode*4+(idx-1))-1)*4],4,att);
#endif
	else if (idx <= chanLimit)
    2172:	94 17       	cp	r25, r20
    2174:	30 f0       	brcs	.+12     	; 0x2182 <_Z10putsChnRawhhhh+0x58>
#if GVARS
	lcd_putsAttIdx (x, y, Str_Chans_Gv, (idx - 5), att);
    2176:	2b ef       	ldi	r18, 0xFB	; 251
    2178:	24 0f       	add	r18, r20
    217a:	4d e5       	ldi	r20, 0x5D	; 93
    217c:	5f e1       	ldi	r21, 0x1F	; 31
    217e:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
		}

		lcd_putsAttIdx(x, y, Str_telemItems, (idx - NUM_XCHNRAW), att);
	}
#endif
}
    2182:	0f 91       	pop	r16
    2184:	08 95       	ret

00002186 <_Z7putsChnhhhh>:
		}
		lcd_2_digits( x1, y, idx1, att );
		lcd_putsnAtt(x,y,PSTR(STR_CH),2,att);
	}
#else
	putsChnRaw (x, y, idx1 ? idx1 + 20 : idx1, att);
    2186:	44 23       	and	r20, r20
    2188:	11 f0       	breq	.+4      	; 0x218e <_Z7putsChnhhhh+0x8>
    218a:	4c 5e       	subi	r20, 0xEC	; 236
    218c:	01 c0       	rjmp	.+2      	; 0x2190 <_Z7putsChnhhhh+0xa>
    218e:	40 e0       	ldi	r20, 0x00	; 0
    2190:	cc cf       	rjmp	.-104    	; 0x212a <_Z10putsChnRawhhhh>

00002192 <_Z14putsDrSwitcheshhah>:
	}
	putsDrSwitches (x - 1 * FW, y, idx1, att);
}
//-------------------------------------------------------------------------------
void putsDrSwitches (uint8_t x, uint8_t y, int8_t idx1, uint8_t att)	//, bool nc)
		{
    2192:	0f 93       	push	r16
    2194:	1f 93       	push	r17
    2196:	cf 93       	push	r28
    2198:	df 93       	push	r29
    219a:	d6 2f       	mov	r29, r22
    219c:	c4 2f       	mov	r28, r20
    219e:	02 2f       	mov	r16, r18
    21a0:	16 e0       	ldi	r17, 0x06	; 6
    21a2:	18 0f       	add	r17, r24

	switch (idx1) {
    21a4:	44 23       	and	r20, r20
    21a6:	39 f0       	breq	.+14     	; 0x21b6 <_Z14putsDrSwitcheshhah+0x24>
    21a8:	46 31       	cpi	r20, 0x16	; 22
    21aa:	41 f0       	breq	.+16     	; 0x21bc <_Z14putsDrSwitcheshhah+0x2a>
    21ac:	4a 3e       	cpi	r20, 0xEA	; 234
    21ae:	81 f4       	brne	.+32     	; 0x21d0 <_Z14putsDrSwitcheshhah+0x3e>
			return;
		case MAX_DRSWITCH:
			lcd_putsAtt (x + FW, y, Str_ON, att);
			return;
		case -MAX_DRSWITCH:
			lcd_putsAtt (x + FW, y, Str_OFF, att);
    21b0:	4a ec       	ldi	r20, 0xCA	; 202
    21b2:	52 e0       	ldi	r21, 0x02	; 2
    21b4:	05 c0       	rjmp	.+10     	; 0x21c0 <_Z14putsDrSwitcheshhah+0x2e>
void putsDrSwitches (uint8_t x, uint8_t y, int8_t idx1, uint8_t att)	//, bool nc)
		{

	switch (idx1) {
		case 0:
			lcd_putsAtt (x + FW, y, PSTR("---"), att);
    21b6:	4d e7       	ldi	r20, 0x7D	; 125
    21b8:	52 e0       	ldi	r21, 0x02	; 2
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <_Z14putsDrSwitcheshhah+0x2e>
			return;
		case MAX_DRSWITCH:
			lcd_putsAtt (x + FW, y, Str_ON, att);
    21bc:	46 ec       	ldi	r20, 0xC6	; 198
    21be:	52 e0       	ldi	r21, 0x02	; 2
			return;
		case -MAX_DRSWITCH:
			lcd_putsAtt (x + FW, y, Str_OFF, att);
    21c0:	6d 2f       	mov	r22, r29
    21c2:	81 2f       	mov	r24, r17
		z = -idx1;
	}
	z -= 1;
//		z *= 3 ;
	lcd_putsAttIdx (x + FW, y, Str_Switches, z, att);
}
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	1f 91       	pop	r17
    21ca:	0f 91       	pop	r16
			return;
		case MAX_DRSWITCH:
			lcd_putsAtt (x + FW, y, Str_ON, att);
			return;
		case -MAX_DRSWITCH:
			lcd_putsAtt (x + FW, y, Str_OFF, att);
    21cc:	0c 94 fa 26 	jmp	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>
			return;
	}
	if (idx1 < 0) {
    21d0:	47 ff       	sbrs	r20, 7
    21d2:	04 c0       	rjmp	.+8      	; 0x21dc <_Z14putsDrSwitcheshhah+0x4a>
		lcd_putcAtt (x, y, '!', att);
    21d4:	41 e2       	ldi	r20, 0x21	; 33
    21d6:	0e 94 31 26 	call	0x4c62	; 0x4c62 <_Z11lcd_putcAtthhch>
	}
	int8_t z;
	z = idx1;
	if (z < 0) {
		z = -idx1;
    21da:	c1 95       	neg	r28
	}
	z -= 1;
    21dc:	2f ef       	ldi	r18, 0xFF	; 255
    21de:	2c 0f       	add	r18, r28
//		z *= 3 ;
	lcd_putsAttIdx (x + FW, y, Str_Switches, z, att);
    21e0:	4e ec       	ldi	r20, 0xCE	; 206
    21e2:	52 e0       	ldi	r21, 0x02	; 2
    21e4:	6d 2f       	mov	r22, r29
    21e6:	81 2f       	mov	r24, r17
    21e8:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
}
    21ec:	df 91       	pop	r29
    21ee:	cf 91       	pop	r28
    21f0:	1f 91       	pop	r17
    21f2:	0f 91       	pop	r16
    21f4:	08 95       	ret

000021f6 <_Z20putsMomentDrSwitcheshhah>:
#else
	putsChnRaw (x, y, idx1 ? idx1 + 20 : idx1, att);
#endif
}
//-------------------------------------------------------------------------------
void putsMomentDrSwitches (uint8_t x, uint8_t y, int8_t idx1, uint8_t att) {
    21f6:	0f 93       	push	r16
    21f8:	1f 93       	push	r17
    21fa:	cf 93       	push	r28
    21fc:	df 93       	push	r29
    21fe:	d8 2f       	mov	r29, r24
    2200:	16 2f       	mov	r17, r22
    2202:	c4 2f       	mov	r28, r20
    2204:	02 2f       	mov	r16, r18
	if (idx1 > MAX_DRSWITCH - 1) {
    2206:	46 31       	cpi	r20, 0x16	; 22
    2208:	34 f0       	brlt	.+12     	; 0x2216 <_Z20putsMomentDrSwitcheshhah+0x20>
		lcd_putcAtt (x + 3 * FW, y, 'm', att);
    220a:	4d e6       	ldi	r20, 0x6D	; 109
    220c:	82 e1       	ldi	r24, 0x12	; 18
    220e:	8d 0f       	add	r24, r29
    2210:	0e 94 31 26 	call	0x4c62	; 0x4c62 <_Z11lcd_putcAtthhch>
		idx1 -= MAX_DRSWITCH - 1;
    2214:	c5 51       	subi	r28, 0x15	; 21
	}
	putsDrSwitches (x - 1 * FW, y, idx1, att);
    2216:	20 2f       	mov	r18, r16
    2218:	4c 2f       	mov	r20, r28
    221a:	61 2f       	mov	r22, r17
    221c:	8a ef       	ldi	r24, 0xFA	; 250
    221e:	8d 0f       	add	r24, r29
}
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	1f 91       	pop	r17
    2226:	0f 91       	pop	r16
void putsMomentDrSwitches (uint8_t x, uint8_t y, int8_t idx1, uint8_t att) {
	if (idx1 > MAX_DRSWITCH - 1) {
		lcd_putcAtt (x + 3 * FW, y, 'm', att);
		idx1 -= MAX_DRSWITCH - 1;
	}
	putsDrSwitches (x - 1 * FW, y, idx1, att);
    2228:	b4 cf       	rjmp	.-152    	; 0x2192 <_Z14putsDrSwitcheshhah>

0000222a <_Z11putsTmrModehhhh>:
	z -= 1;
//		z *= 3 ;
	lcd_putsAttIdx (x + FW, y, Str_Switches, z, att);
}
//-------------------------------------------------------------------------------
void putsTmrMode (uint8_t x, uint8_t y, uint8_t attr, uint8_t type) { // Valid values of type are 0, 1 or 2 only
    222a:	df 92       	push	r13
    222c:	ef 92       	push	r14
    222e:	ff 92       	push	r15
    2230:	0f 93       	push	r16
    2232:	1f 93       	push	r17
    2234:	cf 93       	push	r28
    2236:	df 93       	push	r29
    2238:	d8 2f       	mov	r29, r24
    223a:	16 2f       	mov	r17, r22
    223c:	f4 2e       	mov	r15, r20

//#ifdef TWO_TIMERS
	TimerMode *ptConfig;
	int8_t tm;
	int8_t tmb;
	if (type & 0x80) {
    223e:	27 ff       	sbrs	r18, 7
    2240:	03 c0       	rjmp	.+6      	; 0x2248 <_Z11putsTmrModehhhh+0x1e>
		ptConfig = &TimerConfig[1];
    2242:	ec ed       	ldi	r30, 0xDC	; 220
    2244:	f1 e0       	ldi	r31, 0x01	; 1
    2246:	02 c0       	rjmp	.+4      	; 0x224c <_Z11putsTmrModehhhh+0x22>
	} else {
		ptConfig = &TimerConfig[0];
    2248:	e7 ed       	ldi	r30, 0xD7	; 215
    224a:	f1 e0       	ldi	r31, 0x01	; 1
	}
//	FORCE_INDIRECT(ptConfig) ;
	tm = ptConfig->tmrModeA;
    224c:	c2 81       	ldd	r28, Z+2	; 0x02
	tmb = ptConfig->tmrModeB;
    224e:	d3 80       	ldd	r13, Z+3	; 0x03

	type &= 3;
    2250:	23 70       	andi	r18, 0x03	; 3
    2252:	e2 2e       	mov	r14, r18
//#else
//  int8_t tm = g_model.tmrMode ;
//  int8_t tmb = g_model.tmrModeB ;
//#endif
//#ifdef TWO_TIMERS
	if (type < 2)		// 0 or 1
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	82 17       	cp	r24, r18
    2258:	18 f1       	brcs	.+70     	; 0x22a0 <_Z11putsTmrModehhhh+0x76>
			{
		if (tm < TMR_VAROFS) {
    225a:	c4 30       	cpi	r28, 0x04	; 4
    225c:	6c f4       	brge	.+26     	; 0x2278 <_Z11putsTmrModehhhh+0x4e>
			lcd_putsnAtt (x, y, PSTR(STR_TRIGA_OPTS) + 3 * tm, 3, attr);
    225e:	83 e0       	ldi	r24, 0x03	; 3
    2260:	c8 02       	muls	r28, r24
    2262:	a0 01       	movw	r20, r0
    2264:	11 24       	eor	r1, r1
    2266:	40 59       	subi	r20, 0x90	; 144
    2268:	5d 4f       	sbci	r21, 0xFD	; 253
    226a:	0f 2d       	mov	r16, r15
    226c:	23 e0       	ldi	r18, 0x03	; 3
    226e:	61 2f       	mov	r22, r17
    2270:	8d 2f       	mov	r24, r29
    2272:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <_Z12lcd_putsnAtthhPKchh>
    2276:	18 c0       	rjmp	.+48     	; 0x22a8 <_Z11putsTmrModehhhh+0x7e>
		} else {
			tm -= TMR_VAROFS - 7;
    2278:	cd 5f       	subi	r28, 0xFD	; 253
			lcd_putsAttIdx (x, y, Curve_Str, tm, attr);
    227a:	0f 2d       	mov	r16, r15
    227c:	2c 2f       	mov	r18, r28
    227e:	46 e1       	ldi	r20, 0x16	; 22
    2280:	5f e1       	ldi	r21, 0x1F	; 31
    2282:	61 2f       	mov	r22, r17
    2284:	8d 2f       	mov	r24, r29
    2286:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
			if (tm < 9 + 7)	// Allow for 7 offset above
    228a:	c0 31       	cpi	r28, 0x10	; 16
    228c:	0c f4       	brge	.+2      	; 0x2290 <_Z11putsTmrModehhhh+0x66>
					{
				x -= FW;
    228e:	d6 50       	subi	r29, 0x06	; 6
			}
			lcd_putcAtt (x + 3 * FW, y, '%', attr);
    2290:	2f 2d       	mov	r18, r15
    2292:	45 e2       	ldi	r20, 0x25	; 37
    2294:	61 2f       	mov	r22, r17
    2296:	82 e1       	ldi	r24, 0x12	; 18
    2298:	8d 0f       	add	r24, r29
    229a:	0e 94 31 26 	call	0x4c62	; 0x4c62 <_Z11lcd_putcAtthhch>
    229e:	04 c0       	rjmp	.+8      	; 0x22a8 <_Z11putsTmrModehhhh+0x7e>
		}
	}
	if ( (type == 2) || ( (type == 0) && (tm == 1))) {
    22a0:	82 e0       	ldi	r24, 0x02	; 2
    22a2:	28 13       	cpse	r18, r24
    22a4:	0a c0       	rjmp	.+20     	; 0x22ba <_Z11putsTmrModehhhh+0x90>
    22a6:	04 c0       	rjmp	.+8      	; 0x22b0 <_Z11putsTmrModehhhh+0x86>
    22a8:	e1 10       	cpse	r14, r1
    22aa:	07 c0       	rjmp	.+14     	; 0x22ba <_Z11putsTmrModehhhh+0x90>
    22ac:	c1 30       	cpi	r28, 0x01	; 1
    22ae:	29 f4       	brne	.+10     	; 0x22ba <_Z11putsTmrModehhhh+0x90>
		putsMomentDrSwitches (x, y, tmb, attr);
    22b0:	2f 2d       	mov	r18, r15
    22b2:	4d 2d       	mov	r20, r13
    22b4:	61 2f       	mov	r22, r17
    22b6:	8d 2f       	mov	r24, r29
    22b8:	9e df       	rcall	.-196    	; 0x21f6 <_Z20putsMomentDrSwitcheshhah>
//	{
//   	putsDrSwitches( x-1*FW, y, tmb, attr );
//	}
//#endif
	asm("");
}
    22ba:	df 91       	pop	r29
    22bc:	cf 91       	pop	r28
    22be:	1f 91       	pop	r17
    22c0:	0f 91       	pop	r16
    22c2:	ff 90       	pop	r15
    22c4:	ef 90       	pop	r14
    22c6:	df 90       	pop	r13
    22c8:	08 95       	ret

000022ca <_Z8getValueh>:
#endif

//-------------------------------------------------------------------------------
int16_t getValue (uint8_t i) {

	if (i < 7) return calibratedStick[i];		//-512..512
    22ca:	87 30       	cpi	r24, 0x07	; 7
    22cc:	38 f4       	brcc	.+14     	; 0x22dc <_Z8getValueh+0x12>
    22ce:	e8 2f       	mov	r30, r24
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	ee 0f       	add	r30, r30
    22d4:	ff 1f       	adc	r31, r31
    22d6:	e9 53       	subi	r30, 0x39	; 57
    22d8:	f2 4f       	sbci	r31, 0xF2	; 242
    22da:	24 c0       	rjmp	.+72     	; 0x2324 <_Z8getValueh+0x5a>
	if (i < PPM_BASE) return 0;
    22dc:	8c 30       	cpi	r24, 0x0C	; 12
    22de:	50 f1       	brcs	.+84     	; 0x2334 <_Z8getValueh+0x6a>
	else if (i < CHOUT_BASE) {
    22e0:	84 31       	cpi	r24, 0x14	; 20
    22e2:	c0 f4       	brcc	.+48     	; 0x2314 <_Z8getValueh+0x4a>
		int16_t x;
		x = g_ppmIns[i - PPM_BASE];
    22e4:	48 2f       	mov	r20, r24
    22e6:	50 e0       	ldi	r21, 0x00	; 0
    22e8:	da 01       	movw	r26, r20
    22ea:	aa 0f       	add	r26, r26
    22ec:	bb 1f       	adc	r27, r27
    22ee:	a0 5c       	subi	r26, 0xC0	; 192
    22f0:	be 4f       	sbci	r27, 0xFE	; 254
    22f2:	2d 91       	ld	r18, X+
    22f4:	3c 91       	ld	r19, X
		if (i < PPM_BASE + 4) {
    22f6:	80 31       	cpi	r24, 0x10	; 16
    22f8:	48 f4       	brcc	.+18     	; 0x230c <_Z8getValueh+0x42>
			x -= g_eeGeneral.trainer.calib[i - PPM_BASE];
    22fa:	fa 01       	movw	r30, r20
    22fc:	ee 0f       	add	r30, r30
    22fe:	ff 1f       	adc	r31, r31
    2300:	e4 50       	subi	r30, 0x04	; 4
    2302:	fa 4f       	sbci	r31, 0xFA	; 250
    2304:	80 81       	ld	r24, Z
    2306:	91 81       	ldd	r25, Z+1	; 0x01
    2308:	28 1b       	sub	r18, r24
    230a:	39 0b       	sbc	r19, r25
		}
		return x * 2;
    230c:	c9 01       	movw	r24, r18
    230e:	88 0f       	add	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	08 95       	ret
	} else if (i < CHOUT_BASE + NUM_CHNOUT) return ex_chans[i - CHOUT_BASE];
    2314:	84 32       	cpi	r24, 0x24	; 36
    2316:	48 f4       	brcc	.+18     	; 0x232a <_Z8getValueh+0x60>
    2318:	e8 2f       	mov	r30, r24
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	ee 0f       	add	r30, r30
    231e:	ff 1f       	adc	r31, r31
    2320:	e1 58       	subi	r30, 0x81	; 129
    2322:	f2 4f       	sbci	r31, 0xF2	; 242
    2324:	80 81       	ld	r24, Z
    2326:	91 81       	ldd	r25, Z+1	; 0x01
    2328:	08 95       	ret
	else if (i < CHOUT_BASE + NUM_CHNOUT + NUM_TELEM_ITEMS) {
    232a:	8e 32       	cpi	r24, 0x2E	; 46
    232c:	18 f4       	brcc	.+6      	; 0x2334 <_Z8getValueh+0x6a>
		return get_telemetry_value (i - CHOUT_BASE - NUM_CHNOUT);
    232e:	84 52       	subi	r24, 0x24	; 36
    2330:	0c 94 29 37 	jmp	0x6e52	; 0x6e52 <_Z19get_telemetry_valueh>

//-------------------------------------------------------------------------------
int16_t getValue (uint8_t i) {

	if (i < 7) return calibratedStick[i];		//-512..512
	if (i < PPM_BASE) return 0;
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	90 e0       	ldi	r25, 0x00	; 0
	} else if (i < CHOUT_BASE + NUM_CHNOUT) return ex_chans[i - CHOUT_BASE];
	else if (i < CHOUT_BASE + NUM_CHNOUT + NUM_TELEM_ITEMS) {
		return get_telemetry_value (i - CHOUT_BASE - NUM_CHNOUT);
	}
	return 0;
}
    2338:	08 95       	ret

0000233a <_ZL14clearKeyEventsv>:

static void clearKeyEvents () {
#ifdef SIMU
	while (keyDown() && main_thread_running) sleep(1/*ms*/);
#else
	while (keyDown ())
    233a:	0e 94 82 70 	call	0xe104	; 0xe104 <_Z7keyDownv>
    233e:	81 11       	cpse	r24, r1
    2340:	fc cf       	rjmp	.-8      	; 0x233a <_ZL14clearKeyEventsv>
		;  // loop until all keys are up
#endif
	putEvent(0);
    2342:	10 92 ff 0a 	sts	0x0AFF, r1
    2346:	08 95       	ret

00002348 <_Z13alertMessagesPKcS0_>:
		alert (PSTR(STR_EE_LOW_MEM));
	}

}

void alertMessages (const prog_char * s, const prog_char * t) {
    2348:	0f 93       	push	r16
    234a:	1f 93       	push	r17
    234c:	cf 93       	push	r28
    234e:	df 93       	push	r29
    2350:	8c 01       	movw	r16, r24
    2352:	eb 01       	movw	r28, r22
	lcd_clear ();
    2354:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <_Z9lcd_clearv>
	lcd_putsAtt (64 - 5 * FW, 0 * FH, Str_Alert, DBLSIZE);
    2358:	24 e0       	ldi	r18, 0x04	; 4
    235a:	4d e9       	ldi	r20, 0x9D	; 157
    235c:	52 e0       	ldi	r21, 0x02	; 2
    235e:	60 e0       	ldi	r22, 0x00	; 0
    2360:	82 e2       	ldi	r24, 0x22	; 34
    2362:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>
	lcd_puts_Pleft (4 * FH, s);
    2366:	b8 01       	movw	r22, r16
    2368:	80 e2       	ldi	r24, 0x20	; 32
    236a:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
	lcd_puts_Pleft (5 * FH, t);
    236e:	be 01       	movw	r22, r28
    2370:	88 e2       	ldi	r24, 0x28	; 40
    2372:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
	lcd_puts_Pleft (6 * FH, PSTR(STR_PRESS_KEY_SKIP));
    2376:	6a e5       	ldi	r22, 0x5A	; 90
    2378:	72 e0       	ldi	r23, 0x02	; 2
    237a:	80 e3       	ldi	r24, 0x30	; 48
//		lcdSetContrast() ;
}
    237c:	df 91       	pop	r29
    237e:	cf 91       	pop	r28
    2380:	1f 91       	pop	r17
    2382:	0f 91       	pop	r16
void alertMessages (const prog_char * s, const prog_char * t) {
	lcd_clear ();
	lcd_putsAtt (64 - 5 * FW, 0 * FH, Str_Alert, DBLSIZE);
	lcd_puts_Pleft (4 * FH, s);
	lcd_puts_Pleft (5 * FH, t);
	lcd_puts_Pleft (6 * FH, PSTR(STR_PRESS_KEY_SKIP));
    2384:	0c 94 1f 27 	jmp	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>

00002388 <_Z21checkThrottlePositionihi>:
	int16_t v = anaIn (chan);
	return (g_eeGeneral.throttleReversed) ? -v : v;
}

uint8_t checkThrottlePosition (int16_t v, uint8_t thrchn, int16_t lowLim) {
	if (g_model.throttleIdle) {
    2388:	20 91 92 05 	lds	r18, 0x0592
    238c:	20 76       	andi	r18, 0x60	; 96
    238e:	79 f0       	breq	.+30     	; 0x23ae <_Z21checkThrottlePositionihi+0x26>
		if ( abs( v - g_eeGeneral.calibMid[thrchn] ) < THRCHK_DEADBAND) {
    2390:	e6 2f       	mov	r30, r22
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	ee 0f       	add	r30, r30
    2396:	ff 1f       	adc	r31, r31
    2398:	ee 51       	subi	r30, 0x1E	; 30
    239a:	fa 4f       	sbci	r31, 0xFA	; 250
    239c:	21 81       	ldd	r18, Z+1	; 0x01
    239e:	32 81       	ldd	r19, Z+2	; 0x02
    23a0:	82 1b       	sub	r24, r18
    23a2:	93 0b       	sbc	r25, r19
    23a4:	0f 96       	adiw	r24, 0x0f	; 15
    23a6:	4f 97       	sbiw	r24, 0x1f	; 31
    23a8:	28 f0       	brcs	.+10     	; 0x23b4 <_Z21checkThrottlePositionihi+0x2c>
	} else {
		if (v <= lowLim) {
			return 1;
		}
	}
	return 0;
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	08 95       	ret
	if (g_model.throttleIdle) {
		if ( abs( v - g_eeGeneral.calibMid[thrchn] ) < THRCHK_DEADBAND) {
			return 1;
		}
	} else {
		if (v <= lowLim) {
    23ae:	48 17       	cp	r20, r24
    23b0:	59 07       	cpc	r21, r25
    23b2:	dc f3       	brlt	.-10     	; 0x23aa <_Z21checkThrottlePositionihi+0x22>
}

uint8_t checkThrottlePosition (int16_t v, uint8_t thrchn, int16_t lowLim) {
	if (g_model.throttleIdle) {
		if ( abs( v - g_eeGeneral.calibMid[thrchn] ) < THRCHK_DEADBAND) {
			return 1;
    23b4:	81 e0       	ldi	r24, 0x01	; 1
		if (v <= lowLim) {
			return 1;
		}
	}
	return 0;
}
    23b6:	08 95       	ret

000023b8 <_Z13putWarnSwitchhh>:
//        sysFlags &= ~(sysFLAG_OLD_EEPROM); //clear flag
		sysFlags = 0; //clear flag
	}
}

void putWarnSwitch (uint8_t x, uint8_t idx) {
    23b8:	0f 93       	push	r16
    23ba:	26 2f       	mov	r18, r22
	lcd_putsAttIdx (x, 2 * FH, Str_Switches, idx, 0);
    23bc:	00 e0       	ldi	r16, 0x00	; 0
    23be:	4e ec       	ldi	r20, 0xCE	; 206
    23c0:	52 e0       	ldi	r21, 0x02	; 2
    23c2:	60 e1       	ldi	r22, 0x10	; 16
    23c4:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>

}
    23c8:	0f 91       	pop	r16
    23ca:	08 95       	ret

000023cc <_Z22getCurrentSwitchStatesv>:

uint8_t getCurrentSwitchStates () {
    23cc:	cf 93       	push	r28
    23ce:	df 93       	push	r29
    23d0:	d6 e1       	ldi	r29, 0x16	; 22
	uint8_t i = 0;
    23d2:	c0 e0       	ldi	r28, 0x00	; 0
	for (uint8_t j = 0; j < 8; j++) {
		bool t = keyState ((EnumKeys) (SW_BASE_DIAG + 7 - j));
    23d4:	8d 2f       	mov	r24, r29
    23d6:	0e 94 14 2b 	call	0x5628	; 0x5628 <_Z8keyState8EnumKeys>
		i <<= 1;
    23da:	cc 0f       	add	r28, r28
		i |= t;
    23dc:	c8 2b       	or	r28, r24
    23de:	d1 50       	subi	r29, 0x01	; 1

}

uint8_t getCurrentSwitchStates () {
	uint8_t i = 0;
	for (uint8_t j = 0; j < 8; j++) {
    23e0:	de 30       	cpi	r29, 0x0E	; 14
    23e2:	c1 f7       	brne	.-16     	; 0x23d4 <_Z22getCurrentSwitchStatesv+0x8>
		bool t = keyState ((EnumKeys) (SW_BASE_DIAG + 7 - j));
		i <<= 1;
		i |= t;
	}
	return i;
}
    23e4:	8c 2f       	mov	r24, r28
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	08 95       	ret

000023ec <_Z15putsDblSizeNameh>:

	}

}

void putsDblSizeName (uint8_t y) {
    23ec:	0f 93       	push	r16
    23ee:	1f 93       	push	r17
    23f0:	cf 93       	push	r28
    23f2:	df 93       	push	r29
    23f4:	08 2f       	mov	r16, r24
    23f6:	c1 e2       	ldi	r28, 0x21	; 33
    23f8:	d2 e0       	ldi	r29, 0x02	; 2
    23fa:	1a e0       	ldi	r17, 0x0A	; 10
	for (uint8_t i = 0; i < sizeof (g_model.name); i++)
		lcd_putcAtt (FW * 2 + i * 2 * FW - i - 2, y, g_model.name[i], DBLSIZE);
    23fc:	49 91       	ld	r20, Y+
    23fe:	24 e0       	ldi	r18, 0x04	; 4
    2400:	60 2f       	mov	r22, r16
    2402:	81 2f       	mov	r24, r17
    2404:	0e 94 31 26 	call	0x4c62	; 0x4c62 <_Z11lcd_putcAtthhch>
    2408:	15 5f       	subi	r17, 0xF5	; 245
	}

}

void putsDblSizeName (uint8_t y) {
	for (uint8_t i = 0; i < sizeof (g_model.name); i++)
    240a:	18 37       	cpi	r17, 0x78	; 120
    240c:	b9 f7       	brne	.-18     	; 0x23fc <_Z15putsDblSizeNameh+0x10>
		lcd_putcAtt (FW * 2 + i * 2 * FW - i - 2, y, g_model.name[i], DBLSIZE);
}
    240e:	df 91       	pop	r29
    2410:	cf 91       	pop	r28
    2412:	1f 91       	pop	r17
    2414:	0f 91       	pop	r16
    2416:	08 95       	ret

00002418 <_Z6almessPKch>:
//uint8_t  g_beepVal[5];

#define	ALERT_TYPE	0
#define MESS_TYPE		1

void almess (const prog_char * s, uint8_t type) {
    2418:	1f 93       	push	r17
    241a:	cf 93       	push	r28
    241c:	df 93       	push	r29
    241e:	ec 01       	movw	r28, r24
    2420:	16 2f       	mov	r17, r22
	const prog_char *h;
	lcd_clear ();
    2422:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <_Z9lcd_clearv>
	lcd_puts_Pleft (4 * FW, s);
    2426:	be 01       	movw	r22, r28
    2428:	88 e1       	ldi	r24, 0x18	; 24
    242a:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
	if (type == ALERT_TYPE) {
    242e:	11 11       	cpse	r17, r1
    2430:	09 c0       	rjmp	.+18     	; 0x2444 <_Z6almessPKch+0x2c>
		lcd_puts_P (64 - 6 * FW, 7 * FH, PSTR(STR_PRESS_ANY_KEY));
    2432:	46 e0       	ldi	r20, 0x06	; 6
    2434:	52 e0       	ldi	r21, 0x02	; 2
    2436:	68 e3       	ldi	r22, 0x38	; 56
    2438:	8c e1       	ldi	r24, 0x1C	; 28
    243a:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <_Z10lcd_puts_PhhPKc>
		h = Str_Alert;
    243e:	4d e9       	ldi	r20, 0x9D	; 157
    2440:	52 e0       	ldi	r21, 0x02	; 2
    2442:	02 c0       	rjmp	.+4      	; 0x2448 <_Z6almessPKch+0x30>
	} else {
		h = PSTR(STR_MESSAGE);
    2444:	4e ef       	ldi	r20, 0xFE	; 254
    2446:	51 e0       	ldi	r21, 0x01	; 1
	}
	lcd_putsAtt (64 - 7 * FW, 0 * FH, h, DBLSIZE);
    2448:	24 e0       	ldi	r18, 0x04	; 4
    244a:	60 e0       	ldi	r22, 0x00	; 0
    244c:	86 e1       	ldi	r24, 0x16	; 22
    244e:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>
	refreshDiplay ();
}
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	1f 91       	pop	r17
		h = Str_Alert;
	} else {
		h = PSTR(STR_MESSAGE);
	}
	lcd_putsAtt (64 - 7 * FW, 0 * FH, h, DBLSIZE);
	refreshDiplay ();
    2458:	0c 94 2d 2a 	jmp	0x545a	; 0x545a <_Z13refreshDiplayv>

0000245c <_Z7messagePKc>:
}

void message (const prog_char * s) {
	almess (s, MESS_TYPE);
    245c:	61 e0       	ldi	r22, 0x01	; 1
    245e:	dc cf       	rjmp	.-72     	; 0x2418 <_Z6almessPKch>

00002460 <_Z15getRawTrimValuehh>:
		phase += 1;
	}
	return 0;
}

int16_t getRawTrimValue (uint8_t phase, uint8_t idx) {
    2460:	70 e0       	ldi	r23, 0x00	; 0
	if (phase) {
    2462:	88 23       	and	r24, r24
    2464:	99 f0       	breq	.+38     	; 0x248c <_Z15getRawTrimValuehh+0x2c>
		return g_model.phaseData[phase - 1].trim[idx] + TRIM_EXTENDED_MAX + 1;
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	25 e0       	ldi	r18, 0x05	; 5
    246c:	28 9f       	mul	r18, r24
    246e:	f0 01       	movw	r30, r0
    2470:	29 9f       	mul	r18, r25
    2472:	f0 0d       	add	r31, r0
    2474:	11 24       	eor	r1, r1
    2476:	e6 0f       	add	r30, r22
    2478:	f7 1f       	adc	r31, r23
    247a:	ee 0f       	add	r30, r30
    247c:	ff 1f       	adc	r31, r31
    247e:	ea 51       	subi	r30, 0x1A	; 26
    2480:	fb 4f       	sbci	r31, 0xFB	; 251
    2482:	80 81       	ld	r24, Z
    2484:	91 81       	ldd	r25, Z+1	; 0x01
    2486:	8b 50       	subi	r24, 0x0B	; 11
    2488:	9e 4f       	sbci	r25, 0xFE	; 254
    248a:	08 95       	ret
	} else {
#ifdef FMODE_TRIM
		return *TrimPtr[idx];
#else
		return g_model.trim[idx];
    248c:	fb 01       	movw	r30, r22
    248e:	ed 5f       	subi	r30, 0xFD	; 253
    2490:	fb 4f       	sbci	r31, 0xFB	; 251
    2492:	80 81       	ld	r24, Z
    2494:	99 27       	eor	r25, r25
    2496:	87 fd       	sbrc	r24, 7
    2498:	90 95       	com	r25
#endif
	}
}
    249a:	08 95       	ret

0000249c <_Z18getTrimFlightPhasehh>:

uint8_t getTrimFlightPhase (uint8_t phase, uint8_t idx) {
    249c:	1f 93       	push	r17
    249e:	cf 93       	push	r28
    24a0:	df 93       	push	r29
    24a2:	d8 2f       	mov	r29, r24
    24a4:	16 2f       	mov	r17, r22
		}
		uint8_t result = trim - TRIM_EXTENDED_MAX - 1;
		if (result >= phase) {
			result += 1;
		}
		phase = result;
    24a6:	c4 e0       	ldi	r28, 0x04	; 4
	}
}

uint8_t getTrimFlightPhase (uint8_t phase, uint8_t idx) {
	for (uint8_t i = 0; i < MAX_MODES; i += 1) {
		if (phase == 0) return 0;
    24a8:	dd 23       	and	r29, r29
    24aa:	91 f0       	breq	.+36     	; 0x24d0 <_Z18getTrimFlightPhasehh+0x34>
		int16_t trim = getRawTrimValue (phase, idx);
    24ac:	61 2f       	mov	r22, r17
    24ae:	8d 2f       	mov	r24, r29
    24b0:	d7 df       	rcall	.-82     	; 0x2460 <_Z15getRawTrimValuehh>
    24b2:	9c 01       	movw	r18, r24
		if (trim <= TRIM_EXTENDED_MAX) {
    24b4:	25 3f       	cpi	r18, 0xF5	; 245
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	38 07       	cpc	r19, r24
    24ba:	64 f0       	brlt	.+24     	; 0x24d4 <_Z18getTrimFlightPhasehh+0x38>
			return phase;
		}
		uint8_t result = trim - TRIM_EXTENDED_MAX - 1;
    24bc:	8b e0       	ldi	r24, 0x0B	; 11
    24be:	82 0f       	add	r24, r18
		if (result >= phase) {
    24c0:	8d 17       	cp	r24, r29
    24c2:	10 f0       	brcs	.+4      	; 0x24c8 <_Z18getTrimFlightPhasehh+0x2c>
			result += 1;
    24c4:	8c e0       	ldi	r24, 0x0C	; 12
    24c6:	82 0f       	add	r24, r18
    24c8:	c1 50       	subi	r28, 0x01	; 1
#endif
	}
}

uint8_t getTrimFlightPhase (uint8_t phase, uint8_t idx) {
	for (uint8_t i = 0; i < MAX_MODES; i += 1) {
    24ca:	29 f0       	breq	.+10     	; 0x24d6 <_Z18getTrimFlightPhasehh+0x3a>
		}
		uint8_t result = trim - TRIM_EXTENDED_MAX - 1;
		if (result >= phase) {
			result += 1;
		}
		phase = result;
    24cc:	d8 2f       	mov	r29, r24
    24ce:	ec cf       	rjmp	.-40     	; 0x24a8 <_Z18getTrimFlightPhasehh+0xc>
	}
}

uint8_t getTrimFlightPhase (uint8_t phase, uint8_t idx) {
	for (uint8_t i = 0; i < MAX_MODES; i += 1) {
		if (phase == 0) return 0;
    24d0:	c0 e0       	ldi	r28, 0x00	; 0
    24d2:	01 c0       	rjmp	.+2      	; 0x24d6 <_Z18getTrimFlightPhasehh+0x3a>
    24d4:	cd 2f       	mov	r28, r29
			result += 1;
		}
		phase = result;
	}
	return 0;
}
    24d6:	8c 2f       	mov	r24, r28
    24d8:	df 91       	pop	r29
    24da:	cf 91       	pop	r28
    24dc:	1f 91       	pop	r17
    24de:	08 95       	ret

000024e0 <_Z12getTrimValuehh>:

int16_t getTrimValue (uint8_t phase, uint8_t idx) {
    24e0:	cf 93       	push	r28
    24e2:	c6 2f       	mov	r28, r22
	return getRawTrimValue (getTrimFlightPhase (phase, idx), idx);
    24e4:	db df       	rcall	.-74     	; 0x249c <_Z18getTrimFlightPhasehh>
    24e6:	6c 2f       	mov	r22, r28
}
    24e8:	cf 91       	pop	r28
	}
	return 0;
}

int16_t getTrimValue (uint8_t phase, uint8_t idx) {
	return getRawTrimValue (getTrimFlightPhase (phase, idx), idx);
    24ea:	ba cf       	rjmp	.-140    	; 0x2460 <_Z15getRawTrimValuehh>

000024ec <_Z20validatePlusMinus125i>:
}

int16_t validatePlusMinus125 (int16_t trim) {
	if (trim < -125 || trim > 125) {
    24ec:	9c 01       	movw	r18, r24
    24ee:	23 58       	subi	r18, 0x83	; 131
    24f0:	3f 4f       	sbci	r19, 0xFF	; 255
    24f2:	2b 3f       	cpi	r18, 0xFB	; 251
    24f4:	31 05       	cpc	r19, r1
    24f6:	40 f0       	brcs	.+16     	; 0x2508 <_Z20validatePlusMinus125i+0x1c>
		trim = (trim > 0) ? 125 : -125;
    24f8:	18 16       	cp	r1, r24
    24fa:	19 06       	cpc	r1, r25
    24fc:	1c f4       	brge	.+6      	; 0x2504 <_Z20validatePlusMinus125i+0x18>
    24fe:	8d e7       	ldi	r24, 0x7D	; 125
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	08 95       	ret
    2504:	83 e8       	ldi	r24, 0x83	; 131
    2506:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return trim;
}
    2508:	08 95       	ret

0000250a <_Z12setTrimValuehhi>:

void setTrimValue (uint8_t phase, uint8_t idx, int16_t trim) {
    250a:	ff 92       	push	r15
    250c:	0f 93       	push	r16
    250e:	1f 93       	push	r17
    2510:	cf 93       	push	r28
    2512:	df 93       	push	r29
    2514:	8a 01       	movw	r16, r20
    2516:	c6 2f       	mov	r28, r22
    2518:	d0 e0       	ldi	r29, 0x00	; 0
	if (phase) {
    251a:	88 23       	and	r24, r24
    251c:	d9 f0       	breq	.+54     	; 0x2554 <_Z12setTrimValuehhi+0x4a>
		phase = getTrimFlightPhase (phase, idx);
    251e:	be df       	rcall	.-132    	; 0x249c <_Z18getTrimFlightPhasehh>
    2520:	f8 2e       	mov	r15, r24
	}
	if (phase) {
    2522:	88 23       	and	r24, r24
    2524:	b9 f0       	breq	.+46     	; 0x2554 <_Z12setTrimValuehhi+0x4a>
		trim = validatePlusMinus125 (trim);
    2526:	c8 01       	movw	r24, r16
    2528:	e1 df       	rcall	.-62     	; 0x24ec <_Z20validatePlusMinus125i>
//    if(trim < -500 || trim > 500)
//		{
//			trim = ( trim > 0 ) ? 125 : -125 ;
//			trim = ( trim > 0 ) ? 500 : -500 ; For later addition
//		}
		g_model.phaseData[phase - 1].trim[idx] = trim - ( TRIM_EXTENDED_MAX + 1);
    252a:	2f 2d       	mov	r18, r15
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	21 50       	subi	r18, 0x01	; 1
    2530:	31 09       	sbc	r19, r1
    2532:	45 e0       	ldi	r20, 0x05	; 5
    2534:	42 9f       	mul	r20, r18
    2536:	f0 01       	movw	r30, r0
    2538:	43 9f       	mul	r20, r19
    253a:	f0 0d       	add	r31, r0
    253c:	11 24       	eor	r1, r1
    253e:	ec 0f       	add	r30, r28
    2540:	fd 1f       	adc	r31, r29
    2542:	ee 0f       	add	r30, r30
    2544:	ff 1f       	adc	r31, r31
    2546:	ea 51       	subi	r30, 0x1A	; 26
    2548:	fb 4f       	sbci	r31, 0xFB	; 251
    254a:	85 5f       	subi	r24, 0xF5	; 245
    254c:	91 40       	sbci	r25, 0x01	; 1
    254e:	91 83       	std	Z+1, r25	; 0x01
    2550:	80 83       	st	Z, r24
    2552:	05 c0       	rjmp	.+10     	; 0x255e <_Z12setTrimValuehhi+0x54>
	} else {
		trim = validatePlusMinus125 (trim);
    2554:	c8 01       	movw	r24, r16
    2556:	ca df       	rcall	.-108    	; 0x24ec <_Z20validatePlusMinus125i>
//			trim = ( trim > 0 ) ? 125 : -125 ;
//		}
#ifdef FMODE_TRIM
		*TrimPtr[idx] = trim;
#else
		g_model.trim[idx] = trim;
    2558:	cd 5f       	subi	r28, 0xFD	; 253
    255a:	db 4f       	sbci	r29, 0xFB	; 251
    255c:	88 83       	st	Y, r24
#endif
	}
	STORE_MODELVARS_TRIM;
    255e:	86 e0       	ldi	r24, 0x06	; 6
}
    2560:	df 91       	pop	r29
    2562:	cf 91       	pop	r28
    2564:	1f 91       	pop	r17
    2566:	0f 91       	pop	r16
    2568:	ff 90       	pop	r15
		*TrimPtr[idx] = trim;
#else
		g_model.trim[idx] = trim;
#endif
	}
	STORE_MODELVARS_TRIM;
    256a:	0c 94 4e 20 	jmp	0x409c	; 0x409c <_Z7eeDirtyh>

0000256e <_Z13checkIncDec16iiih>:
struct t_p1 P1values;
#endif
static uint8_t LongMenuTimer;
uint8_t StepSize;

int16_t checkIncDec16 (int16_t val, int16_t i_min, int16_t i_max, uint8_t i_flags) {
    256e:	af 92       	push	r10
    2570:	bf 92       	push	r11
    2572:	cf 92       	push	r12
    2574:	df 92       	push	r13
    2576:	ef 92       	push	r14
    2578:	ff 92       	push	r15
    257a:	0f 93       	push	r16
    257c:	1f 93       	push	r17
    257e:	cf 93       	push	r28
    2580:	df 93       	push	r29
    2582:	8c 01       	movw	r16, r24
    2584:	7b 01       	movw	r14, r22
    2586:	6a 01       	movw	r12, r20
    2588:	a2 2e       	mov	r10, r18
	int16_t newval = val;
	uint8_t kpl = KEY_RIGHT, kmi = KEY_LEFT, kother = -1;
//		uint8_t skipPause = 0 ;

	uint8_t event = Tevent;
    258a:	b0 90 e1 01 	lds	r11, 0x01E1
//        uint8_t hlp=kpl;
//        kpl=kmi;
//        kmi=hlp;
//        event=EVT_KEY_FIRST(EVT_KEY_MASK & event);
//    }
	if (event == EVT_KEY_FIRST(kpl) || event == EVT_KEY_REPT(kpl)
    258e:	9b 2d       	mov	r25, r11
    2590:	9f 7d       	andi	r25, 0xDF	; 223
    2592:	94 34       	cpi	r25, 0x44	; 68
    2594:	39 f0       	breq	.+14     	; 0x25a4 <_Z13checkIncDec16iiih+0x36>
			|| (s_editMode && (event == EVT_KEY_FIRST(KEY_UP) || event == EVT_KEY_REPT(KEY_UP)))) {
    2596:	80 91 a5 0d 	lds	r24, 0x0DA5
    259a:	88 23       	and	r24, r24
    259c:	09 f4       	brne	.+2      	; 0x25a0 <_Z13checkIncDec16iiih+0x32>
    259e:	98 c0       	rjmp	.+304    	; 0x26d0 <_Z13checkIncDec16iiih+0x162>
    25a0:	93 34       	cpi	r25, 0x43	; 67
    25a2:	79 f4       	brne	.+30     	; 0x25c2 <_Z13checkIncDec16iiih+0x54>
		if ( ( read_keys() & 2) == 0) {
    25a4:	b1 99       	sbic	0x16, 1	; 22
    25a6:	06 c0       	rjmp	.+12     	; 0x25b4 <_Z13checkIncDec16iiih+0x46>
			newval += StepSize;
    25a8:	80 91 6d 01 	lds	r24, 0x016D
    25ac:	e8 01       	movw	r28, r16
    25ae:	c8 0f       	add	r28, r24
    25b0:	d1 1d       	adc	r29, r1
    25b2:	02 c0       	rjmp	.+4      	; 0x25b8 <_Z13checkIncDec16iiih+0x4a>
		} else {
			newval += 1;
    25b4:	e8 01       	movw	r28, r16
    25b6:	21 96       	adiw	r28, 0x01	; 1
		}

		audioDefevent (AU_KEYPAD_UP);
    25b8:	83 e1       	ldi	r24, 0x13	; 19
    25ba:	0e 94 74 34 	call	0x68e8	; 0x68e8 <_Z13audioDefeventh>

		kother = kmi;
    25be:	85 e0       	ldi	r24, 0x05	; 5
    25c0:	10 c0       	rjmp	.+32     	; 0x25e2 <_Z13checkIncDec16iiih+0x74>
	} else if (event == EVT_KEY_FIRST(kmi) || event == EVT_KEY_REPT(kmi)
    25c2:	95 34       	cpi	r25, 0x45	; 69
    25c4:	19 f0       	breq	.+6      	; 0x25cc <_Z13checkIncDec16iiih+0x5e>
			|| (s_editMode && (event == EVT_KEY_FIRST(KEY_DOWN) || event == EVT_KEY_REPT(KEY_DOWN)))) {
    25c6:	92 34       	cpi	r25, 0x42	; 66
    25c8:	09 f0       	breq	.+2      	; 0x25cc <_Z13checkIncDec16iiih+0x5e>
    25ca:	88 c0       	rjmp	.+272    	; 0x26dc <_Z13checkIncDec16iiih+0x16e>
		if ( ( read_keys() & 2) == 0) {
    25cc:	b1 99       	sbic	0x16, 1	; 22
    25ce:	83 c0       	rjmp	.+262    	; 0x26d6 <_Z13checkIncDec16iiih+0x168>
			newval -= StepSize;
    25d0:	80 91 6d 01 	lds	r24, 0x016D
    25d4:	e8 01       	movw	r28, r16
    25d6:	c8 1b       	sub	r28, r24
    25d8:	d1 09       	sbc	r29, r1
		} else {
			newval -= 1;
		}

		audioDefevent (AU_KEYPAD_DOWN);
    25da:	84 e1       	ldi	r24, 0x14	; 20
    25dc:	0e 94 74 34 	call	0x68e8	; 0x68e8 <_Z13audioDefeventh>

		kother = kpl;
    25e0:	84 e0       	ldi	r24, 0x04	; 4
	}
	if ( (kother != (uint8_t) -1) && keyState ((EnumKeys) kother)) {
    25e2:	0e 94 14 2b 	call	0x5628	; 0x5628 <_Z8keyState8EnumKeys>
    25e6:	81 11       	cpse	r24, r1
    25e8:	68 c0       	rjmp	.+208    	; 0x26ba <_Z13checkIncDec16iiih+0x14c>
		newval = -val;
		killEvents (kmi);
		killEvents (kpl);
	}
	if (i_min == 0 && i_max == 1) {
    25ea:	e1 14       	cp	r14, r1
    25ec:	f1 04       	cpc	r15, r1
    25ee:	f9 f4       	brne	.+62     	; 0x262e <_Z13checkIncDec16iiih+0xc0>
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	c8 16       	cp	r12, r24
    25f4:	d1 04       	cpc	r13, r1
    25f6:	d9 f4       	brne	.+54     	; 0x262e <_Z13checkIncDec16iiih+0xc0>
		if (event == EVT_KEY_FIRST(KEY_MENU) || event == EVT_KEY_BREAK(BTN_RE)) {
    25f8:	80 e6       	ldi	r24, 0x60	; 96
    25fa:	b8 16       	cp	r11, r24
    25fc:	19 f0       	breq	.+6      	; 0x2604 <_Z13checkIncDec16iiih+0x96>
    25fe:	8e e2       	ldi	r24, 0x2E	; 46
    2600:	b8 12       	cpse	r11, r24
    2602:	11 c0       	rjmp	.+34     	; 0x2626 <_Z13checkIncDec16iiih+0xb8>
			s_editMode = false;
    2604:	10 92 a5 0d 	sts	0x0DA5, r1
			newval = !val;
    2608:	c1 e0       	ldi	r28, 0x01	; 1
    260a:	01 15       	cp	r16, r1
    260c:	11 05       	cpc	r17, r1
    260e:	09 f0       	breq	.+2      	; 0x2612 <_Z13checkIncDec16iiih+0xa4>
    2610:	c0 e0       	ldi	r28, 0x00	; 0
    2612:	d0 e0       	ldi	r29, 0x00	; 0
			killEvents (event);
    2614:	8b 2d       	mov	r24, r11
    2616:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
//				skipPause = 1 ;
			if (event == EVT_KEY_BREAK(BTN_RE)) {
    261a:	8e e2       	ldi	r24, 0x2E	; 46
    261c:	b8 12       	cpse	r11, r24
    261e:	06 c0       	rjmp	.+12     	; 0x262c <_Z13checkIncDec16iiih+0xbe>
				RotaryState = ROTARY_MENU_UD;
    2620:	10 92 db 0d 	sts	0x0DDB, r1
    2624:	03 c0       	rjmp	.+6      	; 0x262c <_Z13checkIncDec16iiih+0xbe>
			}
			event = 0;
		} else {
			newval &= 1;
    2626:	c1 70       	andi	r28, 0x01	; 1
    2628:	dd 27       	eor	r29, r29
    262a:	01 c0       	rjmp	.+2      	; 0x262e <_Z13checkIncDec16iiih+0xc0>
			killEvents (event);
//				skipPause = 1 ;
			if (event == EVT_KEY_BREAK(BTN_RE)) {
				RotaryState = ROTARY_MENU_UD;
			}
			event = 0;
    262c:	b1 2c       	mov	r11, r1
		}
	}
#endif
	//change values based on P1
#ifndef NOPOTSCROLL
	newval -= P1values.p1valdiff;
    262e:	40 91 70 01 	lds	r20, 0x0170
    2632:	50 91 71 01 	lds	r21, 0x0171
    2636:	c4 1b       	sub	r28, r20
    2638:	d5 0b       	sbc	r29, r21
#endif
	if (RotaryState == ROTARY_VALUE) {
    263a:	80 91 db 0d 	lds	r24, 0x0DDB
    263e:	81 30       	cpi	r24, 0x01	; 1
    2640:	71 f4       	brne	.+28     	; 0x265e <_Z13checkIncDec16iiih+0xf0>
    2642:	40 91 ea 01 	lds	r20, 0x01EA
		newval += ( ( read_keys() & 2) == 0) ? 20 * Rotary.Rotary_diff : Rotary.Rotary_diff;
    2646:	b1 99       	sbic	0x16, 1	; 22
    2648:	05 c0       	rjmp	.+10     	; 0x2654 <_Z13checkIncDec16iiih+0xe6>
    264a:	84 e1       	ldi	r24, 0x14	; 20
    264c:	48 02       	muls	r20, r24
    264e:	a0 01       	movw	r20, r0
    2650:	11 24       	eor	r1, r1
    2652:	03 c0       	rjmp	.+6      	; 0x265a <_Z13checkIncDec16iiih+0xec>
    2654:	55 27       	eor	r21, r21
    2656:	47 fd       	sbrc	r20, 7
    2658:	50 95       	com	r21
    265a:	c4 0f       	add	r28, r20
    265c:	d5 1f       	adc	r29, r21
	}
	if (newval > i_max) {
    265e:	cc 16       	cp	r12, r28
    2660:	dd 06       	cpc	r13, r29
    2662:	44 f4       	brge	.+16     	; 0x2674 <_Z13checkIncDec16iiih+0x106>
		newval = i_max;
		killEvents (event);
    2664:	8b 2d       	mov	r24, r11
    2666:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
		audioDefevent (AU_KEYPAD_UP);
    266a:	83 e1       	ldi	r24, 0x13	; 19
    266c:	0e 94 74 34 	call	0x68e8	; 0x68e8 <_Z13audioDefeventh>
    2670:	e6 01       	movw	r28, r12
    2672:	0a c0       	rjmp	.+20     	; 0x2688 <_Z13checkIncDec16iiih+0x11a>
	} else if (newval < i_min) {
    2674:	ce 15       	cp	r28, r14
    2676:	df 05       	cpc	r29, r15
    2678:	3c f4       	brge	.+14     	; 0x2688 <_Z13checkIncDec16iiih+0x11a>
		newval = i_min;
		killEvents (event);
    267a:	8b 2d       	mov	r24, r11
    267c:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
		audioDefevent (AU_KEYPAD_DOWN);
    2680:	84 e1       	ldi	r24, 0x14	; 20
    2682:	0e 94 74 34 	call	0x68e8	; 0x68e8 <_Z13audioDefeventh>
    2686:	e7 01       	movw	r28, r14

	}
	if (newval != val) {
    2688:	c0 17       	cp	r28, r16
    268a:	d1 07       	cpc	r29, r17
    268c:	49 f1       	breq	.+82     	; 0x26e0 <_Z13checkIncDec16iiih+0x172>
		if ( menuPressed()) {
    268e:	b1 99       	sbic	0x16, 1	; 22
    2690:	03 c0       	rjmp	.+6      	; 0x2698 <_Z13checkIncDec16iiih+0x12a>
			LongMenuTimer = 255;
    2692:	8f ef       	ldi	r24, 0xFF	; 255
    2694:	80 93 6a 06 	sts	0x066A, r24
		}
		if (newval == 0) {
    2698:	20 97       	sbiw	r28, 0x00	; 0
    269a:	51 f4       	brne	.+20     	; 0x26b0 <_Z13checkIncDec16iiih+0x142>
//						if ( !skipPause )
//						{
			pauseEvents (event);
    269c:	8b 2d       	mov	r24, r11
    269e:	0e 94 53 2b 	call	0x56a6	; 0x56a6 <_Z11pauseEventsh>
//						}

			if (newval > val) {
    26a2:	17 ff       	sbrs	r17, 7
    26a4:	02 c0       	rjmp	.+4      	; 0x26aa <_Z13checkIncDec16iiih+0x13c>
				audioDefevent (AU_KEYPAD_UP);
    26a6:	83 e1       	ldi	r24, 0x13	; 19
    26a8:	01 c0       	rjmp	.+2      	; 0x26ac <_Z13checkIncDec16iiih+0x13e>
			} else {
				audioDefevent (AU_KEYPAD_DOWN);
    26aa:	84 e1       	ldi	r24, 0x14	; 20
    26ac:	0e 94 74 34 	call	0x68e8	; 0x68e8 <_Z13audioDefeventh>
			}

		}
		eeDirty (i_flags & (EE_GENERAL | EE_MODEL));
    26b0:	8a 2d       	mov	r24, r10
    26b2:	83 70       	andi	r24, 0x03	; 3
    26b4:	0e 94 4e 20 	call	0x409c	; 0x409c <_Z7eeDirtyh>
    26b8:	13 c0       	rjmp	.+38     	; 0x26e0 <_Z13checkIncDec16iiih+0x172>
		audioDefevent (AU_KEYPAD_DOWN);

		kother = kpl;
	}
	if ( (kother != (uint8_t) -1) && keyState ((EnumKeys) kother)) {
		newval = -val;
    26ba:	cc 27       	eor	r28, r28
    26bc:	dd 27       	eor	r29, r29
    26be:	c0 1b       	sub	r28, r16
    26c0:	d1 0b       	sbc	r29, r17
		killEvents (kmi);
    26c2:	85 e0       	ldi	r24, 0x05	; 5
    26c4:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
		killEvents (kpl);
    26c8:	84 e0       	ldi	r24, 0x04	; 4
    26ca:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
    26ce:	8d cf       	rjmp	.-230    	; 0x25ea <_Z13checkIncDec16iiih+0x7c>
		}

		audioDefevent (AU_KEYPAD_UP);

		kother = kmi;
	} else if (event == EVT_KEY_FIRST(kmi) || event == EVT_KEY_REPT(kmi)
    26d0:	95 34       	cpi	r25, 0x45	; 69
    26d2:	21 f4       	brne	.+8      	; 0x26dc <_Z13checkIncDec16iiih+0x16e>
    26d4:	7b cf       	rjmp	.-266    	; 0x25cc <_Z13checkIncDec16iiih+0x5e>
			|| (s_editMode && (event == EVT_KEY_FIRST(KEY_DOWN) || event == EVT_KEY_REPT(KEY_DOWN)))) {
		if ( ( read_keys() & 2) == 0) {
			newval -= StepSize;
		} else {
			newval -= 1;
    26d6:	e8 01       	movw	r28, r16
    26d8:	21 97       	sbiw	r28, 0x01	; 1
    26da:	7f cf       	rjmp	.-258    	; 0x25da <_Z13checkIncDec16iiih+0x6c>
		}

		audioDefevent (AU_KEYPAD_UP);

		kother = kmi;
	} else if (event == EVT_KEY_FIRST(kmi) || event == EVT_KEY_REPT(kmi)
    26dc:	e8 01       	movw	r28, r16
    26de:	85 cf       	rjmp	.-246    	; 0x25ea <_Z13checkIncDec16iiih+0x7c>
	}
//    else {
//        checkIncDec_Ret = false;
//    }
	return newval;
}
    26e0:	ce 01       	movw	r24, r28
    26e2:	df 91       	pop	r29
    26e4:	cf 91       	pop	r28
    26e6:	1f 91       	pop	r17
    26e8:	0f 91       	pop	r16
    26ea:	ff 90       	pop	r15
    26ec:	ef 90       	pop	r14
    26ee:	df 90       	pop	r13
    26f0:	cf 90       	pop	r12
    26f2:	bf 90       	pop	r11
    26f4:	af 90       	pop	r10
    26f6:	08 95       	ret

000026f8 <_Z11checkIncDecaaah>:

NOINLINE int8_t checkIncDec (int8_t i_val, int8_t i_min, int8_t i_max, uint8_t i_flags) {
	return checkIncDec16 (i_val, i_min, i_max, i_flags);
    26f8:	55 27       	eor	r21, r21
    26fa:	47 fd       	sbrc	r20, 7
    26fc:	50 95       	com	r21
    26fe:	77 27       	eor	r23, r23
    2700:	67 fd       	sbrc	r22, 7
    2702:	70 95       	com	r23
    2704:	99 27       	eor	r25, r25
    2706:	87 fd       	sbrc	r24, 7
    2708:	90 95       	com	r25
}
    270a:	31 cf       	rjmp	.-414    	; 0x256e <_Z13checkIncDec16iiih>

0000270c <_Z14checkIncDec_hmaaa>:

int8_t checkIncDec_hm (int8_t i_val, int8_t i_min, int8_t i_max) {
	return checkIncDec (i_val, i_min, i_max, EE_MODEL);
    270c:	22 e0       	ldi	r18, 0x02	; 2
    270e:	f4 cf       	rjmp	.-24     	; 0x26f8 <_Z11checkIncDecaaah>

00002710 <_Z15checkIncDec_hm0aa>:
}

int8_t checkIncDec_hm0 (int8_t i_val, int8_t i_max) {
    2710:	46 2f       	mov	r20, r22
	return checkIncDec (i_val, 0, i_max, EE_MODEL);
    2712:	22 e0       	ldi	r18, 0x02	; 2
    2714:	60 e0       	ldi	r22, 0x00	; 0
    2716:	f0 cf       	rjmp	.-32     	; 0x26f8 <_Z11checkIncDecaaah>

00002718 <_Z16checkIncDec_hmu0ih>:
}

int16_t checkIncDec_hmu0 (int16_t i_val, uint8_t i_max) {
	return checkIncDec16 (i_val, 0, i_max, EE_MODEL);
    2718:	46 2f       	mov	r20, r22
    271a:	50 e0       	ldi	r21, 0x00	; 0
    271c:	22 e0       	ldi	r18, 0x02	; 2
    271e:	60 e0       	ldi	r22, 0x00	; 0
    2720:	70 e0       	ldi	r23, 0x00	; 0
    2722:	25 cf       	rjmp	.-438    	; 0x256e <_Z13checkIncDec16iiih>

00002724 <_Z14checkIncDec_hgaaa>:
}

int8_t checkIncDec_hg (int8_t i_val, int8_t i_min, int8_t i_max) {
	return checkIncDec (i_val, i_min, i_max, EE_GENERAL);
    2724:	21 e0       	ldi	r18, 0x01	; 1
    2726:	e8 cf       	rjmp	.-48     	; 0x26f8 <_Z11checkIncDecaaah>

00002728 <_Z15checkIncDec_hg0aa>:
}

int8_t checkIncDec_hg0 (int8_t i_val, int8_t i_max) {
    2728:	46 2f       	mov	r20, r22
	return checkIncDec (i_val, 0, i_max, EE_GENERAL);
    272a:	21 e0       	ldi	r18, 0x01	; 1
    272c:	60 e0       	ldi	r22, 0x00	; 0
    272e:	e4 cf       	rjmp	.-56     	; 0x26f8 <_Z11checkIncDecaaah>

00002730 <_Z11lastPopMenuv>:
}

MenuFuncP lastPopMenu () {
	return g_menuStack[g_menuStackPtr + 1];
    2730:	e0 91 79 01 	lds	r30, 0x0179
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	ee 0f       	add	r30, r30
    2738:	ff 1f       	adc	r31, r31
    273a:	e4 58       	subi	r30, 0x84	; 132
    273c:	fe 4f       	sbci	r31, 0xFE	; 254
}
    273e:	80 81       	ld	r24, Z
    2740:	91 81       	ldd	r25, Z+1	; 0x01
    2742:	08 95       	ret

00002744 <_Z9chainMenuPFvhE>:
		alert (PSTR(STR_MSTACK_UFLOW));
	}
}

void chainMenu (MenuFuncP newMenu) {
	g_menuStack[g_menuStackPtr] = newMenu;
    2744:	e0 91 79 01 	lds	r30, 0x0179
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	ee 0f       	add	r30, r30
    274c:	ff 1f       	adc	r31, r31
    274e:	e6 58       	subi	r30, 0x86	; 134
    2750:	fe 4f       	sbci	r31, 0xFE	; 254
    2752:	91 83       	std	Z+1, r25	; 0x01
    2754:	80 83       	st	Z, r24
	EnterMenu = EVT_ENTRY;
    2756:	8f eb       	ldi	r24, 0xBF	; 191
    2758:	80 93 78 01 	sts	0x0178, r24
    275c:	08 95       	ret

0000275e <_Z12backlightKeyv>:
//  tptr->s_timerVal[1] = 0 ;
//  tptr->Timer2_running = 0 ;   // Stop and clear throttle started flag
//}

void backlightKey () {
	uint8_t a = g_eeGeneral.lightAutoOff;
    275e:	80 91 2a 06 	lds	r24, 0x062A
	uint16_t b = a * 250;
    2762:	2a ef       	ldi	r18, 0xFA	; 250
    2764:	82 9f       	mul	r24, r18
    2766:	c0 01       	movw	r24, r0
    2768:	11 24       	eor	r1, r1
	b <<= 1;				// b = a * 500, but less code
    276a:	88 0f       	add	r24, r24
    276c:	99 1f       	adc	r25, r25
	if (b > g_LightOffCounter) g_LightOffCounter = b;
    276e:	20 91 69 01 	lds	r18, 0x0169
    2772:	30 91 6a 01 	lds	r19, 0x016A
    2776:	28 17       	cp	r18, r24
    2778:	39 07       	cpc	r19, r25
    277a:	20 f4       	brcc	.+8      	; 0x2784 <_Z12backlightKeyv+0x26>
    277c:	90 93 6a 01 	sts	0x016A, r25
    2780:	80 93 69 01 	sts	0x0169, r24
    2784:	08 95       	ret

00002786 <_Z17putVoiceQueueLongj>:
}

void putVoiceQueueLong (uint16_t value) {
	struct t_voice *vptr;
	vptr = &Voice;
	FORCE_INDIRECT(vptr);
    2786:	e1 ea       	ldi	r30, 0xA1	; 161
    2788:	fb e0       	ldi	r31, 0x0B	; 11

	if (vptr->VoiceQueueCount < VOICE_Q_LENGTH) {
    278a:	37 a1       	ldd	r19, Z+39	; 0x27
    278c:	30 31       	cpi	r19, 0x10	; 16
    278e:	80 f4       	brcc	.+32     	; 0x27b0 <_Z17putVoiceQueueLongj+0x2a>
		vptr->VoiceQueue[vptr->VoiceQueueInIndex++] = value;
    2790:	20 a5       	ldd	r18, Z+40	; 0x28
    2792:	41 e0       	ldi	r20, 0x01	; 1
    2794:	42 0f       	add	r20, r18
    2796:	40 a7       	std	Z+40, r20	; 0x28
    2798:	df 01       	movw	r26, r30
    279a:	a2 0f       	add	r26, r18
    279c:	b1 1d       	adc	r27, r1
    279e:	a2 0f       	add	r26, r18
    27a0:	b1 1d       	adc	r27, r1
    27a2:	8d 93       	st	X+, r24
    27a4:	9c 93       	st	X, r25
		if (vptr->VoiceQueueInIndex > ( VOICE_Q_LENGTH - 1)) {
    27a6:	40 31       	cpi	r20, 0x10	; 16
    27a8:	08 f0       	brcs	.+2      	; 0x27ac <_Z17putVoiceQueueLongj+0x26>
			vptr->VoiceQueueInIndex = 0;
    27aa:	10 a6       	std	Z+40, r1	; 0x28
		}
		vptr->VoiceQueueCount += 1;
    27ac:	3f 5f       	subi	r19, 0xFF	; 255
    27ae:	37 a3       	std	Z+39, r19	; 0x27
    27b0:	08 95       	ret

000027b2 <_Z18putVoiceQueueUpperh>:

//static uint8_t v_ctr ;
//uint8_t v_first[8] ;

void putVoiceQueueUpper (uint8_t value) {
	putVoiceQueueLong (value + 260);
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	8c 5f       	subi	r24, 0xFC	; 252
    27b6:	9e 4f       	sbci	r25, 0xFE	; 254
    27b8:	e6 cf       	rjmp	.-52     	; 0x2786 <_Z17putVoiceQueueLongj>

000027ba <_Z13putVoiceQueueh>:
}

void putVoiceQueue (uint8_t value) {
	putVoiceQueueLong (value);
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	e4 cf       	rjmp	.-56     	; 0x2786 <_Z17putVoiceQueueLongj>

000027be <_Z9setVolumeh>:
}

void setVolume (uint8_t value) {
	CurrentVolume = value;
    27be:	80 93 ec 01 	sts	0x01EC, r24
	putVoiceQueueLong (value + 0xFFF0);
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	40 97       	sbiw	r24, 0x10	; 16
    27c6:	df cf       	rjmp	.-66     	; 0x2786 <_Z17putVoiceQueueLongj>

000027c8 <_ZN7t_voice13voice_processEv>:
		}
		vptr->VoiceQueueCount += 1;
	}
}

void t_voice::voice_process (void) {
    27c8:	fc 01       	movw	r30, r24
	if (g_eeGeneral.speakerMode & 2) {
    27ca:	90 91 31 06 	lds	r25, 0x0631
    27ce:	80 a1       	ldd	r24, Z+32	; 0x20
    27d0:	91 ff       	sbrs	r25, 1
    27d2:	74 c0       	rjmp	.+232    	; 0x28bc <_ZN7t_voice13voice_processEv+0xf4>
    27d4:	91 a1       	ldd	r25, Z+33	; 0x21
		if (Backlight) {
    27d6:	88 23       	and	r24, r24
    27d8:	11 f0       	breq	.+4      	; 0x27de <_ZN7t_voice13voice_processEv+0x16>
			VoiceLatch |= BACKLIGHT_BIT;
    27da:	94 60       	ori	r25, 0x04	; 4
    27dc:	01 c0       	rjmp	.+2      	; 0x27e0 <_ZN7t_voice13voice_processEv+0x18>
		} else {
			VoiceLatch &= ~BACKLIGHT_BIT;
    27de:	9b 7f       	andi	r25, 0xFB	; 251
    27e0:	91 a3       	std	Z+33, r25	; 0x21
		}

		if (VoiceState == V_IDLE) {
    27e2:	86 a1       	ldd	r24, Z+38	; 0x26
    27e4:	81 30       	cpi	r24, 0x01	; 1
    27e6:	59 f5       	brne	.+86     	; 0x283e <_ZN7t_voice13voice_processEv+0x76>
			PORTB |= (1 << OUT_B_LIGHT);				// Latch clock high
    27e8:	c7 9a       	sbi	0x18, 7	; 24
			if (VoiceQueueCount) {
    27ea:	37 a1       	ldd	r19, Z+39	; 0x27
    27ec:	21 a1       	ldd	r18, Z+33	; 0x21
    27ee:	33 23       	and	r19, r19
    27f0:	21 f1       	breq	.+72     	; 0x283a <_ZN7t_voice13voice_processEv+0x72>
				VoiceSerial = VoiceQueue[VoiceQueueOutIndex++];
    27f2:	81 a5       	ldd	r24, Z+41	; 0x29
    27f4:	41 e0       	ldi	r20, 0x01	; 1
    27f6:	48 0f       	add	r20, r24
    27f8:	41 a7       	std	Z+41, r20	; 0x29
    27fa:	df 01       	movw	r26, r30
    27fc:	a8 0f       	add	r26, r24
    27fe:	b1 1d       	adc	r27, r1
    2800:	a8 0f       	add	r26, r24
    2802:	b1 1d       	adc	r27, r1
    2804:	8d 91       	ld	r24, X+
    2806:	9c 91       	ld	r25, X
    2808:	95 a3       	std	Z+37, r25	; 0x25
    280a:	84 a3       	std	Z+36, r24	; 0x24
				if (VoiceQueueOutIndex > ( VOICE_Q_LENGTH - 1)) {
    280c:	40 31       	cpi	r20, 0x10	; 16
    280e:	08 f0       	brcs	.+2      	; 0x2812 <_ZN7t_voice13voice_processEv+0x4a>
					VoiceQueueOutIndex = 0;
    2810:	11 a6       	std	Z+41, r1	; 0x29
				}
				VoiceQueueCount -= 1;
    2812:	31 50       	subi	r19, 0x01	; 1
    2814:	37 a3       	std	Z+39, r19	; 0x27
//					VoiceShift = 0 ;
//					VoiceSerial += 260 ;
//				}
				VoiceTimer = 17;
//				if ( ( VoiceSerial & 0x00FF ) >= 0xF0 )
				if (VoiceSerial & 0x8000)	// Looking for Volume setting
    2816:	97 fd       	sbrc	r25, 7
    2818:	02 c0       	rjmp	.+4      	; 0x281e <_ZN7t_voice13voice_processEv+0x56>
//				if ( VoiceShift )
//				{
//					VoiceShift = 0 ;
//					VoiceSerial += 260 ;
//				}
				VoiceTimer = 17;
    281a:	31 e1       	ldi	r19, 0x11	; 17
    281c:	01 c0       	rjmp	.+2      	; 0x2820 <_ZN7t_voice13voice_processEv+0x58>
//					{
//						VoiceShift = 1 ;
//						return ;
//					}
//					VoiceSerial |= 0xFF00 ;
					VoiceTimer = 40;
    281e:	38 e2       	ldi	r19, 0x28	; 40
    2820:	33 a3       	std	Z+35, r19	; 0x23
				}
				VoiceLatch &= ~VOICE_CLOCK_BIT & ~VOICE_DATA_BIT;
    2822:	2c 7f       	andi	r18, 0xFC	; 252
				if (VoiceSerial & 0x8000) {
    2824:	97 fd       	sbrc	r25, 7
					VoiceLatch |= VOICE_DATA_BIT;
    2826:	22 60       	ori	r18, 0x02	; 2
    2828:	21 a3       	std	Z+33, r18	; 0x21
				}
				PORTA_LCD_DAT = VoiceLatch;			// Latch data set
    282a:	81 a1       	ldd	r24, Z+33	; 0x21
    282c:	8b bb       	out	0x1b, r24	; 27
				PORTB &= ~ (1 << OUT_B_LIGHT);			// Latch clock low
    282e:	c7 98       	cbi	0x18, 7	; 24
				VoiceCounter = 31;
    2830:	8f e1       	ldi	r24, 0x1F	; 31
    2832:	82 a3       	std	Z+34, r24	; 0x22
				VoiceState = V_CLOCKING;
    2834:	82 e0       	ldi	r24, 0x02	; 2
    2836:	86 a3       	std	Z+38, r24	; 0x26
    2838:	08 95       	ret
			} else {
				PORTA_LCD_DAT = VoiceLatch;			// Latch data set
    283a:	2b bb       	out	0x1b, r18	; 27
    283c:	48 c0       	rjmp	.+144    	; 0x28ce <_ZN7t_voice13voice_processEv+0x106>
				PORTB &= ~ (1 << OUT_B_LIGHT);			// Latch clock low
			}
		} else if (VoiceState == V_STARTUP) {
    283e:	81 11       	cpse	r24, r1
    2840:	0c c0       	rjmp	.+24     	; 0x285a <_ZN7t_voice13voice_processEv+0x92>
			PORTB |= (1 << OUT_B_LIGHT);				// Latch clock high
    2842:	c7 9a       	sbi	0x18, 7	; 24
			VoiceLatch |= VOICE_CLOCK_BIT | VOICE_DATA_BIT;
    2844:	81 a1       	ldd	r24, Z+33	; 0x21
    2846:	83 60       	ori	r24, 0x03	; 3
    2848:	81 a3       	std	Z+33, r24	; 0x21
			PORTA_LCD_DAT = VoiceLatch;			// Latch data set
    284a:	8b bb       	out	0x1b, r24	; 27
			if (g_blinkTmr10ms > 60)	// Give module 1.4 secs to initialise
    284c:	80 91 cf 0a 	lds	r24, 0x0ACF
    2850:	8d 33       	cpi	r24, 0x3D	; 61
    2852:	08 f4       	brcc	.+2      	; 0x2856 <_ZN7t_voice13voice_processEv+0x8e>
    2854:	3c c0       	rjmp	.+120    	; 0x28ce <_ZN7t_voice13voice_processEv+0x106>
					{
				VoiceState = V_WAIT_START_BUSY_OFF;
    2856:	86 e0       	ldi	r24, 0x06	; 6
    2858:	2f c0       	rjmp	.+94     	; 0x28b8 <_ZN7t_voice13voice_processEv+0xf0>
			}
			PORTB &= ~ (1 << OUT_B_LIGHT);			// Latch clock low
		} else if (VoiceState != V_CLOCKING) {
    285a:	82 30       	cpi	r24, 0x02	; 2
    285c:	09 f4       	brne	.+2      	; 0x2860 <_ZN7t_voice13voice_processEv+0x98>
    285e:	38 c0       	rjmp	.+112    	; 0x28d0 <_ZN7t_voice13voice_processEv+0x108>
			uint8_t busy;
			PORTA_LCD_DAT = VoiceLatch;			// Latch data set
    2860:	81 a1       	ldd	r24, Z+33	; 0x21
    2862:	8b bb       	out	0x1b, r24	; 27
			PORTB |= (1 << OUT_B_LIGHT);			// Drive high,pullup enabled
    2864:	c7 9a       	sbi	0x18, 7	; 24
			DDRB &= ~ (1 << OUT_B_LIGHT);				// Change to input
    2866:	bf 98       	cbi	0x17, 7	; 23
			asm(" rjmp 1f");
    2868:	00 c0       	rjmp	.+0      	; 0x286a <_ZN7t_voice13voice_processEv+0xa2>
			asm("1:");
			asm(" nop");
    286a:	00 00       	nop
			// delay to allow input to settle
			asm(" rjmp 1f");
    286c:	00 c0       	rjmp	.+0      	; 0x286e <_ZN7t_voice13voice_processEv+0xa6>
			asm("1:");
			busy = PINB & 0x80;
    286e:	86 b3       	in	r24, 0x16	; 22
    2870:	80 78       	andi	r24, 0x80	; 128
			DDRB |= (1 << OUT_B_LIGHT);				// Change to output
    2872:	bf 9a       	sbi	0x17, 7	; 23
			// The next bit guarantees the backlight output gets clocked out
			if (VoiceState == V_WAIT_BUSY_ON)			// check for busy processing here
    2874:	96 a1       	ldd	r25, Z+38	; 0x26
    2876:	93 30       	cpi	r25, 0x03	; 3
    2878:	49 f4       	brne	.+18     	; 0x288c <_ZN7t_voice13voice_processEv+0xc4>
			{
				if (busy == 0)								// Busy is active
    287a:	88 23       	and	r24, r24
    287c:	29 f0       	breq	.+10     	; 0x2888 <_ZN7t_voice13voice_processEv+0xc0>
						{
					VoiceState = V_WAIT_BUSY_OFF;
				} else {
					if (--VoiceTimer == 0) {
    287e:	83 a1       	ldd	r24, Z+35	; 0x23
    2880:	81 50       	subi	r24, 0x01	; 1
    2882:	83 a3       	std	Z+35, r24	; 0x23
    2884:	81 11       	cpse	r24, r1
    2886:	23 c0       	rjmp	.+70     	; 0x28ce <_ZN7t_voice13voice_processEv+0x106>
						VoiceState = V_WAIT_BUSY_OFF;
    2888:	84 e0       	ldi	r24, 0x04	; 4
    288a:	16 c0       	rjmp	.+44     	; 0x28b8 <_ZN7t_voice13voice_processEv+0xf0>
					}
				}
			} else if (VoiceState == V_WAIT_BUSY_OFF)			// check for busy processing here
    288c:	94 30       	cpi	r25, 0x04	; 4
    288e:	21 f4       	brne	.+8      	; 0x2898 <_ZN7t_voice13voice_processEv+0xd0>
			{
				if (busy)									// Busy is inactive
    2890:	88 23       	and	r24, r24
    2892:	e9 f0       	breq	.+58     	; 0x28ce <_ZN7t_voice13voice_processEv+0x106>
				{
					VoiceTimer = 3;
    2894:	83 e0       	ldi	r24, 0x03	; 3
    2896:	0e c0       	rjmp	.+28     	; 0x28b4 <_ZN7t_voice13voice_processEv+0xec>
					VoiceState = V_WAIT_BUSY_DELAY;
				}
			} else if (VoiceState == V_WAIT_BUSY_DELAY) {
    2898:	95 30       	cpi	r25, 0x05	; 5
    289a:	39 f4       	brne	.+14     	; 0x28aa <_ZN7t_voice13voice_processEv+0xe2>
				if (--VoiceTimer == 0) {
    289c:	83 a1       	ldd	r24, Z+35	; 0x23
    289e:	81 50       	subi	r24, 0x01	; 1
    28a0:	83 a3       	std	Z+35, r24	; 0x23
    28a2:	81 11       	cpse	r24, r1
    28a4:	14 c0       	rjmp	.+40     	; 0x28ce <_ZN7t_voice13voice_processEv+0x106>
					VoiceState = V_IDLE;
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	07 c0       	rjmp	.+14     	; 0x28b8 <_ZN7t_voice13voice_processEv+0xf0>
				}
			} else if (VoiceState == V_WAIT_START_BUSY_OFF)	// check for busy processing here
    28aa:	96 30       	cpi	r25, 0x06	; 6
    28ac:	81 f4       	brne	.+32     	; 0x28ce <_ZN7t_voice13voice_processEv+0x106>
			{
				if (busy)									// Busy is inactive
    28ae:	88 23       	and	r24, r24
    28b0:	71 f0       	breq	.+28     	; 0x28ce <_ZN7t_voice13voice_processEv+0x106>
				{
					VoiceTimer = 20;
    28b2:	84 e1       	ldi	r24, 0x14	; 20
    28b4:	83 a3       	std	Z+35, r24	; 0x23
					VoiceState = V_WAIT_BUSY_DELAY;
    28b6:	85 e0       	ldi	r24, 0x05	; 5
    28b8:	86 a3       	std	Z+38, r24	; 0x26
    28ba:	09 c0       	rjmp	.+18     	; 0x28ce <_ZN7t_voice13voice_processEv+0x106>
			}
			PORTB &= ~ (1 << OUT_B_LIGHT);			// Latch clock low
		}
	} else			// no voice, put backlight control out
	{
		if (Backlight ^ g_eeGeneral.blightinv) {
    28bc:	90 91 2e 06 	lds	r25, 0x062E
    28c0:	96 fb       	bst	r25, 6
    28c2:	99 27       	eor	r25, r25
    28c4:	90 f9       	bld	r25, 0
    28c6:	89 17       	cp	r24, r25
    28c8:	11 f0       	breq	.+4      	; 0x28ce <_ZN7t_voice13voice_processEv+0x106>
			PORTB |= (1 << OUT_B_LIGHT);			// Drive high,pullup enabled
    28ca:	c7 9a       	sbi	0x18, 7	; 24
    28cc:	08 95       	ret
		} else {
			PORTB &= ~ (1 << OUT_B_LIGHT);			// Latch clock low
    28ce:	c7 98       	cbi	0x18, 7	; 24
    28d0:	08 95       	ret

000028d2 <_Z10pollRotaryv>:
	}
}

void pollRotary () {
	// Rotary Encoder polling
	PORTA = 0;			// No pullups
    28d2:	1b ba       	out	0x1b, r1	; 27
	DDRA = 0x1F;		// Top 3 bits input
    28d4:	8f e1       	ldi	r24, 0x1F	; 31
    28d6:	8a bb       	out	0x1a, r24	; 26
	asm(" rjmp 1f");
    28d8:	00 c0       	rjmp	.+0      	; 0x28da <_Z10pollRotaryv+0x8>
	asm("1:");
//	asm(" nop") ;
//	asm(" nop") ;
	uint8_t rotary;
	rotary = PINA;
    28da:	99 b3       	in	r25, 0x19	; 25
	DDRA = 0xFF;		// Back to all outputs
    28dc:	8f ef       	ldi	r24, 0xFF	; 255
    28de:	8a bb       	out	0x1a, r24	; 26
	rotary &= 0xE0;
//	RotEncoder = rotary ;

	struct t_rotary *protary = &Rotary;
	FORCE_INDIRECT(protary);
    28e0:	e2 ee       	ldi	r30, 0xE2	; 226
    28e2:	f1 e0       	ldi	r31, 0x01	; 1

	if (protary->TezRotary != 0) protary->RotEncoder = 0x20; // switch is on
    28e4:	87 81       	ldd	r24, Z+7	; 0x07
    28e6:	88 23       	and	r24, r24
    28e8:	11 f0       	breq	.+4      	; 0x28ee <_Z10pollRotaryv+0x1c>
    28ea:	80 e2       	ldi	r24, 0x20	; 32
    28ec:	02 c0       	rjmp	.+4      	; 0x28f2 <_Z10pollRotaryv+0x20>
//	asm(" nop") ;
//	asm(" nop") ;
	uint8_t rotary;
	rotary = PINA;
	DDRA = 0xFF;		// Back to all outputs
	rotary &= 0xE0;
    28ee:	89 2f       	mov	r24, r25
    28f0:	80 7e       	andi	r24, 0xE0	; 224

	struct t_rotary *protary = &Rotary;
	FORCE_INDIRECT(protary);

	if (protary->TezRotary != 0) protary->RotEncoder = 0x20; // switch is on
	else protary->RotEncoder = rotary; // just read the lcd pin
    28f2:	84 83       	std	Z+4, r24	; 0x04

	rotary &= 0xDF;
    28f4:	29 2f       	mov	r18, r25
    28f6:	20 7c       	andi	r18, 0xC0	; 192
	if (rotary != protary->RotPosition) {
    28f8:	80 81       	ld	r24, Z
    28fa:	28 17       	cp	r18, r24
    28fc:	59 f0       	breq	.+22     	; 0x2914 <_Z10pollRotaryv+0x42>
		uint8_t x;
		x = protary->RotPosition & 0x40;
    28fe:	80 74       	andi	r24, 0x40	; 64
		x <<= 1;
    2900:	88 0f       	add	r24, r24
		x ^= rotary & 0x80;
    2902:	90 78       	andi	r25, 0x80	; 128
    2904:	31 81       	ldd	r19, Z+1	; 0x01
		if (x) {
    2906:	89 17       	cp	r24, r25
    2908:	11 f0       	breq	.+4      	; 0x290e <_Z10pollRotaryv+0x3c>
			protary->RotCount -= 1;
    290a:	31 50       	subi	r19, 0x01	; 1
    290c:	01 c0       	rjmp	.+2      	; 0x2910 <_Z10pollRotaryv+0x3e>
		} else {
			protary->RotCount += 1;
    290e:	3f 5f       	subi	r19, 0xFF	; 255
    2910:	31 83       	std	Z+1, r19	; 0x01
		}
		protary->RotPosition = rotary;
    2912:	20 83       	st	Z, r18
	}
	if (protary->TrotCount != protary->LastTrotCount) {
    2914:	82 81       	ldd	r24, Z+2	; 0x02
    2916:	93 81       	ldd	r25, Z+3	; 0x03
    2918:	89 17       	cp	r24, r25
    291a:	11 f0       	breq	.+4      	; 0x2920 <_Z10pollRotaryv+0x4e>
		protary->RotCount = protary->LastTrotCount = protary->TrotCount;
    291c:	83 83       	std	Z+3, r24	; 0x03
    291e:	81 83       	std	Z+1, r24	; 0x01
    2920:	08 95       	ret

00002922 <_Z15calcStickScrollh>:

uint8_t calcStickScroll (uint8_t index) {
	uint8_t direction;
	int8_t value;

	if ( (g_eeGeneral.stickMode & 1) == 0) {
    2922:	90 91 26 06 	lds	r25, 0x0626
    2926:	90 fd       	sbrc	r25, 0
    2928:	02 c0       	rjmp	.+4      	; 0x292e <_Z15calcStickScrollh+0xc>
		index ^= 3;
    292a:	93 e0       	ldi	r25, 0x03	; 3
    292c:	89 27       	eor	r24, r25
	}

#ifdef FIX_MODE
	value = phyStick[index];
    292e:	e8 2f       	mov	r30, r24
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	eb 52       	subi	r30, 0x2B	; 43
    2934:	f2 4f       	sbci	r31, 0xF2	; 242
    2936:	e0 81       	ld	r30, Z
	value /= 8;
    2938:	e7 fd       	sbrc	r30, 7
    293a:	e9 5f       	subi	r30, 0xF9	; 249
    293c:	e5 95       	asr	r30
    293e:	e5 95       	asr	r30
    2940:	e5 95       	asr	r30
#else
	value = (calibratedStick[index] * 2) >> 8; // same as / 128
#endif

	direction = value > 0 ? 0x80 : 0;
    2942:	1e 16       	cp	r1, r30
    2944:	24 f0       	brlt	.+8      	; 0x294e <_Z15calcStickScrollh+0x2c>
	if (value < 0) {
    2946:	ee 23       	and	r30, r30
    2948:	21 f0       	breq	.+8      	; 0x2952 <_Z15calcStickScrollh+0x30>
		value = -value;			// (abs)
    294a:	e1 95       	neg	r30
    294c:	02 c0       	rjmp	.+4      	; 0x2952 <_Z15calcStickScrollh+0x30>
	value /= 8;
#else
	value = (calibratedStick[index] * 2) >> 8; // same as / 128
#endif

	direction = value > 0 ? 0x80 : 0;
    294e:	80 e8       	ldi	r24, 0x80	; 128
    2950:	01 c0       	rjmp	.+2      	; 0x2954 <_Z15calcStickScrollh+0x32>
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	e8 30       	cpi	r30, 0x08	; 8
    2956:	08 f0       	brcs	.+2      	; 0x295a <_Z15calcStickScrollh+0x38>
    2958:	e7 e0       	ldi	r30, 0x07	; 7
	}
	uint8_t temp = value;	// Makes the compiler save 4 bytes flash
	if (temp > 7) {
		temp = 7;
	}
	value = pgm_read_byte(rate + temp);
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	ea 57       	subi	r30, 0x7A	; 122
    295e:	fd 4f       	sbci	r31, 0xFD	; 253
    2960:	e4 91       	lpm	r30, Z
	if (value) {
    2962:	ee 23       	and	r30, r30
    2964:	19 f0       	breq	.+6      	; 0x296c <_Z15calcStickScrollh+0x4a>
		StickScrollTimer = STICK_SCROLL_TIMEOUT;		// Seconds
    2966:	99 e0       	ldi	r25, 0x09	; 9
    2968:	90 93 84 01 	sts	0x0184, r25
	}
	return value | direction;
}
    296c:	8e 2b       	or	r24, r30
    296e:	08 95       	ret

00002970 <_Z5anaInh>:
//#define STARTADCONV (ADCSRA  = (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2) | (1<<ADSC) | (1 << ADIE))
int16_t BandGap = 240;

#ifndef SIMU
uint16_t s_anaFilt[8];
uint16_t anaIn (uint8_t chan) {
    2970:	48 2f       	mov	r20, r24
	//                     ana-in:   3 1 2 0 4 5 6 7
	//static prog_char APM crossAna[]={4,2,3,1,5,6,7,0}; // wenn schon Tabelle, dann muss sich auch lohnen

//    const static prog_char APM crossAna[]={3,1,2,0,4,5,6,7};
	uint8_t pchan = chan;
	if (chan == 3) {
    2972:	83 30       	cpi	r24, 0x03	; 3
    2974:	21 f0       	breq	.+8      	; 0x297e <_Z5anaInh+0xe>
		pchan = 0;
	} else {
		if (chan == 0) {
    2976:	88 23       	and	r24, r24
    2978:	21 f0       	breq	.+8      	; 0x2982 <_Z5anaInh+0x12>
    297a:	e8 2f       	mov	r30, r24
    297c:	03 c0       	rjmp	.+6      	; 0x2984 <_Z5anaInh+0x14>
	//static prog_char APM crossAna[]={4,2,3,1,5,6,7,0}; // wenn schon Tabelle, dann muss sich auch lohnen

//    const static prog_char APM crossAna[]={3,1,2,0,4,5,6,7};
	uint8_t pchan = chan;
	if (chan == 3) {
		pchan = 0;
    297e:	e0 e0       	ldi	r30, 0x00	; 0
    2980:	01 c0       	rjmp	.+2      	; 0x2984 <_Z5anaInh+0x14>
	} else {
		if (chan == 0) {
			pchan = 3;
    2982:	e3 e0       	ldi	r30, 0x03	; 3
		}
	}
//    volatile uint16_t *p = &s_anaFilt[chan];
	//  AutoLock autoLock;
//    return  *p;
	uint16_t temp = s_anaFilt[pchan];
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	ee 0f       	add	r30, r30
    2988:	ff 1f       	adc	r31, r31
    298a:	e9 5b       	subi	r30, 0xB9	; 185
    298c:	fe 4f       	sbci	r31, 0xFE	; 254
    298e:	80 81       	ld	r24, Z
    2990:	91 81       	ldd	r25, Z+1	; 0x01
	if (chan < 4)	// A stick
    2992:	44 30       	cpi	r20, 0x04	; 4
    2994:	80 f4       	brcc	.+32     	; 0x29b6 <_Z5anaInh+0x46>
			{
		if (g_eeGeneral.stickReverse & (1 << chan)) {
    2996:	20 91 43 06 	lds	r18, 0x0643
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	02 c0       	rjmp	.+4      	; 0x29a2 <_Z5anaInh+0x32>
    299e:	35 95       	asr	r19
    29a0:	27 95       	ror	r18
    29a2:	4a 95       	dec	r20
    29a4:	e2 f7       	brpl	.-8      	; 0x299e <_Z5anaInh+0x2e>
    29a6:	20 ff       	sbrs	r18, 0
    29a8:	06 c0       	rjmp	.+12     	; 0x29b6 <_Z5anaInh+0x46>
			temp = 2048 - temp;
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	38 e0       	ldi	r19, 0x08	; 8
    29ae:	a9 01       	movw	r20, r18
    29b0:	48 1b       	sub	r20, r24
    29b2:	59 0b       	sbc	r21, r25
    29b4:	ca 01       	movw	r24, r20
		}
	}
	return temp;
}
    29b6:	08 95       	ret

000029b8 <_Z14stickMoveValuev>:
		tmr10ms = x;
		Voice.voice_process ();
	}
}

uint16_t stickMoveValue () {
    29b8:	ff 92       	push	r15
    29ba:	0f 93       	push	r16
    29bc:	1f 93       	push	r17
    29be:	cf 93       	push	r28
    29c0:	df 93       	push	r29
#define INAC_DEVISOR 256   // Issue 206 - bypass splash screen with stick movement
	uint16_t sum = 0;
	for (uint8_t i = 0; i < 4; i++)
    29c2:	f1 2c       	mov	r15, r1
	}
}

uint16_t stickMoveValue () {
#define INAC_DEVISOR 256   // Issue 206 - bypass splash screen with stick movement
	uint16_t sum = 0;
    29c4:	c0 e0       	ldi	r28, 0x00	; 0
    29c6:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
		sum += anaIn (i) / INAC_DEVISOR;
    29c8:	8f 2d       	mov	r24, r15
    29ca:	d2 df       	rcall	.-92     	; 0x2970 <_Z5anaInh>
    29cc:	09 2f       	mov	r16, r25
    29ce:	10 e0       	ldi	r17, 0x00	; 0
    29d0:	c0 0f       	add	r28, r16
    29d2:	d1 1f       	adc	r29, r17
}

uint16_t stickMoveValue () {
#define INAC_DEVISOR 256   // Issue 206 - bypass splash screen with stick movement
	uint16_t sum = 0;
	for (uint8_t i = 0; i < 4; i++)
    29d4:	f3 94       	inc	r15
    29d6:	84 e0       	ldi	r24, 0x04	; 4
    29d8:	f8 12       	cpse	r15, r24
    29da:	f6 cf       	rjmp	.-20     	; 0x29c8 <_Z14stickMoveValuev+0x10>
		sum += anaIn (i) / INAC_DEVISOR;
	return sum;
}
    29dc:	ce 01       	movw	r24, r28
    29de:	df 91       	pop	r29
    29e0:	cf 91       	pop	r28
    29e2:	1f 91       	pop	r17
    29e4:	0f 91       	pop	r16
    29e6:	ff 90       	pop	r15
    29e8:	08 95       	ret

000029ea <_Z6tanaInh>:
	lcd_puts_Pleft (6 * FH, PSTR(STR_PRESS_KEY_SKIP));
//		lcdSetContrast() ;
}

int16_t tanaIn (uint8_t chan) {
	int16_t v = anaIn (chan);
    29ea:	c2 df       	rcall	.-124    	; 0x2970 <_Z5anaInh>
	return (g_eeGeneral.throttleReversed) ? -v : v;
    29ec:	20 91 28 06 	lds	r18, 0x0628
    29f0:	20 ff       	sbrs	r18, 0
    29f2:	03 c0       	rjmp	.+6      	; 0x29fa <_Z6tanaInh+0x10>
    29f4:	91 95       	neg	r25
    29f6:	81 95       	neg	r24
    29f8:	91 09       	sbc	r25, r1
}
    29fa:	08 95       	ret

000029fc <_Z11getADC_osmpv>:
 sss_ana[chan] = (sss_ana[chan] + ss_ana[chan]) >> 1;
 ss_ana[chan] = (ss_ana[chan] + s_ana[chan]) >> 1;
 s_ana[chan] = (ADC + s_ana[chan]) >> 1;
 */

void getADC_osmp () {
    29fc:	e7 e4       	ldi	r30, 0x47	; 71
    29fe:	f1 e0       	ldi	r31, 0x01	; 1
	//  uint16_t temp_ana[8] = {0};
	uint16_t temp_ana;
	//	uint8_t thro_rev_chan = g_eeGeneral.throttleReversed ? THR_STICK : 10 ;  // 10 means don't reverse
	for (uint8_t adc_input = 0; adc_input < 8; adc_input++) {
    2a00:	40 e0       	ldi	r20, 0x00	; 0
//        temp_ana = 0 ;
//        for (uint8_t i=0; i<2;i++) {  // Going from 10bits to 11 bits.  Addition = n.  Loop 2 times
		ADMUX = adc_input | ADC_VREF_TYPE;
    2a02:	84 2f       	mov	r24, r20
    2a04:	80 64       	ori	r24, 0x40	; 64
    2a06:	87 b9       	out	0x07, r24	; 7
		asm("1:");
		asm(" rjmp 1f");
		asm("1:");
#endif

		ADCSRA |= 0x40;
    2a08:	36 9a       	sbi	0x06, 6	; 6
		// Wait for the AD conversion to complete
		while (ADCSRA & 0x40)
    2a0a:	36 99       	sbic	0x06, 6	; 6
    2a0c:	fe cf       	rjmp	.-4      	; 0x2a0a <_Z11getADC_osmpv+0xe>
			;
//            ADCSRA|=0x10;
		//      temp_ana[adc_input] += ADCW;
		temp_ana = ADC;
    2a0e:	24 b1       	in	r18, 0x04	; 4
    2a10:	35 b1       	in	r19, 0x05	; 5
		ADCSRA |= 0x40;
    2a12:	36 9a       	sbi	0x06, 6	; 6
		// Wait for the AD conversion to complete
		while (ADCSRA & 0x40)
    2a14:	36 99       	sbic	0x06, 6	; 6
    2a16:	fe cf       	rjmp	.-4      	; 0x2a14 <_Z11getADC_osmpv+0x18>
//        temp_ana /= 2; // divide by 2^n to normalize result.
		//    if(adc_input == thro_rev_chan)
		//        temp_ana = 2048 -temp_ana;

		//		s_anaFilt[adc_input] = temp_ana[adc_input] / 2; // divide by 2^n to normalize result.
		temp_ana += ADC;
    2a18:	84 b1       	in	r24, 0x04	; 4
    2a1a:	95 b1       	in	r25, 0x05	; 5
    2a1c:	82 0f       	add	r24, r18
    2a1e:	93 1f       	adc	r25, r19
#endif
		s_anaFilt[adc_input] = temp_ana;
    2a20:	81 93       	st	Z+, r24
    2a22:	91 93       	st	Z+, r25

void getADC_osmp () {
	//  uint16_t temp_ana[8] = {0};
	uint16_t temp_ana;
	//	uint8_t thro_rev_chan = g_eeGeneral.throttleReversed ? THR_STICK : 10 ;  // 10 means don't reverse
	for (uint8_t adc_input = 0; adc_input < 8; adc_input++) {
    2a24:	4f 5f       	subi	r20, 0xFF	; 255
    2a26:	48 30       	cpi	r20, 0x08	; 8
    2a28:	61 f7       	brne	.-40     	; 0x2a02 <_Z11getADC_osmpv+0x6>
#endif
		s_anaFilt[adc_input] = temp_ana;
		//    if(IS_THROTTLE(adc_input) && g_eeGeneral.throttleReversed)
		//        s_anaFilt[adc_input] = 2048 - s_anaFilt[adc_input];
	}
}
    2a2a:	08 95       	ret

00002a2c <__vector_16>:

volatile uint8_t g_tmr16KHz;

#ifndef SIMU
ISR(TIMER0_OVF_vect, ISR_NOBLOCK) //continuous timer 16ms (16MHz/1024)
{
    2a2c:	78 94       	sei
    2a2e:	1f 92       	push	r1
    2a30:	0f 92       	push	r0
    2a32:	0f b6       	in	r0, 0x3f	; 63
    2a34:	0f 92       	push	r0
    2a36:	11 24       	eor	r1, r1
    2a38:	8f 93       	push	r24
	g_tmr16KHz++;
    2a3a:	80 91 46 01 	lds	r24, 0x0146
    2a3e:	8f 5f       	subi	r24, 0xFF	; 255
    2a40:	80 93 46 01 	sts	0x0146, r24
}
    2a44:	8f 91       	pop	r24
    2a46:	0f 90       	pop	r0
    2a48:	0f be       	out	0x3f, r0	; 63
    2a4a:	0f 90       	pop	r0
    2a4c:	1f 90       	pop	r1
    2a4e:	18 95       	reti

00002a50 <__vector_10>:
	}
}

// Clocks every 128 uS
ISR(TIMER2_OVF_vect, ISR_NOBLOCK) //10ms timer
{
    2a50:	78 94       	sei
    2a52:	1f 92       	push	r1
    2a54:	0f 92       	push	r0
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	0f 92       	push	r0
    2a5a:	11 24       	eor	r1, r1
    2a5c:	2f 93       	push	r18
    2a5e:	8f 93       	push	r24
    2a60:	9f 93       	push	r25
    2a62:	ef 93       	push	r30
    2a64:	ff 93       	push	r31
	cli();
    2a66:	f8 94       	cli
#ifdef CPUM2561
	TIMSK2 &= ~ (1<<TOIE2); //stop reentrance
#else
	TIMSK &= ~ (1 << TOIE2); //stop reentrance
    2a68:	87 b7       	in	r24, 0x37	; 55
    2a6a:	8f 7b       	andi	r24, 0xBF	; 191
    2a6c:	87 bf       	out	0x37, r24	; 55
#endif
	sei();
    2a6e:	78 94       	sei

	AUDIO_DRIVER();  // the tone generator
    2a70:	20 91 a1 01 	lds	r18, 0x01A1



inline void driver() {
#ifndef SIMU
  if (toneTimeLeft > 0) {	
    2a74:	80 91 a3 01 	lds	r24, 0x01A3
    2a78:	90 91 31 06 	lds	r25, 0x0631
    2a7c:	88 23       	and	r24, r24
    2a7e:	59 f0       	breq	.+22     	; 0x2a96 <__vector_10+0x46>
					switch ((g_eeGeneral.speakerMode & 1)){					 
    2a80:	90 ff       	sbrs	r25, 0
    2a82:	07 c0       	rjmp	.+14     	; 0x2a92 <__vector_10+0x42>
							            PORTE |=  (1<<OUT_E_BUZZER); // speaker output 'high'
							        } 	 
							        break;	 
							  case 1:
									    static uint8_t toneCounter;
									    toneCounter += toneFreq;
    2a84:	80 91 e2 0f 	lds	r24, 0x0FE2
    2a88:	82 0f       	add	r24, r18
    2a8a:	80 93 e2 0f 	sts	0x0FE2, r24
									    if ((toneCounter & 0x80) == 0x80) {
    2a8e:	87 ff       	sbrs	r24, 7
    2a90:	02 c0       	rjmp	.+4      	; 0x2a96 <__vector_10+0x46>
									      PORTE |= (1 << OUT_E_BUZZER);
    2a92:	1b 9a       	sbi	0x03, 3	; 3
    2a94:	01 c0       	rjmp	.+2      	; 0x2a98 <__vector_10+0x48>
									      PORTE &= ~(1 << OUT_E_BUZZER);
									    }							  	 
											break;						  	 
					}		 
	} else {
			PORTE &=  ~(1<<OUT_E_BUZZER); // speaker output 'low'
    2a96:	1b 98       	cbi	0x03, 3	; 3
	// Now handle the Voice output
	// Check for LcdLocked (in interrupt), and voice_enabled
	if (g_eeGeneral.speakerMode & 2) {
    2a98:	91 ff       	sbrs	r25, 1
    2a9a:	2a c0       	rjmp	.+84     	; 0x2af0 <__vector_10+0xa0>
		if (LcdLock == 0)		// LCD not in use
    2a9c:	80 91 cb 06 	lds	r24, 0x06CB
    2aa0:	81 11       	cpse	r24, r1
    2aa2:	26 c0       	rjmp	.+76     	; 0x2af0 <__vector_10+0xa0>
				{
			struct t_voice *vptr;
			vptr = &Voice;
			FORCE_INDIRECT(vptr);
    2aa4:	e1 ea       	ldi	r30, 0xA1	; 161
    2aa6:	fb e0       	ldi	r31, 0x0B	; 11
			if (vptr->VoiceState == V_CLOCKING) {
    2aa8:	86 a1       	ldd	r24, Z+38	; 0x26
    2aaa:	82 30       	cpi	r24, 0x02	; 2
    2aac:	09 f5       	brne	.+66     	; 0x2af0 <__vector_10+0xa0>
				if (vptr->VoiceTimer) {
    2aae:	83 a1       	ldd	r24, Z+35	; 0x23
    2ab0:	88 23       	and	r24, r24
    2ab2:	11 f0       	breq	.+4      	; 0x2ab8 <__vector_10+0x68>
					vptr->VoiceTimer -= 1;
    2ab4:	81 50       	subi	r24, 0x01	; 1
    2ab6:	1b c0       	rjmp	.+54     	; 0x2aee <__vector_10+0x9e>
				} else {
					uint8_t tVoiceLatch = vptr->VoiceLatch;
    2ab8:	21 a1       	ldd	r18, Z+33	; 0x21

					PORTB |= (1 << OUT_B_LIGHT);			// Latch clock high
    2aba:	c7 9a       	sbi	0x18, 7	; 24
					if ( (vptr->VoiceCounter & 1) == 0) {
    2abc:	82 a1       	ldd	r24, Z+34	; 0x22
    2abe:	80 fd       	sbrc	r24, 0
    2ac0:	09 c0       	rjmp	.+18     	; 0x2ad4 <__vector_10+0x84>
						tVoiceLatch &= ~VOICE_DATA_BIT;
    2ac2:	2d 7f       	andi	r18, 0xFD	; 253
						if (vptr->VoiceSerial & 0x4000) {
    2ac4:	84 a1       	ldd	r24, Z+36	; 0x24
    2ac6:	95 a1       	ldd	r25, Z+37	; 0x25
    2ac8:	96 fd       	sbrc	r25, 6
							tVoiceLatch |= VOICE_DATA_BIT;
    2aca:	22 60       	ori	r18, 0x02	; 2
						}
						vptr->VoiceSerial <<= 1;
    2acc:	88 0f       	add	r24, r24
    2ace:	99 1f       	adc	r25, r25
    2ad0:	95 a3       	std	Z+37, r25	; 0x25
    2ad2:	84 a3       	std	Z+36, r24	; 0x24
					}
					tVoiceLatch ^= VOICE_CLOCK_BIT;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	82 27       	eor	r24, r18
					vptr->VoiceLatch = PORTA_LCD_DAT = tVoiceLatch;	// Latch data set
    2ad8:	8b bb       	out	0x1b, r24	; 27
    2ada:	81 a3       	std	Z+33, r24	; 0x21
					PORTB &= ~ (1 << OUT_B_LIGHT);			// Latch clock low
    2adc:	c7 98       	cbi	0x18, 7	; 24
					if (--vptr->VoiceCounter == 0) {
    2ade:	82 a1       	ldd	r24, Z+34	; 0x22
    2ae0:	81 50       	subi	r24, 0x01	; 1
    2ae2:	82 a3       	std	Z+34, r24	; 0x22
    2ae4:	81 11       	cpse	r24, r1
    2ae6:	04 c0       	rjmp	.+8      	; 0x2af0 <__vector_10+0xa0>
						vptr->VoiceState = V_WAIT_BUSY_ON;
    2ae8:	83 e0       	ldi	r24, 0x03	; 3
    2aea:	86 a3       	std	Z+38, r24	; 0x26
						vptr->VoiceTimer = 5;		// 50 mS
    2aec:	85 e0       	ldi	r24, 0x05	; 5
    2aee:	83 a3       	std	Z+35, r24	; 0x23
					}
				}
			}
		}
	}
	cli();
    2af0:	f8 94       	cli
#ifdef CPUM2561
	TIMSK2 |= (1<<TOIE2);
#else
	TIMSK |= (1 << TOIE2);
    2af2:	87 b7       	in	r24, 0x37	; 55
    2af4:	80 64       	ori	r24, 0x40	; 64
    2af6:	87 bf       	out	0x37, r24	; 55
#endif
	sei();
    2af8:	78 94       	sei
}
    2afa:	ff 91       	pop	r31
    2afc:	ef 91       	pop	r30
    2afe:	9f 91       	pop	r25
    2b00:	8f 91       	pop	r24
    2b02:	2f 91       	pop	r18
    2b04:	0f 90       	pop	r0
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	0f 90       	pop	r0
    2b0a:	1f 90       	pop	r1
    2b0c:	18 95       	reti

00002b0e <__vector_15>:
#ifdef CPUM2561
ISR(TIMER0_COMPA_vect, ISR_NOBLOCK) //10ms timer
#else
ISR(TIMER0_COMP_vect, ISR_NOBLOCK) //10ms timer
#endif
{
    2b0e:	78 94       	sei
    2b10:	1f 92       	push	r1
    2b12:	0f 92       	push	r0
    2b14:	0f b6       	in	r0, 0x3f	; 63
    2b16:	0f 92       	push	r0
    2b18:	11 24       	eor	r1, r1
    2b1a:	2f 93       	push	r18
    2b1c:	3f 93       	push	r19
    2b1e:	4f 93       	push	r20
    2b20:	5f 93       	push	r21
    2b22:	6f 93       	push	r22
    2b24:	7f 93       	push	r23
    2b26:	8f 93       	push	r24
    2b28:	9f 93       	push	r25
    2b2a:	af 93       	push	r26
    2b2c:	bf 93       	push	r27
    2b2e:	ef 93       	push	r30
    2b30:	ff 93       	push	r31
#ifdef CPUM2561
	OCR0A += 156;			// Interrupt every 128 uS
#else
	OCR0 += 156;			// Interrupt every 128 uS
    2b32:	81 b7       	in	r24, 0x31	; 49
    2b34:	84 56       	subi	r24, 0x64	; 100
    2b36:	81 bf       	out	0x31, r24	; 49
//  static uint8_t cnt10ms = 77; // execute 10ms code once every 78 ISRs
//  if (cnt10ms-- == 0) { // BEGIN { ... every 10ms ... }
//    // Begin 10ms event
//    cnt10ms = 77;

	AUDIO_HEARTBEAT();  // the queue processing
    2b38:	8f e9       	ldi	r24, 0x9F	; 159
    2b3a:	91 e0       	ldi	r25, 0x01	; 1
    2b3c:	0e 94 ba 32 	call	0x6574	; 0x6574 <_ZN10audioQueue9heartbeatEv>

	per10ms ();
    2b40:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <_Z7per10msv>
#ifdef FRSKY
	check_frsky();
#endif

#ifdef ELERES
	Check_ELERES ();
    2b44:	0e 94 e6 6d 	call	0xdbcc	; 0xdbcc <_Z12Check_ELERESv>
#endif
	heartbeat |= HEART_TIMER10ms
    2b48:	80 91 0d 0b 	lds	r24, 0x0B0D
    2b4c:	82 60       	ori	r24, 0x02	; 2
    2b4e:	80 93 0d 0b 	sts	0x0B0D, r24
	;
	// See if time for alarm checking
	struct t_alarmControl *pac = &AlarmControl;
	FORCE_INDIRECT(pac);
    2b52:	e2 e0       	ldi	r30, 0x02	; 2
    2b54:	f1 e0       	ldi	r31, 0x01	; 1

	if (--pac->AlarmTimer == 0) {
    2b56:	80 81       	ld	r24, Z
    2b58:	81 50       	subi	r24, 0x01	; 1
    2b5a:	11 f0       	breq	.+4      	; 0x2b60 <__vector_15+0x52>
    2b5c:	80 83       	st	Z, r24
    2b5e:	04 c0       	rjmp	.+8      	; 0x2b68 <__vector_15+0x5a>
		pac->AlarmTimer = 100;		// Restart timer
    2b60:	84 e6       	ldi	r24, 0x64	; 100
    2b62:	80 83       	st	Z, r24
//			pac->AlarmCheckFlag += 1 ;	// Flag time to check alarms
		pac->OneSecFlag = 1;
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	81 83       	std	Z+1, r24	; 0x01
	}
	if (--pac->VoiceFtimer == 0) {
    2b68:	82 81       	ldd	r24, Z+2	; 0x02
    2b6a:	81 50       	subi	r24, 0x01	; 1
    2b6c:	11 f0       	breq	.+4      	; 0x2b72 <__vector_15+0x64>
    2b6e:	82 83       	std	Z+2, r24	; 0x02
    2b70:	04 c0       	rjmp	.+8      	; 0x2b7a <__vector_15+0x6c>
		pac->VoiceFtimer = 10;		// Restart timer
    2b72:	8a e0       	ldi	r24, 0x0A	; 10
    2b74:	82 83       	std	Z+2, r24	; 0x02
		pac->VoiceCheckFlag = 1;	// Flag time to check alarms
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	83 83       	std	Z+3, r24	; 0x03
	}

//  } // end 10ms event

}
    2b7a:	ff 91       	pop	r31
    2b7c:	ef 91       	pop	r30
    2b7e:	bf 91       	pop	r27
    2b80:	af 91       	pop	r26
    2b82:	9f 91       	pop	r25
    2b84:	8f 91       	pop	r24
    2b86:	7f 91       	pop	r23
    2b88:	6f 91       	pop	r22
    2b8a:	5f 91       	pop	r21
    2b8c:	4f 91       	pop	r20
    2b8e:	3f 91       	pop	r19
    2b90:	2f 91       	pop	r18
    2b92:	0f 90       	pop	r0
    2b94:	0f be       	out	0x3f, r0	; 63
    2b96:	0f 90       	pop	r0
    2b98:	1f 90       	pop	r1
    2b9a:	18 95       	reti

00002b9c <__vector_25>:
// equating to one count every half millisecond. (2 counts = 1ms). Control channel
// count delta values thus can range from about 1600 to 4400 counts (800us to 2200us),
// corresponding to a PPM signal in the range 0.8ms to 2.2ms (1.5ms at center).
// (The timer is free-running and is thus not reset to zero at each capture interval.)
ISR(TIMER3_CAPT_vect, ISR_NOBLOCK) //capture ppm in 16MHz / 8 = 2MHz
{
    2b9c:	78 94       	sei
    2b9e:	1f 92       	push	r1
    2ba0:	0f 92       	push	r0
    2ba2:	0f b6       	in	r0, 0x3f	; 63
    2ba4:	0f 92       	push	r0
    2ba6:	11 24       	eor	r1, r1
    2ba8:	2f 93       	push	r18
    2baa:	3f 93       	push	r19
    2bac:	4f 93       	push	r20
    2bae:	5f 93       	push	r21
    2bb0:	6f 93       	push	r22
    2bb2:	7f 93       	push	r23
    2bb4:	8f 93       	push	r24
    2bb6:	9f 93       	push	r25
    2bb8:	af 93       	push	r26
    2bba:	bf 93       	push	r27
    2bbc:	ef 93       	push	r30
    2bbe:	ff 93       	push	r31
	uint16_t capture = ICR3;
    2bc0:	20 91 80 00 	lds	r18, 0x0080
    2bc4:	30 91 81 00 	lds	r19, 0x0081
	cli();
    2bc8:	f8 94       	cli
#ifdef CPUM2561
	TIMSK3 &= ~(1<<ICIE3); //stop reentrance
#else
	ETIMSK &= ~ (1 << TICIE3); //stop reentrance
    2bca:	80 91 7d 00 	lds	r24, 0x007D
    2bce:	8f 7d       	andi	r24, 0xDF	; 223
    2bd0:	80 93 7d 00 	sts	0x007D, r24
#endif
	sei();
    2bd4:	78 94       	sei

	static uint16_t lastCapt;
	uint16_t val = (capture - lastCapt) / 2;
    2bd6:	80 91 63 06 	lds	r24, 0x0663
    2bda:	90 91 64 06 	lds	r25, 0x0664
    2bde:	a9 01       	movw	r20, r18
    2be0:	48 1b       	sub	r20, r24
    2be2:	59 0b       	sbc	r21, r25
    2be4:	ca 01       	movw	r24, r20
    2be6:	96 95       	lsr	r25
    2be8:	87 95       	ror	r24
	lastCapt = capture;
    2bea:	30 93 64 06 	sts	0x0664, r19
    2bee:	20 93 63 06 	sts	0x0663, r18

	// We prcoess g_ppmInsright here to make servo movement as smooth as possible
	//    while under trainee control
	if (val > 4000 && val < 16000) // G: Prioritize reset pulse. (Needed when less than 8 incoming pulses)
    2bf2:	9c 01       	movw	r18, r24
    2bf4:	21 5a       	subi	r18, 0xA1	; 161
    2bf6:	3f 40       	sbci	r19, 0x0F	; 15
    2bf8:	2f 3d       	cpi	r18, 0xDF	; 223
    2bfa:	3e 42       	sbci	r19, 0x2E	; 46
    2bfc:	20 f4       	brcc	.+8      	; 0x2c06 <__vector_25+0x6a>
	ppmInState = 1; // triggered
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	80 93 57 01 	sts	0x0157, r24
    2c04:	2c c0       	rjmp	.+88     	; 0x2c5e <__vector_25+0xc2>
	else {
		if (ppmInState && ppmInState <= 8) {
    2c06:	e0 91 57 01 	lds	r30, 0x0157
    2c0a:	2f ef       	ldi	r18, 0xFF	; 255
    2c0c:	2e 0f       	add	r18, r30
    2c0e:	28 30       	cpi	r18, 0x08	; 8
    2c10:	30 f5       	brcc	.+76     	; 0x2c5e <__vector_25+0xc2>
			if (val > 800 && val < 2200) {
    2c12:	9c 01       	movw	r18, r24
    2c14:	21 52       	subi	r18, 0x21	; 33
    2c16:	33 40       	sbci	r19, 0x03	; 3
    2c18:	27 37       	cpi	r18, 0x77	; 119
    2c1a:	35 40       	sbci	r19, 0x05	; 5
    2c1c:	f0 f4       	brcc	.+60     	; 0x2c5a <__vector_25+0xbe>
				ppmInValid = 100;
    2c1e:	24 e6       	ldi	r18, 0x64	; 100
    2c20:	20 93 eb 01 	sts	0x01EB, r18
				g_ppmIns[ppmInState++ - 1] = (int16_t) (val - 1500)
    2c24:	21 e0       	ldi	r18, 0x01	; 1
    2c26:	2e 0f       	add	r18, r30
    2c28:	20 93 57 01 	sts	0x0157, r18
    2c2c:	f0 e0       	ldi	r31, 0x00	; 0
						* (uint8_t) (g_eeGeneral.PPM_Multiplier + 10) / 10; //+-500 != 512, but close enough.
    2c2e:	ee 0f       	add	r30, r30
    2c30:	ff 1f       	adc	r31, r31
    2c32:	ea 5a       	subi	r30, 0xAA	; 170
    2c34:	fe 4f       	sbci	r31, 0xFE	; 254
	ppmInState = 1; // triggered
	else {
		if (ppmInState && ppmInState <= 8) {
			if (val > 800 && val < 2200) {
				ppmInValid = 100;
				g_ppmIns[ppmInState++ - 1] = (int16_t) (val - 1500)
    2c36:	9c 01       	movw	r18, r24
    2c38:	2c 5d       	subi	r18, 0xDC	; 220
    2c3a:	35 40       	sbci	r19, 0x05	; 5
						* (uint8_t) (g_eeGeneral.PPM_Multiplier + 10) / 10; //+-500 != 512, but close enough.
    2c3c:	40 91 2c 06 	lds	r20, 0x062C
    2c40:	46 5f       	subi	r20, 0xF6	; 246
    2c42:	42 9f       	mul	r20, r18
    2c44:	c0 01       	movw	r24, r0
    2c46:	43 9f       	mul	r20, r19
    2c48:	90 0d       	add	r25, r0
    2c4a:	11 24       	eor	r1, r1
    2c4c:	6a e0       	ldi	r22, 0x0A	; 10
    2c4e:	70 e0       	ldi	r23, 0x00	; 0
    2c50:	0e 94 ea 71 	call	0xe3d4	; 0xe3d4 <__divmodhi4>
    2c54:	71 83       	std	Z+1, r23	; 0x01
    2c56:	60 83       	st	Z, r22
    2c58:	02 c0       	rjmp	.+4      	; 0x2c5e <__vector_25+0xc2>

			} else {
				ppmInState = 0; // not triggered
    2c5a:	10 92 57 01 	sts	0x0157, r1
			}
		}
	}

	cli();
    2c5e:	f8 94       	cli
#ifdef CPUM2561
	TIMSK3 |= (1<<ICIE3);
#else
	ETIMSK |= (1 << TICIE3);
    2c60:	80 91 7d 00 	lds	r24, 0x007D
    2c64:	80 62       	ori	r24, 0x20	; 32
    2c66:	80 93 7d 00 	sts	0x007D, r24
#endif
	sei();
    2c6a:	78 94       	sei
}
    2c6c:	ff 91       	pop	r31
    2c6e:	ef 91       	pop	r30
    2c70:	bf 91       	pop	r27
    2c72:	af 91       	pop	r26
    2c74:	9f 91       	pop	r25
    2c76:	8f 91       	pop	r24
    2c78:	7f 91       	pop	r23
    2c7a:	6f 91       	pop	r22
    2c7c:	5f 91       	pop	r21
    2c7e:	4f 91       	pop	r20
    2c80:	3f 91       	pop	r19
    2c82:	2f 91       	pop	r18
    2c84:	0f 90       	pop	r0
    2c86:	0f be       	out	0x3f, r0	; 63
    2c88:	0f 90       	pop	r0
    2c8a:	1f 90       	pop	r1
    2c8c:	18 95       	reti

00002c8e <_Z7isAgvarh>:
		mainSequence ();
	}
}

int8_t isAgvar (uint8_t value) {
	if (value >= 62) {
    2c8e:	92 ec       	ldi	r25, 0xC2	; 194
    2c90:	98 0f       	add	r25, r24
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	97 30       	cpi	r25, 0x07	; 7
    2c96:	08 f0       	brcs	.+2      	; 0x2c9a <_Z7isAgvarh+0xc>
    2c98:	80 e0       	ldi	r24, 0x00	; 0
		if (value <= 68) {
			return 1;
		}
	}
	return 0;
}
    2c9a:	08 95       	ret

00002c9c <_Z18doVoiceAlarmSourceP12t_voiceAlarm>:

#ifdef VOICE_ALARMS

void doVoiceAlarmSource (VoiceAlarmData *pvad) {
	if (pvad->source) {
    2c9c:	fc 01       	movw	r30, r24
    2c9e:	80 81       	ld	r24, Z
    2ca0:	88 23       	and	r24, r24
    2ca2:	59 f0       	breq	.+22     	; 0x2cba <_Z18doVoiceAlarmSourceP12t_voiceAlarm+0x1e>
		// SORT OTHER values here
		if (pvad->source >= NUM_XCHNRAW) {
    2ca4:	84 32       	cpi	r24, 0x24	; 36
    2ca6:	18 f0       	brcs	.+6      	; 0x2cae <_Z18doVoiceAlarmSourceP12t_voiceAlarm+0x12>
			voice_telem_item (pvad->source - NUM_XCHNRAW - 1);
    2ca8:	85 52       	subi	r24, 0x25	; 37
    2caa:	0c 94 51 37 	jmp	0x6ea2	; 0x6ea2 <_Z16voice_telem_itemh>
		} else {
			if (pvad->source) {
				int16_t value;
				value = getValue (pvad->source - 1);
    2cae:	81 50       	subi	r24, 0x01	; 1
    2cb0:	0c db       	rcall	.-2536   	; 0x22ca <_Z8getValueh>
				voice_numeric (value, 0, 0);
    2cb2:	40 e0       	ldi	r20, 0x00	; 0
    2cb4:	60 e0       	ldi	r22, 0x00	; 0
    2cb6:	0c 94 86 34 	jmp	0x690c	; 0x690c <_Z13voice_numericihh>
    2cba:	08 95       	ret

00002cbc <_Z14calc1000toRESXi>:
}
#endif

int16_t calc1000toRESX (int16_t x)  // improve calc time by Pat MacKenzie
		{
	int16_t y = x >> 5;
    2cbc:	9c 01       	movw	r18, r24
    2cbe:	55 e0       	ldi	r21, 0x05	; 5
    2cc0:	35 95       	asr	r19
    2cc2:	27 95       	ror	r18
    2cc4:	5a 95       	dec	r21
    2cc6:	e1 f7       	brne	.-8      	; 0x2cc0 <_Z14calc1000toRESXi+0x4>
	x += y;
    2cc8:	28 0f       	add	r18, r24
    2cca:	39 1f       	adc	r19, r25
	y = y >> 2;
    2ccc:	ac 01       	movw	r20, r24
    2cce:	44 0f       	add	r20, r20
    2cd0:	45 2f       	mov	r20, r21
    2cd2:	44 1f       	adc	r20, r20
    2cd4:	55 0b       	sbc	r21, r21
	x -= y;
    2cd6:	24 1b       	sub	r18, r20
    2cd8:	35 0b       	sbc	r19, r21
	return x + (y >> 2);
    2cda:	89 2f       	mov	r24, r25
    2cdc:	99 0f       	add	r25, r25
    2cde:	99 0b       	sbc	r25, r25
    2ce0:	85 95       	asr	r24
	//  return x + x/32 - x/128 + x/512;
}
    2ce2:	82 0f       	add	r24, r18
    2ce4:	93 1f       	adc	r25, r19
    2ce6:	08 95       	ret

00002ce8 <_Z3REGaaa>:
	return REG (x, -100, 100);
}

int8_t REG (int8_t x, int8_t min, int8_t max) {
	int8_t result = x;
	if (x >= 126 || x <= -126) {
    2ce8:	9d e7       	ldi	r25, 0x7D	; 125
    2cea:	98 0f       	add	r25, r24
    2cec:	9b 3f       	cpi	r25, 0xFB	; 251
    2cee:	88 f0       	brcs	.+34     	; 0x2d12 <_Z3REGaaa+0x2a>
		x = (uint8_t) x - 126;
    2cf0:	8e 57       	subi	r24, 0x7E	; 126
		result = g_model.gvars[x].gvar;
    2cf2:	e8 2f       	mov	r30, r24
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	ee 0f       	add	r30, r30
    2cf8:	ff 1f       	adc	r31, r31
    2cfa:	e8 52       	subi	r30, 0x28	; 40
    2cfc:	fb 4f       	sbci	r31, 0xFB	; 251
    2cfe:	80 81       	ld	r24, Z
		if (result < min) {
    2d00:	86 17       	cp	r24, r22
    2d02:	1c f4       	brge	.+6      	; 0x2d0a <_Z3REGaaa+0x22>
			g_model.gvars[x].gvar = result = min;
    2d04:	60 83       	st	Z, r22
    2d06:	86 2f       	mov	r24, r22
    2d08:	08 95       	ret
//      eeDirty( EE_MODEL | EE_TRIM ) ;
		} else if (result > max) {
    2d0a:	48 17       	cp	r20, r24
    2d0c:	14 f4       	brge	.+4      	; 0x2d12 <_Z3REGaaa+0x2a>
			g_model.gvars[x].gvar = result = max;
    2d0e:	40 83       	st	Z, r20
    2d10:	84 2f       	mov	r24, r20
//      eeDirty( EE_MODEL | EE_TRIM ) ;
		}
	}
	return result;
}
    2d12:	08 95       	ret

00002d14 <_Z10REG100_100a>:
	//  return x + x/32 - x/128 + x/512;
}

#if GVARS
int8_t REG100_100 (int8_t x) {
	return REG (x, -100, 100);
    2d14:	44 e6       	ldi	r20, 0x64	; 100
    2d16:	6c e9       	ldi	r22, 0x9C	; 156
    2d18:	e7 cf       	rjmp	.-50     	; 0x2ce8 <_Z3REGaaa>

00002d1a <_Z16IS_EXPO_THROTTLEh>:
	}
	return result;
}
#endif

uint8_t IS_EXPO_THROTTLE (uint8_t x) {
    2d1a:	98 2f       	mov	r25, r24
	if (g_model.thrExpo) {
    2d1c:	80 91 32 02 	lds	r24, 0x0232
    2d20:	84 ff       	sbrs	r24, 4
    2d22:	03 c0       	rjmp	.+6      	; 0x2d2a <_Z16IS_EXPO_THROTTLEh+0x10>
		return IS_THROTTLE(x);
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	92 30       	cpi	r25, 0x02	; 2
    2d28:	09 f0       	breq	.+2      	; 0x2d2c <_Z16IS_EXPO_THROTTLEh+0x12>
	}
	return 0;
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
}
    2d2c:	08 95       	ret

00002d2e <_Z13calc100toRESXa>:
	return (((y) == x) && (x<4));
}
#endif

int16_t calc100toRESX (int8_t x) {
	return ( (x * 41) >> 2) - x / 64;
    2d2e:	49 e2       	ldi	r20, 0x29	; 41
    2d30:	84 02       	muls	r24, r20
    2d32:	90 01       	movw	r18, r0
    2d34:	11 24       	eor	r1, r1
    2d36:	35 95       	asr	r19
    2d38:	27 95       	ror	r18
    2d3a:	35 95       	asr	r19
    2d3c:	27 95       	ror	r18
    2d3e:	87 fd       	sbrc	r24, 7
    2d40:	81 5c       	subi	r24, 0xC1	; 193
    2d42:	86 fb       	bst	r24, 6
    2d44:	88 0f       	add	r24, r24
    2d46:	88 0b       	sbc	r24, r24
    2d48:	80 f9       	bld	r24, 0
}
    2d4a:	a9 01       	movw	r20, r18
    2d4c:	48 1b       	sub	r20, r24
    2d4e:	51 09       	sbc	r21, r1
    2d50:	87 fd       	sbrc	r24, 7
    2d52:	53 95       	inc	r21
    2d54:	ca 01       	movw	r24, r20
    2d56:	08 95       	ret

00002d58 <_Z9getSwitchabh>:
		return get_telemetry_value (i - CHOUT_BASE - NUM_CHNOUT);
	}
	return 0;
}
//-------------------------------------------------------------------------------
bool getSwitch (int8_t swtch, bool nc, uint8_t level) {
    2d58:	4f 92       	push	r4
    2d5a:	5f 92       	push	r5
    2d5c:	6f 92       	push	r6
    2d5e:	7f 92       	push	r7
    2d60:	8f 92       	push	r8
    2d62:	9f 92       	push	r9
    2d64:	af 92       	push	r10
    2d66:	bf 92       	push	r11
    2d68:	cf 92       	push	r12
    2d6a:	df 92       	push	r13
    2d6c:	ef 92       	push	r14
    2d6e:	ff 92       	push	r15
    2d70:	0f 93       	push	r16
    2d72:	1f 93       	push	r17
    2d74:	cf 93       	push	r28
    2d76:	df 93       	push	r29
    2d78:	78 2e       	mov	r7, r24
    2d7a:	64 2e       	mov	r6, r20
	bool ret_value;
	uint8_t cs_index;

	switch (swtch) {
    2d7c:	88 23       	and	r24, r24
    2d7e:	09 f4       	brne	.+2      	; 0x2d82 <_Z9getSwitchabh+0x2a>
    2d80:	c5 c0       	rjmp	.+394    	; 0x2f0c <_Z9getSwitchabh+0x1b4>
    2d82:	86 e1       	ldi	r24, 0x16	; 22
    2d84:	78 16       	cp	r7, r24
    2d86:	21 f0       	breq	.+8      	; 0x2d90 <_Z9getSwitchabh+0x38>
    2d88:	9a ee       	ldi	r25, 0xEA	; 234
    2d8a:	79 12       	cpse	r7, r25
    2d8c:	03 c0       	rjmp	.+6      	; 0x2d94 <_Z9getSwitchabh+0x3c>
    2d8e:	c0 c0       	rjmp	.+384    	; 0x2f10 <_Z9getSwitchabh+0x1b8>
		case 0:
			return nc;
		case MAX_DRSWITCH:
			return true;
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	c2 c0       	rjmp	.+388    	; 0x2f18 <_Z9getSwitchabh+0x1c0>
		case -MAX_DRSWITCH:
			return false;
	}

	if (swtch > MAX_DRSWITCH) {
    2d94:	86 e1       	ldi	r24, 0x16	; 22
    2d96:	87 15       	cp	r24, r7
    2d98:	0c f4       	brge	.+2      	; 0x2d9c <_Z9getSwitchabh+0x44>
    2d9a:	ba c0       	rjmp	.+372    	; 0x2f10 <_Z9getSwitchabh+0x1b8>
	}

	uint8_t dir = swtch > 0;
	uint8_t aswtch = swtch;
	if (swtch < 0) {
		aswtch = -swtch;
    2d9c:	87 2d       	mov	r24, r7
    2d9e:	87 fd       	sbrc	r24, 7
    2da0:	81 95       	neg	r24
	}

#if defined(CPUM128) || defined(CPUM2561)
	if(aswtch<(MAX_DRSWITCH-NUM_CSW-EXTRA_CSW))
#else
	if (aswtch < (MAX_DRSWITCH - NUM_CSW))
    2da2:	8a 30       	cpi	r24, 0x0A	; 10
    2da4:	40 f4       	brcc	.+16     	; 0x2db6 <_Z9getSwitchabh+0x5e>
#endif
			{
		aswtch = keyState ((EnumKeys) (SW_BASE + aswtch - 1));
    2da6:	82 5f       	subi	r24, 0xF2	; 242
    2da8:	0e 94 14 2b 	call	0x5628	; 0x5628 <_Z8keyState8EnumKeys>
		return !dir ? (!aswtch) : aswtch;
    2dac:	17 14       	cp	r1, r7
    2dae:	0c f4       	brge	.+2      	; 0x2db2 <_Z9getSwitchabh+0x5a>
    2db0:	b3 c0       	rjmp	.+358    	; 0x2f18 <_Z9getSwitchabh+0x1c0>
    2db2:	91 e0       	ldi	r25, 0x01	; 1
    2db4:	1b c0       	rjmp	.+54     	; 0x2dec <_Z9getSwitchabh+0x94>
	//custom switch, Issue 78 use putsChnRaw input -> 1..4 -> sticks,  5..8 pots MAX,FULL - disregard
	//ppm
#if defined(CPUM128) || defined(CPUM2561)
	cs_index = aswtch-(MAX_DRSWITCH-NUM_CSW-EXTRA_CSW);
#else
	cs_index = aswtch - (MAX_DRSWITCH - NUM_CSW);
    2db6:	8a 50       	subi	r24, 0x0A	; 10
		}
#endif
		return swtch>0 ? ret_value : !ret_value;
	}
#endif
	CSwData *cs = &g_model.customSw[cs_index];
    2db8:	e8 2e       	mov	r14, r24
    2dba:	f1 2c       	mov	r15, r1
    2dbc:	67 01       	movw	r12, r14
    2dbe:	cc 0c       	add	r12, r12
    2dc0:	dd 1c       	adc	r13, r13
    2dc2:	e6 01       	movw	r28, r12
    2dc4:	ce 0d       	add	r28, r14
    2dc6:	df 1d       	adc	r29, r15
    2dc8:	c9 58       	subi	r28, 0x89	; 137
    2dca:	db 4f       	sbci	r29, 0xFB	; 251

	if (!cs->func) return false;
    2dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dce:	8f 70       	andi	r24, 0x0F	; 15
    2dd0:	09 f4       	brne	.+2      	; 0x2dd4 <_Z9getSwitchabh+0x7c>
    2dd2:	9e c0       	rjmp	.+316    	; 0x2f10 <_Z9getSwitchabh+0x1b8>

	if (level > 4) {
    2dd4:	94 e0       	ldi	r25, 0x04	; 4
    2dd6:	94 17       	cp	r25, r20
    2dd8:	58 f4       	brcc	.+22     	; 0x2df0 <_Z9getSwitchabh+0x98>
		ret_value = Last_switch[cs_index] & 1;
    2dda:	f7 01       	movw	r30, r14
    2ddc:	ec 5a       	subi	r30, 0xAC	; 172
    2dde:	f9 4f       	sbci	r31, 0xF9	; 249
    2de0:	90 81       	ld	r25, Z
    2de2:	91 70       	andi	r25, 0x01	; 1
		return swtch > 0 ? ret_value : !ret_value;
    2de4:	17 14       	cp	r1, r7
    2de6:	0c f4       	brge	.+2      	; 0x2dea <_Z9getSwitchabh+0x92>
    2de8:	8f c0       	rjmp	.+286    	; 0x2f08 <_Z9getSwitchabh+0x1b0>
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	89 27       	eor	r24, r25
    2dee:	94 c0       	rjmp	.+296    	; 0x2f18 <_Z9getSwitchabh+0x1c0>
	}

	int8_t a = cs->v1;
    2df0:	48 80       	ld	r4, Y
	int8_t b = cs->v2;
    2df2:	59 80       	ldd	r5, Y+1	; 0x01
	int16_t x = 0;
	int16_t y = 0;
	uint8_t valid = 1;

	// init values only if needed
	uint8_t s = CS_STATE (cs->func);
    2df4:	86 d9       	rcall	.-3316   	; 0x2102 <_Z8CS_STATEh>

	if (s == CS_VOFS) {
    2df6:	81 11       	cpse	r24, r1
    2df8:	07 c0       	rjmp	.+14     	; 0x2e08 <_Z9getSwitchabh+0xb0>
		x = getValue (cs->v1 - 1);
    2dfa:	88 81       	ld	r24, Y
    2dfc:	81 50       	subi	r24, 0x01	; 1
    2dfe:	65 da       	rcall	.-2870   	; 0x22ca <_Z8getValueh>
    2e00:	8c 01       	movw	r16, r24
			uint8_t idx = cs->v1 - CHOUT_BASE - NUM_CHNOUT - 1;
			y = convertTelemConstant(idx, cs->v2);
			valid = telemItemValid(idx);
		} else
#endif
		y = calc100toRESX (cs->v2);
    2e02:	89 81       	ldd	r24, Y+1	; 0x01
    2e04:	94 df       	rcall	.-216    	; 0x2d2e <_Z13calc100toRESXa>
    2e06:	0e c0       	rjmp	.+28     	; 0x2e24 <_Z9getSwitchabh+0xcc>

	} else if (s == CS_VCOMP) {
    2e08:	82 30       	cpi	r24, 0x02	; 2
    2e0a:	41 f4       	brne	.+16     	; 0x2e1c <_Z9getSwitchabh+0xc4>

		x = getValue (cs->v1 - 1);
    2e0c:	88 81       	ld	r24, Y
    2e0e:	81 50       	subi	r24, 0x01	; 1
    2e10:	5c da       	rcall	.-2888   	; 0x22ca <_Z8getValueh>
    2e12:	8c 01       	movw	r16, r24
		y = getValue (cs->v2 - 1);
    2e14:	89 81       	ldd	r24, Y+1	; 0x01
    2e16:	81 50       	subi	r24, 0x01	; 1
    2e18:	58 da       	rcall	.-2896   	; 0x22ca <_Z8getValueh>
    2e1a:	04 c0       	rjmp	.+8      	; 0x2e24 <_Z9getSwitchabh+0xcc>
	}

	int8_t a = cs->v1;
	int8_t b = cs->v2;
	int16_t x = 0;
	int16_t y = 0;
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
		return swtch > 0 ? ret_value : !ret_value;
	}

	int8_t a = cs->v1;
	int8_t b = cs->v2;
	int16_t x = 0;
    2e20:	00 e0       	ldi	r16, 0x00	; 0
    2e22:	10 e0       	ldi	r17, 0x00	; 0

		x = getValue (cs->v1 - 1);
		y = getValue (cs->v2 - 1);
	}

	switch ((uint8_t) cs->func) {
    2e24:	2a 81       	ldd	r18, Y+2	; 0x02
    2e26:	2f 70       	andi	r18, 0x0F	; 15
    2e28:	82 2e       	mov	r8, r18
    2e2a:	91 2c       	mov	r9, r1
    2e2c:	f4 01       	movw	r30, r8
    2e2e:	31 97       	sbiw	r30, 0x01	; 1
    2e30:	ee 30       	cpi	r30, 0x0E	; 14
    2e32:	f1 05       	cpc	r31, r1
    2e34:	08 f0       	brcs	.+2      	; 0x2e38 <_Z9getSwitchabh+0xe0>
    2e36:	6e c0       	rjmp	.+220    	; 0x2f14 <_Z9getSwitchabh+0x1bc>
    2e38:	ea 5b       	subi	r30, 0xBA	; 186
    2e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3c:	0c 94 3b 72 	jmp	0xe476	; 0xe476 <__tablejump2__>
			break;
		case (CS_VNEG ):
			ret_value = (x < y);
			break;
		case (CS_APOS ): {
			ret_value = (abs(x) > y);
    2e40:	17 ff       	sbrs	r17, 7
    2e42:	35 c0       	rjmp	.+106    	; 0x2eae <_Z9getSwitchabh+0x156>
    2e44:	11 95       	neg	r17
    2e46:	01 95       	neg	r16
    2e48:	11 09       	sbc	r17, r1
    2e4a:	31 c0       	rjmp	.+98     	; 0x2eae <_Z9getSwitchabh+0x156>
		}
			//      return swtch>0 ? (abs(x)>y) : !(abs(x)>y);
			break;
		case (CS_ANEG ): {
			ret_value = (abs(x) < y);
    2e4c:	17 ff       	sbrs	r17, 7
    2e4e:	33 c0       	rjmp	.+102    	; 0x2eb6 <_Z9getSwitchabh+0x15e>
    2e50:	11 95       	neg	r17
    2e52:	01 95       	neg	r16
    2e54:	11 09       	sbc	r17, r1
    2e56:	2f c0       	rjmp	.+94     	; 0x2eb6 <_Z9getSwitchabh+0x15e>
			//      return (getSwitch(a,0,level+1) ^ getSwitch(b,0,level+1));
			//      break;
		case (CS_AND ):
		case (CS_OR ):
		case (CS_XOR ): {
			bool res1 = getSwitch (a, 0, level + 1);
    2e58:	01 e0       	ldi	r16, 0x01	; 1
    2e5a:	06 0d       	add	r16, r6
    2e5c:	40 2f       	mov	r20, r16
    2e5e:	60 e0       	ldi	r22, 0x00	; 0
    2e60:	84 2d       	mov	r24, r4
    2e62:	7a df       	rcall	.-268    	; 0x2d58 <_Z9getSwitchabh>
    2e64:	18 2f       	mov	r17, r24
			bool res2 = getSwitch (b, 0, level + 1);
    2e66:	40 2f       	mov	r20, r16
    2e68:	60 e0       	ldi	r22, 0x00	; 0
    2e6a:	85 2d       	mov	r24, r5
    2e6c:	75 df       	rcall	.-278    	; 0x2d58 <_Z9getSwitchabh>
			if (cs->func == CS_AND) {
    2e6e:	2a 81       	ldd	r18, Y+2	; 0x02
    2e70:	2f 70       	andi	r18, 0x0F	; 15
    2e72:	25 30       	cpi	r18, 0x05	; 5
    2e74:	61 f4       	brne	.+24     	; 0x2e8e <_Z9getSwitchabh+0x136>
				ret_value = res1 && res2;
    2e76:	11 23       	and	r17, r17
    2e78:	09 f4       	brne	.+2      	; 0x2e7c <_Z9getSwitchabh+0x124>
    2e7a:	4c c0       	rjmp	.+152    	; 0x2f14 <_Z9getSwitchabh+0x1bc>
    2e7c:	88 23       	and	r24, r24
    2e7e:	09 f4       	brne	.+2      	; 0x2e82 <_Z9getSwitchabh+0x12a>
    2e80:	49 c0       	rjmp	.+146    	; 0x2f14 <_Z9getSwitchabh+0x1bc>
			{
		ret_value = false;
	}
	if (ret_value) {
		int8_t x;
		x = cs->andsw;
    2e82:	8a 81       	ldd	r24, Y+2	; 0x02
    2e84:	82 95       	swap	r24
    2e86:	8f 70       	andi	r24, 0x0F	; 15
		if (x) {
    2e88:	59 f5       	brne	.+86     	; 0x2ee0 <_Z9getSwitchabh+0x188>
    2e8a:	91 e0       	ldi	r25, 0x01	; 1
    2e8c:	31 c0       	rjmp	.+98     	; 0x2ef0 <_Z9getSwitchabh+0x198>
		case (CS_XOR ): {
			bool res1 = getSwitch (a, 0, level + 1);
			bool res2 = getSwitch (b, 0, level + 1);
			if (cs->func == CS_AND) {
				ret_value = res1 && res2;
			} else if (cs->func == CS_OR) {
    2e8e:	26 30       	cpi	r18, 0x06	; 6
    2e90:	19 f4       	brne	.+6      	; 0x2e98 <_Z9getSwitchabh+0x140>
				ret_value = res1 || res2;
    2e92:	11 11       	cpse	r17, r1
    2e94:	f6 cf       	rjmp	.-20     	; 0x2e82 <_Z9getSwitchabh+0x12a>
    2e96:	f2 cf       	rjmp	.-28     	; 0x2e7c <_Z9getSwitchabh+0x124>
			} else  // CS_XOR
			{
				ret_value = res1 ^ res2;
    2e98:	98 2f       	mov	r25, r24
    2e9a:	91 27       	eor	r25, r17
    2e9c:	1e c0       	rjmp	.+60     	; 0x2eda <_Z9getSwitchabh+0x182>
			}
		}
			break;

		case (CS_EQUAL ):
			ret_value = (x == y);
    2e9e:	08 17       	cp	r16, r24
    2ea0:	19 07       	cpc	r17, r25
    2ea2:	c1 f5       	brne	.+112    	; 0x2f14 <_Z9getSwitchabh+0x1bc>
    2ea4:	ee cf       	rjmp	.-36     	; 0x2e82 <_Z9getSwitchabh+0x12a>
			break;
		case (CS_NEQUAL ):
			ret_value = (x != y);
    2ea6:	08 17       	cp	r16, r24
    2ea8:	19 07       	cpc	r17, r25
    2eaa:	59 f7       	brne	.-42     	; 0x2e82 <_Z9getSwitchabh+0x12a>
    2eac:	33 c0       	rjmp	.+102    	; 0x2f14 <_Z9getSwitchabh+0x1bc>
			break;
		case (CS_GREATER ):
			ret_value = (x > y);
    2eae:	80 17       	cp	r24, r16
    2eb0:	91 07       	cpc	r25, r17
    2eb2:	3c f3       	brlt	.-50     	; 0x2e82 <_Z9getSwitchabh+0x12a>
    2eb4:	2f c0       	rjmp	.+94     	; 0x2f14 <_Z9getSwitchabh+0x1bc>
			break;
		case (CS_LESS ):
			ret_value = (x < y);
    2eb6:	08 17       	cp	r16, r24
    2eb8:	19 07       	cpc	r17, r25
    2eba:	1c f3       	brlt	.-58     	; 0x2e82 <_Z9getSwitchabh+0x12a>
    2ebc:	2b c0       	rjmp	.+86     	; 0x2f14 <_Z9getSwitchabh+0x1bc>
			case (CS_ELESS):
			ret_value = (x<=y);
			break;
#endif
		case (CS_TIME ):
			ret_value = CsTimer[cs_index] >= 0;
    2ebe:	f6 01       	movw	r30, r12
    2ec0:	ea 57       	subi	r30, 0x7A	; 122
    2ec2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ec4:	91 81       	ldd	r25, Z+1	; 0x01
    2ec6:	90 95       	com	r25
    2ec8:	99 1f       	adc	r25, r25
    2eca:	99 27       	eor	r25, r25
    2ecc:	99 1f       	adc	r25, r25
    2ece:	05 c0       	rjmp	.+10     	; 0x2eda <_Z9getSwitchabh+0x182>
			break;
#ifdef VERSION3
		case (CS_LATCH ):
		case (CS_FLIP ):
			ret_value = Last_switch[cs_index] & 1;
    2ed0:	f7 01       	movw	r30, r14
    2ed2:	ec 5a       	subi	r30, 0xAC	; 172
    2ed4:	f9 4f       	sbci	r31, 0xF9	; 249
    2ed6:	90 81       	ld	r25, Z
    2ed8:	91 70       	andi	r25, 0x01	; 1
	}
	if (valid == 0)			// Catch telemetry values not present
			{
		ret_value = false;
	}
	if (ret_value) {
    2eda:	91 11       	cpse	r25, r1
    2edc:	d2 cf       	rjmp	.-92     	; 0x2e82 <_Z9getSwitchabh+0x12a>
    2ede:	08 c0       	rjmp	.+16     	; 0x2ef0 <_Z9getSwitchabh+0x198>
		int8_t x;
		x = cs->andsw;
		if (x) {
			if (x > 8) {
    2ee0:	89 30       	cpi	r24, 0x09	; 9
    2ee2:	0c f0       	brlt	.+2      	; 0x2ee6 <_Z9getSwitchabh+0x18e>
				x += 1;
    2ee4:	8f 5f       	subi	r24, 0xFF	; 255
			}
			ret_value = getSwitch (x, 0, level + 1);
    2ee6:	41 e0       	ldi	r20, 0x01	; 1
    2ee8:	46 0d       	add	r20, r6
    2eea:	60 e0       	ldi	r22, 0x00	; 0
    2eec:	35 df       	rcall	.-406    	; 0x2d58 <_Z9getSwitchabh>
    2eee:	98 2f       	mov	r25, r24
		}
	}
#ifdef VERSION3
	if (cs->func < CS_LATCH) {
    2ef0:	2a 81       	ldd	r18, Y+2	; 0x02
    2ef2:	2f 70       	andi	r18, 0x0F	; 15
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	2c 30       	cpi	r18, 0x0C	; 12
    2ef8:	31 05       	cpc	r19, r1
    2efa:	0c f0       	brlt	.+2      	; 0x2efe <_Z9getSwitchabh+0x1a6>
    2efc:	73 cf       	rjmp	.-282    	; 0x2de4 <_Z9getSwitchabh+0x8c>
#endif
		Last_switch[cs_index] = ret_value;
    2efe:	f7 01       	movw	r30, r14
    2f00:	ec 5a       	subi	r30, 0xAC	; 172
    2f02:	f9 4f       	sbci	r31, 0xF9	; 249
    2f04:	90 83       	st	Z, r25
    2f06:	6e cf       	rjmp	.-292    	; 0x2de4 <_Z9getSwitchabh+0x8c>
#ifdef VERSION3
	}
#endif
	return swtch > 0 ? ret_value : !ret_value;
    2f08:	89 2f       	mov	r24, r25
    2f0a:	06 c0       	rjmp	.+12     	; 0x2f18 <_Z9getSwitchabh+0x1c0>
	bool ret_value;
	uint8_t cs_index;

	switch (swtch) {
		case 0:
			return nc;
    2f0c:	86 2f       	mov	r24, r22
    2f0e:	04 c0       	rjmp	.+8      	; 0x2f18 <_Z9getSwitchabh+0x1c0>
		case -MAX_DRSWITCH:
			return false;
	}

	if (swtch > MAX_DRSWITCH) {
		return false;
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	02 c0       	rjmp	.+4      	; 0x2f18 <_Z9getSwitchabh+0x1c0>
		return swtch > 0 ? ret_value : !ret_value;
	}

	int8_t a = cs->v1;
	int8_t b = cs->v2;
	int16_t x = 0;
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	ec cf       	rjmp	.-40     	; 0x2ef0 <_Z9getSwitchabh+0x198>
#ifdef VERSION3
	}
#endif
	return swtch > 0 ? ret_value : !ret_value;

}
    2f18:	df 91       	pop	r29
    2f1a:	cf 91       	pop	r28
    2f1c:	1f 91       	pop	r17
    2f1e:	0f 91       	pop	r16
    2f20:	ff 90       	pop	r15
    2f22:	ef 90       	pop	r14
    2f24:	df 90       	pop	r13
    2f26:	cf 90       	pop	r12
    2f28:	bf 90       	pop	r11
    2f2a:	af 90       	pop	r10
    2f2c:	9f 90       	pop	r9
    2f2e:	8f 90       	pop	r8
    2f30:	7f 90       	pop	r7
    2f32:	6f 90       	pop	r6
    2f34:	5f 90       	pop	r5
    2f36:	4f 90       	pop	r4
    2f38:	08 95       	ret

00002f3a <_Z21check_backlight_voicev>:
	putEvent(0);
}

void check_backlight_voice () {
	static uint8_t tmr10ms;
	if (getSwitch (g_eeGeneral.lightSw, 0) || g_LightOffCounter)
    2f3a:	40 e0       	ldi	r20, 0x00	; 0
    2f3c:	60 e0       	ldi	r22, 0x00	; 0
    2f3e:	80 91 13 06 	lds	r24, 0x0613
    2f42:	0a df       	rcall	.-492    	; 0x2d58 <_Z9getSwitchabh>
    2f44:	81 11       	cpse	r24, r1
    2f46:	13 c0       	rjmp	.+38     	; 0x2f6e <_Z21check_backlight_voicev+0x34>
    2f48:	80 91 69 01 	lds	r24, 0x0169
    2f4c:	90 91 6a 01 	lds	r25, 0x016A
    2f50:	89 2b       	or	r24, r25
    2f52:	69 f4       	brne	.+26     	; 0x2f6e <_Z21check_backlight_voicev+0x34>
	BACKLIGHT_ON;
	else
	BACKLIGHT_OFF;
    2f54:	10 92 c1 0b 	sts	0x0BC1, r1

	uint8_t x;
	x = g_blinkTmr10ms;
    2f58:	80 91 cf 0a 	lds	r24, 0x0ACF
	if (tmr10ms != x) {
    2f5c:	90 91 69 06 	lds	r25, 0x0669
    2f60:	98 17       	cp	r25, r24
    2f62:	49 f0       	breq	.+18     	; 0x2f76 <_Z21check_backlight_voicev+0x3c>
		tmr10ms = x;
    2f64:	80 93 69 06 	sts	0x0669, r24
		Voice.voice_process ();
    2f68:	81 ea       	ldi	r24, 0xA1	; 161
    2f6a:	9b e0       	ldi	r25, 0x0B	; 11
    2f6c:	2d cc       	rjmp	.-1958   	; 0x27c8 <_ZN7t_voice13voice_processEv>
}

void check_backlight_voice () {
	static uint8_t tmr10ms;
	if (getSwitch (g_eeGeneral.lightSw, 0) || g_LightOffCounter)
	BACKLIGHT_ON;
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	80 93 c1 0b 	sts	0x0BC1, r24
    2f74:	f1 cf       	rjmp	.-30     	; 0x2f58 <_Z21check_backlight_voicev+0x1e>
    2f76:	08 95       	ret

00002f78 <_Z8checkTHRv>:
		}
	}
	return 0;
}

void checkTHR () {
    2f78:	1f 93       	push	r17
    2f7a:	cf 93       	push	r28
    2f7c:	df 93       	push	r29
	if (g_eeGeneral.disableThrottleWarning) return;
    2f7e:	80 91 25 06 	lds	r24, 0x0625
    2f82:	80 fd       	sbrc	r24, 0
    2f84:	3b c0       	rjmp	.+118    	; 0x2ffc <_Z8checkTHRv+0x84>

	uint8_t thrchn = (2 - (g_eeGeneral.stickMode & 1)); //stickMode=0123 -> thr=2121
    2f86:	80 91 26 06 	lds	r24, 0x0626
    2f8a:	81 70       	andi	r24, 0x01	; 1
    2f8c:	12 e0       	ldi	r17, 0x02	; 2
    2f8e:	18 1b       	sub	r17, r24

#ifndef SIMU
	getADC_osmp ();   // if thr is down - do not display warning at all
    2f90:	35 dd       	rcall	.-1430   	; 0x29fc <_Z11getADC_osmpv>
#endif

	int16_t lowLim = g_eeGeneral.calibMid[thrchn];
    2f92:	e1 2f       	mov	r30, r17
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	ee 0f       	add	r30, r30
    2f98:	ff 1f       	adc	r31, r31
    2f9a:	ee 51       	subi	r30, 0x1E	; 30
    2f9c:	fa 4f       	sbci	r31, 0xFA	; 250
    2f9e:	41 81       	ldd	r20, Z+1	; 0x01
    2fa0:	52 81       	ldd	r21, Z+2	; 0x02

	lowLim = (
			g_eeGeneral.throttleReversed ?
					(-lowLim) - g_eeGeneral.calibSpanPos[thrchn] :
					lowLim - g_eeGeneral.calibSpanNeg[thrchn]);
    2fa2:	80 91 28 06 	lds	r24, 0x0628
    2fa6:	80 ff       	sbrs	r24, 0
    2fa8:	06 c0       	rjmp	.+12     	; 0x2fb6 <_Z8checkTHRv+0x3e>

	int16_t lowLim = g_eeGeneral.calibMid[thrchn];

	lowLim = (
			g_eeGeneral.throttleReversed ?
					(-lowLim) - g_eeGeneral.calibSpanPos[thrchn] :
    2faa:	51 95       	neg	r21
    2fac:	41 95       	neg	r20
    2fae:	51 09       	sbc	r21, r1
					lowLim - g_eeGeneral.calibSpanNeg[thrchn]);
    2fb0:	25 8d       	ldd	r18, Z+29	; 0x1d
    2fb2:	36 8d       	ldd	r19, Z+30	; 0x1e
    2fb4:	02 c0       	rjmp	.+4      	; 0x2fba <_Z8checkTHRv+0x42>
    2fb6:	27 85       	ldd	r18, Z+15	; 0x0f
    2fb8:	30 89       	ldd	r19, Z+16	; 0x10
    2fba:	42 1b       	sub	r20, r18
    2fbc:	53 0b       	sbc	r21, r19
	lowLim += THRCHK_DEADBAND;
    2fbe:	ea 01       	movw	r28, r20
    2fc0:	60 96       	adiw	r28, 0x10	; 16

	if (checkThrottlePosition (tanaIn (thrchn), thrchn, lowLim)) {
    2fc2:	81 2f       	mov	r24, r17
    2fc4:	12 dd       	rcall	.-1500   	; 0x29ea <_Z6tanaInh>
    2fc6:	ae 01       	movw	r20, r28
    2fc8:	61 2f       	mov	r22, r17
    2fca:	de d9       	rcall	.-3140   	; 0x2388 <_Z21checkThrottlePositionihi>
    2fcc:	81 11       	cpse	r24, r1
    2fce:	16 c0       	rjmp	.+44     	; 0x2ffc <_Z8checkTHRv+0x84>
		return;
	}

	// first - display warning
	alertMessages (PSTR(STR_THR_NOT_IDLE), PSTR(STR_RST_THROTTLE));
    2fd0:	6b e4       	ldi	r22, 0x4B	; 75
    2fd2:	72 e0       	ldi	r23, 0x02	; 2
    2fd4:	89 e3       	ldi	r24, 0x39	; 57
    2fd6:	92 e0       	ldi	r25, 0x02	; 2
    2fd8:	b7 d9       	rcall	.-3218   	; 0x2348 <_Z13alertMessagesPKcS0_>
	refreshDiplay ();
    2fda:	0e 94 2d 2a 	call	0x545a	; 0x545a <_Z13refreshDiplayv>
	clearKeyEvents ();
    2fde:	ad d9       	rcall	.-3238   	; 0x233a <_ZL14clearKeyEventsv>
	while (1) {
#ifdef SIMU
		if (!main_thread_running) return;
		sleep(1/*ms*/);
#else
		getADC_osmp ();
    2fe0:	0d dd       	rcall	.-1510   	; 0x29fc <_Z11getADC_osmpv>
#endif
		check_backlight_voice ();
    2fe2:	ab df       	rcall	.-170    	; 0x2f3a <_Z21check_backlight_voicev>

		wdt_reset();
    2fe4:	a8 95       	wdr

		if (checkThrottlePosition (tanaIn (thrchn), thrchn, lowLim)) {
    2fe6:	81 2f       	mov	r24, r17
    2fe8:	00 dd       	rcall	.-1536   	; 0x29ea <_Z6tanaInh>
    2fea:	ae 01       	movw	r20, r28
    2fec:	61 2f       	mov	r22, r17
    2fee:	cc d9       	rcall	.-3176   	; 0x2388 <_Z21checkThrottlePositionihi>
    2ff0:	81 11       	cpse	r24, r1
    2ff2:	04 c0       	rjmp	.+8      	; 0x2ffc <_Z8checkTHRv+0x84>
			return;
		}
		if (keyDown ()) {
    2ff4:	0e 94 82 70 	call	0xe104	; 0xe104 <_Z7keyDownv>
    2ff8:	88 23       	and	r24, r24
    2ffa:	91 f3       	breq	.-28     	; 0x2fe0 <_Z8checkTHRv+0x68>
			return;
		}
	}
}
    2ffc:	df 91       	pop	r29
    2ffe:	cf 91       	pop	r28
    3000:	1f 91       	pop	r17
    3002:	08 95       	ret

00003004 <_Z13checkSwitchesv>:
		i |= t;
	}
	return i;
}

void checkSwitches () {
    3004:	0f 93       	push	r16
    3006:	1f 93       	push	r17
    3008:	cf 93       	push	r28
    300a:	df 93       	push	r29
	uint8_t warningStates;

	warningStates = g_model.switchWarningStates;
    300c:	c0 91 d0 04 	lds	r28, 0x04D0

	if (g_eeGeneral.disableSwitchWarning) return; // if warning is on
    3010:	80 91 25 06 	lds	r24, 0x0625
    3014:	81 fd       	sbrc	r24, 1
    3016:	4d c0       	rjmp	.+154    	; 0x30b2 <_Z13checkSwitchesv+0xae>

	uint8_t x = warningStates & SWP_IL5;
    3018:	8c 2f       	mov	r24, r28
    301a:	88 73       	andi	r24, 0x38	; 56
	if (! (x == SWP_LEG1 || x == SWP_LEG2 || x == SWP_LEG3)) //legal states for ID0/1/2
    301c:	88 30       	cpi	r24, 0x08	; 8
    301e:	41 f0       	breq	.+16     	; 0x3030 <_Z13checkSwitchesv+0x2c>
    3020:	80 31       	cpi	r24, 0x10	; 16
    3022:	31 f0       	breq	.+12     	; 0x3030 <_Z13checkSwitchesv+0x2c>
    3024:	80 32       	cpi	r24, 0x20	; 32
    3026:	21 f0       	breq	.+8      	; 0x3030 <_Z13checkSwitchesv+0x2c>
	{
		warningStates &= ~SWP_IL5; // turn all off, make sure only one is on
    3028:	c7 7c       	andi	r28, 0xC7	; 199
		warningStates |= SWP_ID0B;
    302a:	c8 60       	ori	r28, 0x08	; 8
		g_model.switchWarningStates = warningStates;
    302c:	c0 93 d0 04 	sts	0x04D0, r28

//#endif

//#endif

	uint8_t first = 1;
    3030:	01 e0       	ldi	r16, 0x01	; 1
	//loop until all switches are reset
	while (1) {
		uint8_t i = getCurrentSwitchStates ();
    3032:	cc d9       	rcall	.-3176   	; 0x23cc <_Z22getCurrentSwitchStatesv>
    3034:	18 2f       	mov	r17, r24

		//show the difference between i and switch?
		//show just the offending switches.
		//first row - THR, GEA, AIL, ELE, ID0/1/2
		uint8_t x = i ^ warningStates;
    3036:	d8 2f       	mov	r29, r24
    3038:	dc 27       	eor	r29, r28

		alertMessages (PSTR(STR_SWITCH_WARN), PSTR(STR_RESET_SWITCHES));
    303a:	63 e2       	ldi	r22, 0x23	; 35
    303c:	72 e0       	ldi	r23, 0x02	; 2
    303e:	84 e1       	ldi	r24, 0x14	; 20
    3040:	92 e0       	ldi	r25, 0x02	; 2
    3042:	82 d9       	rcall	.-3324   	; 0x2348 <_Z13alertMessagesPKcS0_>

		if (x & SWP_THRB) putWarnSwitch (2 + 0 * FW, 0);
    3044:	d0 ff       	sbrs	r29, 0
    3046:	03 c0       	rjmp	.+6      	; 0x304e <_Z13checkSwitchesv+0x4a>
    3048:	60 e0       	ldi	r22, 0x00	; 0
    304a:	82 e0       	ldi	r24, 0x02	; 2
    304c:	b5 d9       	rcall	.-3222   	; 0x23b8 <_Z13putWarnSwitchhh>
		if (x & SWP_RUDB) putWarnSwitch (2 + 3 * FW + FW / 2, 1);
    304e:	d1 ff       	sbrs	r29, 1
    3050:	03 c0       	rjmp	.+6      	; 0x3058 <_Z13checkSwitchesv+0x54>
    3052:	61 e0       	ldi	r22, 0x01	; 1
    3054:	87 e1       	ldi	r24, 0x17	; 23
    3056:	b0 d9       	rcall	.-3232   	; 0x23b8 <_Z13putWarnSwitchhh>
		if (x & SWP_ELEB) putWarnSwitch (2 + 7 * FW, 2);
    3058:	d2 ff       	sbrs	r29, 2
    305a:	03 c0       	rjmp	.+6      	; 0x3062 <_Z13checkSwitchesv+0x5e>
    305c:	62 e0       	ldi	r22, 0x02	; 2
    305e:	8c e2       	ldi	r24, 0x2C	; 44
    3060:	ab d9       	rcall	.-3242   	; 0x23b8 <_Z13putWarnSwitchhh>

		if (x & SWP_IL5) {
    3062:	8d 2f       	mov	r24, r29
    3064:	88 73       	andi	r24, 0x38	; 56
    3066:	69 f0       	breq	.+26     	; 0x3082 <_Z13checkSwitchesv+0x7e>
			if (i & SWP_ID0B) putWarnSwitch (2 + 10 * FW + FW / 2, 3);
    3068:	13 ff       	sbrs	r17, 3
    306a:	02 c0       	rjmp	.+4      	; 0x3070 <_Z13checkSwitchesv+0x6c>
    306c:	63 e0       	ldi	r22, 0x03	; 3
    306e:	07 c0       	rjmp	.+14     	; 0x307e <_Z13checkSwitchesv+0x7a>
			else if (i & SWP_ID1B) putWarnSwitch (2 + 10 * FW + FW / 2, 4);
    3070:	14 ff       	sbrs	r17, 4
    3072:	02 c0       	rjmp	.+4      	; 0x3078 <_Z13checkSwitchesv+0x74>
    3074:	64 e0       	ldi	r22, 0x04	; 4
    3076:	03 c0       	rjmp	.+6      	; 0x307e <_Z13checkSwitchesv+0x7a>
			else if (i & SWP_ID2B) putWarnSwitch (2 + 10 * FW + FW / 2, 5);
    3078:	15 ff       	sbrs	r17, 5
    307a:	03 c0       	rjmp	.+6      	; 0x3082 <_Z13checkSwitchesv+0x7e>
    307c:	65 e0       	ldi	r22, 0x05	; 5
    307e:	81 e4       	ldi	r24, 0x41	; 65
    3080:	9b d9       	rcall	.-3274   	; 0x23b8 <_Z13putWarnSwitchhh>
		}

		if (x & SWP_AILB) putWarnSwitch (2 + 14 * FW, 6);
    3082:	d6 ff       	sbrs	r29, 6
    3084:	03 c0       	rjmp	.+6      	; 0x308c <_Z13checkSwitchesv+0x88>
    3086:	66 e0       	ldi	r22, 0x06	; 6
    3088:	86 e5       	ldi	r24, 0x56	; 86
    308a:	96 d9       	rcall	.-3284   	; 0x23b8 <_Z13putWarnSwitchhh>
		if (x & SWP_GEAB) putWarnSwitch (2 + 17 * FW + FW / 2, 7);
    308c:	d7 ff       	sbrs	r29, 7
    308e:	03 c0       	rjmp	.+6      	; 0x3096 <_Z13checkSwitchesv+0x92>
    3090:	67 e0       	ldi	r22, 0x07	; 7
    3092:	8b e6       	ldi	r24, 0x6B	; 107
    3094:	91 d9       	rcall	.-3294   	; 0x23b8 <_Z13putWarnSwitchhh>
//				  UBRR1L = UBRRL_VALUE;
//				}
//				lcd_putc( 0, 8, q ) ;

//#endif
		refreshDiplay ();
    3096:	0e 94 2d 2a 	call	0x545a	; 0x545a <_Z13refreshDiplayv>

		if (first) {
    309a:	01 11       	cpse	r16, r1
			clearKeyEvents ();
    309c:	4e d9       	rcall	.-3428   	; 0x233a <_ZL14clearKeyEventsv>
			first = 0;
		}

		if ( (i == warningStates) || (keyDown ())) // check state against settings
    309e:	1c 17       	cp	r17, r28
    30a0:	41 f0       	breq	.+16     	; 0x30b2 <_Z13checkSwitchesv+0xae>
    30a2:	0e 94 82 70 	call	0xe104	; 0xe104 <_Z7keyDownv>
    30a6:	81 11       	cpse	r24, r1
    30a8:	04 c0       	rjmp	.+8      	; 0x30b2 <_Z13checkSwitchesv+0xae>
//  UCSR1B &= ~(1 << RXEN1) ; // disable RX
//#endif
			return;//wait for key release
		}

		check_backlight_voice ();
    30aa:	47 df       	rcall	.-370    	; 0x2f3a <_Z21check_backlight_voicev>
		wdt_reset();
    30ac:	a8 95       	wdr
    30ae:	00 e0       	ldi	r16, 0x00	; 0

	}
    30b0:	c0 cf       	rjmp	.-128    	; 0x3032 <_Z13checkSwitchesv+0x2e>

}
    30b2:	df 91       	pop	r29
    30b4:	cf 91       	pop	r28
    30b6:	1f 91       	pop	r17
    30b8:	0f 91       	pop	r16
    30ba:	08 95       	ret

000030bc <_Z6alertxPKcb>:

void alert (const prog_char * s) {
	alertx (s, false);
}

void alertx (const prog_char * s, bool defaults) {
    30bc:	cf 93       	push	r28
    30be:	df 93       	push	r29
    30c0:	c6 2f       	mov	r28, r22
	if (Main_running) {
    30c2:	20 91 1e 02 	lds	r18, 0x021E
    30c6:	22 23       	and	r18, r18
    30c8:	39 f0       	breq	.+14     	; 0x30d8 <_Z6alertxPKcb+0x1c>
		AlertMessage = s;
    30ca:	90 93 20 02 	sts	0x0220, r25
    30ce:	80 93 1f 02 	sts	0x021F, r24
		BACKLIGHT_ON;
		else
		BACKLIGHT_OFF;
		check_backlight_voice ();
	}
}
    30d2:	df 91       	pop	r29
    30d4:	cf 91       	pop	r28
    30d6:	08 95       	ret
void alertx (const prog_char * s, bool defaults) {
	if (Main_running) {
		AlertMessage = s;
		return;
	}
	almess (s, ALERT_TYPE);
    30d8:	60 e0       	ldi	r22, 0x00	; 0
    30da:	9e d9       	rcall	.-3268   	; 0x2418 <_Z6almessPKch>

	lcdSetRefVolt (defaults ? LCD_NOMCONTRAST : g_eeGeneral.contrast);
    30dc:	c1 11       	cpse	r28, r1
    30de:	03 c0       	rjmp	.+6      	; 0x30e6 <_Z6alertxPKcb+0x2a>
    30e0:	80 91 10 06 	lds	r24, 0x0610
    30e4:	01 c0       	rjmp	.+2      	; 0x30e8 <_Z6alertxPKcb+0x2c>
    30e6:	89 e1       	ldi	r24, 0x19	; 25
    30e8:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <_Z13lcdSetRefVolth>
	audioVoiceDefevent (AU_ERROR, V_ALERT);
    30ec:	67 e1       	ldi	r22, 0x17	; 23
    30ee:	82 e1       	ldi	r24, 0x12	; 18
    30f0:	0e 94 7e 34 	call	0x68fc	; 0x68fc <_Z18audioVoiceDefeventhh>

	clearKeyEvents ();
    30f4:	22 d9       	rcall	.-3516   	; 0x233a <_ZL14clearKeyEventsv>
			wdt_reset();
			heartbeat = 0;
		}

		if (defaults)
		BACKLIGHT_ON;
    30f6:	d1 e0       	ldi	r29, 0x01	; 1
	while (1) {
#ifdef SIMU
		if (!main_thread_running) return;
		sleep(1/*ms*/);
#endif
		if (keyDown ()) {
    30f8:	0e 94 82 70 	call	0xe104	; 0xe104 <_Z7keyDownv>
    30fc:	88 23       	and	r24, r24
    30fe:	19 f0       	breq	.+6      	; 0x3106 <_Z6alertxPKcb+0x4a>
		BACKLIGHT_ON;
		else
		BACKLIGHT_OFF;
		check_backlight_voice ();
	}
}
    3100:	df 91       	pop	r29
    3102:	cf 91       	pop	r28
#ifdef SIMU
		if (!main_thread_running) return;
		sleep(1/*ms*/);
#endif
		if (keyDown ()) {
			clearKeyEvents ();
    3104:	1a c9       	rjmp	.-3532   	; 0x233a <_ZL14clearKeyEventsv>
			return;  //wait for key release
		}
		if (heartbeat == 0x3) {
    3106:	80 91 0d 0b 	lds	r24, 0x0B0D
    310a:	83 30       	cpi	r24, 0x03	; 3
    310c:	19 f4       	brne	.+6      	; 0x3114 <_Z6alertxPKcb+0x58>
			wdt_reset();
    310e:	a8 95       	wdr
			heartbeat = 0;
    3110:	10 92 0d 0b 	sts	0x0B0D, r1
		}

		if (defaults)
    3114:	cc 23       	and	r28, r28
    3116:	19 f0       	breq	.+6      	; 0x311e <_Z6alertxPKcb+0x62>
		BACKLIGHT_ON;
    3118:	d0 93 c1 0b 	sts	0x0BC1, r29
    311c:	02 c0       	rjmp	.+4      	; 0x3122 <_Z6alertxPKcb+0x66>
		else
		BACKLIGHT_OFF;
    311e:	10 92 c1 0b 	sts	0x0BC1, r1
		check_backlight_voice ();
    3122:	0b df       	rcall	.-490    	; 0x2f3a <_Z21check_backlight_voicev>

void alert (const prog_char * s) {
	alertx (s, false);
}

void alertx (const prog_char * s, bool defaults) {
    3124:	e9 cf       	rjmp	.-46     	; 0x30f8 <_Z6alertxPKcb+0x3c>

00003126 <_Z5alertPKc>:
	almess (s, MESS_TYPE);
//	lcdSetContrast() ;
}

void alert (const prog_char * s) {
	alertx (s, false);
    3126:	60 e0       	ldi	r22, 0x00	; 0
    3128:	c9 cf       	rjmp	.-110    	; 0x30bc <_Z6alertxPKcb>

0000312a <_Z7popMenub>:
MenuFuncP lastPopMenu () {
	return g_menuStack[g_menuStackPtr + 1];
}

void popMenu (bool uppermost) {
	if (g_menuStackPtr > 0 || uppermost) {
    312a:	90 91 79 01 	lds	r25, 0x0179
    312e:	91 11       	cpse	r25, r1
    3130:	03 c0       	rjmp	.+6      	; 0x3138 <_Z7popMenub+0xe>
    3132:	81 11       	cpse	r24, r1
    3134:	06 c0       	rjmp	.+12     	; 0x3142 <_Z7popMenub+0x18>
    3136:	0c c0       	rjmp	.+24     	; 0x3150 <_Z7popMenub+0x26>
		g_menuStackPtr = uppermost ? 0 : g_menuStackPtr - 1;
    3138:	81 11       	cpse	r24, r1
    313a:	03 c0       	rjmp	.+6      	; 0x3142 <_Z7popMenub+0x18>
    313c:	8f ef       	ldi	r24, 0xFF	; 255
    313e:	89 0f       	add	r24, r25
    3140:	01 c0       	rjmp	.+2      	; 0x3144 <_Z7popMenub+0x1a>
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	80 93 79 01 	sts	0x0179, r24
		EnterMenu = EVT_ENTRY_UP;
    3148:	8e eb       	ldi	r24, 0xBE	; 190
    314a:	80 93 78 01 	sts	0x0178, r24
    314e:	08 95       	ret
	} else {
		alert (PSTR(STR_MSTACK_UFLOW));
    3150:	81 ef       	ldi	r24, 0xF1	; 241
    3152:	91 e0       	ldi	r25, 0x01	; 1
    3154:	e8 cf       	rjmp	.-48     	; 0x3126 <_Z5alertPKc>

00003156 <_Z8pushMenuPFvhE>:
	EnterMenu = EVT_ENTRY;
}
void pushMenu (MenuFuncP newMenu) {

//    g_menuStackPtr++;
	if (g_menuStackPtr >= DIM(g_menuStack) - 1) {
    3156:	e0 91 79 01 	lds	r30, 0x0179
    315a:	e4 30       	cpi	r30, 0x04	; 4
    315c:	18 f0       	brcs	.+6      	; 0x3164 <_Z8pushMenuPFvhE+0xe>
//        g_menuStackPtr--;
		alert (PSTR(STR_MSTACK_OFLOW));
    315e:	84 ee       	ldi	r24, 0xE4	; 228
    3160:	91 e0       	ldi	r25, 0x01	; 1
    3162:	e1 cf       	rjmp	.-62     	; 0x3126 <_Z5alertPKc>
		return;
	}
	EnterMenu = EVT_ENTRY;
    3164:	2f eb       	ldi	r18, 0xBF	; 191
    3166:	20 93 78 01 	sts	0x0178, r18
	g_menuStack[++g_menuStackPtr] = newMenu;
    316a:	ef 5f       	subi	r30, 0xFF	; 255
    316c:	e0 93 79 01 	sts	0x0179, r30
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	ee 0f       	add	r30, r30
    3174:	ff 1f       	adc	r31, r31
    3176:	e6 58       	subi	r30, 0x86	; 134
    3178:	fe 4f       	sbci	r31, 0xFE	; 254
    317a:	91 83       	std	Z+1, r25	; 0x01
    317c:	80 83       	st	Z, r24
    317e:	08 95       	ret

00003180 <_Z16doBackLightVoiceh>:

void doBackLightVoice (uint8_t evt) {
	uint8_t a = 0;
	uint16_t b;
	uint16_t lightoffctr;
	if (evt) backlightKey (); // on keypress turn the light on 5*100
    3180:	81 11       	cpse	r24, r1
    3182:	ed da       	rcall	.-2598   	; 0x275e <_Z12backlightKeyv>

	lightoffctr = g_LightOffCounter;
    3184:	80 91 69 01 	lds	r24, 0x0169
    3188:	90 91 6a 01 	lds	r25, 0x016A
	if (lightoffctr) lightoffctr--;
    318c:	00 97       	sbiw	r24, 0x00	; 0
    318e:	09 f0       	breq	.+2      	; 0x3192 <_Z16doBackLightVoiceh+0x12>
    3190:	01 97       	sbiw	r24, 0x01	; 1
	if (stickMoved) {
    3192:	20 91 68 01 	lds	r18, 0x0168
    3196:	22 23       	and	r18, r18
    3198:	61 f0       	breq	.+24     	; 0x31b2 <_Z16doBackLightVoiceh+0x32>
		a = g_eeGeneral.lightOnStickMove;
    319a:	20 91 32 06 	lds	r18, 0x0632
		b = a * 250;
    319e:	4a ef       	ldi	r20, 0xFA	; 250
    31a0:	24 9f       	mul	r18, r20
    31a2:	90 01       	movw	r18, r0
    31a4:	11 24       	eor	r1, r1
		b <<= 1;				// b = a * 500, but less code
    31a6:	22 0f       	add	r18, r18
    31a8:	33 1f       	adc	r19, r19
    31aa:	82 17       	cp	r24, r18
    31ac:	93 07       	cpc	r25, r19
    31ae:	08 f4       	brcc	.+2      	; 0x31b2 <_Z16doBackLightVoiceh+0x32>
    31b0:	c9 01       	movw	r24, r18
		if (b > lightoffctr) lightoffctr = b;
	}
	g_LightOffCounter = lightoffctr;
    31b2:	90 93 6a 01 	sts	0x016A, r25
    31b6:	80 93 69 01 	sts	0x0169, r24
	check_backlight_voice ();
    31ba:	bf ce       	rjmp	.-642    	; 0x2f3a <_Z21check_backlight_voicev>

000031bc <_Z7perMainv>:
}

//uint16_t MixCounter ;
//uint16_t MixRate ;

void perMain () {
    31bc:	cf 92       	push	r12
    31be:	df 92       	push	r13
    31c0:	ef 92       	push	r14
    31c2:	ff 92       	push	r15
    31c4:	0f 93       	push	r16
    31c6:	1f 93       	push	r17
    31c8:	cf 93       	push	r28
    31ca:	df 93       	push	r29
	static uint8_t lastTMR;
//    static uint8_t timer20mS ;
	uint8_t t10ms;
	t10ms = g_tmr10ms;
    31cc:	80 91 d0 0a 	lds	r24, 0x0AD0
    31d0:	90 91 d1 0a 	lds	r25, 0x0AD1
	tick10ms = t10ms - lastTMR;
    31d4:	90 91 68 06 	lds	r25, 0x0668
    31d8:	28 2f       	mov	r18, r24
    31da:	29 1b       	sub	r18, r25
    31dc:	20 93 6b 01 	sts	0x016B, r18
	lastTMR = t10ms;
    31e0:	80 93 68 06 	sts	0x0668, r24
	//    tick10ms = (time10ms != lastTMR);
	//    lastTMR = time10ms;

//  	UBRR0L = 17 ;
//		UDR0 = 0 ;
	perOutPhase (g_chans512, 0);
    31e4:	60 e0       	ldi	r22, 0x00	; 0
    31e6:	8f e7       	ldi	r24, 0x7F	; 127
    31e8:	9d e0       	ldi	r25, 0x0D	; 13
    31ea:	0e 94 24 5c 	call	0xb848	; 0xb848 <_Z11perOutPhasePih>
//		MixCounter += 1 ;
	if (tick10ms == 0) return; //make sure the rest happen only every 10ms.
    31ee:	80 91 6b 01 	lds	r24, 0x016B
    31f2:	88 23       	and	r24, r24
    31f4:	09 f4       	brne	.+2      	; 0x31f8 <_Z7perMainv+0x3c>
    31f6:	9c c2       	rjmp	.+1336   	; 0x3730 <_Z7perMainv+0x574>
//    	  }
//    	}
//		}
//#endif

	if (ppmInValid) {
    31f8:	80 91 eb 01 	lds	r24, 0x01EB
    31fc:	88 23       	and	r24, r24
    31fe:	19 f0       	breq	.+6      	; 0x3206 <_Z7perMainv+0x4a>
		ppmInValid -= 1;
    3200:	81 50       	subi	r24, 0x01	; 1
    3202:	80 93 eb 01 	sts	0x01EB, r24
	}

	eeCheck ();
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	9d d7       	rcall	.+3898   	; 0x4144 <_Z7eeCheckb>

	// Every 10mS update backlight output to external latch
	// Note: LcdLock not needed here as at tasking level

	lcd_clear ();
    320a:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <_Z9lcd_clearv>
	uint8_t evt = getEvent ();
    320e:	0e 94 a8 2a 	call	0x5550	; 0x5550 <_Z8getEventv>
    3212:	18 2f       	mov	r17, r24
	STORE_MODELVARS_TRIM;
}
#endif

static uint8_t checkTrim (uint8_t event) {
	int8_t k = (event & EVT_KEY_MASK) - TRM_BASE;
    3214:	48 2f       	mov	r20, r24
    3216:	4f 70       	andi	r20, 0x0F	; 15
    3218:	e4 2e       	mov	r14, r20
    321a:	5a ef       	ldi	r21, 0xFA	; 250
    321c:	e5 0e       	add	r14, r21
	int8_t s = g_model.trimInc;
    321e:	c0 91 33 02 	lds	r28, 0x0233
//    if (s>1) s = 1 << (s-1);  // 1=>1  2=>2  3=>4  4=>8
	if (s == 4) {
    3222:	c4 30       	cpi	r28, 0x04	; 4
    3224:	21 f0       	breq	.+8      	; 0x322e <_Z7perMainv+0x72>
		s = 8;			  // 1=>1  2=>2  3=>4  4=>8
	} else {
		if (s == 3) {
    3226:	c3 30       	cpi	r28, 0x03	; 3
    3228:	19 f4       	brne	.+6      	; 0x3230 <_Z7perMainv+0x74>
			s = 4;			  // 1=>1  2=>2  3=>4  4=>8
    322a:	c4 e0       	ldi	r28, 0x04	; 4
    322c:	01 c0       	rjmp	.+2      	; 0x3230 <_Z7perMainv+0x74>
static uint8_t checkTrim (uint8_t event) {
	int8_t k = (event & EVT_KEY_MASK) - TRM_BASE;
	int8_t s = g_model.trimInc;
//    if (s>1) s = 1 << (s-1);  // 1=>1  2=>2  3=>4  4=>8
	if (s == 4) {
		s = 8;			  // 1=>1  2=>2  3=>4  4=>8
    322e:	c8 e0       	ldi	r28, 0x08	; 8
		if (s == 3) {
			s = 4;			  // 1=>1  2=>2  3=>4  4=>8
		}
	}

	if ( (k >= 0) && (k < 8) && !IS_KEY_BREAK(event)) // && (event & _MSK_KEY_REPT))
    3230:	87 e0       	ldi	r24, 0x07	; 7
    3232:	8e 15       	cp	r24, r14
    3234:	08 f4       	brcc	.+2      	; 0x3238 <_Z7perMainv+0x7c>
    3236:	8a c0       	rjmp	.+276    	; 0x334c <_Z7perMainv+0x190>
    3238:	81 2f       	mov	r24, r17
    323a:	80 7f       	andi	r24, 0xF0	; 240
    323c:	80 32       	cpi	r24, 0x20	; 32
    323e:	09 f4       	brne	.+2      	; 0x3242 <_Z7perMainv+0x86>
    3240:	85 c0       	rjmp	.+266    	; 0x334c <_Z7perMainv+0x190>
		//LH_DWN LH_UP LV_DWN LV_UP RV_DWN RV_UP RH_DWN RH_UP
		uint8_t idx = (uint8_t) k / 2;

// SORT idx for stickmode if FIX_MODE on
#ifdef FIX_MODE
		idx = modeFixValue (idx) - 1;
    3242:	8e 2d       	mov	r24, r14
    3244:	86 95       	lsr	r24
    3246:	0e 94 6d 10 	call	0x20da	; 0x20da <_Z12modeFixValueh>
//				pgm_read_byte(stickScramble+g_eeGeneral.stickMode*4+idx ) ;
#endif
		if (g_eeGeneral.crosstrim) {
    324a:	90 91 42 06 	lds	r25, 0x0642
    324e:	90 fd       	sbrc	r25, 0
    3250:	03 c0       	rjmp	.+6      	; 0x3258 <_Z7perMainv+0x9c>
		//LH_DWN LH_UP LV_DWN LV_UP RV_DWN RV_UP RH_DWN RH_UP
		uint8_t idx = (uint8_t) k / 2;

// SORT idx for stickmode if FIX_MODE on
#ifdef FIX_MODE
		idx = modeFixValue (idx) - 1;
    3252:	0f ef       	ldi	r16, 0xFF	; 255
    3254:	08 0f       	add	r16, r24
    3256:	02 c0       	rjmp	.+4      	; 0x325c <_Z7perMainv+0xa0>
//				pgm_read_byte(stickScramble+g_eeGeneral.stickMode*4+idx ) ;
#endif
		if (g_eeGeneral.crosstrim) {
			idx = 3 - idx;
    3258:	04 e0       	ldi	r16, 0x04	; 4
    325a:	08 1b       	sub	r16, r24
		}
#ifdef PHASES
		uint8_t phaseNo = getTrimFlightPhase (CurrentPhase, idx);
    325c:	60 2f       	mov	r22, r16
    325e:	80 91 1a 0c 	lds	r24, 0x0C1A
    3262:	1c d9       	rcall	.-3528   	; 0x249c <_Z18getTrimFlightPhasehh>
    3264:	f8 2e       	mov	r15, r24
		int16_t tm = getTrimValue (phaseNo, idx);
    3266:	60 2f       	mov	r22, r16
    3268:	3b d9       	rcall	.-3466   	; 0x24e0 <_Z12getTrimValuehh>
    326a:	9c 01       	movw	r18, r24
		int8_t tm = *TrimPtr[idx];
#else
		int8_t tm = g_model.trim[idx];
#endif
#endif
		int8_t v = (s == 0) ? (abs(tm) / 4) + 1 : s;
    326c:	c1 11       	cpse	r28, r1
    326e:	0c c0       	rjmp	.+24     	; 0x3288 <_Z7perMainv+0xcc>
    3270:	ec 01       	movw	r28, r24
    3272:	97 ff       	sbrs	r25, 7
    3274:	04 c0       	rjmp	.+8      	; 0x327e <_Z7perMainv+0xc2>
    3276:	cc 27       	eor	r28, r28
    3278:	dd 27       	eor	r29, r29
    327a:	c8 1b       	sub	r28, r24
    327c:	d9 0b       	sbc	r29, r25
    327e:	d5 95       	asr	r29
    3280:	c7 95       	ror	r28
    3282:	d5 95       	asr	r29
    3284:	c7 95       	ror	r28
    3286:	cf 5f       	subi	r28, 0xFF	; 255
#ifdef FIX_MODE
		bool thrChan = (2 == idx);
#else
		bool thrChan = ((2-(g_eeGeneral.stickMode&1)) == idx);
#endif
		bool thro = (thrChan && (g_model.thrTrim));
    3288:	02 30       	cpi	r16, 0x02	; 2
    328a:	61 f4       	brne	.+24     	; 0x32a4 <_Z7perMainv+0xe8>
    328c:	80 91 32 02 	lds	r24, 0x0232
    3290:	80 ff       	sbrs	r24, 0
    3292:	4c c2       	rjmp	.+1176   	; 0x372c <_Z7perMainv+0x570>
    3294:	81 e0       	ldi	r24, 0x01	; 1
		if (thro) v = 2; // if throttle trim and trim trottle then step=2
    3296:	c2 e0       	ldi	r28, 0x02	; 2
		if (thrChan && g_eeGeneral.throttleReversed) v = -v;  // throttle reversed = trim reversed
    3298:	90 91 28 06 	lds	r25, 0x0628
    329c:	90 ff       	sbrs	r25, 0
    329e:	03 c0       	rjmp	.+6      	; 0x32a6 <_Z7perMainv+0xea>
    32a0:	c1 95       	neg	r28
    32a2:	01 c0       	rjmp	.+2      	; 0x32a6 <_Z7perMainv+0xea>
#ifdef FIX_MODE
		bool thrChan = (2 == idx);
#else
		bool thrChan = ((2-(g_eeGeneral.stickMode&1)) == idx);
#endif
		bool thro = (thrChan && (g_model.thrTrim));
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	dd 27       	eor	r29, r29
    32a8:	c7 fd       	sbrc	r28, 7
    32aa:	d0 95       	com	r29
		if (thro) v = 2; // if throttle trim and trim trottle then step=2
		if (thrChan && g_eeGeneral.throttleReversed) v = -v;  // throttle reversed = trim reversed
		int16_t x = (k & 1) ? tm + v : tm - v;   // positive = k&1
    32ac:	e0 fe       	sbrs	r14, 0
    32ae:	03 c0       	rjmp	.+6      	; 0x32b6 <_Z7perMainv+0xfa>
    32b0:	c2 0f       	add	r28, r18
    32b2:	d3 1f       	adc	r29, r19
    32b4:	04 c0       	rjmp	.+8      	; 0x32be <_Z7perMainv+0x102>
    32b6:	a9 01       	movw	r20, r18
    32b8:	4c 1b       	sub	r20, r28
    32ba:	5d 0b       	sbc	r21, r29
    32bc:	ea 01       	movw	r28, r20

		if ( ( (x == 0) || ( (x >= 0) != (tm >= 0))) && (!thro) && (tm != 0)) {
    32be:	20 97       	sbiw	r28, 0x00	; 0
    32c0:	21 f0       	breq	.+8      	; 0x32ca <_Z7perMainv+0x10e>
    32c2:	9d 2f       	mov	r25, r29
    32c4:	93 27       	eor	r25, r19
    32c6:	97 ff       	sbrs	r25, 7
    32c8:	10 c0       	rjmp	.+32     	; 0x32ea <_Z7perMainv+0x12e>
    32ca:	81 11       	cpse	r24, r1
    32cc:	0e c0       	rjmp	.+28     	; 0x32ea <_Z7perMainv+0x12e>
    32ce:	23 2b       	or	r18, r19
    32d0:	61 f0       	breq	.+24     	; 0x32ea <_Z7perMainv+0x12e>
#ifdef PHASES
			setTrimValue (phaseNo, idx, 0);
    32d2:	40 e0       	ldi	r20, 0x00	; 0
    32d4:	50 e0       	ldi	r21, 0x00	; 0
    32d6:	60 2f       	mov	r22, r16
    32d8:	8f 2d       	mov	r24, r15
    32da:	17 d9       	rcall	.-3538   	; 0x250a <_Z12setTrimValuehhi>
			*TrimPtr[idx]=0;
#else
			g_model.trim[idx] = 0;
#endif
#endif
			killEvents (event);
    32dc:	81 2f       	mov	r24, r17
    32de:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
			audioDefevent (AU_TRIM_MIDDLE);
    32e2:	86 e1       	ldi	r24, 0x16	; 22
    32e4:	0e 94 74 34 	call	0x68e8	; 0x68e8 <_Z13audioDefeventh>
    32e8:	1f c2       	rjmp	.+1086   	; 0x3728 <_Z7perMainv+0x56c>

		} else if (x > -125 && x < 125) {
    32ea:	9e 01       	movw	r18, r28
    32ec:	24 58       	subi	r18, 0x84	; 132
    32ee:	3f 4f       	sbci	r19, 0xFF	; 255
    32f0:	29 3f       	cpi	r18, 0xF9	; 249
    32f2:	31 05       	cpc	r19, r1
    32f4:	40 f4       	brcc	.+16     	; 0x3306 <_Z7perMainv+0x14a>
#ifdef PHASES
			setTrimValue (phaseNo, idx, x);
    32f6:	ae 01       	movw	r20, r28
    32f8:	60 2f       	mov	r22, r16
    32fa:	8f 2d       	mov	r24, r15
    32fc:	06 d9       	rcall	.-3572   	; 0x250a <_Z12setTrimValuehhi>
			STORE_MODELVARS_TRIM;
#endif
			//if(event & _MSK_KEY_REPT) warble = true;
//            if(x <= 125 && x >= -125){

			int8_t t = x;
    32fe:	6c 2f       	mov	r22, r28
			if (t < 0) {
    3300:	c7 ff       	sbrs	r28, 7
    3302:	17 c0       	rjmp	.+46     	; 0x3332 <_Z7perMainv+0x176>
    3304:	15 c0       	rjmp	.+42     	; 0x3330 <_Z7perMainv+0x174>
			t /= 4;
			audioEvent (AU_TRIM_MOVE, t + 60);
//            }
		} else {
#ifdef PHASES
			setTrimValue (phaseNo, idx, (x > 0) ? 125 : -125);
    3306:	1c 16       	cp	r1, r28
    3308:	1d 06       	cpc	r1, r29
    330a:	1c f4       	brge	.+6      	; 0x3312 <_Z7perMainv+0x156>
    330c:	4d e7       	ldi	r20, 0x7D	; 125
    330e:	50 e0       	ldi	r21, 0x00	; 0
    3310:	02 c0       	rjmp	.+4      	; 0x3316 <_Z7perMainv+0x15a>
    3312:	43 e8       	ldi	r20, 0x83	; 131
    3314:	5f ef       	ldi	r21, 0xFF	; 255
    3316:	60 2f       	mov	r22, r16
    3318:	8f 2d       	mov	r24, r15
    331a:	f7 d8       	rcall	.-3602   	; 0x250a <_Z12setTrimValuehhi>
#else
			g_model.trim[idx] = (x<0) ? -125 : 125;
#endif
			STORE_MODELVARS_TRIM;
#endif
			if (x <= 125 && x >= -125) {
    331c:	ce 01       	movw	r24, r28
    331e:	83 58       	subi	r24, 0x83	; 131
    3320:	9f 4f       	sbci	r25, 0xFF	; 255
    3322:	8b 3f       	cpi	r24, 0xFB	; 251
    3324:	91 05       	cpc	r25, r1
    3326:	08 f0       	brcs	.+2      	; 0x332a <_Z7perMainv+0x16e>
    3328:	ff c1       	rjmp	.+1022   	; 0x3728 <_Z7perMainv+0x56c>
				int8_t t = x;
    332a:	6c 2f       	mov	r22, r28
				if (t > 0) {
    332c:	1c 16       	cp	r1, r28
    332e:	0c f4       	brge	.+2      	; 0x3332 <_Z7perMainv+0x176>
					t = -t;
    3330:	61 95       	neg	r22
				}
				t /= 4;
    3332:	67 fd       	sbrc	r22, 7
    3334:	6d 5f       	subi	r22, 0xFD	; 253
    3336:	65 95       	asr	r22
    3338:	65 95       	asr	r22
				audioEvent (AU_TRIM_MOVE, (t + 60));
    333a:	77 27       	eor	r23, r23
    333c:	67 fd       	sbrc	r22, 7
    333e:	70 95       	com	r23
    3340:	64 5c       	subi	r22, 0xC4	; 196
    3342:	7f 4f       	sbci	r23, 0xFF	; 255
    3344:	85 e1       	ldi	r24, 0x15	; 21
    3346:	0e 94 79 34 	call	0x68f2	; 0x68f2 <_Z10audioEventhj>
    334a:	ee c1       	rjmp	.+988    	; 0x3728 <_Z7perMainv+0x56c>
	// Note: LcdLock not needed here as at tasking level

	lcd_clear ();
	uint8_t evt = getEvent ();
	evt = checkTrim (evt);
	if ( (evt == 0) || (evt == EVT_KEY_REPT(KEY_MENU))) {
    334c:	81 2f       	mov	r24, r17
    334e:	8f 7b       	andi	r24, 0xBF	; 191
    3350:	69 f4       	brne	.+26     	; 0x336c <_Z7perMainv+0x1b0>
		uint8_t timer = LongMenuTimer;
    3352:	80 91 6a 06 	lds	r24, 0x066A
		if ( menuPressed()) {
    3356:	b1 99       	sbic	0x16, 1	; 22
    3358:	e3 c1       	rjmp	.+966    	; 0x3720 <_Z7perMainv+0x564>
			if (timer < 255) {
    335a:	8f 3f       	cpi	r24, 0xFF	; 255
    335c:	29 f0       	breq	.+10     	; 0x3368 <_Z7perMainv+0x1ac>
				timer += 1;
    335e:	8f 5f       	subi	r24, 0xFF	; 255
			}
		} else {
			timer = 0;
		}
		if (timer == 200) {
    3360:	88 3c       	cpi	r24, 0xC8	; 200
    3362:	11 f4       	brne	.+4      	; 0x3368 <_Z7perMainv+0x1ac>
			evt = EVT_TOGGLE_GVAR;
			timer = 255;
    3364:	8f ef       	ldi	r24, 0xFF	; 255
			}
		} else {
			timer = 0;
		}
		if (timer == 200) {
			evt = EVT_TOGGLE_GVAR;
    3366:	1d eb       	ldi	r17, 0xBD	; 189
			timer = 255;
		}
		LongMenuTimer = timer;
    3368:	80 93 6a 06 	sts	0x066A, r24
#ifndef NOPOTSCROLL
	int16_t p1d;

	struct t_p1 *ptrp1;
	ptrp1 = &P1values;
	FORCE_INDIRECT(ptrp1);
    336c:	ee e6       	ldi	r30, 0x6E	; 110
    336e:	f1 e0       	ldi	r31, 0x01	; 1

	int16_t c6 = calibratedStick[6];
    3370:	80 91 d3 0d 	lds	r24, 0x0DD3
    3374:	90 91 d4 0d 	lds	r25, 0x0DD4
	p1d = (ptrp1->p1val - c6) / 32;
    3378:	20 81       	ld	r18, Z
    337a:	31 81       	ldd	r19, Z+1	; 0x01
    337c:	28 1b       	sub	r18, r24
    337e:	39 0b       	sbc	r19, r25
    3380:	37 ff       	sbrs	r19, 7
    3382:	02 c0       	rjmp	.+4      	; 0x3388 <_Z7perMainv+0x1cc>
    3384:	21 5e       	subi	r18, 0xE1	; 225
    3386:	3f 4f       	sbci	r19, 0xFF	; 255
    3388:	65 e0       	ldi	r22, 0x05	; 5
    338a:	35 95       	asr	r19
    338c:	27 95       	ror	r18
    338e:	6a 95       	dec	r22
    3390:	e1 f7       	brne	.-8      	; 0x338a <_Z7perMainv+0x1ce>
	if (p1d) {
    3392:	21 15       	cp	r18, r1
    3394:	31 05       	cpc	r19, r1
    3396:	61 f0       	breq	.+24     	; 0x33b0 <_Z7perMainv+0x1f4>
		p1d = (ptrp1->p1valprev - c6) / 2;
    3398:	24 81       	ldd	r18, Z+4	; 0x04
    339a:	35 81       	ldd	r19, Z+5	; 0x05
    339c:	28 1b       	sub	r18, r24
    339e:	39 0b       	sbc	r19, r25
    33a0:	37 ff       	sbrs	r19, 7
    33a2:	02 c0       	rjmp	.+4      	; 0x33a8 <_Z7perMainv+0x1ec>
    33a4:	2f 5f       	subi	r18, 0xFF	; 255
    33a6:	3f 4f       	sbci	r19, 0xFF	; 255
    33a8:	35 95       	asr	r19
    33aa:	27 95       	ror	r18
		ptrp1->p1val = c6;
    33ac:	91 83       	std	Z+1, r25	; 0x01
    33ae:	80 83       	st	Z, r24
	}
	ptrp1->p1valprev = c6;
    33b0:	95 83       	std	Z+5, r25	; 0x05
    33b2:	84 83       	std	Z+4, r24	; 0x04
	if (g_eeGeneral.disablePotScroll || (scroll_disabled)) {
    33b4:	80 91 28 06 	lds	r24, 0x0628
    33b8:	85 fd       	sbrc	r24, 5
    33ba:	04 c0       	rjmp	.+8      	; 0x33c4 <_Z7perMainv+0x208>
    33bc:	80 91 a1 0d 	lds	r24, 0x0DA1
    33c0:	88 23       	and	r24, r24
    33c2:	11 f0       	breq	.+4      	; 0x33c8 <_Z7perMainv+0x20c>
		p1d = 0;
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	30 e0       	ldi	r19, 0x00	; 0
	}
	ptrp1->p1valdiff = p1d;
    33c8:	33 83       	std	Z+3, r19	; 0x03
    33ca:	22 83       	std	Z+2, r18	; 0x02
#endif

	struct t_rotary *protary = &Rotary;
	FORCE_INDIRECT(protary);
    33cc:	c2 ee       	ldi	r28, 0xE2	; 226
    33ce:	d1 e0       	ldi	r29, 0x01	; 1
	{
		int8_t x;
		x = protary->RotCount - protary->LastRotaryValue;
    33d0:	2d 81       	ldd	r18, Y+5	; 0x05
    33d2:	89 81       	ldd	r24, Y+1	; 0x01
    33d4:	82 1b       	sub	r24, r18
		if (x == -1) {
    33d6:	8f 3f       	cpi	r24, 0xFF	; 255
    33d8:	09 f4       	brne	.+2      	; 0x33dc <_Z7perMainv+0x220>
			x = 0;
    33da:	80 e0       	ldi	r24, 0x00	; 0
		}
		protary->Rotary_diff = (x) / 2;
    33dc:	87 fd       	sbrc	r24, 7
    33de:	8f 5f       	subi	r24, 0xFF	; 255
    33e0:	85 95       	asr	r24
    33e2:	88 87       	std	Y+8, r24	; 0x08
		protary->LastRotaryValue += protary->Rotary_diff * 2;
    33e4:	98 2f       	mov	r25, r24
    33e6:	99 0f       	add	r25, r25
    33e8:	92 0f       	add	r25, r18
    33ea:	9d 83       	std	Y+5, r25	; 0x05
	}

	doBackLightVoice (evt | protary->Rotary_diff);
    33ec:	81 2b       	or	r24, r17
    33ee:	c8 de       	rcall	.-624    	; 0x3180 <_Z16doBackLightVoiceh>
// Handle volume
	uint8_t requiredVolume;
	requiredVolume = g_eeGeneral.volume + 7;
    33f0:	00 91 3e 06 	lds	r16, 0x063E
    33f4:	09 5f       	subi	r16, 0xF9	; 249

	if ( (g_menuStack[g_menuStackPtr] == menuProc0) && (PopupData.PopupActive == 0)) {
    33f6:	e0 91 79 01 	lds	r30, 0x0179
    33fa:	f0 e0       	ldi	r31, 0x00	; 0
    33fc:	ee 0f       	add	r30, r30
    33fe:	ff 1f       	adc	r31, r31
    3400:	e6 58       	subi	r30, 0x86	; 134
    3402:	fe 4f       	sbci	r31, 0xFE	; 254
    3404:	20 81       	ld	r18, Z
    3406:	31 81       	ldd	r19, Z+1	; 0x01
    3408:	29 5a       	subi	r18, 0xA9	; 169
    340a:	39 45       	sbci	r19, 0x59	; 89
    340c:	09 f0       	breq	.+2      	; 0x3410 <_Z7perMainv+0x254>
    340e:	3f c0       	rjmp	.+126    	; 0x348e <_Z7perMainv+0x2d2>
    3410:	80 91 fc 0d 	lds	r24, 0x0DFC
    3414:	81 11       	cpse	r24, r1
    3416:	3b c0       	rjmp	.+118    	; 0x348e <_Z7perMainv+0x2d2>
		if (protary->Rotary_diff) {
    3418:	28 85       	ldd	r18, Y+8	; 0x08
    341a:	22 23       	and	r18, r18
    341c:	69 f0       	breq	.+26     	; 0x3438 <_Z7perMainv+0x27c>
			int16_t x = protary->RotaryControl;
    341e:	8e 81       	ldd	r24, Y+6	; 0x06
			x += protary->Rotary_diff;
    3420:	33 27       	eor	r19, r19
    3422:	27 fd       	sbrc	r18, 7
    3424:	30 95       	com	r19
			protary->RotaryControl = validatePlusMinus125 (x);
    3426:	a9 01       	movw	r20, r18
    3428:	48 0f       	add	r20, r24
    342a:	51 1d       	adc	r21, r1
    342c:	87 fd       	sbrc	r24, 7
    342e:	5a 95       	dec	r21
    3430:	ca 01       	movw	r24, r20
    3432:	5c d8       	rcall	.-3912   	; 0x24ec <_Z20validatePlusMinus125i>
    3434:	8e 83       	std	Y+6, r24	; 0x06
						}
					}
				}
			}
#endif
			protary->Rotary_diff = 0;
    3436:	18 86       	std	Y+8, r1	; 0x08
		}

		if (g_model.anaVolume)	// Only check if on main screen
    3438:	e0 91 9d 04 	lds	r30, 0x049D
    343c:	8e 2f       	mov	r24, r30
    343e:	80 7e       	andi	r24, 0xE0	; 224
    3440:	31 f1       	breq	.+76     	; 0x348e <_Z7perMainv+0x2d2>
		{
			uint16_t v;
			uint16_t divisor;
			if (g_model.anaVolume < 4) {
    3442:	e2 95       	swap	r30
    3444:	e6 95       	lsr	r30
    3446:	e7 70       	andi	r30, 0x07	; 7
    3448:	f0 e0       	ldi	r31, 0x00	; 0
    344a:	e4 30       	cpi	r30, 0x04	; 4
    344c:	f1 05       	cpc	r31, r1
    344e:	54 f4       	brge	.+20     	; 0x3464 <_Z7perMainv+0x2a8>
				v = calibratedStick[g_model.anaVolume + 3] + 1024;
    3450:	ee 0f       	add	r30, r30
    3452:	ff 1f       	adc	r31, r31
    3454:	e3 53       	subi	r30, 0x33	; 51
    3456:	f2 4f       	sbci	r31, 0xF2	; 242
    3458:	20 81       	ld	r18, Z
    345a:	31 81       	ldd	r19, Z+1	; 0x01
    345c:	3c 5f       	subi	r19, 0xFC	; 252
				divisor = 2048;
    345e:	60 e0       	ldi	r22, 0x00	; 0
    3460:	78 e0       	ldi	r23, 0x08	; 8
    3462:	0c c0       	rjmp	.+24     	; 0x347c <_Z7perMainv+0x2c0>
			} else {
				v = g_model.gvars[g_model.anaVolume - 1].gvar + 125;
    3464:	ee 0f       	add	r30, r30
    3466:	ff 1f       	adc	r31, r31
    3468:	ea 52       	subi	r30, 0x2A	; 42
    346a:	fb 4f       	sbci	r31, 0xFB	; 251
    346c:	20 81       	ld	r18, Z
    346e:	33 27       	eor	r19, r19
    3470:	27 fd       	sbrc	r18, 7
    3472:	30 95       	com	r19
    3474:	23 58       	subi	r18, 0x83	; 131
    3476:	3f 4f       	sbci	r19, 0xFF	; 255
				divisor = 250;
    3478:	6a ef       	ldi	r22, 0xFA	; 250
    347a:	70 e0       	ldi	r23, 0x00	; 0
			}
			requiredVolume = v * (NUM_VOL_LEVELS - 1) / divisor;
    347c:	47 e0       	ldi	r20, 0x07	; 7
    347e:	42 9f       	mul	r20, r18
    3480:	c0 01       	movw	r24, r0
    3482:	43 9f       	mul	r20, r19
    3484:	90 0d       	add	r25, r0
    3486:	11 24       	eor	r1, r1
    3488:	0e 94 d6 71 	call	0xe3ac	; 0xe3ac <__udivmodhi4>
    348c:	06 2f       	mov	r16, r22
		}
	}
	if (requiredVolume != CurrentVolume) {
    348e:	80 91 ec 01 	lds	r24, 0x01EC
    3492:	08 17       	cp	r16, r24
    3494:	11 f0       	breq	.+4      	; 0x349a <_Z7perMainv+0x2de>
		setVolume (requiredVolume);
    3496:	80 2f       	mov	r24, r16
    3498:	92 d9       	rcall	.-3292   	; 0x27be <_Z9setVolumeh>
	}

	if (g_eeGeneral.stickScroll && StickScrollAllowed) {
    349a:	80 91 2e 06 	lds	r24, 0x062E
    349e:	87 ff       	sbrs	r24, 7
    34a0:	39 c0       	rjmp	.+114    	; 0x3514 <_Z7perMainv+0x358>
    34a2:	80 91 85 01 	lds	r24, 0x0185
    34a6:	88 23       	and	r24, r24
    34a8:	a9 f1       	breq	.+106    	; 0x3514 <_Z7perMainv+0x358>
		if (StickScrollTimer) {
    34aa:	80 91 84 01 	lds	r24, 0x0184
    34ae:	88 23       	and	r24, r24
    34b0:	99 f1       	breq	.+102    	; 0x3518 <_Z7perMainv+0x35c>
			static uint8_t repeater;
			uint8_t direction;
			uint8_t value;

			if (repeater < 128) {
    34b2:	80 91 67 06 	lds	r24, 0x0667
    34b6:	87 fd       	sbrc	r24, 7
    34b8:	03 c0       	rjmp	.+6      	; 0x34c0 <_Z7perMainv+0x304>
				repeater += 1;
    34ba:	8f 5f       	subi	r24, 0xFF	; 255
    34bc:	80 93 67 06 	sts	0x0667, r24
			}
			value = calcStickScroll (2);
    34c0:	82 e0       	ldi	r24, 0x02	; 2
    34c2:	2f da       	rcall	.-2978   	; 0x2922 <_Z15calcStickScrollh>
			direction = value & 0x80;
			value &= 0x7F;
    34c4:	98 2f       	mov	r25, r24
    34c6:	9f 77       	andi	r25, 0x7F	; 127
			if (value) {
    34c8:	89 f0       	breq	.+34     	; 0x34ec <_Z7perMainv+0x330>
				if (repeater > value) {
    34ca:	20 91 67 06 	lds	r18, 0x0667
    34ce:	92 17       	cp	r25, r18
    34d0:	18 f5       	brcc	.+70     	; 0x3518 <_Z7perMainv+0x35c>
					repeater = 0;
    34d2:	10 92 67 06 	sts	0x0667, r1
					if (evt == 0) {
    34d6:	11 11       	cpse	r17, r1
    34d8:	1f c0       	rjmp	.+62     	; 0x3518 <_Z7perMainv+0x35c>
						if (direction) {
							evt = EVT_KEY_FIRST(KEY_UP);
    34da:	18 2f       	mov	r17, r24
    34dc:	10 95       	com	r17
    34de:	11 1f       	adc	r17, r17
    34e0:	11 27       	eor	r17, r17
    34e2:	11 1f       	adc	r17, r17
    34e4:	83 e6       	ldi	r24, 0x63	; 99
    34e6:	81 1b       	sub	r24, r17
    34e8:	18 2f       	mov	r17, r24
    34ea:	16 c0       	rjmp	.+44     	; 0x3518 <_Z7perMainv+0x35c>
							evt = EVT_KEY_FIRST(KEY_DOWN);
						}
					}
				}
			} else {
				value = calcStickScroll (3);
    34ec:	83 e0       	ldi	r24, 0x03	; 3
    34ee:	19 da       	rcall	.-3022   	; 0x2922 <_Z15calcStickScrollh>
				direction = value & 0x80;
				value &= 0x7F;
    34f0:	98 2f       	mov	r25, r24
    34f2:	9f 77       	andi	r25, 0x7F	; 127
				if (value) {
    34f4:	89 f0       	breq	.+34     	; 0x3518 <_Z7perMainv+0x35c>
					if (repeater > value) {
    34f6:	20 91 67 06 	lds	r18, 0x0667
    34fa:	92 17       	cp	r25, r18
    34fc:	68 f4       	brcc	.+26     	; 0x3518 <_Z7perMainv+0x35c>
						repeater = 0;
    34fe:	10 92 67 06 	sts	0x0667, r1
						if (evt == 0) {
    3502:	11 11       	cpse	r17, r1
    3504:	09 c0       	rjmp	.+18     	; 0x3518 <_Z7perMainv+0x35c>
							if (direction) {
								evt = EVT_KEY_FIRST(KEY_RIGHT);
    3506:	18 2f       	mov	r17, r24
    3508:	10 95       	com	r17
    350a:	11 1f       	adc	r17, r17
    350c:	11 27       	eor	r17, r17
    350e:	11 1f       	adc	r17, r17
    3510:	1c 59       	subi	r17, 0x9C	; 156
    3512:	02 c0       	rjmp	.+4      	; 0x3518 <_Z7perMainv+0x35c>
					}
				}
			}
		}
	} else {
		StickScrollTimer = 0;		// Seconds
    3514:	10 92 84 01 	sts	0x0184, r1
	}
	StickScrollAllowed = 1;
    3518:	81 e0       	ldi	r24, 0x01	; 1
    351a:	80 93 85 01 	sts	0x0185, r24
			}
#endif
			if (src <= 4) {
//					value = *TrimPtr[ convert_mode_helper(src) - 1 ] ;
#ifdef FIX_MODE
				value = getTrimValue (CurrentPhase, src - 1);
    351e:	00 91 1a 0c 	lds	r16, 0x0C1A
			} else if (src == 5)	// REN
					{
#if defined(CPUM128) || defined(CPUM2561)
				value = g_model.gvars[i].gvar;	// Adjusted elsewhere
#else
				value = Rotary.RotaryControl;
    3522:	e0 90 e8 01 	lds	r14, 0x01E8
    3526:	ff 24       	eor	r15, r15
    3528:	e7 fc       	sbrc	r14, 7
    352a:	f0 94       	com	r15
    352c:	c9 ed       	ldi	r28, 0xD9	; 217
    352e:	d4 e0       	ldi	r29, 0x04	; 4
			} else if (src <= 12)	// Pot
					{
				value = calibratedStick[ (src - 6)] / 8;
			} else	// if ( g_model.gvars[i].gvsource <= 28 )	// Chans
			{
				value = ex_chans[src - 13] / 10;
    3530:	9a e0       	ldi	r25, 0x0A	; 10
    3532:	c9 2e       	mov	r12, r25
    3534:	d1 2c       	mov	r13, r1
	}
	StickScrollAllowed = 1;

#if GVARS
	for (uint8_t i = 0; i < MAX_GVARS; i += 1) {
		if (g_model.gvars[i].gvsource) {
    3536:	68 81       	ld	r22, Y
    3538:	66 23       	and	r22, r22
    353a:	79 f1       	breq	.+94     	; 0x359a <_Z7perMainv+0x3de>
				{
					continue;
				}
			}
#endif
			if (src <= 4) {
    353c:	65 30       	cpi	r22, 0x05	; 5
    353e:	28 f4       	brcc	.+10     	; 0x354a <_Z7perMainv+0x38e>
//					value = *TrimPtr[ convert_mode_helper(src) - 1 ] ;
#ifdef FIX_MODE
				value = getTrimValue (CurrentPhase, src - 1);
    3540:	61 50       	subi	r22, 0x01	; 1
    3542:	80 2f       	mov	r24, r16
    3544:	0e 94 70 12 	call	0x24e0	; 0x24e0 <_Z12getTrimValuehh>
    3548:	23 c0       	rjmp	.+70     	; 0x3590 <_Z7perMainv+0x3d4>
#else
				value = getTrimValue( CurrentPhase, convert_mode_helper(src) - 1 );
#endif
			} else if (src == 5)	// REN
    354a:	65 30       	cpi	r22, 0x05	; 5
    354c:	01 f1       	breq	.+64     	; 0x358e <_Z7perMainv+0x3d2>
    354e:	e6 2f       	mov	r30, r22
    3550:	f0 e0       	ldi	r31, 0x00	; 0
				value = Rotary.RotaryControl;
#endif
			} else if (src <= 9)	// Stick
					{
#ifdef FIX_MODE
				value = calibratedStick[src - 5 - 1] / 8;
    3552:	ee 0f       	add	r30, r30
    3554:	ff 1f       	adc	r31, r31
#if defined(CPUM128) || defined(CPUM2561)
				value = g_model.gvars[i].gvar;	// Adjusted elsewhere
#else
				value = Rotary.RotaryControl;
#endif
			} else if (src <= 9)	// Stick
    3556:	6a 30       	cpi	r22, 0x0A	; 10
    3558:	10 f0       	brcs	.+4      	; 0x355e <_Z7perMainv+0x3a2>
#ifdef FIX_MODE
				value = calibratedStick[src - 5 - 1] / 8;
#else
				value = calibratedStick[ convert_mode_helper( src-5) - 1 ] / 8;
#endif
			} else if (src <= 12)	// Pot
    355a:	6d 30       	cpi	r22, 0x0D	; 13
    355c:	78 f4       	brcc	.+30     	; 0x357c <_Z7perMainv+0x3c0>
					{
				value = calibratedStick[ (src - 6)] / 8;
    355e:	e5 54       	subi	r30, 0x45	; 69
    3560:	f2 4f       	sbci	r31, 0xF2	; 242
    3562:	20 81       	ld	r18, Z
    3564:	31 81       	ldd	r19, Z+1	; 0x01
    3566:	37 ff       	sbrs	r19, 7
    3568:	02 c0       	rjmp	.+4      	; 0x356e <_Z7perMainv+0x3b2>
    356a:	29 5f       	subi	r18, 0xF9	; 249
    356c:	3f 4f       	sbci	r19, 0xFF	; 255
    356e:	c9 01       	movw	r24, r18
    3570:	b3 e0       	ldi	r27, 0x03	; 3
    3572:	95 95       	asr	r25
    3574:	87 95       	ror	r24
    3576:	ba 95       	dec	r27
    3578:	e1 f7       	brne	.-8      	; 0x3572 <_Z7perMainv+0x3b6>
    357a:	0a c0       	rjmp	.+20     	; 0x3590 <_Z7perMainv+0x3d4>
			} else	// if ( g_model.gvars[i].gvsource <= 28 )	// Chans
			{
				value = ex_chans[src - 13] / 10;
    357c:	e3 57       	subi	r30, 0x73	; 115
    357e:	f2 4f       	sbci	r31, 0xF2	; 242
    3580:	80 81       	ld	r24, Z
    3582:	91 81       	ldd	r25, Z+1	; 0x01
    3584:	b6 01       	movw	r22, r12
    3586:	0e 94 ea 71 	call	0xe3d4	; 0xe3d4 <__divmodhi4>
    358a:	cb 01       	movw	r24, r22
    358c:	01 c0       	rjmp	.+2      	; 0x3590 <_Z7perMainv+0x3d4>
			} else if (src == 5)	// REN
					{
#if defined(CPUM128) || defined(CPUM2561)
				value = g_model.gvars[i].gvar;	// Adjusted elsewhere
#else
				value = Rotary.RotaryControl;
    358e:	c7 01       	movw	r24, r14
				value = calibratedStick[ (src - 6)] / 8;
			} else	// if ( g_model.gvars[i].gvsource <= 28 )	// Chans
			{
				value = ex_chans[src - 13] / 10;
			}
			g_model.gvars[i].gvar = validatePlusMinus125 (value); // limit( -125, value, 125 ) ;
    3590:	0e 94 76 12 	call	0x24ec	; 0x24ec <_Z20validatePlusMinus125i>
    3594:	fe 01       	movw	r30, r28
    3596:	31 97       	sbiw	r30, 0x01	; 1
    3598:	80 83       	st	Z, r24
    359a:	22 96       	adiw	r28, 0x02	; 2
		StickScrollTimer = 0;		// Seconds
	}
	StickScrollAllowed = 1;

#if GVARS
	for (uint8_t i = 0; i < MAX_GVARS; i += 1) {
    359c:	54 e0       	ldi	r21, 0x04	; 4
    359e:	c7 3e       	cpi	r28, 0xE7	; 231
    35a0:	d5 07       	cpc	r29, r21
    35a2:	49 f6       	brne	.-110    	; 0x3536 <_Z7perMainv+0x37a>
		}
	}
#endif

	static uint8_t alertKey;
	if (AlertMessage) {
    35a4:	80 91 1f 02 	lds	r24, 0x021F
    35a8:	90 91 20 02 	lds	r25, 0x0220
    35ac:	00 97       	sbiw	r24, 0x00	; 0
    35ae:	b1 f0       	breq	.+44     	; 0x35dc <_Z7perMainv+0x420>
		almess (AlertMessage, ALERT_TYPE);
    35b0:	60 e0       	ldi	r22, 0x00	; 0
    35b2:	0e 94 0c 12 	call	0x2418	; 0x2418 <_Z6almessPKch>
		uint8_t key = keyDown ();
    35b6:	0e 94 82 70 	call	0xe104	; 0xe104 <_Z7keyDownv>
		if (alertKey) {
    35ba:	90 91 66 06 	lds	r25, 0x0666
    35be:	99 23       	and	r25, r25
    35c0:	39 f0       	breq	.+14     	; 0x35d0 <_Z7perMainv+0x414>
			if (key == 0) {
    35c2:	81 11       	cpse	r24, r1
    35c4:	28 c0       	rjmp	.+80     	; 0x3616 <_Z7perMainv+0x45a>
				AlertMessage = 0;
    35c6:	10 92 20 02 	sts	0x0220, r1
    35ca:	10 92 1f 02 	sts	0x021F, r1
    35ce:	23 c0       	rjmp	.+70     	; 0x3616 <_Z7perMainv+0x45a>
			}
		} else if (key) {
    35d0:	88 23       	and	r24, r24
    35d2:	09 f1       	breq	.+66     	; 0x3616 <_Z7perMainv+0x45a>
			alertKey = 1;
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	80 93 66 06 	sts	0x0666, r24
    35da:	1d c0       	rjmp	.+58     	; 0x3616 <_Z7perMainv+0x45a>
		//    	if ( stickMoved )
		//			{
		//				AlertMessage = 0 ;
		//			}
	} else {
		alertKey = 0;
    35dc:	10 92 66 06 	sts	0x0666, r1

//				uint16_t ltimer = MenuTimer ;
		if (EnterMenu) {
    35e0:	c0 91 78 01 	lds	r28, 0x0178
    35e4:	cc 23       	and	r28, r28
    35e6:	31 f0       	breq	.+12     	; 0x35f4 <_Z7perMainv+0x438>
			evt = EnterMenu;
			EnterMenu = 0;
    35e8:	10 92 78 01 	sts	0x0178, r1
			audioDefevent (AU_MENUS);
    35ec:	87 e1       	ldi	r24, 0x17	; 23
    35ee:	0e 94 74 34 	call	0x68e8	; 0x68e8 <_Z13audioDefeventh>
    35f2:	1c 2f       	mov	r17, r28
//					ltimer = 0 ;
		}
		StepSize = 20;
    35f4:	84 e1       	ldi	r24, 0x14	; 20
    35f6:	80 93 6d 01 	sts	0x016D, r24
		Tevent = evt;
    35fa:	10 93 e1 01 	sts	0x01E1, r17
//						}
//					}
//				}
//				MenuTimer = ltimer ;

		g_menuStack[g_menuStackPtr] (evt);
    35fe:	e0 91 79 01 	lds	r30, 0x0179
    3602:	f0 e0       	ldi	r31, 0x00	; 0
    3604:	ee 0f       	add	r30, r30
    3606:	ff 1f       	adc	r31, r31
    3608:	e6 58       	subi	r30, 0x86	; 134
    360a:	fe 4f       	sbci	r31, 0xFE	; 254
    360c:	01 90       	ld	r0, Z+
    360e:	f0 81       	ld	r31, Z
    3610:	e0 2d       	mov	r30, r0
    3612:	81 2f       	mov	r24, r17
    3614:	09 95       	icall
	}
//		if ( ++timer20mS > 9 )		// Only do next bit every 100mS
//		{
//			timer20mS = 0 ;
	refreshDiplay ();
    3616:	0e 94 2d 2a 	call	0x545a	; 0x545a <_Z13refreshDiplayv>
//		}
	{
		uint8_t pg;
		pg = PORTG;
    361a:	c0 91 65 00 	lds	r28, 0x0065
	return SlaveMode = SLAVE_MODE;
#else
	static bool lastSlaveMode = false;

	static uint8_t checkDelay = 0;
	if (audio.busy ()) {
    361e:	8f e9       	ldi	r24, 0x9F	; 159
    3620:	91 e0       	ldi	r25, 0x01	; 1
    3622:	0e 94 a6 32 	call	0x654c	; 0x654c <_ZN10audioQueue4busyEv>
    3626:	88 23       	and	r24, r24
    3628:	11 f0       	breq	.+4      	; 0x362e <_Z7perMainv+0x472>
		checkDelay = 20;
    362a:	84 e1       	ldi	r24, 0x14	; 20
    362c:	05 c0       	rjmp	.+10     	; 0x3638 <_Z7perMainv+0x47c>
	} else if (checkDelay) {
    362e:	80 91 e4 0f 	lds	r24, 0x0FE4
    3632:	88 23       	and	r24, r24
    3634:	21 f0       	breq	.+8      	; 0x363e <_Z7perMainv+0x482>
		--checkDelay;
    3636:	81 50       	subi	r24, 0x01	; 1
    3638:	80 93 e4 0f 	sts	0x0FE4, r24
    363c:	06 c0       	rjmp	.+12     	; 0x364a <_Z7perMainv+0x48e>
	} else {
		lastSlaveMode = SLAVE_MODE;   //
    363e:	80 91 63 00 	lds	r24, 0x0063
    3642:	86 95       	lsr	r24
    3644:	81 70       	andi	r24, 0x01	; 1
    3646:	80 93 e3 0f 	sts	0x0FE3, r24
	}
	return (SlaveMode = lastSlaveMode);
    364a:	80 91 e3 0f 	lds	r24, 0x0FE3
    364e:	80 93 1d 02 	sts	0x021D, r24
	refreshDiplay ();
//		}
	{
		uint8_t pg;
		pg = PORTG;
		if ( (checkSlaveMode ()) && (!g_eeGeneral.enablePpmsim)) {
    3652:	88 23       	and	r24, r24
    3654:	09 f4       	brne	.+2      	; 0x3658 <_Z7perMainv+0x49c>
    3656:	66 c0       	rjmp	.+204    	; 0x3724 <_Z7perMainv+0x568>
    3658:	80 91 2e 06 	lds	r24, 0x062E
    365c:	85 fd       	sbrc	r24, 5
    365e:	62 c0       	rjmp	.+196    	; 0x3724 <_Z7perMainv+0x568>
			pg &= ~ (1 << OUT_G_SIM_CTL); // 0=ppm out
    3660:	cf 7e       	andi	r28, 0xEF	; 239
		} else {
			pg |= (1 << OUT_G_SIM_CTL); // 1=ppm-in
		}
		PORTG = pg;
    3662:	c0 93 65 00 	sts	0x0065, r28
	}

	switch (g_blinkTmr10ms & 0x1f) { //alle 10ms*32
    3666:	80 91 cf 0a 	lds	r24, 0x0ACF
    366a:	8f 71       	andi	r24, 0x1F	; 31
    366c:	82 30       	cpi	r24, 0x02	; 2
    366e:	09 f0       	breq	.+2      	; 0x3672 <_Z7perMainv+0x4b6>
    3670:	54 c0       	rjmp	.+168    	; 0x371a <_Z7perMainv+0x55e>
			//        If battery voltage = 10V then A2D voltage = 3.462V
			//        11 bit A2D count is 1417 (3.462/5*2048).
			//        1417*18/256 = 99 (actually 99.6) to represent 9.9 volts.
			//        Erring on the side of low is probably best.

			int16_t ab = anaIn (7);
    3672:	80 91 55 01 	lds	r24, 0x0155
    3676:	90 91 56 01 	lds	r25, 0x0156
			ab = ab * 16 + ab / 8 * (6 + g_eeGeneral.vBatCalib);
    367a:	ac 01       	movw	r20, r24
    367c:	f4 e0       	ldi	r31, 0x04	; 4
    367e:	44 0f       	add	r20, r20
    3680:	55 1f       	adc	r21, r21
    3682:	fa 95       	dec	r31
    3684:	e1 f7       	brne	.-8      	; 0x367e <_Z7perMainv+0x4c2>
    3686:	97 fd       	sbrc	r25, 7
    3688:	07 96       	adiw	r24, 0x07	; 7
    368a:	bc 01       	movw	r22, r24
    368c:	e3 e0       	ldi	r30, 0x03	; 3
    368e:	75 95       	asr	r23
    3690:	67 95       	ror	r22
    3692:	ea 95       	dec	r30
    3694:	e1 f7       	brne	.-8      	; 0x368e <_Z7perMainv+0x4d2>
    3696:	20 91 12 06 	lds	r18, 0x0612
    369a:	33 27       	eor	r19, r19
    369c:	27 fd       	sbrc	r18, 7
    369e:	30 95       	com	r19
    36a0:	2a 5f       	subi	r18, 0xFA	; 250
    36a2:	3f 4f       	sbci	r19, 0xFF	; 255
    36a4:	62 9f       	mul	r22, r18
    36a6:	c0 01       	movw	r24, r0
    36a8:	63 9f       	mul	r22, r19
    36aa:	90 0d       	add	r25, r0
    36ac:	72 9f       	mul	r23, r18
    36ae:	90 0d       	add	r25, r0
    36b0:	11 24       	eor	r1, r1
    36b2:	84 0f       	add	r24, r20
    36b4:	95 1f       	adc	r25, r21
			ab = (uint16_t) ab / (g_eeGeneral.disableBG ? 240 : BandGap); // ab might be more than 32767
    36b6:	20 91 28 06 	lds	r18, 0x0628
    36ba:	26 fd       	sbrc	r18, 6
    36bc:	05 c0       	rjmp	.+10     	; 0x36c8 <_Z7perMainv+0x50c>
    36be:	60 91 00 01 	lds	r22, 0x0100
    36c2:	70 91 01 01 	lds	r23, 0x0101
    36c6:	02 c0       	rjmp	.+4      	; 0x36cc <_Z7perMainv+0x510>
    36c8:	60 ef       	ldi	r22, 0xF0	; 240
    36ca:	70 e0       	ldi	r23, 0x00	; 0
    36cc:	0e 94 d6 71 	call	0xe3ac	; 0xe3ac <__udivmodhi4>
			g_vbat100mV = (ab + g_vbat100mV + 1) >> 1; // Filter it a bit => more stable display
    36d0:	80 91 6c 01 	lds	r24, 0x016C
    36d4:	68 0f       	add	r22, r24
    36d6:	71 1d       	adc	r23, r1
    36d8:	6f 5f       	subi	r22, 0xFF	; 255
    36da:	7f 4f       	sbci	r23, 0xFF	; 255
    36dc:	75 95       	asr	r23
    36de:	67 95       	ror	r22
    36e0:	60 93 6c 01 	sts	0x016C, r22

			static uint8_t s_batCheck;
			s_batCheck += 16;
    36e4:	80 91 65 06 	lds	r24, 0x0665
    36e8:	80 5f       	subi	r24, 0xF0	; 240
    36ea:	80 93 65 06 	sts	0x0665, r24
			if ( (s_batCheck == 0) && (g_vbat100mV < g_eeGeneral.vBatWarn) && (g_vbat100mV > 49)) {
    36ee:	81 11       	cpse	r24, r1
    36f0:	14 c0       	rjmp	.+40     	; 0x371a <_Z7perMainv+0x55e>
    36f2:	80 91 11 06 	lds	r24, 0x0611
    36f6:	68 17       	cp	r22, r24
    36f8:	80 f4       	brcc	.+32     	; 0x371a <_Z7perMainv+0x55e>
    36fa:	62 33       	cpi	r22, 0x32	; 50
    36fc:	70 f0       	brcs	.+28     	; 0x371a <_Z7perMainv+0x55e>

				audioVoiceDefevent (AU_TX_BATTERY_LOW, V_BATTERY_LOW);
    36fe:	6e e2       	ldi	r22, 0x2E	; 46
    3700:	81 e1       	ldi	r24, 0x11	; 17
    3702:	0e 94 7e 34 	call	0x68fc	; 0x68fc <_Z18audioVoiceDefeventhh>
				if (g_eeGeneral.flashBeep) g_LightOffCounter = FLASH_DURATION;
    3706:	80 91 28 06 	lds	r24, 0x0628
    370a:	83 ff       	sbrs	r24, 3
    370c:	06 c0       	rjmp	.+12     	; 0x371a <_Z7perMainv+0x55e>
    370e:	82 e3       	ldi	r24, 0x32	; 50
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	90 93 6a 01 	sts	0x016A, r25
    3716:	80 93 69 01 	sts	0x0169, r24
			/* all this gone and replaced in new sound system */
		}
			break;
	}

	stickMoved = 0; //reset this flag
    371a:	10 92 68 01 	sts	0x0168, r1
    371e:	08 c0       	rjmp	.+16     	; 0x3730 <_Z7perMainv+0x574>
		if ( menuPressed()) {
			if (timer < 255) {
				timer += 1;
			}
		} else {
			timer = 0;
    3720:	80 e0       	ldi	r24, 0x00	; 0
    3722:	22 ce       	rjmp	.-956    	; 0x3368 <_Z7perMainv+0x1ac>
		uint8_t pg;
		pg = PORTG;
		if ( (checkSlaveMode ()) && (!g_eeGeneral.enablePpmsim)) {
			pg &= ~ (1 << OUT_G_SIM_CTL); // 0=ppm out
		} else {
			pg |= (1 << OUT_G_SIM_CTL); // 1=ppm-in
    3724:	c0 61       	ori	r28, 0x10	; 16
    3726:	9d cf       	rjmp	.-198    	; 0x3662 <_Z7perMainv+0x4a6>
			t /= 4;
			audioEvent (AU_TRIM_MOVE, t + 60);
//            }
		} else {
#ifdef PHASES
			setTrimValue (phaseNo, idx, (x > 0) ? 125 : -125);
    3728:	10 e0       	ldi	r17, 0x00	; 0
    372a:	13 ce       	rjmp	.-986    	; 0x3352 <_Z7perMainv+0x196>
#ifdef FIX_MODE
		bool thrChan = (2 == idx);
#else
		bool thrChan = ((2-(g_eeGeneral.stickMode&1)) == idx);
#endif
		bool thro = (thrChan && (g_model.thrTrim));
    372c:	80 e0       	ldi	r24, 0x00	; 0
    372e:	b4 cd       	rjmp	.-1176   	; 0x3298 <_Z7perMainv+0xdc>
			break;
	}

	stickMoved = 0; //reset this flag

}
    3730:	df 91       	pop	r29
    3732:	cf 91       	pop	r28
    3734:	1f 91       	pop	r17
    3736:	0f 91       	pop	r16
    3738:	ff 90       	pop	r15
    373a:	ef 90       	pop	r14
    373c:	df 90       	pop	r13
    373e:	cf 90       	pop	r12
    3740:	08 95       	ret

00003742 <_Z14getFlightPhasev>:
	&g_model.trim[3]
};
#endif

#ifdef PHASES
uint8_t getFlightPhase () {
    3742:	1f 93       	push	r17
    3744:	cf 93       	push	r28
    3746:	df 93       	push	r29
    3748:	ce ee       	ldi	r28, 0xEE	; 238
    374a:	d4 e0       	ldi	r29, 0x04	; 4
	uint8_t i;
	PhaseData *phase = &g_model.phaseData[0];

	for (i = 0; i < MAX_MODES; i += 1) {
    374c:	90 e0       	ldi	r25, 0x00	; 0
		if (phase->swtch && getSwitch (phase->swtch, 0)) {
    374e:	88 81       	ld	r24, Y
    3750:	11 e0       	ldi	r17, 0x01	; 1
    3752:	19 0f       	add	r17, r25
    3754:	88 23       	and	r24, r24
    3756:	39 f0       	breq	.+14     	; 0x3766 <_Z14getFlightPhasev+0x24>
    3758:	40 e0       	ldi	r20, 0x00	; 0
    375a:	60 e0       	ldi	r22, 0x00	; 0
    375c:	fd da       	rcall	.-2566   	; 0x2d58 <_Z9getSwitchabh>
    375e:	88 23       	and	r24, r24
    3760:	11 f0       	breq	.+4      	; 0x3766 <_Z14getFlightPhasev+0x24>
			return i + 1;
    3762:	81 2f       	mov	r24, r17
    3764:	05 c0       	rjmp	.+10     	; 0x3770 <_Z14getFlightPhasev+0x2e>
#ifdef PHASES
uint8_t getFlightPhase () {
	uint8_t i;
	PhaseData *phase = &g_model.phaseData[0];

	for (i = 0; i < MAX_MODES; i += 1) {
    3766:	91 2f       	mov	r25, r17
    3768:	2a 96       	adiw	r28, 0x0a	; 10
    376a:	14 30       	cpi	r17, 0x04	; 4
    376c:	81 f7       	brne	.-32     	; 0x374e <_Z14getFlightPhasev+0xc>
		if (phase->swtch && getSwitch (phase->swtch, 0)) {
			return i + 1;
		}
		phase += 1;
	}
	return 0;
    376e:	80 e0       	ldi	r24, 0x00	; 0
}
    3770:	df 91       	pop	r29
    3772:	cf 91       	pop	r28
    3774:	1f 91       	pop	r17
    3776:	08 95       	ret

00003778 <_Z17procOneVoiceAlarmP12t_voiceAlarmh>:
			}
		}
	}
}

void procOneVoiceAlarm (VoiceAlarmData *pvad, uint8_t i) {
    3778:	8f 92       	push	r8
    377a:	9f 92       	push	r9
    377c:	af 92       	push	r10
    377e:	bf 92       	push	r11
    3780:	cf 92       	push	r12
    3782:	df 92       	push	r13
    3784:	ef 92       	push	r14
    3786:	ff 92       	push	r15
    3788:	0f 93       	push	r16
    378a:	1f 93       	push	r17
    378c:	cf 93       	push	r28
    378e:	df 93       	push	r29
    3790:	ec 01       	movw	r28, r24
	uint8_t curent_state;
	uint8_t play = 0;
	curent_state = 0;
	int16_t ltimer = Nvs_timer[i];
    3792:	a6 2e       	mov	r10, r22
    3794:	b1 2c       	mov	r11, r1
    3796:	65 01       	movw	r12, r10
    3798:	cc 0c       	add	r12, r12
    379a:	dd 1c       	adc	r13, r13
    379c:	f6 01       	movw	r30, r12
    379e:	e3 51       	subi	r30, 0x13	; 19
    37a0:	fe 4f       	sbci	r31, 0xFE	; 254
    37a2:	00 81       	ld	r16, Z
    37a4:	11 81       	ldd	r17, Z+1	; 0x01

	if (pvad->func)		// Configured
    37a6:	89 81       	ldd	r24, Y+1	; 0x01
    37a8:	88 23       	and	r24, r24
    37aa:	09 f4       	brne	.+2      	; 0x37ae <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x36>
    37ac:	59 c0       	rjmp	.+178    	; 0x3860 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xe8>
	{
		int16_t x;
		int16_t y = pvad->offset;
    37ae:	8d 80       	ldd	r8, Y+5	; 0x05
    37b0:	9e 80       	ldd	r9, Y+6	; 0x06
		x = getValue (pvad->source - 1);
    37b2:	88 81       	ld	r24, Y
    37b4:	81 50       	subi	r24, 0x01	; 1
    37b6:	0e 94 65 11 	call	0x22ca	; 0x22ca <_Z8getValueh>
    37ba:	7c 01       	movw	r14, r24
		switch (pvad->func) {
    37bc:	89 81       	ldd	r24, Y+1	; 0x01
    37be:	85 30       	cpi	r24, 0x05	; 5
    37c0:	38 f4       	brcc	.+14     	; 0x37d0 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x58>
    37c2:	83 30       	cpi	r24, 0x03	; 3
    37c4:	50 f4       	brcc	.+20     	; 0x37da <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x62>
    37c6:	81 30       	cpi	r24, 0x01	; 1
    37c8:	79 f0       	breq	.+30     	; 0x37e8 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x70>
    37ca:	82 30       	cpi	r24, 0x02	; 2
    37cc:	91 f0       	breq	.+36     	; 0x37f2 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x7a>
    37ce:	39 c0       	rjmp	.+114    	; 0x3842 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xca>
    37d0:	85 30       	cpi	r24, 0x05	; 5
    37d2:	a1 f0       	breq	.+40     	; 0x37fc <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x84>
    37d4:	86 30       	cpi	r24, 0x06	; 6
    37d6:	71 f1       	breq	.+92     	; 0x3834 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xbc>
    37d8:	34 c0       	rjmp	.+104    	; 0x3842 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xca>
			case 2:
				x = x < y;
				break;
			case 3:
			case 4:
				x = abs(x);
    37da:	f7 fe       	sbrs	r15, 7
    37dc:	03 c0       	rjmp	.+6      	; 0x37e4 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x6c>
    37de:	f1 94       	neg	r15
    37e0:	e1 94       	neg	r14
    37e2:	f1 08       	sbc	r15, r1
				x = (pvad->func == 3) ? x > y : x < y;
    37e4:	83 30       	cpi	r24, 0x03	; 3
    37e6:	29 f4       	brne	.+10     	; 0x37f2 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x7a>
    37e8:	81 e0       	ldi	r24, 0x01	; 1
    37ea:	8e 14       	cp	r8, r14
    37ec:	9f 04       	cpc	r9, r15
    37ee:	3c f1       	brlt	.+78     	; 0x383e <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xc6>
    37f0:	25 c0       	rjmp	.+74     	; 0x383c <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xc4>
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	e8 14       	cp	r14, r8
    37f6:	f9 04       	cpc	r15, r9
    37f8:	14 f1       	brlt	.+68     	; 0x383e <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xc6>
    37fa:	20 c0       	rjmp	.+64     	; 0x383c <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xc4>
				break;
//					x = abs(x) < y ;
//				break ;
			case 5: {
				if (isAgvar (pvad->source)) {
    37fc:	88 81       	ld	r24, Y
    37fe:	47 da       	rcall	.-2930   	; 0x2c8e <_Z7isAgvarh>
    3800:	88 23       	and	r24, r24
    3802:	69 f0       	breq	.+26     	; 0x381e <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xa6>
					x *= 10;
    3804:	8a e0       	ldi	r24, 0x0A	; 10
    3806:	97 01       	movw	r18, r14
    3808:	82 9f       	mul	r24, r18
    380a:	70 01       	movw	r14, r0
    380c:	83 9f       	mul	r24, r19
    380e:	f0 0c       	add	r15, r0
    3810:	11 24       	eor	r1, r1
					y *= 10;
    3812:	94 01       	movw	r18, r8
    3814:	82 9f       	mul	r24, r18
    3816:	40 01       	movw	r8, r0
    3818:	83 9f       	mul	r24, r19
    381a:	90 0c       	add	r9, r0
    381c:	11 24       	eor	r1, r1
				}
				x = abs(x-y) < 32;
    381e:	e8 18       	sub	r14, r8
    3820:	f9 08       	sbc	r15, r9
    3822:	3f e1       	ldi	r19, 0x1F	; 31
    3824:	e3 0e       	add	r14, r19
    3826:	f1 1c       	adc	r15, r1
    3828:	81 e0       	ldi	r24, 0x01	; 1
    382a:	9f e3       	ldi	r25, 0x3F	; 63
    382c:	e9 16       	cp	r14, r25
    382e:	f1 04       	cpc	r15, r1
    3830:	30 f0       	brcs	.+12     	; 0x383e <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xc6>
    3832:	04 c0       	rjmp	.+8      	; 0x383c <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xc4>
			}
				break;
			case 6:
				x = x == y;
    3834:	81 e0       	ldi	r24, 0x01	; 1
    3836:	e8 14       	cp	r14, r8
    3838:	f9 04       	cpc	r15, r9
    383a:	09 f0       	breq	.+2      	; 0x383e <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xc6>
    383c:	80 e0       	ldi	r24, 0x00	; 0
    383e:	e8 2e       	mov	r14, r24
    3840:	f1 2c       	mov	r15, r1
//						{
//							x = 0 ;	// Treat as OFF
//						}
//					}
// End of invalid telemetry detection
		if (pvad->swtch) {
    3842:	8a 81       	ldd	r24, Y+2	; 0x02
    3844:	81 11       	cpse	r24, r1
    3846:	04 c0       	rjmp	.+8      	; 0x3850 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xd8>
			if (getSwitch (pvad->swtch, 0) == 0) {
				x = 0;
			}
		}
		if (x == 0) {
    3848:	ef 28       	or	r14, r15
    384a:	39 f0       	breq	.+14     	; 0x385a <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xe2>
			ltimer = 0;
		} else {
			play = 1;
    384c:	81 e0       	ldi	r24, 0x01	; 1
    384e:	1f c0       	rjmp	.+62     	; 0x388e <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x116>
//							x = 0 ;	// Treat as OFF
//						}
//					}
// End of invalid telemetry detection
		if (pvad->swtch) {
			if (getSwitch (pvad->swtch, 0) == 0) {
    3850:	40 e0       	ldi	r20, 0x00	; 0
    3852:	60 e0       	ldi	r22, 0x00	; 0
    3854:	81 da       	rcall	.-2814   	; 0x2d58 <_Z9getSwitchabh>
    3856:	81 11       	cpse	r24, r1
    3858:	f7 cf       	rjmp	.-18     	; 0x3848 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xd0>
				x = 0;
			}
		}
		if (x == 0) {
			ltimer = 0;
    385a:	00 e0       	ldi	r16, 0x00	; 0
    385c:	10 e0       	ldi	r17, 0x00	; 0
    385e:	16 c0       	rjmp	.+44     	; 0x388c <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x114>
		} else {
			play = 1;
		}
	} else // No function
	{
		if (pvad->swtch) {
    3860:	8a 81       	ldd	r24, Y+2	; 0x02
    3862:	88 23       	and	r24, r24
    3864:	41 f0       	breq	.+16     	; 0x3876 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0xfe>
			curent_state = getSwitch (pvad->swtch, 0);
    3866:	40 e0       	ldi	r20, 0x00	; 0
    3868:	60 e0       	ldi	r22, 0x00	; 0
    386a:	76 da       	rcall	.-2836   	; 0x2d58 <_Z9getSwitchabh>
			if (curent_state == 0) {
    386c:	81 11       	cpse	r24, r1
    386e:	0b c0       	rjmp	.+22     	; 0x3886 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x10e>
//							Nvs_state[i] = 0 ;
				ltimer = -1;
    3870:	0f ef       	ldi	r16, 0xFF	; 255
    3872:	1f ef       	ldi	r17, 0xFF	; 255
    3874:	0c c0       	rjmp	.+24     	; 0x388e <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x116>
			}
		} else // No switch, no function
		{ // Check for source with numeric rate
			if (pvad->rate >= 3)	// A time
    3876:	8b 81       	ldd	r24, Y+3	; 0x03
    3878:	83 30       	cpi	r24, 0x03	; 3
    387a:	40 f0       	brcs	.+16     	; 0x388c <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x114>
					{
				if (pvad->vsource) {
    387c:	9c 81       	ldd	r25, Y+4	; 0x04
    387e:	90 76       	andi	r25, 0x60	; 96
    3880:	81 e0       	ldi	r24, 0x01	; 1
    3882:	29 f4       	brne	.+10     	; 0x388e <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x116>
    3884:	03 c0       	rjmp	.+6      	; 0x388c <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x114>
	}
}

void procOneVoiceAlarm (VoiceAlarmData *pvad, uint8_t i) {
	uint8_t curent_state;
	uint8_t play = 0;
    3886:	80 e0       	ldi	r24, 0x00	; 0
    3888:	91 e0       	ldi	r25, 0x01	; 1
    388a:	02 c0       	rjmp	.+4      	; 0x3890 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x118>
    388c:	80 e0       	ldi	r24, 0x00	; 0
	curent_state = 0;
    388e:	90 e0       	ldi	r25, 0x00	; 0
					play = 1;
				}
			}
		}
	}
	play |= curent_state;
    3890:	89 2b       	or	r24, r25

	if ( (AlarmControl.VoiceCheckFlag & 2) == 0) {
    3892:	90 91 05 01 	lds	r25, 0x0105
    3896:	f5 01       	movw	r30, r10
    3898:	e3 50       	subi	r30, 0x03	; 3
    389a:	fe 4f       	sbci	r31, 0xFE	; 254
    389c:	91 fd       	sbrc	r25, 1
    389e:	27 c0       	rjmp	.+78     	; 0x38ee <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x176>
		if (play == 1) {
    38a0:	81 30       	cpi	r24, 0x01	; 1
    38a2:	81 f4       	brne	.+32     	; 0x38c4 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x14c>
			if (Nvs_state[i] == 0) { // just turned ON
    38a4:	80 81       	ld	r24, Z
    38a6:	81 11       	cpse	r24, r1
    38a8:	05 c0       	rjmp	.+10     	; 0x38b4 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x13c>
				if ( (pvad->rate == 0) || (pvad->rate == 2)) { // ON
    38aa:	8b 81       	ldd	r24, Y+3	; 0x03
    38ac:	8d 7f       	andi	r24, 0xFD	; 253
    38ae:	11 f4       	brne	.+4      	; 0x38b4 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x13c>
					ltimer = 0;
    38b0:	00 e0       	ldi	r16, 0x00	; 0
    38b2:	10 e0       	ldi	r17, 0x00	; 0
				}
			}
			Nvs_state[i] = 1;
    38b4:	81 e0       	ldi	r24, 0x01	; 1
    38b6:	80 83       	st	Z, r24
			if ( (pvad->rate == 1)) {
    38b8:	ff 24       	eor	r15, r15
    38ba:	f3 94       	inc	r15
    38bc:	8b 81       	ldd	r24, Y+3	; 0x03
    38be:	81 30       	cpi	r24, 0x01	; 1
    38c0:	d1 f4       	brne	.+52     	; 0x38f6 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x17e>
    38c2:	18 c0       	rjmp	.+48     	; 0x38f4 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x17c>
				play = 0;
			}
		} else {
			if (Nvs_state[i] == 1) {
    38c4:	80 81       	ld	r24, Z
    38c6:	81 30       	cpi	r24, 0x01	; 1
    38c8:	61 f4       	brne	.+24     	; 0x38e2 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x16a>
				if ( (pvad->rate == 1) || (pvad->rate == 2)) {
    38ca:	8b 81       	ldd	r24, Y+3	; 0x03
    38cc:	9f ef       	ldi	r25, 0xFF	; 255
    38ce:	98 0f       	add	r25, r24
    38d0:	92 30       	cpi	r25, 0x02	; 2
    38d2:	38 f4       	brcc	.+14     	; 0x38e2 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x16a>
					ltimer = 0;
    38d4:	00 e0       	ldi	r16, 0x00	; 0
    38d6:	10 e0       	ldi	r17, 0x00	; 0
					play = 1;
					if (pvad->rate == 2) {
    38d8:	82 30       	cpi	r24, 0x02	; 2
    38da:	29 f0       	breq	.+10     	; 0x38e6 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x16e>
			}
		} else {
			if (Nvs_state[i] == 1) {
				if ( (pvad->rate == 1) || (pvad->rate == 2)) {
					ltimer = 0;
					play = 1;
    38dc:	ff 24       	eor	r15, r15
    38de:	f3 94       	inc	r15
    38e0:	04 c0       	rjmp	.+8      	; 0x38ea <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x172>
    38e2:	f1 2c       	mov	r15, r1
    38e4:	02 c0       	rjmp	.+4      	; 0x38ea <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x172>
					if (pvad->rate == 2) {
						play = 2;
    38e6:	a2 e0       	ldi	r26, 0x02	; 2
    38e8:	fa 2e       	mov	r15, r26
					}
				}
			}
			Nvs_state[i] = 0;
    38ea:	10 82       	st	Z, r1
    38ec:	04 c0       	rjmp	.+8      	; 0x38f6 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x17e>
		}
	} else {
		Nvs_state[i] = play;
    38ee:	80 83       	st	Z, r24
		ltimer = -1;
    38f0:	0f ef       	ldi	r16, 0xFF	; 255
    38f2:	1f ef       	ldi	r17, 0xFF	; 255
		play = 0;
    38f4:	f1 2c       	mov	r15, r1
	}

	if (pvad->mute) {
    38f6:	8c 81       	ldd	r24, Y+4	; 0x04
    38f8:	87 fd       	sbrc	r24, 7
    38fa:	03 c0       	rjmp	.+6      	; 0x3902 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x18a>
				play = 0;	// Mute it
			}
		}
	}

	if (play) {
    38fc:	f1 10       	cpse	r15, r1
    38fe:	0b c0       	rjmp	.+22     	; 0x3916 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x19e>
    3900:	63 c0       	rjmp	.+198    	; 0x39c8 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x250>
		ltimer = -1;
		play = 0;
	}

	if (pvad->mute) {
		if (pvad->source > ( CHOUT_BASE - NUM_CHNOUT)) { // Telemetry item
    3902:	88 81       	ld	r24, Y
    3904:	85 30       	cpi	r24, 0x05	; 5
    3906:	d0 f3       	brcs	.-12     	; 0x38fc <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x184>
			if (!telemItemValid (pvad->source - 1 - CHOUT_BASE - NUM_CHNOUT)) {
    3908:	85 52       	subi	r24, 0x25	; 37
    390a:	0e 94 11 37 	call	0x6e22	; 0x6e22 <_Z14telemItemValidh>
    390e:	88 23       	and	r24, r24
    3910:	09 f4       	brne	.+2      	; 0x3914 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x19c>
    3912:	5a c0       	rjmp	.+180    	; 0x39c8 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x250>
    3914:	f3 cf       	rjmp	.-26     	; 0x38fc <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x184>
			}
		}
	}

	if (play) {
		if (ltimer < 0) {
    3916:	17 ff       	sbrs	r17, 7
    3918:	04 c0       	rjmp	.+8      	; 0x3922 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x1aa>
			if (pvad->rate >= 3)	// A time
    391a:	8b 81       	ldd	r24, Y+3	; 0x03
    391c:	83 30       	cpi	r24, 0x03	; 3
    391e:	20 f4       	brcc	.+8      	; 0x3928 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x1b0>
    3920:	53 c0       	rjmp	.+166    	; 0x39c8 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x250>
					{
				ltimer = 0;
			}
		}
		if (ltimer == 0) {
    3922:	01 15       	cp	r16, r1
    3924:	11 05       	cpc	r17, r1
    3926:	d1 f5       	brne	.+116    	; 0x399c <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x224>
			if (pvad->vsource == 1) {
    3928:	8c 81       	ldd	r24, Y+4	; 0x04
    392a:	80 76       	andi	r24, 0x60	; 96
    392c:	80 32       	cpi	r24, 0x20	; 32
    392e:	11 f4       	brne	.+4      	; 0x3934 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x1bc>
				doVoiceAlarmSource (pvad);
    3930:	ce 01       	movw	r24, r28
    3932:	b4 d9       	rcall	.-3224   	; 0x2c9c <_Z18doVoiceAlarmSourceP12t_voiceAlarm>
//								voice_numeric( value, 0, 0 ) ;
//							}
//						}
//					}
			}
			if (pvad->fnameType == 0)	// None
    3934:	8c 81       	ldd	r24, Y+4	; 0x04
    3936:	87 70       	andi	r24, 0x07	; 7
    3938:	89 f0       	breq	.+34     	; 0x395c <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x1e4>
					{
				// Nothing!
			} else if (pvad->fnameType == 1)	// Name
    393a:	81 30       	cpi	r24, 0x01	; 1
    393c:	51 f4       	brne	.+20     	; 0x3952 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x1da>
//					}
//					putUserVoice( name, 0 ) ;
//				}
//				else if ( pvad->fnameType == 2 )	// Number
					{
				putVoiceQueueLong (pvad->vfile + (play - 1));
    393e:	8f 2d       	mov	r24, r15
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	01 97       	sbiw	r24, 0x01	; 1
    3944:	2f 81       	ldd	r18, Y+7	; 0x07
    3946:	38 85       	ldd	r19, Y+8	; 0x08
    3948:	82 0f       	add	r24, r18
    394a:	93 1f       	adc	r25, r19
    394c:	0e 94 c3 13 	call	0x2786	; 0x2786 <_Z17putVoiceQueueLongj>
    3950:	05 c0       	rjmp	.+10     	; 0x395c <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x1e4>
			} else { // Audio
				audioEvent (pvad->vfile, 0);
    3952:	60 e0       	ldi	r22, 0x00	; 0
    3954:	70 e0       	ldi	r23, 0x00	; 0
    3956:	8f 81       	ldd	r24, Y+7	; 0x07
    3958:	0e 94 79 34 	call	0x68f2	; 0x68f2 <_Z10audioEventhj>
			}
			if (pvad->vsource == 2) {
    395c:	8c 81       	ldd	r24, Y+4	; 0x04
    395e:	80 76       	andi	r24, 0x60	; 96
    3960:	80 34       	cpi	r24, 0x40	; 64
    3962:	11 f4       	brne	.+4      	; 0x3968 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x1f0>
				doVoiceAlarmSource (pvad);
    3964:	ce 01       	movw	r24, r28
    3966:	9a d9       	rcall	.-3276   	; 0x2c9c <_Z18doVoiceAlarmSourceP12t_voiceAlarm>
//								voice_numeric( value, 0, 0 ) ;
//							}
//						}
//					}
			}
			if (pvad->haptic) {
    3968:	8c 81       	ldd	r24, Y+4	; 0x04
    396a:	28 2f       	mov	r18, r24
    396c:	28 71       	andi	r18, 0x18	; 24
    396e:	81 f0       	breq	.+32     	; 0x3990 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x218>
				audioDefevent (
						(pvad->haptic > 1) ? ( (pvad->haptic == 3) ? AU_HAPTIC3 : AU_HAPTIC2) :
    3970:	86 95       	lsr	r24
    3972:	86 95       	lsr	r24
    3974:	86 95       	lsr	r24
    3976:	83 70       	andi	r24, 0x03	; 3
    3978:	90 e0       	ldi	r25, 0x00	; 0
						AU_HAPTIC1);
    397a:	02 97       	sbiw	r24, 0x02	; 2
    397c:	24 f0       	brlt	.+8      	; 0x3986 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x20e>
    397e:	28 31       	cpi	r18, 0x18	; 24
    3980:	21 f4       	brne	.+8      	; 0x398a <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x212>
    3982:	8f e0       	ldi	r24, 0x0F	; 15
    3984:	03 c0       	rjmp	.+6      	; 0x398c <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x214>
    3986:	8d e0       	ldi	r24, 0x0D	; 13
    3988:	01 c0       	rjmp	.+2      	; 0x398c <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x214>
    398a:	8e e0       	ldi	r24, 0x0E	; 14
    398c:	0e 94 74 34 	call	0x68e8	; 0x68e8 <_Z13audioDefeventh>
			}
			if (pvad->rate < 3)	// ON/OFF/BOTH
    3990:	8b 81       	ldd	r24, Y+3	; 0x03
    3992:	83 30       	cpi	r24, 0x03	; 3
    3994:	b8 f4       	brcc	.+46     	; 0x39c4 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x24c>
					{
				ltimer = -1;
    3996:	0f ef       	ldi	r16, 0xFF	; 255
    3998:	1f ef       	ldi	r17, 0xFF	; 255
    399a:	16 c0       	rjmp	.+44     	; 0x39c8 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x250>
			} else {
				ltimer = 1;
			}
		} else if (ltimer > 0) {
    399c:	10 16       	cp	r1, r16
    399e:	11 06       	cpc	r1, r17
    39a0:	9c f4       	brge	.+38     	; 0x39c8 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x250>
			ltimer += 1;
    39a2:	0f 5f       	subi	r16, 0xFF	; 255
    39a4:	1f 4f       	sbci	r17, 0xFF	; 255
			if (ltimer > ( (pvad->rate - 2) * 10)) {
    39a6:	8b 81       	ldd	r24, Y+3	; 0x03
    39a8:	90 e0       	ldi	r25, 0x00	; 0
    39aa:	02 97       	sbiw	r24, 0x02	; 2
    39ac:	4a e0       	ldi	r20, 0x0A	; 10
    39ae:	48 9f       	mul	r20, r24
    39b0:	90 01       	movw	r18, r0
    39b2:	49 9f       	mul	r20, r25
    39b4:	30 0d       	add	r19, r0
    39b6:	11 24       	eor	r1, r1
    39b8:	20 17       	cp	r18, r16
    39ba:	31 07       	cpc	r19, r17
    39bc:	2c f4       	brge	.+10     	; 0x39c8 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x250>
				ltimer = 0;
    39be:	00 e0       	ldi	r16, 0x00	; 0
    39c0:	10 e0       	ldi	r17, 0x00	; 0
    39c2:	02 c0       	rjmp	.+4      	; 0x39c8 <_Z17procOneVoiceAlarmP12t_voiceAlarmh+0x250>
			}
			if (pvad->rate < 3)	// ON/OFF/BOTH
					{
				ltimer = -1;
			} else {
				ltimer = 1;
    39c4:	01 e0       	ldi	r16, 0x01	; 1
    39c6:	10 e0       	ldi	r17, 0x00	; 0
				ltimer = 0;
			}
		}
	}
	pvad += 1;
	Nvs_timer[i] = ltimer;
    39c8:	f6 01       	movw	r30, r12
    39ca:	e3 51       	subi	r30, 0x13	; 19
    39cc:	fe 4f       	sbci	r31, 0xFE	; 254
    39ce:	11 83       	std	Z+1, r17	; 0x01
    39d0:	00 83       	st	Z, r16
}
    39d2:	df 91       	pop	r29
    39d4:	cf 91       	pop	r28
    39d6:	1f 91       	pop	r17
    39d8:	0f 91       	pop	r16
    39da:	ff 90       	pop	r15
    39dc:	ef 90       	pop	r14
    39de:	df 90       	pop	r13
    39e0:	cf 90       	pop	r12
    39e2:	bf 90       	pop	r11
    39e4:	af 90       	pop	r10
    39e6:	9f 90       	pop	r9
    39e8:	8f 90       	pop	r8
    39ea:	08 95       	ret

000039ec <_Z18processVoiceAlarmsv>:

NOINLINE void processVoiceAlarms () {
    39ec:	1f 93       	push	r17
    39ee:	cf 93       	push	r28
    39f0:	df 93       	push	r29
	uint8_t i;
//	uint8_t curent_state ;
	VoiceAlarmData *pvad = &g_model.vad[0];
    39f2:	ca e9       	ldi	r28, 0x9A	; 154
    39f4:	d5 e0       	ldi	r29, 0x05	; 5
//	FORCE_INDIRECT(pvad) ;

	for (i = 0; i < NUM_VOICE_ALARMS; i += 1) {
    39f6:	10 e0       	ldi	r17, 0x00	; 0
		procOneVoiceAlarm (pvad, i);
    39f8:	61 2f       	mov	r22, r17
    39fa:	ce 01       	movw	r24, r28
    39fc:	bd de       	rcall	.-646    	; 0x3778 <_Z17procOneVoiceAlarmP12t_voiceAlarmh>
		pvad += 1;
    39fe:	29 96       	adiw	r28, 0x09	; 9
	uint8_t i;
//	uint8_t curent_state ;
	VoiceAlarmData *pvad = &g_model.vad[0];
//	FORCE_INDIRECT(pvad) ;

	for (i = 0; i < NUM_VOICE_ALARMS; i += 1) {
    3a00:	1f 5f       	subi	r17, 0xFF	; 255
    3a02:	18 30       	cpi	r17, 0x08	; 8
    3a04:	c9 f7       	brne	.-14     	; 0x39f8 <_Z18processVoiceAlarmsv+0xc>
		procOneVoiceAlarm (pvad, i);
		pvad += 1;
	}
}
    3a06:	df 91       	pop	r29
    3a08:	cf 91       	pop	r28
    3a0a:	1f 91       	pop	r17
    3a0c:	08 95       	ret

00003a0e <_Z12mainSequencev>:
#endif

void mainSequence () {
    3a0e:	8f 92       	push	r8
    3a10:	9f 92       	push	r9
    3a12:	af 92       	push	r10
    3a14:	bf 92       	push	r11
    3a16:	df 92       	push	r13
    3a18:	ef 92       	push	r14
    3a1a:	ff 92       	push	r15
    3a1c:	0f 93       	push	r16
    3a1e:	1f 93       	push	r17
    3a20:	cf 93       	push	r28
    3a22:	df 93       	push	r29
	CalcScaleNest = 0;
    3a24:	10 92 da 0d 	sts	0x0DDA, r1
	g_tmr16KHz++;
}

static uint16_t getTmr16KHz () {
	while (1) {
		uint8_t hb = g_tmr16KHz;
    3a28:	80 91 46 01 	lds	r24, 0x0146
		uint8_t lb = TCNT0;
    3a2c:	c2 b7       	in	r28, 0x32	; 50
		if (hb - g_tmr16KHz == 0) return (hb << 8) | lb;
    3a2e:	90 91 46 01 	lds	r25, 0x0146
    3a32:	89 13       	cpse	r24, r25
    3a34:	f9 cf       	rjmp	.-14     	; 0x3a28 <_Z12mainSequencev+0x1a>
    3a36:	d0 e0       	ldi	r29, 0x00	; 0
    3a38:	d8 2b       	or	r29, r24

void mainSequence () {
	CalcScaleNest = 0;

	uint16_t t0 = getTmr16KHz ();
	uint8_t numSafety = 16 - g_model.numVoice;
    3a3a:	80 91 9d 04 	lds	r24, 0x049D
    3a3e:	8f 71       	andi	r24, 0x1F	; 31
    3a40:	60 e1       	ldi	r22, 0x10	; 16
    3a42:	d6 2e       	mov	r13, r22
    3a44:	d8 1a       	sub	r13, r24
//    {
//        getADC_filt() ;
//    }
//    else if ( g_eeGeneral.filterInput == 2)
//    {
	getADC_osmp ();
    3a46:	0e 94 fe 14 	call	0x29fc	; 0x29fc <_Z11getADC_osmpv>
//    }
//    else
//    {
//        getADC_single() ;
//    }
	ADMUX = 0x1E | ADC_VREF_TYPE;   // Select bandgap
    3a4a:	1e e5       	ldi	r17, 0x5E	; 94
    3a4c:	17 b9       	out	0x07, r17	; 7
	pollRotary ();
    3a4e:	0e 94 69 14 	call	0x28d2	; 0x28d2 <_Z10pollRotaryv>
	perMain ();      // Give bandgap plenty of time to settle
    3a52:	b4 db       	rcall	.-2200   	; 0x31bc <_Z7perMainv>
//        s_anaFilt[adc_input] = result ; // use 11 bit numbers
//    }
//}

static void getADC_bandgap () {
	ADMUX = 0x1E | ADC_VREF_TYPE;
    3a54:	17 b9       	out	0x07, r17	; 7
	//  ADCSRA|=0x40;
	// Wait for the AD conversion to complete
	//  while ((ADCSRA & 0x10)==0);
	//  ADCSRA|=0x10;
	// Do it twice, first conversion may be wrong
	ADCSRA |= 0x40;
    3a56:	36 9a       	sbi	0x06, 6	; 6
	// Wait for the AD conversion to complete
	while (ADCSRA & 0x40)
    3a58:	36 99       	sbic	0x06, 6	; 6
    3a5a:	fe cf       	rjmp	.-4      	; 0x3a58 <_Z12mainSequencev+0x4a>
		;
//    ADCSRA|=0x10;
	BandGap = (BandGap * 7 + ADC + 4) >> 3;
    3a5c:	84 b1       	in	r24, 0x04	; 4
    3a5e:	95 b1       	in	r25, 0x05	; 5
    3a60:	04 96       	adiw	r24, 0x04	; 4
    3a62:	40 91 00 01 	lds	r20, 0x0100
    3a66:	50 91 01 01 	lds	r21, 0x0101
    3a6a:	67 e0       	ldi	r22, 0x07	; 7
    3a6c:	64 9f       	mul	r22, r20
    3a6e:	90 01       	movw	r18, r0
    3a70:	65 9f       	mul	r22, r21
    3a72:	30 0d       	add	r19, r0
    3a74:	11 24       	eor	r1, r1
    3a76:	82 0f       	add	r24, r18
    3a78:	93 1f       	adc	r25, r19
    3a7a:	53 e0       	ldi	r21, 0x03	; 3
    3a7c:	96 95       	lsr	r25
    3a7e:	87 95       	ror	r24
    3a80:	5a 95       	dec	r21
    3a82:	e1 f7       	brne	.-8      	; 0x3a7c <_Z12mainSequencev+0x6e>
    3a84:	90 93 01 01 	sts	0x0101, r25
    3a88:	80 93 00 01 	sts	0x0100, r24
	ADMUX = 0x1E | ADC_VREF_TYPE;   // Select bandgap
	pollRotary ();
	perMain ();      // Give bandgap plenty of time to settle
	getADC_bandgap ();
	//while(get_tmr10ms()==old10ms) sleep_mode();
	if (heartbeat == 0x3) {
    3a8c:	80 91 0d 0b 	lds	r24, 0x0B0D
    3a90:	83 30       	cpi	r24, 0x03	; 3
    3a92:	19 f4       	brne	.+6      	; 0x3a9a <_Z12mainSequencev+0x8c>
		wdt_reset();
    3a94:	a8 95       	wdr
		heartbeat = 0;
    3a96:	10 92 0d 0b 	sts	0x0B0D, r1
	g_tmr16KHz++;
}

static uint16_t getTmr16KHz () {
	while (1) {
		uint8_t hb = g_tmr16KHz;
    3a9a:	20 91 46 01 	lds	r18, 0x0146
		uint8_t lb = TCNT0;
    3a9e:	82 b7       	in	r24, 0x32	; 50
		if (hb - g_tmr16KHz == 0) return (hb << 8) | lb;
    3aa0:	90 91 46 01 	lds	r25, 0x0146
    3aa4:	29 13       	cpse	r18, r25
    3aa6:	f9 cf       	rjmp	.-14     	; 0x3a9a <_Z12mainSequencev+0x8c>
    3aa8:	90 e0       	ldi	r25, 0x00	; 0
    3aaa:	92 2b       	or	r25, r18
	//while(get_tmr10ms()==old10ms) sleep_mode();
	if (heartbeat == 0x3) {
		wdt_reset();
		heartbeat = 0;
	}
	t0 = getTmr16KHz () - t0;
    3aac:	8c 1b       	sub	r24, r28
    3aae:	9d 0b       	sbc	r25, r29
	if (t0 > g_latency.g_timeMain) g_latency.g_timeMain = t0;
    3ab0:	20 91 1e 01 	lds	r18, 0x011E
    3ab4:	30 91 1f 01 	lds	r19, 0x011F
    3ab8:	28 17       	cp	r18, r24
    3aba:	39 07       	cpc	r19, r25
    3abc:	20 f4       	brcc	.+8      	; 0x3ac6 <_Z12mainSequencev+0xb8>
    3abe:	90 93 1f 01 	sts	0x011F, r25
    3ac2:	80 93 1e 01 	sts	0x011E, r24

	if (AlarmControl.VoiceCheckFlag)		// Every 100 mS
    3ac6:	80 91 05 01 	lds	r24, 0x0105
    3aca:	88 23       	and	r24, r24
    3acc:	09 f4       	brne	.+2      	; 0x3ad0 <_Z12mainSequencev+0xc2>
    3ace:	23 c1       	rjmp	.+582    	; 0x3d16 <_Z12mainSequencev+0x308>
	{
		uint8_t i;
		static uint16_t timer;

		timer += 1;
    3ad0:	80 91 61 06 	lds	r24, 0x0661
    3ad4:	90 91 62 06 	lds	r25, 0x0662
    3ad8:	01 96       	adiw	r24, 0x01	; 1
    3ada:	90 93 62 06 	sts	0x0662, r25
    3ade:	80 93 61 06 	sts	0x0661, r24

//#if defined(CPUM128) || defined(CPUM2561)
		for (i = numSafety; i < NUM_CHNOUT + EXTRA_VOICE_SW; i += 1)
    3ae2:	bd 2c       	mov	r11, r13
    3ae4:	f7 e1       	ldi	r31, 0x17	; 23
    3ae6:	fb 15       	cp	r31, r11
    3ae8:	08 f4       	brcc	.+2      	; 0x3aec <_Z12mainSequencev+0xde>
    3aea:	7c c0       	rjmp	.+248    	; 0x3be4 <_Z12mainSequencev+0x1d6>
//#endif
				{
			uint8_t curent_state;
			uint8_t mode;
			uint8_t value;
			SafetySwData *sd = &g_model.safetySw[i];
    3aec:	0b 2d       	mov	r16, r11
    3aee:	10 e0       	ldi	r17, 0x00	; 0
    3af0:	e8 01       	movw	r28, r16
    3af2:	cc 0f       	add	r28, r28
    3af4:	dd 1f       	adc	r29, r29
    3af6:	c2 56       	subi	r28, 0x62	; 98
    3af8:	db 4f       	sbci	r29, 0xFB	; 251
//#if defined(CPUM128) || defined(CPUM2561)
			if (i >= NUM_CHNOUT) {
    3afa:	8f e0       	ldi	r24, 0x0F	; 15
    3afc:	8b 15       	cp	r24, r11
    3afe:	28 f4       	brcc	.+10     	; 0x3b0a <_Z12mainSequencev+0xfc>
				sd = &g_model.xvoiceSw[i - NUM_CHNOUT];
    3b00:	e8 01       	movw	r28, r16
    3b02:	cc 0f       	add	r28, r28
    3b04:	dd 1f       	adc	r29, r29
    3b06:	ce 5f       	subi	r28, 0xFE	; 254
    3b08:	da 4f       	sbci	r29, 0xFA	; 250
			}
//#endif

			mode = sd->opt.vs.vmode;
    3b0a:	88 81       	ld	r24, Y
    3b0c:	e8 2e       	mov	r14, r24
    3b0e:	e2 94       	swap	r14
    3b10:	e6 94       	lsr	r14
    3b12:	27 e0       	ldi	r18, 0x07	; 7
    3b14:	e2 22       	and	r14, r18
			value = sd->opt.vs.vval;
    3b16:	f9 80       	ldd	r15, Y+1	; 0x01
			if (mode <= 5) {
    3b18:	95 e0       	ldi	r25, 0x05	; 5
    3b1a:	9e 15       	cp	r25, r14
    3b1c:	50 f0       	brcs	.+20     	; 0x3b32 <_Z12mainSequencev+0x124>
				if (value > 250) {
    3b1e:	ea ef       	ldi	r30, 0xFA	; 250
    3b20:	ef 15       	cp	r30, r15
    3b22:	38 f4       	brcc	.+14     	; 0x3b32 <_Z12mainSequencev+0x124>
					value = g_model.gvars[value - 248].gvar; //Gvars 3-7
    3b24:	ef 2d       	mov	r30, r15
    3b26:	f0 e0       	ldi	r31, 0x00	; 0
    3b28:	ee 0f       	add	r30, r30
    3b2a:	ff 1f       	adc	r31, r31
    3b2c:	e8 51       	subi	r30, 0x18	; 24
    3b2e:	fd 4f       	sbci	r31, 0xFD	; 253
    3b30:	f0 80       	ld	r15, Z
				}
			}

			if (sd->opt.vs.vswtch)		// Configured
    3b32:	8f 71       	andi	r24, 0x1F	; 31
    3b34:	09 f4       	brne	.+2      	; 0x3b38 <_Z12mainSequencev+0x12a>
    3b36:	54 c0       	rjmp	.+168    	; 0x3be0 <_Z12mainSequencev+0x1d2>
			{
				curent_state = getSwitch (sd->opt.vs.vswtch, 0);
    3b38:	40 e0       	ldi	r20, 0x00	; 0
    3b3a:	60 e0       	ldi	r22, 0x00	; 0
    3b3c:	0d d9       	rcall	.-3558   	; 0x2d58 <_Z9getSwitchabh>
    3b3e:	a8 2e       	mov	r10, r24
				if ( (AlarmControl.VoiceCheckFlag & 2) == 0) {
    3b40:	80 91 05 01 	lds	r24, 0x0105
    3b44:	0b 5f       	subi	r16, 0xFB	; 251
    3b46:	1d 4f       	sbci	r17, 0xFD	; 253
    3b48:	81 fd       	sbrc	r24, 1
    3b4a:	48 c0       	rjmp	.+144    	; 0x3bdc <_Z12mainSequencev+0x1ce>
					if ( (mode == 0) || (mode == 2)) { // ON
    3b4c:	8e 2d       	mov	r24, r14
    3b4e:	85 70       	andi	r24, 0x05	; 5
    3b50:	51 f4       	brne	.+20     	; 0x3b66 <_Z12mainSequencev+0x158>
						if ( (Vs_state[i] == 0) && curent_state) {
    3b52:	f8 01       	movw	r30, r16
    3b54:	80 81       	ld	r24, Z
    3b56:	81 11       	cpse	r24, r1
    3b58:	06 c0       	rjmp	.+12     	; 0x3b66 <_Z12mainSequencev+0x158>
    3b5a:	aa 20       	and	r10, r10
    3b5c:	21 f0       	breq	.+8      	; 0x3b66 <_Z12mainSequencev+0x158>
void putVoiceQueueUpper (uint8_t value) {
	putVoiceQueueLong (value + 260);
}

void putVoiceQueue (uint8_t value) {
	putVoiceQueueLong (value);
    3b5e:	8f 2d       	mov	r24, r15
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	0e 94 c3 13 	call	0x2786	; 0x2786 <_Z17putVoiceQueueLongj>
					if ( (mode == 0) || (mode == 2)) { // ON
						if ( (Vs_state[i] == 0) && curent_state) {
							putVoiceQueue (value);
						}
					}
					if ( (mode == 1) || (mode == 2)) { // OFF
    3b66:	8f ef       	ldi	r24, 0xFF	; 255
    3b68:	8e 0d       	add	r24, r14
    3b6a:	82 30       	cpi	r24, 0x02	; 2
    3b6c:	58 f4       	brcc	.+22     	; 0x3b84 <_Z12mainSequencev+0x176>
						if ( (Vs_state[i] == 1) && !curent_state) {
    3b6e:	f8 01       	movw	r30, r16
    3b70:	80 81       	ld	r24, Z
    3b72:	81 30       	cpi	r24, 0x01	; 1
    3b74:	99 f5       	brne	.+102    	; 0x3bdc <_Z12mainSequencev+0x1ce>
    3b76:	a1 10       	cpse	r10, r1
    3b78:	31 c0       	rjmp	.+98     	; 0x3bdc <_Z12mainSequencev+0x1ce>
//							uint8_t x ;
//							x = sd->opt.vs.vval ;
							if (mode == 2) {
    3b7a:	f2 e0       	ldi	r31, 0x02	; 2
    3b7c:	ef 12       	cpse	r14, r31
    3b7e:	2a c0       	rjmp	.+84     	; 0x3bd4 <_Z12mainSequencev+0x1c6>
								value += 1;
    3b80:	f3 94       	inc	r15
    3b82:	28 c0       	rjmp	.+80     	; 0x3bd4 <_Z12mainSequencev+0x1c6>
							}
							putVoiceQueue (value);
						}
					}
					if (mode > 5) {
    3b84:	85 e0       	ldi	r24, 0x05	; 5
    3b86:	8e 15       	cp	r24, r14
    3b88:	50 f4       	brcc	.+20     	; 0x3b9e <_Z12mainSequencev+0x190>
						if ( (Vs_state[i] == 0) && curent_state) {
    3b8a:	f8 01       	movw	r30, r16
    3b8c:	80 81       	ld	r24, Z
    3b8e:	81 11       	cpse	r24, r1
    3b90:	25 c0       	rjmp	.+74     	; 0x3bdc <_Z12mainSequencev+0x1ce>
    3b92:	aa 20       	and	r10, r10
    3b94:	19 f1       	breq	.+70     	; 0x3bdc <_Z12mainSequencev+0x1ce>
							voice_telem_item (sd->opt.vs.vval);
    3b96:	89 81       	ldd	r24, Y+1	; 0x01
    3b98:	0e 94 51 37 	call	0x6ea2	; 0x6ea2 <_Z16voice_telem_itemh>
    3b9c:	1f c0       	rjmp	.+62     	; 0x3bdc <_Z12mainSequencev+0x1ce>
						}
					} else if (mode > 2) { // 15, 30 or 60 secs
    3b9e:	f2 e0       	ldi	r31, 0x02	; 2
    3ba0:	fe 15       	cp	r31, r14
    3ba2:	e0 f4       	brcc	.+56     	; 0x3bdc <_Z12mainSequencev+0x1ce>
						if (curent_state) {
    3ba4:	aa 20       	and	r10, r10
    3ba6:	d1 f0       	breq	.+52     	; 0x3bdc <_Z12mainSequencev+0x1ce>
							uint16_t mask;
							mask = 150;
							if (mode == 4) mask = 300;
    3ba8:	84 e0       	ldi	r24, 0x04	; 4
    3baa:	e8 16       	cp	r14, r24
    3bac:	31 f0       	breq	.+12     	; 0x3bba <_Z12mainSequencev+0x1ac>
							if (mode == 5) mask = 600;
    3bae:	95 e0       	ldi	r25, 0x05	; 5
    3bb0:	e9 16       	cp	r14, r25
    3bb2:	31 f0       	breq	.+12     	; 0x3bc0 <_Z12mainSequencev+0x1b2>
							voice_telem_item (sd->opt.vs.vval);
						}
					} else if (mode > 2) { // 15, 30 or 60 secs
						if (curent_state) {
							uint16_t mask;
							mask = 150;
    3bb4:	66 e9       	ldi	r22, 0x96	; 150
    3bb6:	70 e0       	ldi	r23, 0x00	; 0
    3bb8:	05 c0       	rjmp	.+10     	; 0x3bc4 <_Z12mainSequencev+0x1b6>
							if (mode == 4) mask = 300;
    3bba:	6c e2       	ldi	r22, 0x2C	; 44
    3bbc:	71 e0       	ldi	r23, 0x01	; 1
    3bbe:	02 c0       	rjmp	.+4      	; 0x3bc4 <_Z12mainSequencev+0x1b6>
							if (mode == 5) mask = 600;
    3bc0:	68 e5       	ldi	r22, 0x58	; 88
    3bc2:	72 e0       	ldi	r23, 0x02	; 2
							if (timer % mask == 0) {
    3bc4:	80 91 61 06 	lds	r24, 0x0661
    3bc8:	90 91 62 06 	lds	r25, 0x0662
    3bcc:	0e 94 d6 71 	call	0xe3ac	; 0xe3ac <__udivmodhi4>
    3bd0:	89 2b       	or	r24, r25
    3bd2:	21 f4       	brne	.+8      	; 0x3bdc <_Z12mainSequencev+0x1ce>
void putVoiceQueueUpper (uint8_t value) {
	putVoiceQueueLong (value + 260);
}

void putVoiceQueue (uint8_t value) {
	putVoiceQueueLong (value);
    3bd4:	8f 2d       	mov	r24, r15
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	0e 94 c3 13 	call	0x2786	; 0x2786 <_Z17putVoiceQueueLongj>
								putVoiceQueue (value);
							}
						}
					}
				}
				Vs_state[i] = curent_state;
    3bdc:	f8 01       	movw	r30, r16
    3bde:	a0 82       	st	Z, r10
		static uint16_t timer;

		timer += 1;

//#if defined(CPUM128) || defined(CPUM2561)
		for (i = numSafety; i < NUM_CHNOUT + EXTRA_VOICE_SW; i += 1)
    3be0:	b3 94       	inc	r11
    3be2:	80 cf       	rjmp	.-256    	; 0x3ae4 <_Z12mainSequencev+0xd6>
    3be4:	07 e7       	ldi	r16, 0x77	; 119
    3be6:	14 e0       	ldi	r17, 0x04	; 4
    3be8:	c4 e5       	ldi	r28, 0x54	; 84
    3bea:	8c 2e       	mov	r8, r28
    3bec:	c6 e0       	ldi	r28, 0x06	; 6
    3bee:	9c 2e       	mov	r9, r28
    3bf0:	d6 e8       	ldi	r29, 0x86	; 134
    3bf2:	ad 2e       	mov	r10, r29
    3bf4:	d1 e0       	ldi	r29, 0x01	; 1
    3bf6:	bd 2e       	mov	r11, r29
    3bf8:	e1 2c       	mov	r14, r1
    3bfa:	f1 2c       	mov	r15, r1
			}
		}

		for (i = 0; i < NUM_CSW; i += 1) {
			CSwData *cs = &g_model.customSw[i];
			uint8_t cstate = CS_STATE (cs->func);
    3bfc:	f8 01       	movw	r30, r16
    3bfe:	82 81       	ldd	r24, Z+2	; 0x02
    3c00:	8f 70       	andi	r24, 0x0F	; 15
    3c02:	0e 94 81 10 	call	0x2102	; 0x2102 <_Z8CS_STATEh>

			if (cstate == CS_TIMER) {
    3c06:	83 30       	cpi	r24, 0x03	; 3
    3c08:	09 f0       	breq	.+2      	; 0x3c0c <_Z12mainSequencev+0x1fe>
    3c0a:	3e c0       	rjmp	.+124    	; 0x3c88 <_Z12mainSequencev+0x27a>
				int16_t y;
				y = CsTimer[i];
    3c0c:	f5 01       	movw	r30, r10
    3c0e:	c0 81       	ld	r28, Z
    3c10:	d1 81       	ldd	r29, Z+1	; 0x01
				if (y == 0) {
    3c12:	20 97       	sbiw	r28, 0x00	; 0
    3c14:	71 f4       	brne	.+28     	; 0x3c32 <_Z12mainSequencev+0x224>
					int8_t z;
					z = cs->v1;
    3c16:	f8 01       	movw	r30, r16
    3c18:	c0 81       	ld	r28, Z
					if (z >= 0) {
    3c1a:	c7 fd       	sbrc	r28, 7
    3c1c:	06 c0       	rjmp	.+12     	; 0x3c2a <_Z12mainSequencev+0x21c>
						z = -z - 1;
    3c1e:	c0 95       	com	r28
						y = z * 10;
    3c20:	fa e0       	ldi	r31, 0x0A	; 10
    3c22:	cf 02       	muls	r28, r31
    3c24:	e0 01       	movw	r28, r0
    3c26:	11 24       	eor	r1, r1
    3c28:	1b c0       	rjmp	.+54     	; 0x3c60 <_Z12mainSequencev+0x252>
					} else {
						y = z;
    3c2a:	dd 27       	eor	r29, r29
    3c2c:	c7 fd       	sbrc	r28, 7
    3c2e:	d0 95       	com	r29
    3c30:	17 c0       	rjmp	.+46     	; 0x3c60 <_Z12mainSequencev+0x252>
					}
				} else if (y < 0) {
    3c32:	d7 ff       	sbrs	r29, 7
    3c34:	14 c0       	rjmp	.+40     	; 0x3c5e <_Z12mainSequencev+0x250>
					if (++y == 0) {
    3c36:	21 96       	adiw	r28, 0x01	; 1
    3c38:	99 f4       	brne	.+38     	; 0x3c60 <_Z12mainSequencev+0x252>
    3c3a:	f7 01       	movw	r30, r14
    3c3c:	e8 58       	subi	r30, 0x88	; 136
    3c3e:	fb 4f       	sbci	r31, 0xFB	; 251
						int8_t z;
						z = cs->v2;
    3c40:	c0 81       	ld	r28, Z
						if (z >= 0) {
    3c42:	c7 fd       	sbrc	r28, 7
    3c44:	06 c0       	rjmp	.+12     	; 0x3c52 <_Z12mainSequencev+0x244>
							z += 1;
    3c46:	cf 5f       	subi	r28, 0xFF	; 255
							y = z * 10 - 1;
    3c48:	8a e0       	ldi	r24, 0x0A	; 10
    3c4a:	c8 02       	muls	r28, r24
    3c4c:	e0 01       	movw	r28, r0
    3c4e:	11 24       	eor	r1, r1
    3c50:	06 c0       	rjmp	.+12     	; 0x3c5e <_Z12mainSequencev+0x250>
						} else {
							y = -z - 1;
    3c52:	dd 27       	eor	r29, r29
    3c54:	c7 fd       	sbrc	r28, 7
    3c56:	d0 95       	com	r29
    3c58:	c0 95       	com	r28
    3c5a:	d0 95       	com	r29
    3c5c:	01 c0       	rjmp	.+2      	; 0x3c60 <_Z12mainSequencev+0x252>
						}
					}
				} else  // if ( CsTimer[i] > 0 )
				{
					y -= 1;
    3c5e:	21 97       	sbiw	r28, 0x01	; 1
				}
				if (cs->andsw) {
    3c60:	f8 01       	movw	r30, r16
    3c62:	82 81       	ldd	r24, Z+2	; 0x02
    3c64:	98 2f       	mov	r25, r24
    3c66:	90 7f       	andi	r25, 0xF0	; 240
    3c68:	61 f0       	breq	.+24     	; 0x3c82 <_Z12mainSequencev+0x274>
					int8_t x;
					x = cs->andsw;
    3c6a:	82 95       	swap	r24
    3c6c:	8f 70       	andi	r24, 0x0F	; 15
					if (x > 8) {
    3c6e:	89 30       	cpi	r24, 0x09	; 9
    3c70:	0c f0       	brlt	.+2      	; 0x3c74 <_Z12mainSequencev+0x266>
						x += 1;
    3c72:	8f 5f       	subi	r24, 0xFF	; 255
					}
					if (getSwitch (x, 0, 0) == 0) {
    3c74:	40 e0       	ldi	r20, 0x00	; 0
    3c76:	60 e0       	ldi	r22, 0x00	; 0
    3c78:	6f d8       	rcall	.-3874   	; 0x2d58 <_Z9getSwitchabh>
    3c7a:	81 11       	cpse	r24, r1
    3c7c:	02 c0       	rjmp	.+4      	; 0x3c82 <_Z12mainSequencev+0x274>
						y = -1;
    3c7e:	cf ef       	ldi	r28, 0xFF	; 255
    3c80:	df ef       	ldi	r29, 0xFF	; 255
					}
				}
				CsTimer[i] = y;
    3c82:	f5 01       	movw	r30, r10
    3c84:	d1 83       	std	Z+1, r29	; 0x01
    3c86:	c0 83       	st	Z, r28
			}
#ifdef VERSION3
			uint8_t lastSwitch = Last_switch[i];
    3c88:	f4 01       	movw	r30, r8
    3c8a:	c0 81       	ld	r28, Z
			if (cs->func == CS_LATCH) {
    3c8c:	f8 01       	movw	r30, r16
    3c8e:	82 81       	ldd	r24, Z+2	; 0x02
    3c90:	8f 70       	andi	r24, 0x0F	; 15
    3c92:	8c 30       	cpi	r24, 0x0C	; 12
    3c94:	91 f4       	brne	.+36     	; 0x3cba <_Z12mainSequencev+0x2ac>
				if (getSwitch (cs->v1, 0, 0)) {
    3c96:	40 e0       	ldi	r20, 0x00	; 0
    3c98:	60 e0       	ldi	r22, 0x00	; 0
    3c9a:	80 81       	ld	r24, Z
    3c9c:	5d d8       	rcall	.-3910   	; 0x2d58 <_Z9getSwitchabh>
    3c9e:	81 11       	cpse	r24, r1
    3ca0:	0b c0       	rjmp	.+22     	; 0x3cb8 <_Z12mainSequencev+0x2aa>
					lastSwitch = 1;
				} else {
					if (getSwitch (cs->v2, 0, 0)) {
    3ca2:	40 e0       	ldi	r20, 0x00	; 0
    3ca4:	60 e0       	ldi	r22, 0x00	; 0
    3ca6:	f7 01       	movw	r30, r14
    3ca8:	e8 58       	subi	r30, 0x88	; 136
    3caa:	fb 4f       	sbci	r31, 0xFB	; 251
    3cac:	80 81       	ld	r24, Z
    3cae:	54 d8       	rcall	.-3928   	; 0x2d58 <_Z9getSwitchabh>
    3cb0:	88 23       	and	r24, r24
    3cb2:	19 f0       	breq	.+6      	; 0x3cba <_Z12mainSequencev+0x2ac>
						lastSwitch = 0;
    3cb4:	c0 e0       	ldi	r28, 0x00	; 0
    3cb6:	01 c0       	rjmp	.+2      	; 0x3cba <_Z12mainSequencev+0x2ac>
			}
#ifdef VERSION3
			uint8_t lastSwitch = Last_switch[i];
			if (cs->func == CS_LATCH) {
				if (getSwitch (cs->v1, 0, 0)) {
					lastSwitch = 1;
    3cb8:	c1 e0       	ldi	r28, 0x01	; 1
					if (getSwitch (cs->v2, 0, 0)) {
						lastSwitch = 0;
					}
				}
			}
			if (cs->func == CS_FLIP) {
    3cba:	f8 01       	movw	r30, r16
    3cbc:	82 81       	ldd	r24, Z+2	; 0x02
    3cbe:	8f 70       	andi	r24, 0x0F	; 15
    3cc0:	8d 30       	cpi	r24, 0x0D	; 13
    3cc2:	b1 f4       	brne	.+44     	; 0x3cf0 <_Z12mainSequencev+0x2e2>
				if (getSwitch (cs->v1, 0, 0)) {
    3cc4:	40 e0       	ldi	r20, 0x00	; 0
    3cc6:	60 e0       	ldi	r22, 0x00	; 0
    3cc8:	80 81       	ld	r24, Z
    3cca:	46 d8       	rcall	.-3956   	; 0x2d58 <_Z9getSwitchabh>
    3ccc:	88 23       	and	r24, r24
    3cce:	69 f0       	breq	.+26     	; 0x3cea <_Z12mainSequencev+0x2dc>
					if ( (lastSwitch & 2) == 0) {
    3cd0:	c1 fd       	sbrc	r28, 1
    3cd2:	0e c0       	rjmp	.+28     	; 0x3cf0 <_Z12mainSequencev+0x2e2>
						// Clock it!
						if (getSwitch (cs->v2, 0, 0)) {
    3cd4:	40 e0       	ldi	r20, 0x00	; 0
    3cd6:	60 e0       	ldi	r22, 0x00	; 0
    3cd8:	f7 01       	movw	r30, r14
    3cda:	e8 58       	subi	r30, 0x88	; 136
    3cdc:	fb 4f       	sbci	r31, 0xFB	; 251
    3cde:	80 81       	ld	r24, Z
    3ce0:	3b d8       	rcall	.-3978   	; 0x2d58 <_Z9getSwitchabh>
    3ce2:	88 23       	and	r24, r24
    3ce4:	21 f0       	breq	.+8      	; 0x3cee <_Z12mainSequencev+0x2e0>
							lastSwitch = 3;
    3ce6:	c3 e0       	ldi	r28, 0x03	; 3
    3ce8:	03 c0       	rjmp	.+6      	; 0x3cf0 <_Z12mainSequencev+0x2e2>
						} else {
							lastSwitch = 2;
						}
					}
				} else {
					lastSwitch &= ~2;
    3cea:	cd 7f       	andi	r28, 0xFD	; 253
    3cec:	01 c0       	rjmp	.+2      	; 0x3cf0 <_Z12mainSequencev+0x2e2>
					if ( (lastSwitch & 2) == 0) {
						// Clock it!
						if (getSwitch (cs->v2, 0, 0)) {
							lastSwitch = 3;
						} else {
							lastSwitch = 2;
    3cee:	c2 e0       	ldi	r28, 0x02	; 2
					}
				} else {
					lastSwitch &= ~2;
				}
			}
			Last_switch[i] = lastSwitch;
    3cf0:	f4 01       	movw	r30, r8
    3cf2:	c1 93       	st	Z+, r28
    3cf4:	4f 01       	movw	r8, r30
    3cf6:	0d 5f       	subi	r16, 0xFD	; 253
    3cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    3cfa:	f3 e0       	ldi	r31, 0x03	; 3
    3cfc:	ef 0e       	add	r14, r31
    3cfe:	f1 1c       	adc	r15, r1
    3d00:	82 e0       	ldi	r24, 0x02	; 2
    3d02:	a8 0e       	add	r10, r24
    3d04:	b1 1c       	adc	r11, r1
				}
				Vs_state[i] = curent_state;
			}
		}

		for (i = 0; i < NUM_CSW; i += 1) {
    3d06:	94 e2       	ldi	r25, 0x24	; 36
    3d08:	e9 16       	cp	r14, r25
    3d0a:	f1 04       	cpc	r15, r1
    3d0c:	09 f0       	breq	.+2      	; 0x3d10 <_Z12mainSequencev+0x302>
    3d0e:	76 cf       	rjmp	.-276    	; 0x3bfc <_Z12mainSequencev+0x1ee>
			}
#endif
		}
#endif
#ifdef VOICE_ALARMS
		processVoiceAlarms ();
    3d10:	6d de       	rcall	.-806    	; 0x39ec <_Z18processVoiceAlarmsv>
#endif
		AlarmControl.VoiceCheckFlag = 0;
    3d12:	10 92 05 01 	sts	0x0105, r1
			}
		}
#endif // FrSky
	}

	if (AlarmControl.OneSecFlag)		// Custom Switch Timers
    3d16:	80 91 03 01 	lds	r24, 0x0103
    3d1a:	88 23       	and	r24, r24
    3d1c:	09 f4       	brne	.+2      	; 0x3d20 <_Z12mainSequencev+0x312>
    3d1e:	7c c0       	rjmp	.+248    	; 0x3e18 <_Z12mainSequencev+0x40a>
#ifndef NOSAFETY_A_OR_V
		// Now for the Safety/alarm switch alarms
		// Carried out evey 100 mS
		{
			static uint8_t periodCounter;
			uint8_t pCounter = periodCounter;
    3d20:	20 91 60 06 	lds	r18, 0x0660

			pCounter += 0x11;
    3d24:	2f 5e       	subi	r18, 0xEF	; 239
			if ( (pCounter & 0x0F) > 11) {
    3d26:	82 2f       	mov	r24, r18
    3d28:	8f 70       	andi	r24, 0x0F	; 15
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	0c 97       	sbiw	r24, 0x0c	; 12
    3d2e:	0c f0       	brlt	.+2      	; 0x3d32 <_Z12mainSequencev+0x324>
				pCounter &= 0xF0;
    3d30:	20 7f       	andi	r18, 0xF0	; 240
			}
			periodCounter = pCounter;
    3d32:	20 93 60 06 	sts	0x0660, r18
    3d36:	c1 e2       	ldi	r28, 0x21	; 33
    3d38:	d2 e0       	ldi	r29, 0x02	; 2
			for (i = 0; i < numSafety; i += 1) {
    3d3a:	f1 2c       	mov	r15, r1
				SafetySwData *sd = &g_model.safetySw[i];
				if (sd->opt.ss.mode == 1) {
					if ( (pCounter & 0x30) == 0) {
    3d3c:	e2 2f       	mov	r30, r18
    3d3e:	e0 73       	andi	r30, 0x30	; 48
    3d40:	ee 2e       	mov	r14, r30
								if ( (pCounter & 0x70) == 0) {
									voice_telem_item (sd->opt.ss.val);
								}
								break;
							case 1:
								if ( (pCounter & 0x0F) == 0) {
    3d42:	f2 2f       	mov	r31, r18
    3d44:	ff 70       	andi	r31, 0x0F	; 15
    3d46:	bf 2e       	mov	r11, r31
					if (sd->opt.ss.swtch > MAX_DRSWITCH) {
						uint8_t temp = sd->opt.ss.swtch;
						temp -= MAX_DRSWITCH + 1;
						switch (temp) {
							case 0:
								if ( (pCounter & 0x70) == 0) {
    3d48:	82 2f       	mov	r24, r18
    3d4a:	80 77       	andi	r24, 0x70	; 112
    3d4c:	a8 2e       	mov	r10, r24
								if ( (pCounter & 0x0F) == 0) {
									voice_telem_item (sd->opt.ss.val);
								}
								break;
							case 2:
								if ( (pCounter & 0xF0) == 0x20) {
    3d4e:	20 7f       	andi	r18, 0xF0	; 240
    3d50:	92 2e       	mov	r9, r18
			pCounter += 0x11;
			if ( (pCounter & 0x0F) > 11) {
				pCounter &= 0xF0;
			}
			periodCounter = pCounter;
			for (i = 0; i < numSafety; i += 1) {
    3d52:	fd 14       	cp	r15, r13
    3d54:	09 f4       	brne	.+2      	; 0x3d58 <_Z12mainSequencev+0x34a>
    3d56:	57 c0       	rjmp	.+174    	; 0x3e06 <_Z12mainSequencev+0x3f8>
    3d58:	8e 01       	movw	r16, r28
    3d5a:	03 58       	subi	r16, 0x83	; 131
    3d5c:	1d 4f       	sbci	r17, 0xFD	; 253
				SafetySwData *sd = &g_model.safetySw[i];
				if (sd->opt.ss.mode == 1) {
    3d5e:	f8 01       	movw	r30, r16
    3d60:	80 81       	ld	r24, Z
    3d62:	98 2f       	mov	r25, r24
    3d64:	90 7c       	andi	r25, 0xC0	; 192
    3d66:	90 34       	cpi	r25, 0x40	; 64
    3d68:	c1 f4       	brne	.+48     	; 0x3d9a <_Z12mainSequencev+0x38c>
					if ( (pCounter & 0x30) == 0) {
    3d6a:	e1 10       	cpse	r14, r1
    3d6c:	16 c0       	rjmp	.+44     	; 0x3d9a <_Z12mainSequencev+0x38c>
						if (getSwitch (sd->opt.ss.swtch, 0)) {
    3d6e:	88 0f       	add	r24, r24
    3d70:	88 0f       	add	r24, r24
    3d72:	40 e0       	ldi	r20, 0x00	; 0
    3d74:	60 e0       	ldi	r22, 0x00	; 0
    3d76:	85 95       	asr	r24
    3d78:	85 95       	asr	r24
    3d7a:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_Z9getSwitchabh>
    3d7e:	88 23       	and	r24, r24
    3d80:	61 f0       	breq	.+24     	; 0x3d9a <_Z12mainSequencev+0x38c>
							audioDefevent (
									( (g_eeGeneral.speakerMode & 1) == 0) ? 1 : sd->opt.ss.val);
    3d82:	80 91 31 06 	lds	r24, 0x0631
    3d86:	80 ff       	sbrs	r24, 0
    3d88:	05 c0       	rjmp	.+10     	; 0x3d94 <_Z12mainSequencev+0x386>
    3d8a:	fe 01       	movw	r30, r28
    3d8c:	e2 58       	subi	r30, 0x82	; 130
    3d8e:	fd 4f       	sbci	r31, 0xFD	; 253
    3d90:	80 81       	ld	r24, Z
    3d92:	01 c0       	rjmp	.+2      	; 0x3d96 <_Z12mainSequencev+0x388>
    3d94:	81 e0       	ldi	r24, 0x01	; 1
    3d96:	0e 94 74 34 	call	0x68e8	; 0x68e8 <_Z13audioDefeventh>
						}
					}
				}
				if (sd->opt.ss.mode == 2) {
    3d9a:	f8 01       	movw	r30, r16
    3d9c:	80 81       	ld	r24, Z
    3d9e:	98 2f       	mov	r25, r24
    3da0:	90 7c       	andi	r25, 0xC0	; 192
    3da2:	90 38       	cpi	r25, 0x80	; 128
    3da4:	69 f5       	brne	.+90     	; 0x3e00 <_Z12mainSequencev+0x3f2>
					if (sd->opt.ss.swtch > MAX_DRSWITCH) {
    3da6:	88 0f       	add	r24, r24
    3da8:	88 0f       	add	r24, r24
    3daa:	85 95       	asr	r24
    3dac:	85 95       	asr	r24
    3dae:	87 31       	cpi	r24, 0x17	; 23
    3db0:	bc f0       	brlt	.+46     	; 0x3de0 <_Z12mainSequencev+0x3d2>
						uint8_t temp = sd->opt.ss.swtch;
						temp -= MAX_DRSWITCH + 1;
    3db2:	87 51       	subi	r24, 0x17	; 23
						switch (temp) {
    3db4:	81 30       	cpi	r24, 0x01	; 1
    3db6:	39 f0       	breq	.+14     	; 0x3dc6 <_Z12mainSequencev+0x3b8>
    3db8:	18 f0       	brcs	.+6      	; 0x3dc0 <_Z12mainSequencev+0x3b2>
    3dba:	82 30       	cpi	r24, 0x02	; 2
    3dbc:	39 f0       	breq	.+14     	; 0x3dcc <_Z12mainSequencev+0x3be>
    3dbe:	20 c0       	rjmp	.+64     	; 0x3e00 <_Z12mainSequencev+0x3f2>
							case 0:
								if ( (pCounter & 0x70) == 0) {
    3dc0:	a1 10       	cpse	r10, r1
    3dc2:	1e c0       	rjmp	.+60     	; 0x3e00 <_Z12mainSequencev+0x3f2>
    3dc4:	06 c0       	rjmp	.+12     	; 0x3dd2 <_Z12mainSequencev+0x3c4>
									voice_telem_item (sd->opt.ss.val);
								}
								break;
							case 1:
								if ( (pCounter & 0x0F) == 0) {
    3dc6:	b1 10       	cpse	r11, r1
    3dc8:	1b c0       	rjmp	.+54     	; 0x3e00 <_Z12mainSequencev+0x3f2>
    3dca:	03 c0       	rjmp	.+6      	; 0x3dd2 <_Z12mainSequencev+0x3c4>
									voice_telem_item (sd->opt.ss.val);
								}
								break;
							case 2:
								if ( (pCounter & 0xF0) == 0x20) {
    3dcc:	f0 e2       	ldi	r31, 0x20	; 32
    3dce:	9f 12       	cpse	r9, r31
    3dd0:	17 c0       	rjmp	.+46     	; 0x3e00 <_Z12mainSequencev+0x3f2>
    3dd2:	fe 01       	movw	r30, r28
    3dd4:	e2 58       	subi	r30, 0x82	; 130
    3dd6:	fd 4f       	sbci	r31, 0xFD	; 253
									voice_telem_item (sd->opt.ss.val);
    3dd8:	80 81       	ld	r24, Z
    3dda:	0e 94 51 37 	call	0x6ea2	; 0x6ea2 <_Z16voice_telem_itemh>
    3dde:	10 c0       	rjmp	.+32     	; 0x3e00 <_Z12mainSequencev+0x3f2>
								}
								break;
						}
					} else if ( (pCounter & 0x30) == 0)		// Every 4 seconds
    3de0:	e1 10       	cpse	r14, r1
    3de2:	0e c0       	rjmp	.+28     	; 0x3e00 <_Z12mainSequencev+0x3f2>
							{
						if (getSwitch (sd->opt.ss.swtch, 0)) {
    3de4:	40 e0       	ldi	r20, 0x00	; 0
    3de6:	60 e0       	ldi	r22, 0x00	; 0
    3de8:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_Z9getSwitchabh>
    3dec:	88 23       	and	r24, r24
    3dee:	41 f0       	breq	.+16     	; 0x3e00 <_Z12mainSequencev+0x3f2>
    3df0:	fe 01       	movw	r30, r28
    3df2:	e2 58       	subi	r30, 0x82	; 130
    3df4:	fd 4f       	sbci	r31, 0xFD	; 253
							putVoiceQueue (sd->opt.ss.val + 128);
    3df6:	80 81       	ld	r24, Z
    3df8:	80 58       	subi	r24, 0x80	; 128
void putVoiceQueueUpper (uint8_t value) {
	putVoiceQueueLong (value + 260);
}

void putVoiceQueue (uint8_t value) {
	putVoiceQueueLong (value);
    3dfa:	90 e0       	ldi	r25, 0x00	; 0
    3dfc:	0e 94 c3 13 	call	0x2786	; 0x2786 <_Z17putVoiceQueueLongj>
			pCounter += 0x11;
			if ( (pCounter & 0x0F) > 11) {
				pCounter &= 0xF0;
			}
			periodCounter = pCounter;
			for (i = 0; i < numSafety; i += 1) {
    3e00:	f3 94       	inc	r15
    3e02:	22 96       	adiw	r28, 0x02	; 2
    3e04:	a6 cf       	rjmp	.-180    	; 0x3d52 <_Z12mainSequencev+0x344>
		}
#endif // NOSAFETY_A_OR_V
		// New switch voices
		// New entries, Switch, (on/off/both), voice file index

		AlarmControl.OneSecFlag = 0;
    3e06:	10 92 03 01 	sts	0x0103, r1
//		uint8_t i ;

		if (StickScrollTimer) {
    3e0a:	80 91 84 01 	lds	r24, 0x0184
    3e0e:	88 23       	and	r24, r24
    3e10:	19 f0       	breq	.+6      	; 0x3e18 <_Z12mainSequencev+0x40a>
			StickScrollTimer -= 1;
    3e12:	81 50       	subi	r24, 0x01	; 1
    3e14:	80 93 84 01 	sts	0x0184, r24
		}
	}
}
    3e18:	df 91       	pop	r29
    3e1a:	cf 91       	pop	r28
    3e1c:	1f 91       	pop	r17
    3e1e:	0f 91       	pop	r16
    3e20:	ff 90       	pop	r15
    3e22:	ef 90       	pop	r14
    3e24:	df 90       	pop	r13
    3e26:	bf 90       	pop	r11
    3e28:	af 90       	pop	r10
    3e2a:	9f 90       	pop	r9
    3e2c:	8f 90       	pop	r8
    3e2e:	08 95       	ret

00003e30 <_ZL12validateNamePch.constprop.1>:
//{
//    theFile.openRd(FILE_MODEL(id));
//    return theFile.size();
//}

static void validateName( char *name, uint8_t size )
    3e30:	1f 93       	push	r17
    3e32:	cf 93       	push	r28
    3e34:	df 93       	push	r29
    3e36:	ec 01       	movw	r28, r24
    3e38:	1a e0       	ldi	r17, 0x0A	; 10
{
	for(uint8_t i=0; i<size;i++) // makes sure name is valid
  {
//		uint8_t idx = char2idx(name[i]);
		name[i] = idx2char(char2idx(name[i])) ;
    3e3a:	88 81       	ld	r24, Y
    3e3c:	0e 94 5d 43 	call	0x86ba	; 0x86ba <_Z8char2idxc>
    3e40:	0e 94 6d 43 	call	0x86da	; 0x86da <_Z8idx2charh>
    3e44:	89 93       	st	Y+, r24
    3e46:	11 50       	subi	r17, 0x01	; 1
//    return theFile.size();
//}

static void validateName( char *name, uint8_t size )
{
	for(uint8_t i=0; i<size;i++) // makes sure name is valid
    3e48:	c1 f7       	brne	.-16     	; 0x3e3a <_ZL12validateNamePch.constprop.1+0xa>
  {
//		uint8_t idx = char2idx(name[i]);
		name[i] = idx2char(char2idx(name[i])) ;
	}
}
    3e4a:	df 91       	pop	r29
    3e4c:	cf 91       	pop	r28
    3e4e:	1f 91       	pop	r17
    3e50:	08 95       	ret

00003e52 <_Z8setNamePPcPKc>:
      memset (pDst+(sizeSrc), 0,  (sizeDst)-(sizeSrc));
#define fullCopy(size) partCopy(size,size)
*/

void setNameP( char *dest, const prog_char *pstr )
{
    3e52:	9c 01       	movw	r18, r24
    3e54:	26 5f       	subi	r18, 0xF6	; 246
    3e56:	3f 4f       	sbci	r19, 0xFF	; 255
    3e58:	fb 01       	movw	r30, r22
	uint8_t i ;
	for ( i = 10 ; i ; i -= 1 )
	{
		*dest++ = pgm_read_byte(pstr++) ;		
    3e5a:	44 91       	lpm	r20, Z
    3e5c:	dc 01       	movw	r26, r24
    3e5e:	4d 93       	st	X+, r20
    3e60:	cd 01       	movw	r24, r26
    3e62:	31 96       	adiw	r30, 0x01	; 1
*/

void setNameP( char *dest, const prog_char *pstr )
{
	uint8_t i ;
	for ( i = 10 ; i ; i -= 1 )
    3e64:	a2 17       	cp	r26, r18
    3e66:	b3 07       	cpc	r27, r19
    3e68:	c1 f7       	brne	.-16     	; 0x3e5a <_Z8setNamePPcPKc+0x8>
	{
		*dest++ = pgm_read_byte(pstr++) ;		
	}
}
    3e6a:	08 95       	ret

00003e6c <_Z10evalChkSumv>:
//	strncpy_P(g_eeGeneral.ownerName,PSTR(STR_ME),10);
  g_eeGeneral.chkSum = evalChkSum() ;
}

uint16_t evalChkSum()
{
    3e6c:	e3 ee       	ldi	r30, 0xE3	; 227
    3e6e:	f5 e0       	ldi	r31, 0x05	; 5
  uint16_t sum=0;
    3e70:	80 e0       	ldi	r24, 0x00	; 0
    3e72:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t *p ;
	p = ( uint16_t *)g_eeGeneral.calibMid ;
  for (int i=0; i<12;i++)
	{
    sum += *p++ ;
    3e74:	21 91       	ld	r18, Z+
    3e76:	31 91       	ld	r19, Z+
    3e78:	82 0f       	add	r24, r18
    3e7a:	93 1f       	adc	r25, r19
uint16_t evalChkSum()
{
  uint16_t sum=0;
	uint16_t *p ;
	p = ( uint16_t *)g_eeGeneral.calibMid ;
  for (int i=0; i<12;i++)
    3e7c:	25 e0       	ldi	r18, 0x05	; 5
    3e7e:	eb 3f       	cpi	r30, 0xFB	; 251
    3e80:	f2 07       	cpc	r31, r18
    3e82:	c1 f7       	brne	.-16     	; 0x3e74 <_Z10evalChkSumv+0x8>
	{
    sum += *p++ ;
	}
  return sum;
}
    3e84:	08 95       	ret

00003e86 <_Z16eeGeneralDefaultv>:
	}
}

void eeGeneralDefault()
{
  memset(&g_eeGeneral,0,sizeof(g_eeGeneral));
    3e86:	82 e7       	ldi	r24, 0x72	; 114
    3e88:	e2 ee       	ldi	r30, 0xE2	; 226
    3e8a:	f5 e0       	ldi	r31, 0x05	; 5
    3e8c:	df 01       	movw	r26, r30
    3e8e:	1d 92       	st	X+, r1
    3e90:	8a 95       	dec	r24
    3e92:	e9 f7       	brne	.-6      	; 0x3e8e <_Z16eeGeneralDefaultv+0x8>
  g_eeGeneral.myVers   =  MDVERS;
    3e94:	8b e0       	ldi	r24, 0x0B	; 11
    3e96:	80 93 e2 05 	sts	0x05E2, r24
//  g_eeGeneral.currModel=  0;
  g_eeGeneral.contrast = LCD_NOMCONTRAST;
    3e9a:	89 e1       	ldi	r24, 0x19	; 25
    3e9c:	80 93 10 06 	sts	0x0610, r24
  g_eeGeneral.vBatWarn = 90;
    3ea0:	8a e5       	ldi	r24, 0x5A	; 90
    3ea2:	80 93 11 06 	sts	0x0611, r24
  g_eeGeneral.stickMode=  1;
    3ea6:	81 e0       	ldi	r24, 0x01	; 1
    3ea8:	80 93 26 06 	sts	0x0626, r24
    3eac:	e3 ee       	ldi	r30, 0xE3	; 227
    3eae:	f5 e0       	ldi	r31, 0x05	; 5
  for (uint8_t i = 0; i < 7; ++i) {
    g_eeGeneral.calibMid[i]     = 0x200;
    3eb0:	20 e0       	ldi	r18, 0x00	; 0
    3eb2:	32 e0       	ldi	r19, 0x02	; 2
    g_eeGeneral.calibSpanNeg[i] = 0x300;
    3eb4:	80 e0       	ldi	r24, 0x00	; 0
    3eb6:	93 e0       	ldi	r25, 0x03	; 3
//  g_eeGeneral.currModel=  0;
  g_eeGeneral.contrast = LCD_NOMCONTRAST;
  g_eeGeneral.vBatWarn = 90;
  g_eeGeneral.stickMode=  1;
  for (uint8_t i = 0; i < 7; ++i) {
    g_eeGeneral.calibMid[i]     = 0x200;
    3eb8:	21 93       	st	Z+, r18
    3eba:	31 93       	st	Z+, r19
    g_eeGeneral.calibSpanNeg[i] = 0x300;
    3ebc:	95 87       	std	Z+13, r25	; 0x0d
    3ebe:	84 87       	std	Z+12, r24	; 0x0c
    g_eeGeneral.calibSpanPos[i] = 0x300;
    3ec0:	93 8f       	std	Z+27, r25	; 0x1b
    3ec2:	82 8f       	std	Z+26, r24	; 0x1a
  g_eeGeneral.myVers   =  MDVERS;
//  g_eeGeneral.currModel=  0;
  g_eeGeneral.contrast = LCD_NOMCONTRAST;
  g_eeGeneral.vBatWarn = 90;
  g_eeGeneral.stickMode=  1;
  for (uint8_t i = 0; i < 7; ++i) {
    3ec4:	b5 e0       	ldi	r27, 0x05	; 5
    3ec6:	e1 3f       	cpi	r30, 0xF1	; 241
    3ec8:	fb 07       	cpc	r31, r27
    3eca:	b1 f7       	brne	.-20     	; 0x3eb8 <_Z16eeGeneralDefaultv+0x32>
    g_eeGeneral.calibMid[i]     = 0x200;
    g_eeGeneral.calibSpanNeg[i] = 0x300;
    g_eeGeneral.calibSpanPos[i] = 0x300;
  }
	setNameP(g_eeGeneral.ownerName,PSTR(STR_ME));
    3ecc:	66 ee       	ldi	r22, 0xE6	; 230
    3ece:	77 e0       	ldi	r23, 0x07	; 7
    3ed0:	83 e3       	ldi	r24, 0x33	; 51
    3ed2:	96 e0       	ldi	r25, 0x06	; 6
    3ed4:	be df       	rcall	.-132    	; 0x3e52 <_Z8setNamePPcPKc>
//	strncpy_P(g_eeGeneral.ownerName,PSTR(STR_ME),10);
  g_eeGeneral.chkSum = evalChkSum() ;
    3ed6:	ca df       	rcall	.-108    	; 0x3e6c <_Z10evalChkSumv>
    3ed8:	90 93 0e 06 	sts	0x060E, r25
    3edc:	80 93 0d 06 	sts	0x060D, r24
    3ee0:	08 95       	ret

00003ee2 <_Z17modelDefaultWriteh>:
//  if(sz>(sizeof(EEGeneral)-20)) for(uint8_t i=0; i<12;i++) sum+=g_eeGeneral.calibMid[i];
  return g_eeGeneral.chkSum == evalChkSum() ;
}

void modelDefaultWrite(uint8_t id)
{
    3ee2:	ef 92       	push	r14
    3ee4:	0f 93       	push	r16
    3ee6:	1f 93       	push	r17
    3ee8:	cf 93       	push	r28
    3eea:	c8 2f       	mov	r28, r24
  memset(&g_model, 0, sizeof(ModelData));
    3eec:	21 ec       	ldi	r18, 0xC1	; 193
    3eee:	33 e0       	ldi	r19, 0x03	; 3
    3ef0:	e1 e2       	ldi	r30, 0x21	; 33
    3ef2:	f2 e0       	ldi	r31, 0x02	; 2
    3ef4:	df 01       	movw	r26, r30
    3ef6:	c9 01       	movw	r24, r18
    3ef8:	1d 92       	st	X+, r1
    3efa:	01 97       	sbiw	r24, 0x01	; 1
    3efc:	e9 f7       	brne	.-6      	; 0x3ef8 <_Z17modelDefaultWriteh+0x16>
	setNameP(g_model.name,PSTR(STR_MODEL));
    3efe:	6b ed       	ldi	r22, 0xDB	; 219
    3f00:	77 e0       	ldi	r23, 0x07	; 7
    3f02:	cf 01       	movw	r24, r30
    3f04:	a6 df       	rcall	.-180    	; 0x3e52 <_Z8setNamePPcPKc>
//  strncpy_P(g_model.name,PSTR(STR_MODEL), 10);
	div_t qr ;
	qr = div( id+1, 10 ) ;
    3f06:	8c 2f       	mov	r24, r28
    3f08:	90 e0       	ldi	r25, 0x00	; 0
    3f0a:	6a e0       	ldi	r22, 0x0A	; 10
    3f0c:	70 e0       	ldi	r23, 0x00	; 0
    3f0e:	01 96       	adiw	r24, 0x01	; 1
    3f10:	0e 94 ea 71 	call	0xe3d4	; 0xe3d4 <__divmodhi4>
  g_model.name[5]='0'+qr.quot;
    3f14:	60 5d       	subi	r22, 0xD0	; 208
    3f16:	60 93 26 02 	sts	0x0226, r22
  g_model.name[6]='0'+qr.rem;
    3f1a:	80 5d       	subi	r24, 0xD0	; 208
    3f1c:	80 93 27 02 	sts	0x0227, r24
#ifdef VERSION3
  g_model.modelVersion = 3 ;
    3f20:	83 e0       	ldi	r24, 0x03	; 3
    3f22:	80 93 11 05 	sts	0x0511, r24
#else
  g_model.modelVersion = 2 ;
#endif
	g_model.trimInc = 2 ;
    3f26:	82 e0       	ldi	r24, 0x02	; 2
    3f28:	80 93 33 02 	sts	0x0233, r24

#ifdef NO_TEMPLATES
  applyTemplate(); //default 4 channel template
#else
  applyTemplate(0); //default 4 channel template
    3f2c:	80 e0       	ldi	r24, 0x00	; 0
    3f2e:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <_Z13applyTemplateh>
#endif
  theFile.writeRlc(FILE_MODEL(id),FILE_TYP_MODEL,(uint8_t*)&g_model,sizeof(g_model),200);
    3f32:	61 e0       	ldi	r22, 0x01	; 1
    3f34:	6c 0f       	add	r22, r28
    3f36:	88 ec       	ldi	r24, 0xC8	; 200
    3f38:	e8 2e       	mov	r14, r24
    3f3a:	01 ec       	ldi	r16, 0xC1	; 193
    3f3c:	13 e0       	ldi	r17, 0x03	; 3
    3f3e:	21 e2       	ldi	r18, 0x21	; 33
    3f40:	32 e0       	ldi	r19, 0x02	; 2
    3f42:	42 e0       	ldi	r20, 0x02	; 2
    3f44:	8e e7       	ldi	r24, 0x7E	; 126
    3f46:	96 e0       	ldi	r25, 0x06	; 6
    3f48:	be d5       	rcall	.+2940   	; 0x4ac6 <_ZN5EFile8writeRlcEhhPhjh>
}
    3f4a:	cf 91       	pop	r28
    3f4c:	1f 91       	pop	r17
    3f4e:	0f 91       	pop	r16
    3f50:	ef 90       	pop	r14
    3f52:	08 95       	ret

00003f54 <_Z15eeLoadModelNamehPch>:

void eeLoadModelName(uint8_t id,char*buf,uint8_t len)
{
    3f54:	0f 93       	push	r16
    3f56:	1f 93       	push	r17
    3f58:	cf 93       	push	r28
    3f5a:	df 93       	push	r29
    3f5c:	eb 01       	movw	r28, r22
    3f5e:	04 2f       	mov	r16, r20
  if(id<MAX_MODELS)
    3f60:	80 31       	cpi	r24, 0x10	; 16
    3f62:	20 f5       	brcc	.+72     	; 0x3fac <_Z15eeLoadModelNamehPch+0x58>
  {
    //eeprom_read_block(buf,(void*)modelEeOfs(id),sizeof(g_model.name));
    theFile.openRd(FILE_MODEL(id));
    3f64:	61 e0       	ldi	r22, 0x01	; 1
    3f66:	68 0f       	add	r22, r24
    3f68:	8e e7       	ldi	r24, 0x7E	; 126
    3f6a:	96 e0       	ldi	r25, 0x06	; 6
    3f6c:	fd d3       	rcall	.+2042   	; 0x4768 <_ZN5EFile6openRdEh>
    memset(buf,' ',len);
    3f6e:	10 e0       	ldi	r17, 0x00	; 0
    3f70:	a8 01       	movw	r20, r16
    3f72:	60 e2       	ldi	r22, 0x20	; 32
    3f74:	70 e0       	ldi	r23, 0x00	; 0
    3f76:	ce 01       	movw	r24, r28
    3f78:	0e 94 a6 72 	call	0xe54c	; 0xe54c <memset>
    if(theFile.readRlc((uint8_t*)buf,sizeof(g_model.name)) == sizeof(g_model.name) )
    3f7c:	4a e0       	ldi	r20, 0x0A	; 10
    3f7e:	50 e0       	ldi	r21, 0x00	; 0
    3f80:	be 01       	movw	r22, r28
    3f82:	8e e7       	ldi	r24, 0x7E	; 126
    3f84:	96 e0       	ldi	r25, 0x06	; 6
    3f86:	73 d4       	rcall	.+2278   	; 0x486e <_ZN5EFile7readRlcEPhj>
    3f88:	0a 97       	sbiw	r24, 0x0a	; 10
    3f8a:	81 f4       	brne	.+32     	; 0x3fac <_Z15eeLoadModelNamehPch+0x58>
    {
      uint16_t sz=theFile.size();
    3f8c:	8e e7       	ldi	r24, 0x7E	; 126
    3f8e:	96 e0       	ldi	r25, 0x06	; 6
    3f90:	dd d3       	rcall	.+1978   	; 0x474c <_ZN5EFile4sizeEv>
      buf+=len;
    3f92:	c0 0f       	add	r28, r16
    3f94:	d1 1f       	adc	r29, r17
      while(sz)
    3f96:	00 97       	sbiw	r24, 0x00	; 0
    3f98:	49 f0       	breq	.+18     	; 0x3fac <_Z15eeLoadModelNamehPch+0x58>
			{
				div_t qr ;
				qr = div( sz, 10 ) ;
    3f9a:	6a e0       	ldi	r22, 0x0A	; 10
    3f9c:	70 e0       	ldi	r23, 0x00	; 0
    3f9e:	0e 94 ea 71 	call	0xe3d4	; 0xe3d4 <__divmodhi4>
				--buf;
				*buf='0'+qr.rem;
    3fa2:	80 5d       	subi	r24, 0xD0	; 208
    3fa4:	8a 93       	st	-Y, r24
				sz = qr.quot;
    3fa6:	86 2f       	mov	r24, r22
    3fa8:	97 2f       	mov	r25, r23
    3faa:	f5 cf       	rjmp	.-22     	; 0x3f96 <_Z15eeLoadModelNamehPch+0x42>
			}
    }
  }
}
    3fac:	df 91       	pop	r29
    3fae:	cf 91       	pop	r28
    3fb0:	1f 91       	pop	r17
    3fb2:	0f 91       	pop	r16
    3fb4:	08 95       	ret

00003fb6 <_Z13eeModelExistsh>:
}


bool eeModelExists(uint8_t id)
{
    return EFile::exists(FILE_MODEL(id));
    3fb6:	8f 5f       	subi	r24, 0xFF	; 255
    3fb8:	81 c3       	rjmp	.+1794   	; 0x46bc <_ZN5EFile6existsEh>

00003fba <_Z16eeDuplicateModelh>:

	asm("") ;
}

bool eeDuplicateModel(uint8_t id)
{
    3fba:	ff 92       	push	r15
    3fbc:	0f 93       	push	r16
    3fbe:	1f 93       	push	r17
    3fc0:	cf 93       	push	r28
    3fc2:	df 93       	push	r29
    3fc4:	cd b7       	in	r28, 0x3d	; 61
    3fc6:	de b7       	in	r29, 0x3e	; 62
    3fc8:	2f 97       	sbiw	r28, 0x0f	; 15
    3fca:	0f b6       	in	r0, 0x3f	; 63
    3fcc:	f8 94       	cli
    3fce:	de bf       	out	0x3e, r29	; 62
    3fd0:	0f be       	out	0x3f, r0	; 63
    3fd2:	cd bf       	out	0x3d, r28	; 61
  uint8_t i;
  for( i=id+1; i<MAX_MODELS; i++)
    3fd4:	01 e0       	ldi	r16, 0x01	; 1
    3fd6:	08 0f       	add	r16, r24
    3fd8:	10 2f       	mov	r17, r16
    3fda:	10 31       	cpi	r17, 0x10	; 16
    3fdc:	b0 f4       	brcc	.+44     	; 0x400a <_Z16eeDuplicateModelh+0x50>
  {
    if(! EFile::exists(FILE_MODEL(i))) break;
    3fde:	ff 24       	eor	r15, r15
    3fe0:	f3 94       	inc	r15
    3fe2:	f1 0e       	add	r15, r17
    3fe4:	8f 2d       	mov	r24, r15
    3fe6:	6a d3       	rcall	.+1748   	; 0x46bc <_ZN5EFile6existsEh>
    3fe8:	81 11       	cpse	r24, r1
    3fea:	0d c0       	rjmp	.+26     	; 0x4006 <_Z16eeDuplicateModelh+0x4c>
  }
  if(i==MAX_MODELS) return false; //no free space in directory left

  theFile.openRd(FILE_MODEL(id));
    3fec:	60 2f       	mov	r22, r16
    3fee:	8e e7       	ldi	r24, 0x7E	; 126
    3ff0:	96 e0       	ldi	r25, 0x06	; 6
    3ff2:	ba d3       	rcall	.+1908   	; 0x4768 <_ZN5EFile6openRdEh>
  theFile2.create(FILE_MODEL(i),FILE_TYP_MODEL,600);
    3ff4:	61 e0       	ldi	r22, 0x01	; 1
    3ff6:	61 0f       	add	r22, r17
    3ff8:	28 e5       	ldi	r18, 0x58	; 88
    3ffa:	32 e0       	ldi	r19, 0x02	; 2
    3ffc:	42 e0       	ldi	r20, 0x02	; 2
    3ffe:	85 e7       	ldi	r24, 0x75	; 117
    4000:	96 e0       	ldi	r25, 0x06	; 6
    4002:	11 d5       	rcall	.+2594   	; 0x4a26 <_ZN5EFile6createEhhj>
  uint8_t buf[15];
  uint8_t l;
  while((l=theFile.read(buf,15)))
    4004:	06 c0       	rjmp	.+12     	; 0x4012 <_Z16eeDuplicateModelh+0x58>
}

bool eeDuplicateModel(uint8_t id)
{
  uint8_t i;
  for( i=id+1; i<MAX_MODELS; i++)
    4006:	1f 2d       	mov	r17, r15
    4008:	e8 cf       	rjmp	.-48     	; 0x3fda <_Z16eeDuplicateModelh+0x20>
  {
    if(! EFile::exists(FILE_MODEL(i))) break;
  }
  if(i==MAX_MODELS) return false; //no free space in directory left
    400a:	10 31       	cpi	r17, 0x10	; 16
    400c:	79 f7       	brne	.-34     	; 0x3fec <_Z16eeDuplicateModelh+0x32>
    400e:	80 e0       	ldi	r24, 0x00	; 0
    4010:	17 c0       	rjmp	.+46     	; 0x4040 <_Z16eeDuplicateModelh+0x86>

  theFile.openRd(FILE_MODEL(id));
  theFile2.create(FILE_MODEL(i),FILE_TYP_MODEL,600);
  uint8_t buf[15];
  uint8_t l;
  while((l=theFile.read(buf,15)))
    4012:	4f e0       	ldi	r20, 0x0F	; 15
    4014:	50 e0       	ldi	r21, 0x00	; 0
    4016:	be 01       	movw	r22, r28
    4018:	6f 5f       	subi	r22, 0xFF	; 255
    401a:	7f 4f       	sbci	r23, 0xFF	; 255
    401c:	8e e7       	ldi	r24, 0x7E	; 126
    401e:	96 e0       	ldi	r25, 0x06	; 6
    4020:	c0 d3       	rcall	.+1920   	; 0x47a2 <_ZN5EFile4readEPhj>
    4022:	88 23       	and	r24, r24
    4024:	49 f0       	breq	.+18     	; 0x4038 <_Z16eeDuplicateModelh+0x7e>
  {
    theFile2.write(buf,l);
    4026:	48 2f       	mov	r20, r24
    4028:	be 01       	movw	r22, r28
    402a:	6f 5f       	subi	r22, 0xFF	; 255
    402c:	7f 4f       	sbci	r23, 0xFF	; 255
    402e:	85 e7       	ldi	r24, 0x75	; 117
    4030:	96 e0       	ldi	r25, 0x06	; 6
    4032:	80 d4       	rcall	.+2304   	; 0x4934 <_ZN5EFile5writeEPhh>
//        //wait for 10ms and try again
//        uint16_t tgtime = get_tmr10ms() + 100;
//        while (!=tgtime);
//        theFile2.write(buf,l);
//    }
    wdt_reset();
    4034:	a8 95       	wdr
    4036:	ed cf       	rjmp	.-38     	; 0x4012 <_Z16eeDuplicateModelh+0x58>
  }
  theFile2.closeTrunc();
    4038:	85 e7       	ldi	r24, 0x75	; 117
    403a:	96 e0       	ldi	r25, 0x06	; 6
    403c:	1a d5       	rcall	.+2612   	; 0x4a72 <_ZN5EFile10closeTruncEv>
  //todo error handling
  return true;
    403e:	81 e0       	ldi	r24, 0x01	; 1
}
    4040:	2f 96       	adiw	r28, 0x0f	; 15
    4042:	0f b6       	in	r0, 0x3f	; 63
    4044:	f8 94       	cli
    4046:	de bf       	out	0x3e, r29	; 62
    4048:	0f be       	out	0x3f, r0	; 63
    404a:	cd bf       	out	0x3d, r28	; 61
    404c:	df 91       	pop	r29
    404e:	cf 91       	pop	r28
    4050:	1f 91       	pop	r17
    4052:	0f 91       	pop	r16
    4054:	ff 90       	pop	r15
    4056:	08 95       	ret

00004058 <_Z14eeWriteGeneralv>:
//  }
//  eeLoadModel(g_eeGeneral.currModel);
//}

void eeWriteGeneral()
{
    4058:	ef 92       	push	r14
    405a:	0f 93       	push	r16
    405c:	1f 93       	push	r17
  alertx(PSTR(STR_BAD_EEPROM), true);
    405e:	61 e0       	ldi	r22, 0x01	; 1
    4060:	83 ea       	ldi	r24, 0xA3	; 163
    4062:	97 e0       	ldi	r25, 0x07	; 7
    4064:	2b d8       	rcall	.-4010   	; 0x30bc <_Z6alertxPKcb>
  message(PSTR(STR_EE_FORMAT));
    4066:	81 e9       	ldi	r24, 0x91	; 145
    4068:	97 e0       	ldi	r25, 0x07	; 7
    406a:	0e 94 2e 12 	call	0x245c	; 0x245c <_Z7messagePKc>
  EeFsFormat();
    406e:	ea d2       	rcall	.+1492   	; 0x4644 <_Z10EeFsFormatv>
  //alert(PSTR("format ok"));
  // alert(PSTR("default ok"));

  uint16_t sz = theFile.writeRlc(FILE_GENERAL,FILE_TYP_GENERAL,(uint8_t*)&g_eeGeneral,sizeof(EEGeneral),200);
    4070:	98 ec       	ldi	r25, 0xC8	; 200
    4072:	e9 2e       	mov	r14, r25
    4074:	02 e7       	ldi	r16, 0x72	; 114
    4076:	10 e0       	ldi	r17, 0x00	; 0
    4078:	22 ee       	ldi	r18, 0xE2	; 226
    407a:	35 e0       	ldi	r19, 0x05	; 5
    407c:	41 e0       	ldi	r20, 0x01	; 1
    407e:	60 e0       	ldi	r22, 0x00	; 0
    4080:	8e e7       	ldi	r24, 0x7E	; 126
    4082:	96 e0       	ldi	r25, 0x06	; 6
    4084:	20 d5       	rcall	.+2624   	; 0x4ac6 <_ZN5EFile8writeRlcEhhPhjh>
  if(sz!=sizeof(EEGeneral)) alert(PSTR(STR_GENWR_ERROR));
    4086:	82 37       	cpi	r24, 0x72	; 114
    4088:	91 05       	cpc	r25, r1
    408a:	19 f0       	breq	.+6      	; 0x4092 <_Z14eeWriteGeneralv+0x3a>
    408c:	82 e8       	ldi	r24, 0x82	; 130
    408e:	97 e0       	ldi	r25, 0x07	; 7
    4090:	4a d8       	rcall	.-3948   	; 0x3126 <_Z5alertPKc>

  modelDefaultWrite(0);
    4092:	80 e0       	ldi	r24, 0x00	; 0
  //alert(PSTR("modef ok"));
  //alert(PSTR("modwrite ok"));
}
    4094:	1f 91       	pop	r17
    4096:	0f 91       	pop	r16
    4098:	ef 90       	pop	r14
  // alert(PSTR("default ok"));

  uint16_t sz = theFile.writeRlc(FILE_GENERAL,FILE_TYP_GENERAL,(uint8_t*)&g_eeGeneral,sizeof(EEGeneral),200);
  if(sz!=sizeof(EEGeneral)) alert(PSTR(STR_GENWR_ERROR));

  modelDefaultWrite(0);
    409a:	23 cf       	rjmp	.-442    	; 0x3ee2 <_Z17modelDefaultWriteh>

0000409c <_Z7eeDirtyh>:

static uint8_t  s_eeLongTimer ;
static uint8_t  s_eeDirtyMsk;
static uint16_t s_eeDirtyTime10ms;
void eeDirty(uint8_t msk)
{
    409c:	cf 93       	push	r28
    409e:	c8 2f       	mov	r28, r24
	uint8_t lmask = msk & 7 ;
    40a0:	87 70       	andi	r24, 0x07	; 7
  if(!lmask) return;
    40a2:	a1 f0       	breq	.+40     	; 0x40cc <_Z7eeDirtyh+0x30>
  s_eeDirtyMsk      |= lmask;
    40a4:	90 91 89 06 	lds	r25, 0x0689
    40a8:	98 2b       	or	r25, r24
    40aa:	90 93 89 06 	sts	0x0689, r25
  s_eeDirtyTime10ms  = get_tmr10ms() ;
    40ae:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_Z11get_tmr10msv>
    40b2:	90 93 88 06 	sts	0x0688, r25
    40b6:	80 93 87 06 	sts	0x0687, r24
	s_eeLongTimer = msk >> 4 ;
    40ba:	8c 2f       	mov	r24, r28
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	24 e0       	ldi	r18, 0x04	; 4
    40c0:	95 95       	asr	r25
    40c2:	87 95       	ror	r24
    40c4:	2a 95       	dec	r18
    40c6:	e1 f7       	brne	.-8      	; 0x40c0 <_Z7eeDirtyh+0x24>
    40c8:	80 93 8a 06 	sts	0x068A, r24
}
    40cc:	cf 91       	pop	r28
    40ce:	08 95       	ret

000040d0 <_Z13eeReadGeneralv>:
  //todo error handling
  return true;
}

bool eeReadGeneral()
{
    40d0:	cf 93       	push	r28
    40d2:	df 93       	push	r29
  return (EeFsOpen() && EeFsck() >= 0 && eeLoadGeneral()) ;
    40d4:	d9 d2       	rcall	.+1458   	; 0x4688 <_Z8EeFsOpenv>
    40d6:	81 11       	cpse	r24, r1
    40d8:	02 c0       	rjmp	.+4      	; 0x40de <_Z13eeReadGeneralv+0xe>
    40da:	80 e0       	ldi	r24, 0x00	; 0
    40dc:	30 c0       	rjmp	.+96     	; 0x413e <_Z13eeReadGeneralv+0x6e>
    40de:	52 d2       	rcall	.+1188   	; 0x4584 <_Z6EeFsckv>
    40e0:	87 fd       	sbrc	r24, 7
    40e2:	fb cf       	rjmp	.-10     	; 0x40da <_Z13eeReadGeneralv+0xa>
}


static bool eeLoadGeneral()
{
  theFile.openRd(FILE_GENERAL);
    40e4:	60 e0       	ldi	r22, 0x00	; 0
    40e6:	8e e7       	ldi	r24, 0x7E	; 126
    40e8:	96 e0       	ldi	r25, 0x06	; 6
    40ea:	3e d3       	rcall	.+1660   	; 0x4768 <_ZN5EFile6openRdEh>
  memset(&g_eeGeneral, 0, sizeof(EEGeneral));
    40ec:	82 e7       	ldi	r24, 0x72	; 114
    40ee:	e2 ee       	ldi	r30, 0xE2	; 226
    40f0:	f5 e0       	ldi	r31, 0x05	; 5
    40f2:	df 01       	movw	r26, r30
    40f4:	1d 92       	st	X+, r1
    40f6:	8a 95       	dec	r24
    40f8:	e9 f7       	brne	.-6      	; 0x40f4 <_Z13eeReadGeneralv+0x24>
//  uint8_t sz = theFile.readRlc((uint8_t*)&g_eeGeneral, sizeof(EEGeneral));
  theFile.readRlc((uint8_t*)&g_eeGeneral, sizeof(EEGeneral));
    40fa:	42 e7       	ldi	r20, 0x72	; 114
    40fc:	50 e0       	ldi	r21, 0x00	; 0
    40fe:	bf 01       	movw	r22, r30
    4100:	8e e7       	ldi	r24, 0x7E	; 126
    4102:	96 e0       	ldi	r25, 0x06	; 6
    4104:	b4 d3       	rcall	.+1896   	; 0x486e <_ZN5EFile7readRlcEPhj>

	validateName( g_eeGeneral.ownerName, sizeof(g_eeGeneral.ownerName) ) ;
    4106:	83 e3       	ldi	r24, 0x33	; 51
    4108:	96 e0       	ldi	r25, 0x06	; 6
    410a:	92 de       	rcall	.-732    	; 0x3e30 <_ZL12validateNamePch.constprop.1>
//  {
//      uint8_t idx = char2idx(g_eeGeneral.ownerName[i]);
//      g_eeGeneral.ownerName[i] = idx2char(idx);
//  }

  if(g_eeGeneral.myVers<MDVERS)
    410c:	80 91 e2 05 	lds	r24, 0x05E2
    4110:	8b 30       	cpi	r24, 0x0B	; 11
    4112:	50 f4       	brcc	.+20     	; 0x4128 <_Z13eeReadGeneralv+0x58>
	{
    sysFlags |= sysFLAG_OLD_EEPROM; // if old EEPROM - Raise flag
    4114:	80 91 9e 01 	lds	r24, 0x019E
    4118:	81 60       	ori	r24, 0x01	; 1
    411a:	80 93 9e 01 	sts	0x019E, r24

  	g_eeGeneral.myVers   =  MDVERS; // update myvers
    411e:	8b e0       	ldi	r24, 0x0B	; 11
    4120:	80 93 e2 05 	sts	0x05E2, r24
		STORE_GENERALVARS;
    4124:	81 e0       	ldi	r24, 0x01	; 1
    4126:	ba df       	rcall	.-140    	; 0x409c <_Z7eeDirtyh>
	}
//  if(sz>(sizeof(EEGeneral)-20)) for(uint8_t i=0; i<12;i++) sum+=g_eeGeneral.calibMid[i];
  return g_eeGeneral.chkSum == evalChkSum() ;
    4128:	c0 91 0d 06 	lds	r28, 0x060D
    412c:	d0 91 0e 06 	lds	r29, 0x060E
    4130:	9d de       	rcall	.-710    	; 0x3e6c <_Z10evalChkSumv>
  return true;
}

bool eeReadGeneral()
{
  return (EeFsOpen() && EeFsck() >= 0 && eeLoadGeneral()) ;
    4132:	21 e0       	ldi	r18, 0x01	; 1
    4134:	c8 17       	cp	r28, r24
    4136:	d9 07       	cpc	r29, r25
    4138:	09 f0       	breq	.+2      	; 0x413c <_Z13eeReadGeneralv+0x6c>
    413a:	20 e0       	ldi	r18, 0x00	; 0
    413c:	82 2f       	mov	r24, r18
}
    413e:	df 91       	pop	r29
    4140:	cf 91       	pop	r28
    4142:	08 95       	ret

00004144 <_Z7eeCheckb>:
}

extern uint8_t EepromActive ;

void eeCheck(bool immediately)
{
    4144:	ef 92       	push	r14
    4146:	0f 93       	push	r16
    4148:	1f 93       	push	r17
    414a:	cf 93       	push	r28
    414c:	df 93       	push	r29
	EepromActive = 0 ;
    414e:	10 92 cc 06 	sts	0x06CC, r1
  uint8_t msk  = s_eeDirtyMsk;
    4152:	c0 91 89 06 	lds	r28, 0x0689
  if(!msk) return;
    4156:	cc 23       	and	r28, r28
    4158:	09 f4       	brne	.+2      	; 0x415c <_Z7eeCheckb+0x18>
    415a:	98 c0       	rjmp	.+304    	; 0x428c <_Z7eeCheckb+0x148>
	EepromActive = '1' + s_eeLongTimer ;
    415c:	90 91 8a 06 	lds	r25, 0x068A
    4160:	9f 5c       	subi	r25, 0xCF	; 207
    4162:	90 93 cc 06 	sts	0x06CC, r25
  if( !immediately )
    4166:	81 11       	cpse	r24, r1
    4168:	1c c0       	rjmp	.+56     	; 0x41a2 <_Z7eeCheckb+0x5e>
	{
		if ( ( get_tmr10ms() - s_eeDirtyTime10ms) < WRITE_DELAY_10MS) return ;
    416a:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_Z11get_tmr10msv>
    416e:	20 91 87 06 	lds	r18, 0x0687
    4172:	30 91 88 06 	lds	r19, 0x0688
    4176:	82 1b       	sub	r24, r18
    4178:	93 0b       	sbc	r25, r19
    417a:	88 3c       	cpi	r24, 0xC8	; 200
    417c:	91 05       	cpc	r25, r1
    417e:	08 f4       	brcc	.+2      	; 0x4182 <_Z7eeCheckb+0x3e>
    4180:	85 c0       	rjmp	.+266    	; 0x428c <_Z7eeCheckb+0x148>
		if ( s_eeLongTimer )
    4182:	80 91 8a 06 	lds	r24, 0x068A
    4186:	88 23       	and	r24, r24
    4188:	61 f0       	breq	.+24     	; 0x41a2 <_Z7eeCheckb+0x5e>
		{
			if ( --s_eeLongTimer )
    418a:	81 50       	subi	r24, 0x01	; 1
    418c:	80 93 8a 06 	sts	0x068A, r24
    4190:	88 23       	and	r24, r24
    4192:	39 f0       	breq	.+14     	; 0x41a2 <_Z7eeCheckb+0x5e>
			{
  			s_eeDirtyTime10ms  = get_tmr10ms() ;
    4194:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_Z11get_tmr10msv>
    4198:	90 93 88 06 	sts	0x0688, r25
    419c:	80 93 87 06 	sts	0x0687, r24
				return ;
    41a0:	75 c0       	rjmp	.+234    	; 0x428c <_Z7eeCheckb+0x148>
			}
		}
	}
	s_eeLongTimer = 0 ;
    41a2:	10 92 8a 06 	sts	0x068A, r1
  if ( Ee_lock ) return ;
    41a6:	80 91 6b 06 	lds	r24, 0x066B
    41aa:	81 11       	cpse	r24, r1
    41ac:	6f c0       	rjmp	.+222    	; 0x428c <_Z7eeCheckb+0x148>
  Ee_lock = EE_LOCK ;      	// Lock eeprom writing from recursion
  if ( msk & EE_TRIM )
    41ae:	dc 2f       	mov	r29, r28
    41b0:	d4 70       	andi	r29, 0x04	; 4
    41b2:	c2 fd       	sbrc	r28, 2
    41b4:	02 c0       	rjmp	.+4      	; 0x41ba <_Z7eeCheckb+0x76>
			}
		}
	}
	s_eeLongTimer = 0 ;
  if ( Ee_lock ) return ;
  Ee_lock = EE_LOCK ;      	// Lock eeprom writing from recursion
    41b6:	81 e0       	ldi	r24, 0x01	; 1
    41b8:	01 c0       	rjmp	.+2      	; 0x41bc <_Z7eeCheckb+0x78>
  if ( msk & EE_TRIM )
  {
    Ee_lock |= EE_TRIM_LOCK ;    // So the lower levels know what is happening
    41ba:	83 e0       	ldi	r24, 0x03	; 3
    41bc:	80 93 6b 06 	sts	0x066B, r24
  }
  

  if(msk & EE_GENERAL)
    41c0:	c0 ff       	sbrs	r28, 0
    41c2:	2c c0       	rjmp	.+88     	; 0x421c <_Z7eeCheckb+0xd8>
	{
		EepromActive = '2' ;
    41c4:	82 e3       	ldi	r24, 0x32	; 50
    41c6:	80 93 cc 06 	sts	0x06CC, r24
		
  	s_eeDirtyMsk &= ~EE_GENERAL ;
    41ca:	80 91 89 06 	lds	r24, 0x0689
    41ce:	8e 7f       	andi	r24, 0xFE	; 254
    41d0:	80 93 89 06 	sts	0x0689, r24
    if(theWriteFile.writeRlc(FILE_TMP, FILE_TYP_GENERAL, (uint8_t*)&g_eeGeneral,
                        sizeof(EEGeneral),20) == sizeof(EEGeneral))
    41d4:	44 e1       	ldi	r20, 0x14	; 20
    41d6:	e4 2e       	mov	r14, r20
    41d8:	02 e7       	ldi	r16, 0x72	; 114
    41da:	10 e0       	ldi	r17, 0x00	; 0
    41dc:	22 ee       	ldi	r18, 0xE2	; 226
    41de:	35 e0       	ldi	r19, 0x05	; 5
    41e0:	41 e0       	ldi	r20, 0x01	; 1
    41e2:	61 e1       	ldi	r22, 0x11	; 17
    41e4:	8c e6       	ldi	r24, 0x6C	; 108
    41e6:	96 e0       	ldi	r25, 0x06	; 6
    41e8:	6e d4       	rcall	.+2268   	; 0x4ac6 <_ZN5EFile8writeRlcEhhPhjh>
  if(msk & EE_GENERAL)
	{
		EepromActive = '2' ;
		
  	s_eeDirtyMsk &= ~EE_GENERAL ;
    if(theWriteFile.writeRlc(FILE_TMP, FILE_TYP_GENERAL, (uint8_t*)&g_eeGeneral,
    41ea:	82 37       	cpi	r24, 0x72	; 114
    41ec:	91 05       	cpc	r25, r1
    41ee:	19 f4       	brne	.+6      	; 0x41f6 <_Z7eeCheckb+0xb2>
                        sizeof(EEGeneral),20) == sizeof(EEGeneral))
    {
      EFile::swap(FILE_GENERAL,FILE_TMP);
    41f0:	61 e1       	ldi	r22, 0x11	; 17
    41f2:	80 e0       	ldi	r24, 0x00	; 0
    41f4:	2f c0       	rjmp	.+94     	; 0x4254 <_Z7eeCheckb+0x110>
    }else{
      if(theWriteFile.write_errno()==ERR_TMO){
    41f6:	80 91 72 06 	lds	r24, 0x0672
    41fa:	82 30       	cpi	r24, 0x02	; 2
    41fc:	51 f4       	brne	.+20     	; 0x4212 <_Z7eeCheckb+0xce>
        s_eeDirtyMsk |= EE_GENERAL; //try again
    41fe:	80 91 89 06 	lds	r24, 0x0689
    4202:	81 60       	ori	r24, 0x01	; 1
    4204:	30 c0       	rjmp	.+96     	; 0x4266 <_Z7eeCheckb+0x122>
    if(theWriteFile.writeRlc(FILE_TMP, FILE_TYP_MODEL, (uint8_t*)&g_model,
                        sizeof(g_model),20) == sizeof(g_model))
    {
      EFile::swap(FILE_MODEL(g_eeGeneral.currModel),FILE_TMP);
    }else{
      if(theWriteFile.write_errno()==ERR_TMO){
    4206:	80 91 72 06 	lds	r24, 0x0672
    420a:	82 30       	cpi	r24, 0x02	; 2
    420c:	29 f1       	breq	.+74     	; 0x4258 <_Z7eeCheckb+0x114>
    		{
    		    wdt_reset();
    		    heartbeat = 0;
    		}
      }else{
        if ( ( msk & EE_TRIM ) == 0 )		// Don't stop if trim adjust
    420e:	d1 11       	cpse	r29, r1
    4210:	3b c0       	rjmp	.+118    	; 0x4288 <_Z7eeCheckb+0x144>
    		    wdt_reset();
    		    heartbeat = 0;
    		}

      }else{
        alert(Str_EEPROM_Overflow);
    4212:	81 ef       	ldi	r24, 0xF1	; 241
    4214:	97 e0       	ldi	r25, 0x07	; 7
    4216:	0e 94 93 18 	call	0x3126	; 0x3126 <_Z5alertPKc>
    421a:	36 c0       	rjmp	.+108    	; 0x4288 <_Z7eeCheckb+0x144>
      }
    }
    //first finish GENERAL, then MODEL !!avoid Toggle effect
  }
  else if(msk & EE_MODEL)
    421c:	c1 ff       	sbrs	r28, 1
    421e:	34 c0       	rjmp	.+104    	; 0x4288 <_Z7eeCheckb+0x144>
	{
		EepromActive = '3' ;
    4220:	83 e3       	ldi	r24, 0x33	; 51
    4222:	80 93 cc 06 	sts	0x06CC, r24
  	s_eeDirtyMsk &= ~(EE_MODEL | EE_TRIM) ;
    4226:	80 91 89 06 	lds	r24, 0x0689
    422a:	89 7f       	andi	r24, 0xF9	; 249
    422c:	80 93 89 06 	sts	0x0689, r24
    if(theWriteFile.writeRlc(FILE_TMP, FILE_TYP_MODEL, (uint8_t*)&g_model,
                        sizeof(g_model),20) == sizeof(g_model))
    4230:	34 e1       	ldi	r19, 0x14	; 20
    4232:	e3 2e       	mov	r14, r19
    4234:	01 ec       	ldi	r16, 0xC1	; 193
    4236:	13 e0       	ldi	r17, 0x03	; 3
    4238:	21 e2       	ldi	r18, 0x21	; 33
    423a:	32 e0       	ldi	r19, 0x02	; 2
    423c:	42 e0       	ldi	r20, 0x02	; 2
    423e:	61 e1       	ldi	r22, 0x11	; 17
    4240:	8c e6       	ldi	r24, 0x6C	; 108
    4242:	96 e0       	ldi	r25, 0x06	; 6
    4244:	40 d4       	rcall	.+2176   	; 0x4ac6 <_ZN5EFile8writeRlcEhhPhjh>
  }
  else if(msk & EE_MODEL)
	{
		EepromActive = '3' ;
  	s_eeDirtyMsk &= ~(EE_MODEL | EE_TRIM) ;
    if(theWriteFile.writeRlc(FILE_TMP, FILE_TYP_MODEL, (uint8_t*)&g_model,
    4246:	81 3c       	cpi	r24, 0xC1	; 193
    4248:	93 40       	sbci	r25, 0x03	; 3
    424a:	e9 f6       	brne	.-70     	; 0x4206 <_Z7eeCheckb+0xc2>
                        sizeof(g_model),20) == sizeof(g_model))
    {
      EFile::swap(FILE_MODEL(g_eeGeneral.currModel),FILE_TMP);
    424c:	80 91 0f 06 	lds	r24, 0x060F
    4250:	61 e1       	ldi	r22, 0x11	; 17
    4252:	8f 5f       	subi	r24, 0xFF	; 255
    4254:	41 d2       	rcall	.+1154   	; 0x46d8 <_ZN5EFile4swapEhh>
    4256:	18 c0       	rjmp	.+48     	; 0x4288 <_Z7eeCheckb+0x144>
    }else{
      if(theWriteFile.write_errno()==ERR_TMO){
        s_eeDirtyMsk |= EE_MODEL; //try again
    4258:	80 91 89 06 	lds	r24, 0x0689
        if ( msk & EE_TRIM )
    425c:	d1 11       	cpse	r29, r1
    425e:	02 c0       	rjmp	.+4      	; 0x4264 <_Z7eeCheckb+0x120>
                        sizeof(g_model),20) == sizeof(g_model))
    {
      EFile::swap(FILE_MODEL(g_eeGeneral.currModel),FILE_TMP);
    }else{
      if(theWriteFile.write_errno()==ERR_TMO){
        s_eeDirtyMsk |= EE_MODEL; //try again
    4260:	82 60       	ori	r24, 0x02	; 2
    4262:	01 c0       	rjmp	.+2      	; 0x4266 <_Z7eeCheckb+0x122>
        if ( msk & EE_TRIM )
        {
          s_eeDirtyMsk |= EE_TRIM; //try again
    4264:	86 60       	ori	r24, 0x06	; 6
    4266:	80 93 89 06 	sts	0x0689, r24
        }
        s_eeDirtyTime10ms = get_tmr10ms() - WRITE_DELAY_10MS;
    426a:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_Z11get_tmr10msv>
    426e:	88 5c       	subi	r24, 0xC8	; 200
    4270:	91 09       	sbc	r25, r1
    4272:	90 93 88 06 	sts	0x0688, r25
    4276:	80 93 87 06 	sts	0x0687, r24
    		if(heartbeat == 0x3)
    427a:	80 91 0d 0b 	lds	r24, 0x0B0D
    427e:	83 30       	cpi	r24, 0x03	; 3
    4280:	19 f4       	brne	.+6      	; 0x4288 <_Z7eeCheckb+0x144>
    		{
    		    wdt_reset();
    4282:	a8 95       	wdr
    		    heartbeat = 0;
    4284:	10 92 0d 0b 	sts	0x0B0D, r1
          alert(Str_EEPROM_Overflow);
        }
      }
    }
  }
  Ee_lock = 0 ;				// UnLock eeprom writing
    4288:	10 92 6b 06 	sts	0x066B, r1


}
    428c:	df 91       	pop	r29
    428e:	cf 91       	pop	r28
    4290:	1f 91       	pop	r17
    4292:	0f 91       	pop	r16
    4294:	ef 90       	pop	r14
    4296:	08 95       	ret

00004298 <_Z14eeWaitCompletev>:
extern uint8_t heartbeat;


void eeWaitComplete()
{
  while(s_eeDirtyMsk)
    4298:	80 91 89 06 	lds	r24, 0x0689
    429c:	88 23       	and	r24, r24
    429e:	51 f0       	breq	.+20     	; 0x42b4 <_Z14eeWaitCompletev+0x1c>
  {
		eeCheck(true) ;
    42a0:	81 e0       	ldi	r24, 0x01	; 1
    42a2:	50 df       	rcall	.-352    	; 0x4144 <_Z7eeCheckb>
    if(heartbeat == 0x3)
    42a4:	80 91 0d 0b 	lds	r24, 0x0B0D
    42a8:	83 30       	cpi	r24, 0x03	; 3
    42aa:	b1 f7       	brne	.-20     	; 0x4298 <_Z14eeWaitCompletev>
    {
      wdt_reset();
    42ac:	a8 95       	wdr
      heartbeat = 0;
    42ae:	10 92 0d 0b 	sts	0x0B0D, r1
    42b2:	f2 cf       	rjmp	.-28     	; 0x4298 <_Z14eeWaitCompletev>
    }
  }
}
    42b4:	08 95       	ret

000042b6 <_Z11eeLoadModelh>:
#ifdef FIX_MODE
extern MixData *mixaddress( uint8_t idx ) ;
#endif

void eeLoadModel(uint8_t id)
{
    42b6:	ef 92       	push	r14
    42b8:	ff 92       	push	r15
    42ba:	0f 93       	push	r16
    42bc:	1f 93       	push	r17
    42be:	cf 93       	push	r28
    42c0:	df 93       	push	r29
    42c2:	c8 2f       	mov	r28, r24
  if(id<MAX_MODELS)
    42c4:	80 31       	cpi	r24, 0x10	; 16
    42c6:	08 f0       	brcs	.+2      	; 0x42ca <_Z11eeLoadModelh+0x14>
    42c8:	c3 c0       	rjmp	.+390    	; 0x4450 <_Z11eeLoadModelh+0x19a>
  {
        theFile.openRd(FILE_MODEL(id));
    42ca:	61 e0       	ldi	r22, 0x01	; 1
    42cc:	68 0f       	add	r22, r24
    42ce:	8e e7       	ldi	r24, 0x7E	; 126
    42d0:	96 e0       	ldi	r25, 0x06	; 6
    42d2:	4a d2       	rcall	.+1172   	; 0x4768 <_ZN5EFile6openRdEh>
        memset(&g_model, 0, sizeof(ModelData));
    42d4:	21 ec       	ldi	r18, 0xC1	; 193
    42d6:	33 e0       	ldi	r19, 0x03	; 3
    42d8:	e1 e2       	ldi	r30, 0x21	; 33
    42da:	f2 e0       	ldi	r31, 0x02	; 2
    42dc:	df 01       	movw	r26, r30
    42de:	c9 01       	movw	r24, r18
    42e0:	1d 92       	st	X+, r1
    42e2:	01 97       	sbiw	r24, 0x01	; 1
    42e4:	e9 f7       	brne	.-6      	; 0x42e0 <_Z11eeLoadModelh+0x2a>
        uint16_t sz = theFile.readRlc((uint8_t*)&g_model, sizeof(g_model));
    42e6:	41 ec       	ldi	r20, 0xC1	; 193
    42e8:	53 e0       	ldi	r21, 0x03	; 3
    42ea:	bf 01       	movw	r22, r30
    42ec:	8e e7       	ldi	r24, 0x7E	; 126
    42ee:	96 e0       	ldi	r25, 0x06	; 6
    42f0:	be d2       	rcall	.+1404   	; 0x486e <_ZN5EFile7readRlcEPhj>

        if(sz<256) // if not loaded a fair amount
    42f2:	8f 3f       	cpi	r24, 0xFF	; 255
    42f4:	91 05       	cpc	r25, r1
    42f6:	09 f0       	breq	.+2      	; 0x42fa <_Z11eeLoadModelh+0x44>
    42f8:	10 f4       	brcc	.+4      	; 0x42fe <_Z11eeLoadModelh+0x48>
        {
            modelDefaultWrite(id);
    42fa:	8c 2f       	mov	r24, r28
    42fc:	f2 dd       	rcall	.-1052   	; 0x3ee2 <_Z17modelDefaultWriteh>
        }
				validateName( g_model.name, sizeof(g_model.name) ) ;
    42fe:	81 e2       	ldi	r24, 0x21	; 33
    4300:	92 e0       	ldi	r25, 0x02	; 2
    4302:	96 dd       	rcall	.-1236   	; 0x3e30 <_ZL12validateNamePch.constprop.1>
//        for(uint8_t i=0; i<sizeof(g_model.name);i++) // makes sure name is valid
//        {
//            uint8_t idx = char2idx(g_model.name[i]);
//            g_model.name[i] = idx2char(idx);
//        }
		if ( g_model.numBlades == 0 )
    4304:	80 91 c9 04 	lds	r24, 0x04C9
    4308:	81 11       	cpse	r24, r1
    430a:	07 c0       	rjmp	.+14     	; 0x431a <_Z11eeLoadModelh+0x64>
		{
			g_model.numBlades = g_model.xnumBlades + 2 ;				
    430c:	80 91 32 02 	lds	r24, 0x0232
    4310:	86 95       	lsr	r24
    4312:	83 70       	andi	r24, 0x03	; 3
    4314:	8e 5f       	subi	r24, 0xFE	; 254
    4316:	80 93 c9 04 	sts	0x04C9, r24
        FRSKY_setModelAlarms();
#endif
#ifdef FIX_MODE

// check for updating mix sources
		if ( g_model.modelVersion < 2 )
    431a:	80 91 11 05 	lds	r24, 0x0511
    431e:	82 30       	cpi	r24, 0x02	; 2
    4320:	08 f0       	brcs	.+2      	; 0x4324 <_Z11eeLoadModelh+0x6e>
    4322:	61 c0       	rjmp	.+194    	; 0x43e6 <_Z11eeLoadModelh+0x130>
    4324:	10 e0       	ldi	r17, 0x00	; 0
		{
    	for(uint8_t i=0;i<MAX_MIXERS;i++)
			{
        MixData *md = mixaddress( i ) ;
    4326:	81 2f       	mov	r24, r17
    4328:	0e 94 87 10 	call	0x210e	; 0x210e <_Z10mixaddressh>
    432c:	ec 01       	movw	r28, r24
        if (md->srcRaw)
    432e:	89 81       	ldd	r24, Y+1	; 0x01
    4330:	81 50       	subi	r24, 0x01	; 1
    4332:	84 30       	cpi	r24, 0x04	; 4
    4334:	18 f4       	brcc	.+6      	; 0x433c <_Z11eeLoadModelh+0x86>
				{
        	if (md->srcRaw <= 4)		// Stick
					{
						md->srcRaw = modeFixValue( md->srcRaw-1 ) ;
    4336:	0e 94 6d 10 	call	0x20da	; 0x20da <_Z12modeFixValueh>
    433a:	89 83       	std	Y+1, r24	; 0x01
#ifdef FIX_MODE

// check for updating mix sources
		if ( g_model.modelVersion < 2 )
		{
    	for(uint8_t i=0;i<MAX_MIXERS;i++)
    433c:	1f 5f       	subi	r17, 0xFF	; 255
    433e:	10 32       	cpi	r17, 0x20	; 32
    4340:	91 f7       	brne	.-28     	; 0x4326 <_Z11eeLoadModelh+0x70>
    4342:	c7 e7       	ldi	r28, 0x77	; 119
    4344:	d4 e0       	ldi	r29, 0x04	; 4
    4346:	00 e0       	ldi	r16, 0x00	; 0
    4348:	10 e0       	ldi	r17, 0x00	; 0


			for (uint8_t i = 0 ; i < NUM_CSW ; i += 1 )
			{
    		CSwData *cs = &g_model.customSw[i];
    		uint8_t cstate = CS_STATE(cs->func);
    434a:	8a 81       	ldd	r24, Y+2	; 0x02
    434c:	8f 70       	andi	r24, 0x0F	; 15
    434e:	0e 94 81 10 	call	0x2102	; 0x2102 <_Z8CS_STATEh>
				uint8_t t = 0 ;
    		if(cstate == CS_VOFS)
    4352:	88 23       	and	r24, r24
    4354:	81 f0       	breq	.+32     	; 0x4376 <_Z11eeLoadModelh+0xc0>
				{
					t = 1 ;
				}
				else if(cstate == CS_VCOMP)
    4356:	82 30       	cpi	r24, 0x02	; 2
    4358:	b9 f4       	brne	.+46     	; 0x4388 <_Z11eeLoadModelh+0xd2>
    435a:	d8 01       	movw	r26, r16
    435c:	a8 58       	subi	r26, 0x88	; 136
    435e:	bb 4f       	sbci	r27, 0xFB	; 251
    4360:	7d 01       	movw	r14, r26
				{
					t = 1 ;
      		if (cs->v2)
    4362:	8c 91       	ld	r24, X
    4364:	88 23       	and	r24, r24
    4366:	39 f0       	breq	.+14     	; 0x4376 <_Z11eeLoadModelh+0xc0>
					{
    		    if (cs->v2 <= 4)		// Stick
    4368:	85 30       	cpi	r24, 0x05	; 5
    436a:	2c f4       	brge	.+10     	; 0x4376 <_Z11eeLoadModelh+0xc0>
						{
    	    		cs->v2 = modeFixValue( cs->v2-1 ) ;
    436c:	81 50       	subi	r24, 0x01	; 1
    436e:	0e 94 6d 10 	call	0x20da	; 0x20da <_Z12modeFixValueh>
    4372:	f7 01       	movw	r30, r14
    4374:	80 83       	st	Z, r24
						}
					}
				}
				if ( t )
				{
      		if (cs->v1)
    4376:	88 81       	ld	r24, Y
    4378:	88 23       	and	r24, r24
    437a:	31 f0       	breq	.+12     	; 0x4388 <_Z11eeLoadModelh+0xd2>
					{
    		    if (cs->v1 <= 4)		// Stick
    437c:	85 30       	cpi	r24, 0x05	; 5
    437e:	24 f4       	brge	.+8      	; 0x4388 <_Z11eeLoadModelh+0xd2>
						{
    	    		cs->v1 = modeFixValue( cs->v1-1 ) ;
    4380:	81 50       	subi	r24, 0x01	; 1
    4382:	0e 94 6d 10 	call	0x20da	; 0x20da <_Z12modeFixValueh>
    4386:	88 83       	st	Y, r24
    4388:	23 96       	adiw	r28, 0x03	; 3
    438a:	0d 5f       	subi	r16, 0xFD	; 253
    438c:	1f 4f       	sbci	r17, 0xFF	; 255
					}
				}
			}


			for (uint8_t i = 0 ; i < NUM_CSW ; i += 1 )
    438e:	04 32       	cpi	r16, 0x24	; 36
    4390:	11 05       	cpc	r17, r1
    4392:	d9 f6       	brne	.-74     	; 0x434a <_Z11eeLoadModelh+0x94>
						}
					}
				}
			}
#endif	// CPUs
	    memmove( &Xmem.texpoData, &g_model.expoData, sizeof(Xmem.texpoData) ) ;
    4394:	88 e3       	ldi	r24, 0x38	; 56
    4396:	eb ec       	ldi	r30, 0xCB	; 203
    4398:	f3 e0       	ldi	r31, 0x03	; 3
    439a:	a0 e0       	ldi	r26, 0x00	; 0
    439c:	be e0       	ldi	r27, 0x0E	; 14
    439e:	01 90       	ld	r0, Z+
    43a0:	0d 92       	st	X+, r0
    43a2:	8a 95       	dec	r24
    43a4:	e1 f7       	brne	.-8      	; 0x439e <_Z11eeLoadModelh+0xe8>
    43a6:	c0 e0       	ldi	r28, 0x00	; 0
    43a8:	de e0       	ldi	r29, 0x0E	; 14
			for (uint8_t i = 0 ; i < 4 ; i += 1 )
    43aa:	10 e0       	ldi	r17, 0x00	; 0
			{
				uint8_t dest = modeFixValue( i ) - 1 ;
	    	memmove( &g_model.expoData[dest], &Xmem.texpoData[i], sizeof(Xmem.texpoData[0]) ) ;
    43ac:	0e e0       	ldi	r16, 0x0E	; 14
			}
#endif	// CPUs
	    memmove( &Xmem.texpoData, &g_model.expoData, sizeof(Xmem.texpoData) ) ;
			for (uint8_t i = 0 ; i < 4 ; i += 1 )
			{
				uint8_t dest = modeFixValue( i ) - 1 ;
    43ae:	81 2f       	mov	r24, r17
    43b0:	0e 94 6d 10 	call	0x20da	; 0x20da <_Z12modeFixValueh>
    43b4:	81 50       	subi	r24, 0x01	; 1
	    	memmove( &g_model.expoData[dest], &Xmem.texpoData[i], sizeof(Xmem.texpoData[0]) ) ;
    43b6:	08 9f       	mul	r16, r24
    43b8:	d0 01       	movw	r26, r0
    43ba:	11 24       	eor	r1, r1
    43bc:	a5 53       	subi	r26, 0x35	; 53
    43be:	bc 4f       	sbci	r27, 0xFC	; 252
    43c0:	fe 01       	movw	r30, r28
    43c2:	80 2f       	mov	r24, r16
    43c4:	01 90       	ld	r0, Z+
    43c6:	0d 92       	st	X+, r0
    43c8:	8a 95       	dec	r24
    43ca:	e1 f7       	brne	.-8      	; 0x43c4 <_Z11eeLoadModelh+0x10e>
					}
				}
			}
#endif	// CPUs
	    memmove( &Xmem.texpoData, &g_model.expoData, sizeof(Xmem.texpoData) ) ;
			for (uint8_t i = 0 ; i < 4 ; i += 1 )
    43cc:	1f 5f       	subi	r17, 0xFF	; 255
    43ce:	2e 96       	adiw	r28, 0x0e	; 14
    43d0:	14 30       	cpi	r17, 0x04	; 4
    43d2:	69 f7       	brne	.-38     	; 0x43ae <_Z11eeLoadModelh+0xf8>
	    	memmove( &g_model.expoData[dest], &Xmem.texpoData[i], sizeof(Xmem.texpoData[0]) ) ;
			}

// sort expo/dr here

			alert(PSTR("CHECK MIX/DR SOURCES"));
    43d4:	86 ec       	ldi	r24, 0xC6	; 198
    43d6:	97 e0       	ldi	r25, 0x07	; 7
    43d8:	0e 94 93 18 	call	0x3126	; 0x3126 <_Z5alertPKc>
			g_model.modelVersion = 2 ;
    43dc:	82 e0       	ldi	r24, 0x02	; 2
    43de:	80 93 11 05 	sts	0x0511, r24
      eeDirty( EE_MODEL ) ;
    43e2:	5c de       	rcall	.-840    	; 0x409c <_Z7eeDirtyh>
			eeWaitComplete() ;
    43e4:	59 df       	rcall	.-334    	; 0x4298 <_Z14eeWaitCompletev>
		}
#endif	// FIX_MODE

#ifdef VERSION3
		if ( g_model.modelVersion < 3 )
    43e6:	80 91 11 05 	lds	r24, 0x0511
    43ea:	83 30       	cpi	r24, 0x03	; 3
    43ec:	f8 f4       	brcc	.+62     	; 0x442c <_Z11eeLoadModelh+0x176>
    43ee:	80 e0       	ldi	r24, 0x00	; 0
    43f0:	90 e0       	ldi	r25, 0x00	; 0
    43f2:	fc 01       	movw	r30, r24
    43f4:	e9 58       	subi	r30, 0x89	; 137
    43f6:	fb 4f       	sbci	r31, 0xFB	; 251
		{
			for (uint8_t i = 0 ; i < NUM_CSW ; i += 1 )
			{
    		CSwData *cs = &g_model.customSw[i];
				if ( cs->func == CS_LATCH )
    43f8:	22 81       	ldd	r18, Z+2	; 0x02
    43fa:	32 2f       	mov	r19, r18
    43fc:	3f 70       	andi	r19, 0x0F	; 15
    43fe:	3c 30       	cpi	r19, 0x0C	; 12
    4400:	19 f4       	brne	.+6      	; 0x4408 <_Z11eeLoadModelh+0x152>
				{
					cs->func = CS_GREATER ;
    4402:	20 7f       	andi	r18, 0xF0	; 240
    4404:	2a 60       	ori	r18, 0x0A	; 10
    4406:	22 83       	std	Z+2, r18	; 0x02
				}
				if ( cs->func == CS_FLIP )
    4408:	22 81       	ldd	r18, Z+2	; 0x02
    440a:	32 2f       	mov	r19, r18
    440c:	3f 70       	andi	r19, 0x0F	; 15
    440e:	3d 30       	cpi	r19, 0x0D	; 13
    4410:	19 f4       	brne	.+6      	; 0x4418 <_Z11eeLoadModelh+0x162>
				{
					cs->func = CS_LESS ;
    4412:	20 7f       	andi	r18, 0xF0	; 240
    4414:	2b 60       	ori	r18, 0x0B	; 11
    4416:	22 83       	std	Z+2, r18	; 0x02
    4418:	03 96       	adiw	r24, 0x03	; 3
#endif	// FIX_MODE

#ifdef VERSION3
		if ( g_model.modelVersion < 3 )
		{
			for (uint8_t i = 0 ; i < NUM_CSW ; i += 1 )
    441a:	84 32       	cpi	r24, 0x24	; 36
    441c:	91 05       	cpc	r25, r1
    441e:	49 f7       	brne	.-46     	; 0x43f2 <_Z11eeLoadModelh+0x13c>
				{
					cs->func = CS_LESS ;
				}
			}
#endif	// CPUs
			g_model.modelVersion = 3 ;
    4420:	83 e0       	ldi	r24, 0x03	; 3
    4422:	80 93 11 05 	sts	0x0511, r24
      eeDirty( EE_MODEL ) ;
    4426:	82 e0       	ldi	r24, 0x02	; 2
    4428:	39 de       	rcall	.-910    	; 0x409c <_Z7eeDirtyh>
			eeWaitComplete() ;
    442a:	36 df       	rcall	.-404    	; 0x4298 <_Z14eeWaitCompletev>
		}
#endif
#ifdef VERSION4
		if ( g_model.modelVersion < 4 )
    442c:	80 91 11 05 	lds	r24, 0x0511
    4430:	84 30       	cpi	r24, 0x04	; 4
    4432:	70 f4       	brcc	.+28     	; 0x4450 <_Z11eeLoadModelh+0x19a>
		{
			g_model.switchWarningStates = g_eeGeneral.switchWarningStates ;
    4434:	80 91 3d 06 	lds	r24, 0x063D
    4438:	80 93 d0 04 	sts	0x04D0, r24
			alert(PSTR("CHECK MODEL TIMERS"));
    443c:	83 eb       	ldi	r24, 0xB3	; 179
    443e:	97 e0       	ldi	r25, 0x07	; 7
    4440:	0e 94 93 18 	call	0x3126	; 0x3126 <_Z5alertPKc>
			g_model.modelVersion = 4 ;
    4444:	84 e0       	ldi	r24, 0x04	; 4
    4446:	80 93 11 05 	sts	0x0511, r24
      eeDirty( EE_MODEL ) ;
    444a:	82 e0       	ldi	r24, 0x02	; 2
    444c:	27 de       	rcall	.-946    	; 0x409c <_Z7eeDirtyh>
			eeWaitComplete() ;
    444e:	24 df       	rcall	.-440    	; 0x4298 <_Z14eeWaitCompletev>
		}
#endif	// VERSION4
  }

	TimerMode *ptConfig = TimerConfig ;
	FORCE_INDIRECT(ptConfig) ;
    4450:	e7 ed       	ldi	r30, 0xD7	; 215
    4452:	f1 e0       	ldi	r31, 0x01	; 1

	ptConfig->tmrModeA = g_model.tmrMode ;
    4454:	80 91 2c 02 	lds	r24, 0x022C
    4458:	82 83       	std	Z+2, r24	; 0x02
	ptConfig->tmrModeB = g_model.tmrModeB ;
    445a:	80 91 9c 04 	lds	r24, 0x049C
    445e:	83 83       	std	Z+3, r24	; 0x03
	ptConfig->tmrVal = g_model.tmrVal ;
    4460:	80 91 2e 02 	lds	r24, 0x022E
    4464:	90 91 2f 02 	lds	r25, 0x022F
    4468:	91 83       	std	Z+1, r25	; 0x01
    446a:	80 83       	st	Z, r24
	ptConfig->tmrDir = g_model.tmrDir ;
    446c:	80 91 2d 02 	lds	r24, 0x022D
    4470:	81 70       	andi	r24, 0x01	; 1
    4472:	84 83       	std	Z+4, r24	; 0x04
	ptConfig += 1 ;
	ptConfig->tmrModeA = g_model.tmr2Mode ;
    4474:	80 91 ce 04 	lds	r24, 0x04CE
    4478:	87 83       	std	Z+7, r24	; 0x07
	ptConfig->tmrModeB = g_model.tmr2ModeB ;
    447a:	80 91 cf 04 	lds	r24, 0x04CF
    447e:	80 87       	std	Z+8, r24	; 0x08
	ptConfig->tmrVal = g_model.tmr2Val ;
    4480:	80 91 cc 04 	lds	r24, 0x04CC
    4484:	90 91 cd 04 	lds	r25, 0x04CD
    4488:	96 83       	std	Z+6, r25	; 0x06
    448a:	85 83       	std	Z+5, r24	; 0x05
	ptConfig->tmrDir = g_model.tmr2Dir ;
    448c:	80 91 92 05 	lds	r24, 0x0592
    4490:	87 fb       	bst	r24, 7
    4492:	88 27       	eor	r24, r24
    4494:	80 f9       	bld	r24, 0
    4496:	81 87       	std	Z+9, r24	; 0x09

  resetTimer1() ;
    4498:	0e 94 d7 4b 	call	0x97ae	; 0x97ae <_Z11resetTimer1v>
  resetTimer2() ;
    449c:	0e 94 dd 4b 	call	0x97ba	; 0x97ba <_Z11resetTimer2v>

	asm("") ;
}
    44a0:	df 91       	pop	r29
    44a2:	cf 91       	pop	r28
    44a4:	1f 91       	pop	r17
    44a6:	0f 91       	pop	r16
    44a8:	ff 90       	pop	r15
    44aa:	ef 90       	pop	r14
    44ac:	08 95       	ret

000044ae <_ZL9EeFsFlushv>:
//  eeWriteBlockCmp(&eeFs.freeList,&((EeFs*)0)->freeList ,sizeof(eeFs.freeList));
  eeWriteBlockCmp(&eeFs.freeList, offsetof(EeFs, freeList), sizeof(eeFs.freeList));
}
static void EeFsFlush()
{
  eeWriteBlockCmp(&eeFs, 0,sizeof(eeFs));
    44ae:	40 e4       	ldi	r20, 0x40	; 64
    44b0:	50 e0       	ldi	r21, 0x00	; 0
    44b2:	60 e0       	ldi	r22, 0x00	; 0
    44b4:	70 e0       	ldi	r23, 0x00	; 0
    44b6:	8b e8       	ldi	r24, 0x8B	; 139
    44b8:	96 e0       	ldi	r25, 0x06	; 6
    44ba:	0c 94 70 2a 	jmp	0x54e0	; 0x54e0 <_Z15eeWriteBlockCmpPKvjj>

000044be <_ZL17EeFsFlushFreelistv>:
  eeWriteBlockCmp(buf, (uint16_t)(blk*BS+ofs+1), len);
}
static void EeFsFlushFreelist()
{
//  eeWriteBlockCmp(&eeFs.freeList,&((EeFs*)0)->freeList ,sizeof(eeFs.freeList));
  eeWriteBlockCmp(&eeFs.freeList, offsetof(EeFs, freeList), sizeof(eeFs.freeList));
    44be:	41 e0       	ldi	r20, 0x01	; 1
    44c0:	50 e0       	ldi	r21, 0x00	; 0
    44c2:	62 e0       	ldi	r22, 0x02	; 2
    44c4:	70 e0       	ldi	r23, 0x00	; 0
    44c6:	8d e8       	ldi	r24, 0x8D	; 141
    44c8:	96 e0       	ldi	r25, 0x06	; 6
    44ca:	0c 94 70 2a 	jmp	0x54e0	; 0x54e0 <_Z15eeWriteBlockCmpPKvjj>

000044ce <_ZL11EeFsSetLinkhh>:
}

static uint8_t EeFsGetLink(uint8_t blk){
  return EeFsRead( blk,0);
}
static void EeFsSetLink(uint8_t blk,uint8_t val){
    44ce:	cf 93       	push	r28
    44d0:	df 93       	push	r29
    44d2:	1f 92       	push	r1
    44d4:	cd b7       	in	r28, 0x3d	; 61
    44d6:	de b7       	in	r29, 0x3e	; 62
    44d8:	69 83       	std	Y+1, r22	; 0x01
  uint8_t ret;
  eeprom_read_block(&ret,(const void*)(blk*BS+ofs),1);
  return ret;
}
static void EeFsWrite(uint8_t blk,uint8_t ofs,uint8_t val){
  eeWriteBlockCmp(&val, (uint16_t)(blk*BS+ofs), 1);
    44da:	90 e1       	ldi	r25, 0x10	; 16
    44dc:	89 9f       	mul	r24, r25
    44de:	b0 01       	movw	r22, r0
    44e0:	11 24       	eor	r1, r1
    44e2:	41 e0       	ldi	r20, 0x01	; 1
    44e4:	50 e0       	ldi	r21, 0x00	; 0
    44e6:	ce 01       	movw	r24, r28
    44e8:	01 96       	adiw	r24, 0x01	; 1
    44ea:	fa d7       	rcall	.+4084   	; 0x54e0 <_Z15eeWriteBlockCmpPKvjj>
static uint8_t EeFsGetLink(uint8_t blk){
  return EeFsRead( blk,0);
}
static void EeFsSetLink(uint8_t blk,uint8_t val){
  EeFsWrite( blk,0,val);
}
    44ec:	0f 90       	pop	r0
    44ee:	df 91       	pop	r29
    44f0:	cf 91       	pop	r28
    44f2:	08 95       	ret

000044f4 <_ZL11EeFsGetLinkh>:
}
static void EeFsWrite(uint8_t blk,uint8_t ofs,uint8_t val){
  eeWriteBlockCmp(&val, (uint16_t)(blk*BS+ofs), 1);
}

static uint8_t EeFsGetLink(uint8_t blk){
    44f4:	cf 93       	push	r28
    44f6:	df 93       	push	r29
    44f8:	1f 92       	push	r1
    44fa:	cd b7       	in	r28, 0x3d	; 61
    44fc:	de b7       	in	r29, 0x3e	; 62
}) eeFs;


static uint8_t EeFsRead(uint8_t blk,uint8_t ofs){
  uint8_t ret;
  eeprom_read_block(&ret,(const void*)(blk*BS+ofs),1);
    44fe:	90 e1       	ldi	r25, 0x10	; 16
    4500:	89 9f       	mul	r24, r25
    4502:	b0 01       	movw	r22, r0
    4504:	11 24       	eor	r1, r1
    4506:	41 e0       	ldi	r20, 0x01	; 1
    4508:	50 e0       	ldi	r21, 0x00	; 0
    450a:	ce 01       	movw	r24, r28
    450c:	01 96       	adiw	r24, 0x01	; 1
    450e:	0e 94 c3 72 	call	0xe586	; 0xe586 <__eerd_block_m64>
  eeWriteBlockCmp(&val, (uint16_t)(blk*BS+ofs), 1);
}

static uint8_t EeFsGetLink(uint8_t blk){
  return EeFsRead( blk,0);
}
    4512:	89 81       	ldd	r24, Y+1	; 0x01
    4514:	0f 90       	pop	r0
    4516:	df 91       	pop	r29
    4518:	cf 91       	pop	r28
    451a:	08 95       	ret

0000451c <_ZL8EeFsFreeh>:
    ret += BS-1;
    i = EeFsGetLink(i);
  }
  return ret;
}
static void EeFsFree(uint8_t blk){///free one or more blocks
    451c:	cf 93       	push	r28
    451e:	df 93       	push	r29
    4520:	d8 2f       	mov	r29, r24
  uint8_t i = blk;
    4522:	c8 2f       	mov	r28, r24
  while( EeFsGetLink(i)) i = EeFsGetLink(i);
    4524:	8c 2f       	mov	r24, r28
    4526:	e6 df       	rcall	.-52     	; 0x44f4 <_ZL11EeFsGetLinkh>
    4528:	88 23       	and	r24, r24
    452a:	21 f0       	breq	.+8      	; 0x4534 <_ZL8EeFsFreeh+0x18>
    452c:	8c 2f       	mov	r24, r28
    452e:	e2 df       	rcall	.-60     	; 0x44f4 <_ZL11EeFsGetLinkh>
    4530:	c8 2f       	mov	r28, r24
    4532:	f8 cf       	rjmp	.-16     	; 0x4524 <_ZL8EeFsFreeh+0x8>
  EeFsSetLink(i,eeFs.freeList);
    4534:	60 91 8d 06 	lds	r22, 0x068D
    4538:	8c 2f       	mov	r24, r28
    453a:	c9 df       	rcall	.-110    	; 0x44ce <_ZL11EeFsSetLinkhh>
  eeFs.freeList = blk; //chain in front
    453c:	d0 93 8d 06 	sts	0x068D, r29
  EeFsFlushFreelist();
}
    4540:	df 91       	pop	r29
    4542:	cf 91       	pop	r28
static void EeFsFree(uint8_t blk){///free one or more blocks
  uint8_t i = blk;
  while( EeFsGetLink(i)) i = EeFsGetLink(i);
  EeFsSetLink(i,eeFs.freeList);
  eeFs.freeList = blk; //chain in front
  EeFsFlushFreelist();
    4544:	bc cf       	rjmp	.-136    	; 0x44be <_ZL17EeFsFlushFreelistv>

00004546 <_ZL9EeFsAllocv>:
}
static uint8_t EeFsAlloc(){ ///alloc one block from freelist
    4546:	cf 93       	push	r28
  uint8_t ret=eeFs.freeList;
    4548:	c0 91 8d 06 	lds	r28, 0x068D
  if(ret){
    454c:	cc 23       	and	r28, r28
    454e:	41 f0       	breq	.+16     	; 0x4560 <_ZL9EeFsAllocv+0x1a>
    eeFs.freeList = EeFsGetLink(ret);
    4550:	8c 2f       	mov	r24, r28
    4552:	d0 df       	rcall	.-96     	; 0x44f4 <_ZL11EeFsGetLinkh>
    4554:	80 93 8d 06 	sts	0x068D, r24
    EeFsFlushFreelist();
    4558:	b2 df       	rcall	.-156    	; 0x44be <_ZL17EeFsFlushFreelistv>
    EeFsSetLink(ret,0);
    455a:	60 e0       	ldi	r22, 0x00	; 0
    455c:	8c 2f       	mov	r24, r28
    455e:	b7 df       	rcall	.-146    	; 0x44ce <_ZL11EeFsSetLinkhh>
  }
  return ret;
}
    4560:	8c 2f       	mov	r24, r28
    4562:	cf 91       	pop	r28
    4564:	08 95       	ret

00004566 <_Z11EeFsGetFreev>:
{
  eeWriteBlockCmp(&eeFs, 0,sizeof(eeFs));
}

uint16_t EeFsGetFree()
{
    4566:	cf 93       	push	r28
    4568:	df 93       	push	r29
  uint16_t  ret = 0;
  uint8_t i = eeFs.freeList;
    456a:	80 91 8d 06 	lds	r24, 0x068D
  eeWriteBlockCmp(&eeFs, 0,sizeof(eeFs));
}

uint16_t EeFsGetFree()
{
  uint16_t  ret = 0;
    456e:	c0 e0       	ldi	r28, 0x00	; 0
    4570:	d0 e0       	ldi	r29, 0x00	; 0
  uint8_t i = eeFs.freeList;
  while( i ){
    4572:	88 23       	and	r24, r24
    4574:	19 f0       	breq	.+6      	; 0x457c <_Z11EeFsGetFreev+0x16>
    ret += BS-1;
    4576:	2f 96       	adiw	r28, 0x0f	; 15
    i = EeFsGetLink(i);
    4578:	bd df       	rcall	.-134    	; 0x44f4 <_ZL11EeFsGetLinkh>
    457a:	fb cf       	rjmp	.-10     	; 0x4572 <_Z11EeFsGetFreev+0xc>
  }
  return ret;
}
    457c:	ce 01       	movw	r24, r28
    457e:	df 91       	pop	r29
    4580:	cf 91       	pop	r28
    4582:	08 95       	ret

00004584 <_Z6EeFsckv>:

// This is only called from eeReadAll() (in pers.cpp)
// BEFORE g_model is loaded so re-use g_model for bufp
// g_model is always set to zeroes before it is loaded
int8_t EeFsck()
{
    4584:	df 92       	push	r13
    4586:	ef 92       	push	r14
    4588:	ff 92       	push	r15
    458a:	0f 93       	push	r16
    458c:	1f 93       	push	r17
    458e:	cf 93       	push	r28
    4590:	df 93       	push	r29
  uint8_t *bufp;
//  static uint8_t buffer[BLOCKS];
  bufp = (uint8_t *)&g_model ;
//  bufp = Xmem.file_buffer;
  memset(bufp,0,BLOCKS);
    4592:	80 e8       	ldi	r24, 0x80	; 128
    4594:	e1 e2       	ldi	r30, 0x21	; 33
    4596:	f2 e0       	ldi	r31, 0x02	; 2
    4598:	df 01       	movw	r26, r30
    459a:	1d 92       	st	X+, r1
    459c:	8a 95       	dec	r24
    459e:	e9 f7       	brne	.-6      	; 0x459a <_Z6EeFsckv+0x16>
    45a0:	cf e8       	ldi	r28, 0x8F	; 143
    45a2:	d6 e0       	ldi	r29, 0x06	; 6
  uint16_t blk ;
  int8_t ret=0;
  for(uint8_t i = 0; i <= MAXFILES; i++){
    45a4:	f1 2c       	mov	r15, r1
    uint8_t *startP = i==MAXFILES ? &eeFs.freeList : &eeFs.files[i].startBlk;
    45a6:	b4 e1       	ldi	r27, 0x14	; 20
    45a8:	fb 12       	cpse	r15, r27
    45aa:	05 c0       	rjmp	.+10     	; 0x45b6 <_Z6EeFsckv+0x32>
    45ac:	80 91 8d 06 	lds	r24, 0x068D
    45b0:	0d e8       	ldi	r16, 0x8D	; 141
    45b2:	16 e0       	ldi	r17, 0x06	; 6
    45b4:	02 c0       	rjmp	.+4      	; 0x45ba <_Z6EeFsckv+0x36>
    45b6:	8e 01       	movw	r16, r28
    45b8:	88 81       	ld	r24, Y
    uint8_t lastBlk = 0;
    blk = *startP;
    45ba:	90 e0       	ldi	r25, 0x00	; 0
  memset(bufp,0,BLOCKS);
  uint16_t blk ;
  int8_t ret=0;
  for(uint8_t i = 0; i <= MAXFILES; i++){
    uint8_t *startP = i==MAXFILES ? &eeFs.freeList : &eeFs.files[i].startBlk;
    uint8_t lastBlk = 0;
    45bc:	e1 2c       	mov	r14, r1
    45be:	dd 24       	eor	r13, r13
    45c0:	d3 94       	inc	r13
    45c2:	df 0c       	add	r13, r15
    blk = *startP;
      //if(i == MAXFILES) blk = eeFs.freeList;
      //    else              blk = eeFs.files[i].startBlk;
    while(blk){
    45c4:	00 97       	sbiw	r24, 0x00	; 0
    45c6:	e9 f0       	breq	.+58     	; 0x4602 <_Z6EeFsckv+0x7e>
      //      if(blk <  FIRSTBLK ) goto err_1; //bad blk index
      //      if(blk >= BLOCKS   ) goto err_2; //bad blk index
      //      if(bufp[blk])        goto err_3; //blk double usage
      if( (   blk <  FIRSTBLK ) //goto err_1; //bad blk index
          || (blk >= BLOCKS   ) //goto err_2; //bad blk index
    45c8:	9c 01       	movw	r18, r24
    45ca:	24 50       	subi	r18, 0x04	; 4
    45cc:	31 09       	sbc	r19, r1
      //    else              blk = eeFs.files[i].startBlk;
    while(blk){
      //      if(blk <  FIRSTBLK ) goto err_1; //bad blk index
      //      if(blk >= BLOCKS   ) goto err_2; //bad blk index
      //      if(bufp[blk])        goto err_3; //blk double usage
      if( (   blk <  FIRSTBLK ) //goto err_1; //bad blk index
    45ce:	2c 37       	cpi	r18, 0x7C	; 124
    45d0:	31 05       	cpc	r19, r1
    45d2:	30 f4       	brcc	.+12     	; 0x45e0 <_Z6EeFsckv+0x5c>
          || (blk >= BLOCKS   ) //goto err_2; //bad blk index
          || (bufp[blk]       ))//goto err_3; //blk double usage
    45d4:	fc 01       	movw	r30, r24
    45d6:	ef 5d       	subi	r30, 0xDF	; 223
    45d8:	fd 4f       	sbci	r31, 0xFD	; 253
    45da:	20 81       	ld	r18, Z
    45dc:	22 23       	and	r18, r18
    45de:	61 f0       	breq	.+24     	; 0x45f8 <_Z6EeFsckv+0x74>
      {
        if(lastBlk){
    45e0:	ee 20       	and	r14, r14
    45e2:	21 f0       	breq	.+8      	; 0x45ec <_Z6EeFsckv+0x68>
          EeFsSetLink(lastBlk,0);
    45e4:	60 e0       	ldi	r22, 0x00	; 0
    45e6:	8e 2d       	mov	r24, r14
    45e8:	72 df       	rcall	.-284    	; 0x44ce <_ZL11EeFsSetLinkhh>
    45ea:	03 c0       	rjmp	.+6      	; 0x45f2 <_Z6EeFsckv+0x6e>
        }else{
          *startP = 0; //interrupt chain at startpos
    45ec:	f8 01       	movw	r30, r16
    45ee:	10 82       	st	Z, r1
          EeFsFlush();
    45f0:	5e df       	rcall	.-324    	; 0x44ae <_ZL9EeFsFlushv>
        }
        blk=0; //abort
    45f2:	80 e0       	ldi	r24, 0x00	; 0
    45f4:	90 e0       	ldi	r25, 0x00	; 0
    45f6:	e6 cf       	rjmp	.-52     	; 0x45c4 <_Z6EeFsckv+0x40>
      }else{
        bufp[blk] = i+1;
    45f8:	d0 82       	st	Z, r13
        lastBlk   = blk;
    45fa:	e8 2e       	mov	r14, r24
        blk       = EeFsGetLink(blk);
    45fc:	7b df       	rcall	.-266    	; 0x44f4 <_ZL11EeFsGetLinkh>
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	e1 cf       	rjmp	.-62     	; 0x45c4 <_Z6EeFsckv+0x40>
  bufp = (uint8_t *)&g_model ;
//  bufp = Xmem.file_buffer;
  memset(bufp,0,BLOCKS);
  uint16_t blk ;
  int8_t ret=0;
  for(uint8_t i = 0; i <= MAXFILES; i++){
    4602:	f3 94       	inc	r15
    4604:	23 96       	adiw	r28, 0x03	; 3
    4606:	f5 e1       	ldi	r31, 0x15	; 21
    4608:	ff 12       	cpse	r15, r31
    460a:	cd cf       	rjmp	.-102    	; 0x45a6 <_Z6EeFsckv+0x22>
    460c:	c4 e0       	ldi	r28, 0x04	; 4
    460e:	d0 e0       	ldi	r29, 0x00	; 0
    4610:	fe 01       	movw	r30, r28
    4612:	ef 5d       	subi	r30, 0xDF	; 223
    4614:	fd 4f       	sbci	r31, 0xFD	; 253
        blk       = EeFsGetLink(blk);
      }
    }
  }
  for(blk = FIRSTBLK; blk < BLOCKS; blk++){
    if(bufp[blk]==0) {       //goto err_4; //unused block
    4616:	80 81       	ld	r24, Z
    4618:	81 11       	cpse	r24, r1
    461a:	07 c0       	rjmp	.+14     	; 0x462a <_Z6EeFsckv+0xa6>
      EeFsSetLink(blk,eeFs.freeList);
    461c:	60 91 8d 06 	lds	r22, 0x068D
    4620:	8c 2f       	mov	r24, r28
    4622:	55 df       	rcall	.-342    	; 0x44ce <_ZL11EeFsSetLinkhh>
      eeFs.freeList = blk; //chain in front
    4624:	c0 93 8d 06 	sts	0x068D, r28
      EeFsFlushFreelist();
    4628:	4a df       	rcall	.-364    	; 0x44be <_ZL17EeFsFlushFreelistv>
        lastBlk   = blk;
        blk       = EeFsGetLink(blk);
      }
    }
  }
  for(blk = FIRSTBLK; blk < BLOCKS; blk++){
    462a:	21 96       	adiw	r28, 0x01	; 1
    462c:	c0 38       	cpi	r28, 0x80	; 128
    462e:	d1 05       	cpc	r29, r1
    4630:	79 f7       	brne	.-34     	; 0x4610 <_Z6EeFsckv+0x8c>
    //err_3: ret--;
    //    err_2: ret--;
    //    err_1: ret--;
  //  }
  return ret;
}
    4632:	80 e0       	ldi	r24, 0x00	; 0
    4634:	df 91       	pop	r29
    4636:	cf 91       	pop	r28
    4638:	1f 91       	pop	r17
    463a:	0f 91       	pop	r16
    463c:	ff 90       	pop	r15
    463e:	ef 90       	pop	r14
    4640:	df 90       	pop	r13
    4642:	08 95       	ret

00004644 <_Z10EeFsFormatv>:
void EeFsFormat()
{
    4644:	cf 93       	push	r28
//  if(sizeof(eeFs) != RESV){
//    extern void eeprom_RESV_mismatch();
//    eeprom_RESV_mismatch();
//  }
  memset(&eeFs,0, sizeof(eeFs));
    4646:	80 e4       	ldi	r24, 0x40	; 64
    4648:	eb e8       	ldi	r30, 0x8B	; 139
    464a:	f6 e0       	ldi	r31, 0x06	; 6
    464c:	df 01       	movw	r26, r30
    464e:	98 2f       	mov	r25, r24
    4650:	1d 92       	st	X+, r1
    4652:	9a 95       	dec	r25
    4654:	e9 f7       	brne	.-6      	; 0x4650 <_Z10EeFsFormatv+0xc>
  eeFs.version  = EEFS_VERS;
    4656:	94 e0       	ldi	r25, 0x04	; 4
    4658:	90 93 8b 06 	sts	0x068B, r25
  eeFs.mySize   = sizeof(eeFs);
    465c:	80 93 8c 06 	sts	0x068C, r24
  eeFs.freeList = 0;
  eeFs.bs       = BS;
    4660:	80 e1       	ldi	r24, 0x10	; 16
    4662:	80 93 8e 06 	sts	0x068E, r24
  for(uint8_t i = FIRSTBLK; i < BLOCKS-1; i++) EeFsSetLink(i,i+1);
    4666:	84 e0       	ldi	r24, 0x04	; 4
    4668:	c1 e0       	ldi	r28, 0x01	; 1
    466a:	c8 0f       	add	r28, r24
    466c:	6c 2f       	mov	r22, r28
    466e:	2f df       	rcall	.-418    	; 0x44ce <_ZL11EeFsSetLinkhh>
    4670:	cf 37       	cpi	r28, 0x7F	; 127
    4672:	11 f0       	breq	.+4      	; 0x4678 <_Z10EeFsFormatv+0x34>
    4674:	8c 2f       	mov	r24, r28
    4676:	f8 cf       	rjmp	.-16     	; 0x4668 <_Z10EeFsFormatv+0x24>
  EeFsSetLink(BLOCKS-1, 0);
    4678:	60 e0       	ldi	r22, 0x00	; 0
    467a:	8f e7       	ldi	r24, 0x7F	; 127
    467c:	28 df       	rcall	.-432    	; 0x44ce <_ZL11EeFsSetLinkhh>
  eeFs.freeList = FIRSTBLK;
    467e:	84 e0       	ldi	r24, 0x04	; 4
    4680:	80 93 8d 06 	sts	0x068D, r24
  EeFsFlush();
}
    4684:	cf 91       	pop	r28
  eeFs.freeList = 0;
  eeFs.bs       = BS;
  for(uint8_t i = FIRSTBLK; i < BLOCKS-1; i++) EeFsSetLink(i,i+1);
  EeFsSetLink(BLOCKS-1, 0);
  eeFs.freeList = FIRSTBLK;
  EeFsFlush();
    4686:	13 cf       	rjmp	.-474    	; 0x44ae <_ZL9EeFsFlushv>

00004688 <_Z8EeFsOpenv>:
}

bool EeFsOpen()
{
  eeprom_read_block(&eeFs,0,sizeof(eeFs));
    4688:	40 e4       	ldi	r20, 0x40	; 64
    468a:	50 e0       	ldi	r21, 0x00	; 0
    468c:	60 e0       	ldi	r22, 0x00	; 0
    468e:	70 e0       	ldi	r23, 0x00	; 0
    4690:	8b e8       	ldi	r24, 0x8B	; 139
    4692:	96 e0       	ldi	r25, 0x06	; 6
    4694:	0e 94 c3 72 	call	0xe586	; 0xe586 <__eerd_block_m64>

	if ( eeFs.mySize == 0 )
    4698:	80 91 8c 06 	lds	r24, 0x068C
    469c:	81 11       	cpse	r24, r1
    469e:	03 c0       	rjmp	.+6      	; 0x46a6 <_Z8EeFsOpenv+0x1e>
	{
		eeFs.mySize = sizeof(eeFs) ;
    46a0:	80 e4       	ldi	r24, 0x40	; 64
    46a2:	80 93 8c 06 	sts	0x068C, r24
  return eeFs.version == EEFS_VERS && eeFs.mySize  == sizeof(eeFs);
  
//	return eeFs.version == EEFS_VERS64 && eeFs.mySize  == sizeof(eeFs);

#else
  return eeFs.version == EEFS_VERS && eeFs.mySize  == sizeof(eeFs);
    46a6:	80 91 8b 06 	lds	r24, 0x068B
    46aa:	84 30       	cpi	r24, 0x04	; 4
    46ac:	29 f4       	brne	.+10     	; 0x46b8 <_Z8EeFsOpenv+0x30>
    46ae:	81 e0       	ldi	r24, 0x01	; 1
    46b0:	90 91 8c 06 	lds	r25, 0x068C
    46b4:	90 34       	cpi	r25, 0x40	; 64
    46b6:	09 f0       	breq	.+2      	; 0x46ba <_Z8EeFsOpenv+0x32>
    46b8:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    46ba:	08 95       	ret

000046bc <_ZN5EFile6existsEh>:

bool EFile::exists(uint8_t i_fileId)
{
  return eeFs.files[i_fileId].startBlk;
    46bc:	90 e0       	ldi	r25, 0x00	; 0
    46be:	fc 01       	movw	r30, r24
    46c0:	ee 0f       	add	r30, r30
    46c2:	ff 1f       	adc	r31, r31
    46c4:	e8 0f       	add	r30, r24
    46c6:	f9 1f       	adc	r31, r25
    46c8:	e5 57       	subi	r30, 0x75	; 117
    46ca:	f9 4f       	sbci	r31, 0xF9	; 249
    46cc:	81 e0       	ldi	r24, 0x01	; 1
    46ce:	94 81       	ldd	r25, Z+4	; 0x04
    46d0:	91 11       	cpse	r25, r1
    46d2:	01 c0       	rjmp	.+2      	; 0x46d6 <_ZN5EFile6existsEh+0x1a>
    46d4:	80 e0       	ldi	r24, 0x00	; 0
}
    46d6:	08 95       	ret

000046d8 <_ZN5EFile4swapEhh>:

void EFile::swap(uint8_t i_fileId1,uint8_t i_fileId2)
{
    46d8:	cf 93       	push	r28
    46da:	df 93       	push	r29
  DirEnt            tmp = eeFs.files[i_fileId1];
    46dc:	90 e0       	ldi	r25, 0x00	; 0
    46de:	ec 01       	movw	r28, r24
    46e0:	cc 0f       	add	r28, r28
    46e2:	dd 1f       	adc	r29, r29
    46e4:	c8 0f       	add	r28, r24
    46e6:	d9 1f       	adc	r29, r25
    46e8:	c5 57       	subi	r28, 0x75	; 117
    46ea:	d9 4f       	sbci	r29, 0xF9	; 249
    46ec:	8c 81       	ldd	r24, Y+4	; 0x04
    46ee:	9d 81       	ldd	r25, Y+5	; 0x05
    46f0:	ae 81       	ldd	r26, Y+6	; 0x06
  eeFs.files[i_fileId1] = eeFs.files[i_fileId2];
    46f2:	70 e0       	ldi	r23, 0x00	; 0
    46f4:	fb 01       	movw	r30, r22
    46f6:	ee 0f       	add	r30, r30
    46f8:	ff 1f       	adc	r31, r31
    46fa:	e6 0f       	add	r30, r22
    46fc:	f7 1f       	adc	r31, r23
    46fe:	e5 57       	subi	r30, 0x75	; 117
    4700:	f9 4f       	sbci	r31, 0xF9	; 249
    4702:	24 81       	ldd	r18, Z+4	; 0x04
    4704:	35 81       	ldd	r19, Z+5	; 0x05
    4706:	46 81       	ldd	r20, Z+6	; 0x06
    4708:	2c 83       	std	Y+4, r18	; 0x04
    470a:	3d 83       	std	Y+5, r19	; 0x05
    470c:	4e 83       	std	Y+6, r20	; 0x06
  eeFs.files[i_fileId2] = tmp;;
    470e:	84 83       	std	Z+4, r24	; 0x04
    4710:	95 83       	std	Z+5, r25	; 0x05
    4712:	a6 83       	std	Z+6, r26	; 0x06
  EeFsFlush();
}
    4714:	df 91       	pop	r29
    4716:	cf 91       	pop	r28
void EFile::swap(uint8_t i_fileId1,uint8_t i_fileId2)
{
  DirEnt            tmp = eeFs.files[i_fileId1];
  eeFs.files[i_fileId1] = eeFs.files[i_fileId2];
  eeFs.files[i_fileId2] = tmp;;
  EeFsFlush();
    4718:	ca ce       	rjmp	.-620    	; 0x44ae <_ZL9EeFsFlushv>

0000471a <_ZN5EFile2rmEh>:
}

void EFile::rm(uint8_t i_fileId){
    471a:	cf 93       	push	r28
  uint8_t i = eeFs.files[i_fileId].startBlk;
    471c:	90 e0       	ldi	r25, 0x00	; 0
    471e:	9c 01       	movw	r18, r24
    4720:	22 0f       	add	r18, r18
    4722:	33 1f       	adc	r19, r19
    4724:	28 0f       	add	r18, r24
    4726:	39 1f       	adc	r19, r25
    4728:	f9 01       	movw	r30, r18
    472a:	e5 57       	subi	r30, 0x75	; 117
    472c:	f9 4f       	sbci	r31, 0xF9	; 249
    472e:	c4 81       	ldd	r28, Z+4	; 0x04
  memset(&eeFs.files[i_fileId], 0, sizeof(eeFs.files[i_fileId]));
    4730:	f9 01       	movw	r30, r18
    4732:	e1 57       	subi	r30, 0x71	; 113
    4734:	f9 4f       	sbci	r31, 0xF9	; 249
    4736:	10 82       	st	Z, r1
    4738:	11 82       	std	Z+1, r1	; 0x01
    473a:	12 82       	std	Z+2, r1	; 0x02
  EeFsFlush(); //chained out
    473c:	b8 de       	rcall	.-656    	; 0x44ae <_ZL9EeFsFlushv>

  if(i) EeFsFree( i ); //chain in
    473e:	cc 23       	and	r28, r28
    4740:	19 f0       	breq	.+6      	; 0x4748 <_ZN5EFile2rmEh+0x2e>
    4742:	8c 2f       	mov	r24, r28
}
    4744:	cf 91       	pop	r28
void EFile::rm(uint8_t i_fileId){
  uint8_t i = eeFs.files[i_fileId].startBlk;
  memset(&eeFs.files[i_fileId], 0, sizeof(eeFs.files[i_fileId]));
  EeFsFlush(); //chained out

  if(i) EeFsFree( i ); //chain in
    4746:	ea ce       	rjmp	.-556    	; 0x451c <_ZL8EeFsFreeh>
}
    4748:	cf 91       	pop	r28
    474a:	08 95       	ret

0000474c <_ZN5EFile4sizeEv>:

uint16_t EFile::size(){
  return eeFs.files[m_fileId].size;
    474c:	fc 01       	movw	r30, r24
    474e:	80 81       	ld	r24, Z
    4750:	90 e0       	ldi	r25, 0x00	; 0
    4752:	fc 01       	movw	r30, r24
    4754:	ee 0f       	add	r30, r30
    4756:	ff 1f       	adc	r31, r31
    4758:	e8 0f       	add	r30, r24
    475a:	f9 1f       	adc	r31, r25
    475c:	e0 57       	subi	r30, 0x70	; 112
    475e:	f9 4f       	sbci	r31, 0xF9	; 249
    4760:	91 81       	ldd	r25, Z+1	; 0x01
}
    4762:	80 81       	ld	r24, Z
    4764:	9f 70       	andi	r25, 0x0F	; 15
    4766:	08 95       	ret

00004768 <_ZN5EFile6openRdEh>:


uint8_t EFile::openRd(uint8_t i_fileId){
    4768:	cf 93       	push	r28
    476a:	df 93       	push	r29
    476c:	fc 01       	movw	r30, r24
  m_fileId = i_fileId;
    476e:	60 83       	st	Z, r22
  m_pos      = 0;
    4770:	12 82       	std	Z+2, r1	; 0x02
    4772:	11 82       	std	Z+1, r1	; 0x01
  m_currBlk  = eeFs.files[m_fileId].startBlk;
    4774:	70 e0       	ldi	r23, 0x00	; 0
    4776:	cb 01       	movw	r24, r22
    4778:	88 0f       	add	r24, r24
    477a:	99 1f       	adc	r25, r25
    477c:	86 0f       	add	r24, r22
    477e:	97 1f       	adc	r25, r23
    4780:	ec 01       	movw	r28, r24
    4782:	c5 57       	subi	r28, 0x75	; 117
    4784:	d9 4f       	sbci	r29, 0xF9	; 249
    4786:	2c 81       	ldd	r18, Y+4	; 0x04
    4788:	23 83       	std	Z+3, r18	; 0x03
  m_ofs      = 0;
    478a:	14 82       	std	Z+4, r1	; 0x04
  m_bRlc     = 0;
    478c:	15 82       	std	Z+5, r1	; 0x05
  m_err      = ERR_NONE;       //error reasons
    478e:	16 82       	std	Z+6, r1	; 0x06
  return  eeFs.files[m_fileId].typ;
    4790:	fc 01       	movw	r30, r24
    4792:	ef 56       	subi	r30, 0x6F	; 111
    4794:	f9 4f       	sbci	r31, 0xF9	; 249
    4796:	80 81       	ld	r24, Z
}
    4798:	82 95       	swap	r24
    479a:	8f 70       	andi	r24, 0x0F	; 15
    479c:	df 91       	pop	r29
    479e:	cf 91       	pop	r28
    47a0:	08 95       	ret

000047a2 <_ZN5EFile4readEPhj>:
uint8_t EFile::read(uint8_t*buf,uint16_t i_len){
    47a2:	af 92       	push	r10
    47a4:	bf 92       	push	r11
    47a6:	cf 92       	push	r12
    47a8:	df 92       	push	r13
    47aa:	ef 92       	push	r14
    47ac:	ff 92       	push	r15
    47ae:	0f 93       	push	r16
    47b0:	1f 93       	push	r17
    47b2:	cf 93       	push	r28
    47b4:	df 93       	push	r29
    47b6:	1f 92       	push	r1
    47b8:	cd b7       	in	r28, 0x3d	; 61
    47ba:	de b7       	in	r29, 0x3e	; 62
    47bc:	8c 01       	movw	r16, r24
  uint16_t len = eeFs.files[m_fileId].size - m_pos;
    47be:	fc 01       	movw	r30, r24
    47c0:	80 81       	ld	r24, Z
    47c2:	90 e0       	ldi	r25, 0x00	; 0
    47c4:	fc 01       	movw	r30, r24
    47c6:	ee 0f       	add	r30, r30
    47c8:	ff 1f       	adc	r31, r31
    47ca:	e8 0f       	add	r30, r24
    47cc:	f9 1f       	adc	r31, r25
    47ce:	e0 57       	subi	r30, 0x70	; 112
    47d0:	f9 4f       	sbci	r31, 0xF9	; 249
    47d2:	80 81       	ld	r24, Z
    47d4:	21 81       	ldd	r18, Z+1	; 0x01
    47d6:	92 2f       	mov	r25, r18
    47d8:	9f 70       	andi	r25, 0x0F	; 15
    47da:	f8 01       	movw	r30, r16
    47dc:	21 81       	ldd	r18, Z+1	; 0x01
    47de:	32 81       	ldd	r19, Z+2	; 0x02
    47e0:	82 1b       	sub	r24, r18
    47e2:	93 0b       	sbc	r25, r19
    47e4:	7a 01       	movw	r14, r20
    47e6:	84 17       	cp	r24, r20
    47e8:	95 07       	cpc	r25, r21
    47ea:	08 f4       	brcc	.+2      	; 0x47ee <_ZN5EFile4readEPhj+0x4c>
    47ec:	7c 01       	movw	r14, r24
    47ee:	5b 01       	movw	r10, r22
  if(len < i_len) i_len = len;
  len = i_len;
    47f0:	67 01       	movw	r12, r14
  while(len)
    47f2:	c1 14       	cp	r12, r1
    47f4:	d1 04       	cpc	r13, r1
    47f6:	21 f1       	breq	.+72     	; 0x4840 <_ZN5EFile4readEPhj+0x9e>
  {
    if(!m_currBlk) break;
    47f8:	f8 01       	movw	r30, r16
    47fa:	83 81       	ldd	r24, Z+3	; 0x03
    47fc:	88 23       	and	r24, r24
    47fe:	01 f1       	breq	.+64     	; 0x4840 <_ZN5EFile4readEPhj+0x9e>
    *buf++ = EeFsGetDat(m_currBlk, m_ofs++);
    4800:	64 81       	ldd	r22, Z+4	; 0x04
    4802:	6f 5f       	subi	r22, 0xFF	; 255
    4804:	64 83       	std	Z+4, r22	; 0x04
}) eeFs;


static uint8_t EeFsRead(uint8_t blk,uint8_t ofs){
  uint8_t ret;
  eeprom_read_block(&ret,(const void*)(blk*BS+ofs),1);
    4806:	70 e0       	ldi	r23, 0x00	; 0
    4808:	f0 e1       	ldi	r31, 0x10	; 16
    480a:	8f 9f       	mul	r24, r31
    480c:	60 0d       	add	r22, r0
    480e:	71 1d       	adc	r23, r1
    4810:	11 24       	eor	r1, r1
    4812:	41 e0       	ldi	r20, 0x01	; 1
    4814:	50 e0       	ldi	r21, 0x00	; 0
    4816:	ce 01       	movw	r24, r28
    4818:	01 96       	adiw	r24, 0x01	; 1
    481a:	0e 94 c3 72 	call	0xe586	; 0xe586 <__eerd_block_m64>
  return ret;
    481e:	89 81       	ldd	r24, Y+1	; 0x01
  if(len < i_len) i_len = len;
  len = i_len;
  while(len)
  {
    if(!m_currBlk) break;
    *buf++ = EeFsGetDat(m_currBlk, m_ofs++);
    4820:	f5 01       	movw	r30, r10
    4822:	81 93       	st	Z+, r24
    4824:	5f 01       	movw	r10, r30
    if(m_ofs>=(BS-1)){
    4826:	f8 01       	movw	r30, r16
    4828:	84 81       	ldd	r24, Z+4	; 0x04
    482a:	8f 30       	cpi	r24, 0x0F	; 15
    482c:	28 f0       	brcs	.+10     	; 0x4838 <_ZN5EFile4readEPhj+0x96>
      m_ofs=0;
    482e:	14 82       	std	Z+4, r1	; 0x04
      m_currBlk=EeFsGetLink(m_currBlk);
    4830:	83 81       	ldd	r24, Z+3	; 0x03
    4832:	60 de       	rcall	.-832    	; 0x44f4 <_ZL11EeFsGetLinkh>
    4834:	f8 01       	movw	r30, r16
    4836:	83 83       	std	Z+3, r24	; 0x03
    }
    len--;
    4838:	f1 e0       	ldi	r31, 0x01	; 1
    483a:	cf 1a       	sub	r12, r31
    483c:	d1 08       	sbc	r13, r1
    483e:	d9 cf       	rjmp	.-78     	; 0x47f2 <_ZN5EFile4readEPhj+0x50>
  }
  m_pos += i_len - len;
    4840:	f8 01       	movw	r30, r16
    4842:	81 81       	ldd	r24, Z+1	; 0x01
    4844:	92 81       	ldd	r25, Z+2	; 0x02
    4846:	8e 0d       	add	r24, r14
    4848:	9f 1d       	adc	r25, r15
    484a:	8c 19       	sub	r24, r12
    484c:	9d 09       	sbc	r25, r13
    484e:	92 83       	std	Z+2, r25	; 0x02
    4850:	81 83       	std	Z+1, r24	; 0x01
  return i_len - len;
}
    4852:	8e 2d       	mov	r24, r14
    4854:	8c 19       	sub	r24, r12
    4856:	0f 90       	pop	r0
    4858:	df 91       	pop	r29
    485a:	cf 91       	pop	r28
    485c:	1f 91       	pop	r17
    485e:	0f 91       	pop	r16
    4860:	ff 90       	pop	r15
    4862:	ef 90       	pop	r14
    4864:	df 90       	pop	r13
    4866:	cf 90       	pop	r12
    4868:	bf 90       	pop	r11
    486a:	af 90       	pop	r10
    486c:	08 95       	ret

0000486e <_ZN5EFile7readRlcEPhj>:
uint16_t EFile::readRlc(uint8_t*buf,uint16_t i_len){
    486e:	7f 92       	push	r7
    4870:	8f 92       	push	r8
    4872:	9f 92       	push	r9
    4874:	af 92       	push	r10
    4876:	bf 92       	push	r11
    4878:	cf 92       	push	r12
    487a:	df 92       	push	r13
    487c:	ef 92       	push	r14
    487e:	ff 92       	push	r15
    4880:	0f 93       	push	r16
    4882:	1f 93       	push	r17
    4884:	cf 93       	push	r28
    4886:	df 93       	push	r29
    4888:	4c 01       	movw	r8, r24
    488a:	6b 01       	movw	r12, r22
    488c:	8a 01       	movw	r16, r20
  uint16_t i;
  for( i=0; i<i_len; ){
    488e:	c0 e0       	ldi	r28, 0x00	; 0
    4890:	d0 e0       	ldi	r29, 0x00	; 0
    if((m_bRlc&0x7f) == 0) {
      if(read(&m_bRlc,1)!=1) break; //read how many bytes to read
    4892:	5c 01       	movw	r10, r24
    4894:	25 e0       	ldi	r18, 0x05	; 5
    4896:	a2 0e       	add	r10, r18
    4898:	b1 1c       	adc	r11, r1
  m_pos += i_len - len;
  return i_len - len;
}
uint16_t EFile::readRlc(uint8_t*buf,uint16_t i_len){
  uint16_t i;
  for( i=0; i<i_len; ){
    489a:	c0 17       	cp	r28, r16
    489c:	d1 07       	cpc	r29, r17
    489e:	d8 f5       	brcc	.+118    	; 0x4916 <_ZN5EFile7readRlcEPhj+0xa8>
    if((m_bRlc&0x7f) == 0) {
    48a0:	f4 01       	movw	r30, r8
    48a2:	85 81       	ldd	r24, Z+5	; 0x05
    48a4:	8f 77       	andi	r24, 0x7F	; 127
    48a6:	81 f0       	breq	.+32     	; 0x48c8 <_ZN5EFile7readRlcEPhj+0x5a>
      if(read(&m_bRlc,1)!=1) break; //read how many bytes to read
    }
    assert(m_bRlc & 0x7f);
    uint8_t l=m_bRlc&0x7f;
    48a8:	f4 01       	movw	r30, r8
    48aa:	45 81       	ldd	r20, Z+5	; 0x05
    48ac:	f4 2f       	mov	r31, r20
    48ae:	ff 77       	andi	r31, 0x7F	; 127
    48b0:	7f 2e       	mov	r7, r31
    if((uint16_t)l>(i_len-i)) l = (uint8_t)(i_len-i);
    48b2:	2f 2f       	mov	r18, r31
    48b4:	30 e0       	ldi	r19, 0x00	; 0
    48b6:	c8 01       	movw	r24, r16
    48b8:	8c 1b       	sub	r24, r28
    48ba:	9d 0b       	sbc	r25, r29
    48bc:	82 17       	cp	r24, r18
    48be:	93 07       	cpc	r25, r19
    48c0:	58 f4       	brcc	.+22     	; 0x48d8 <_ZN5EFile7readRlcEPhj+0x6a>
    48c2:	70 2e       	mov	r7, r16
    48c4:	7c 1a       	sub	r7, r28
    48c6:	08 c0       	rjmp	.+16     	; 0x48d8 <_ZN5EFile7readRlcEPhj+0x6a>
}
uint16_t EFile::readRlc(uint8_t*buf,uint16_t i_len){
  uint16_t i;
  for( i=0; i<i_len; ){
    if((m_bRlc&0x7f) == 0) {
      if(read(&m_bRlc,1)!=1) break; //read how many bytes to read
    48c8:	41 e0       	ldi	r20, 0x01	; 1
    48ca:	50 e0       	ldi	r21, 0x00	; 0
    48cc:	b5 01       	movw	r22, r10
    48ce:	c4 01       	movw	r24, r8
    48d0:	68 df       	rcall	.-304    	; 0x47a2 <_ZN5EFile4readEPhj>
    48d2:	81 30       	cpi	r24, 0x01	; 1
    48d4:	49 f3       	breq	.-46     	; 0x48a8 <_ZN5EFile7readRlcEPhj+0x3a>
    48d6:	1f c0       	rjmp	.+62     	; 0x4916 <_ZN5EFile7readRlcEPhj+0xa8>
    48d8:	e7 2c       	mov	r14, r7
    48da:	f1 2c       	mov	r15, r1
    48dc:	c6 01       	movw	r24, r12
    48de:	8c 0f       	add	r24, r28
    48e0:	9d 1f       	adc	r25, r29
    }
    assert(m_bRlc & 0x7f);
    uint8_t l=m_bRlc&0x7f;
    if((uint16_t)l>(i_len-i)) l = (uint8_t)(i_len-i);
    if(m_bRlc&0x80){       // if contains high byte
    48e2:	47 ff       	sbrs	r20, 7
    48e4:	06 c0       	rjmp	.+12     	; 0x48f2 <_ZN5EFile7readRlcEPhj+0x84>
      memset(&buf[i],0,l); // write l zeros
    48e6:	a7 01       	movw	r20, r14
    48e8:	60 e0       	ldi	r22, 0x00	; 0
    48ea:	70 e0       	ldi	r23, 0x00	; 0
    48ec:	0e 94 a6 72 	call	0xe54c	; 0xe54c <memset>
    48f0:	0b c0       	rjmp	.+22     	; 0x4908 <_ZN5EFile7readRlcEPhj+0x9a>
    }else{
      uint8_t lr = read(&buf[i],l); // read and write l bytes
    48f2:	a7 01       	movw	r20, r14
    48f4:	bc 01       	movw	r22, r24
    48f6:	c4 01       	movw	r24, r8
    48f8:	54 df       	rcall	.-344    	; 0x47a2 <_ZN5EFile4readEPhj>
      if(lr!=l) return i+lr;
    48fa:	87 15       	cp	r24, r7
    48fc:	29 f0       	breq	.+10     	; 0x4908 <_ZN5EFile7readRlcEPhj+0x9a>
    48fe:	fe 01       	movw	r30, r28
    4900:	e8 0f       	add	r30, r24
    4902:	f1 1d       	adc	r31, r1
    4904:	cf 01       	movw	r24, r30
    4906:	08 c0       	rjmp	.+16     	; 0x4918 <_ZN5EFile7readRlcEPhj+0xaa>
    }
    i    += l;
    4908:	ce 0d       	add	r28, r14
    490a:	df 1d       	adc	r29, r15
    m_bRlc -= l;
    490c:	f4 01       	movw	r30, r8
    490e:	85 81       	ldd	r24, Z+5	; 0x05
    4910:	87 19       	sub	r24, r7
    4912:	85 83       	std	Z+5, r24	; 0x05
    4914:	c2 cf       	rjmp	.-124    	; 0x489a <_ZN5EFile7readRlcEPhj+0x2c>
    4916:	ce 01       	movw	r24, r28
  }
  return i;
}
    4918:	df 91       	pop	r29
    491a:	cf 91       	pop	r28
    491c:	1f 91       	pop	r17
    491e:	0f 91       	pop	r16
    4920:	ff 90       	pop	r15
    4922:	ef 90       	pop	r14
    4924:	df 90       	pop	r13
    4926:	cf 90       	pop	r12
    4928:	bf 90       	pop	r11
    492a:	af 90       	pop	r10
    492c:	9f 90       	pop	r9
    492e:	8f 90       	pop	r8
    4930:	7f 90       	pop	r7
    4932:	08 95       	ret

00004934 <_ZN5EFile5writeEPhh>:
uint8_t EFile::write(uint8_t*buf,uint8_t i_len){
    4934:	af 92       	push	r10
    4936:	bf 92       	push	r11
    4938:	cf 92       	push	r12
    493a:	df 92       	push	r13
    493c:	ef 92       	push	r14
    493e:	ff 92       	push	r15
    4940:	0f 93       	push	r16
    4942:	1f 93       	push	r17
    4944:	cf 93       	push	r28
    4946:	df 93       	push	r29
    4948:	ec 01       	movw	r28, r24
    494a:	8b 01       	movw	r16, r22
    494c:	d4 2e       	mov	r13, r20
  uint8_t len=i_len;
  if(!m_currBlk && m_pos==0)
    494e:	8b 81       	ldd	r24, Y+3	; 0x03
    4950:	81 11       	cpse	r24, r1
    4952:	10 c0       	rjmp	.+32     	; 0x4974 <_ZN5EFile5writeEPhh+0x40>
    4954:	89 81       	ldd	r24, Y+1	; 0x01
    4956:	9a 81       	ldd	r25, Y+2	; 0x02
    4958:	89 2b       	or	r24, r25
    495a:	61 f4       	brne	.+24     	; 0x4974 <_ZN5EFile5writeEPhh+0x40>
  {
    eeFs.files[m_fileId].startBlk = m_currBlk = EeFsAlloc();
    495c:	e8 80       	ld	r14, Y
    495e:	f1 2c       	mov	r15, r1
    4960:	f2 dd       	rcall	.-1052   	; 0x4546 <_ZL9EeFsAllocv>
    4962:	8b 83       	std	Y+3, r24	; 0x03
    4964:	f7 01       	movw	r30, r14
    4966:	ee 0f       	add	r30, r30
    4968:	ff 1f       	adc	r31, r31
    496a:	ee 0d       	add	r30, r14
    496c:	ff 1d       	adc	r31, r15
    496e:	e5 57       	subi	r30, 0x75	; 117
    4970:	f9 4f       	sbci	r31, 0xF9	; 249
    4972:	84 83       	std	Z+4, r24	; 0x04
    i    += l;
    m_bRlc -= l;
  }
  return i;
}
uint8_t EFile::write(uint8_t*buf,uint8_t i_len){
    4974:	cd 2c       	mov	r12, r13
    }
    if(!m_currBlk) {
      m_err = ERR_FULL;
      break;
    }
    uint8_t l = BS-1-m_ofs; if(l>len) l=len;
    4976:	8f e0       	ldi	r24, 0x0F	; 15
    4978:	a8 2e       	mov	r10, r24
  uint8_t len=i_len;
  if(!m_currBlk && m_pos==0)
  {
    eeFs.files[m_fileId].startBlk = m_currBlk = EeFsAlloc();
  }
  while(len)
    497a:	cc 20       	and	r12, r12
    497c:	09 f4       	brne	.+2      	; 0x4980 <_ZN5EFile5writeEPhh+0x4c>
    497e:	3c c0       	rjmp	.+120    	; 0x49f8 <_ZN5EFile5writeEPhh+0xc4>
  {
    if( (int16_t)(m_stopTime10ms - get_tmr10ms()) < 0)
    4980:	ef 80       	ldd	r14, Y+7	; 0x07
    4982:	f8 84       	ldd	r15, Y+8	; 0x08
    4984:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_Z11get_tmr10msv>
    4988:	e8 1a       	sub	r14, r24
    498a:	f9 0a       	sbc	r15, r25
    498c:	f7 fe       	sbrs	r15, 7
    498e:	02 c0       	rjmp	.+4      	; 0x4994 <_ZN5EFile5writeEPhh+0x60>
    {
      m_err = ERR_TMO;
    4990:	82 e0       	ldi	r24, 0x02	; 2
    4992:	04 c0       	rjmp	.+8      	; 0x499c <_ZN5EFile5writeEPhh+0x68>
      break;
    }
    if(!m_currBlk) {
    4994:	8b 81       	ldd	r24, Y+3	; 0x03
    4996:	81 11       	cpse	r24, r1
    4998:	03 c0       	rjmp	.+6      	; 0x49a0 <_ZN5EFile5writeEPhh+0x6c>
      m_err = ERR_FULL;
    499a:	81 e0       	ldi	r24, 0x01	; 1
    499c:	8e 83       	std	Y+6, r24	; 0x06
      break;
    499e:	2c c0       	rjmp	.+88     	; 0x49f8 <_ZN5EFile5writeEPhh+0xc4>
    }
    if(m_ofs>=(BS-1)){
    49a0:	9c 81       	ldd	r25, Y+4	; 0x04
    49a2:	9f 30       	cpi	r25, 0x0F	; 15
    49a4:	58 f0       	brcs	.+22     	; 0x49bc <_ZN5EFile5writeEPhh+0x88>
      m_ofs=0;
    49a6:	1c 82       	std	Y+4, r1	; 0x04
      if( ! EeFsGetLink(m_currBlk) ){
    49a8:	a5 dd       	rcall	.-1206   	; 0x44f4 <_ZL11EeFsGetLinkh>
    49aa:	81 11       	cpse	r24, r1
    49ac:	04 c0       	rjmp	.+8      	; 0x49b6 <_ZN5EFile5writeEPhh+0x82>
        EeFsSetLink(m_currBlk, EeFsAlloc());
    49ae:	cb dd       	rcall	.-1130   	; 0x4546 <_ZL9EeFsAllocv>
    49b0:	68 2f       	mov	r22, r24
    49b2:	8b 81       	ldd	r24, Y+3	; 0x03
    49b4:	8c dd       	rcall	.-1256   	; 0x44ce <_ZL11EeFsSetLinkhh>
      }
      m_currBlk = EeFsGetLink(m_currBlk);
    49b6:	8b 81       	ldd	r24, Y+3	; 0x03
    49b8:	9d dd       	rcall	.-1222   	; 0x44f4 <_ZL11EeFsGetLinkh>
    49ba:	8b 83       	std	Y+3, r24	; 0x03
    }
    if(!m_currBlk) {
    49bc:	8b 81       	ldd	r24, Y+3	; 0x03
    49be:	88 23       	and	r24, r24
    49c0:	61 f3       	breq	.-40     	; 0x499a <_ZN5EFile5writeEPhh+0x66>
      m_err = ERR_FULL;
      break;
    }
    uint8_t l = BS-1-m_ofs; if(l>len) l=len;
    49c2:	6c 81       	ldd	r22, Y+4	; 0x04
    49c4:	9a 2d       	mov	r25, r10
    49c6:	96 1b       	sub	r25, r22
    49c8:	bc 2c       	mov	r11, r12
    49ca:	9c 15       	cp	r25, r12
    49cc:	08 f4       	brcc	.+2      	; 0x49d0 <_ZN5EFile5writeEPhh+0x9c>
    49ce:	b9 2e       	mov	r11, r25
static uint8_t EeFsGetDat(uint8_t blk,uint8_t ofs){
  return EeFsRead( blk,ofs+1);
}
static void EeFsSetDat(uint8_t blk,uint8_t ofs,uint8_t*buf,uint8_t len){
  //EeFsWrite( blk,ofs+1,val);
  eeWriteBlockCmp(buf, (uint16_t)(blk*BS+ofs+1), len);
    49d0:	eb 2c       	mov	r14, r11
    49d2:	f1 2c       	mov	r15, r1
    49d4:	70 e0       	ldi	r23, 0x00	; 0
    49d6:	90 e1       	ldi	r25, 0x10	; 16
    49d8:	89 9f       	mul	r24, r25
    49da:	60 0d       	add	r22, r0
    49dc:	71 1d       	adc	r23, r1
    49de:	11 24       	eor	r1, r1
    49e0:	6f 5f       	subi	r22, 0xFF	; 255
    49e2:	7f 4f       	sbci	r23, 0xFF	; 255
    49e4:	a7 01       	movw	r20, r14
    49e6:	c8 01       	movw	r24, r16
    49e8:	7b d5       	rcall	.+2806   	; 0x54e0 <_Z15eeWriteBlockCmpPKvjj>
      m_err = ERR_FULL;
      break;
    }
    uint8_t l = BS-1-m_ofs; if(l>len) l=len;
    EeFsSetDat(m_currBlk, m_ofs, buf, l);
    buf   +=l;
    49ea:	0e 0d       	add	r16, r14
    49ec:	1f 1d       	adc	r17, r15
    m_ofs +=l;
    49ee:	8c 81       	ldd	r24, Y+4	; 0x04
    49f0:	8b 0d       	add	r24, r11
    49f2:	8c 83       	std	Y+4, r24	; 0x04
    len   -=l;
    49f4:	cb 18       	sub	r12, r11
    49f6:	c1 cf       	rjmp	.-126    	; 0x497a <_ZN5EFile5writeEPhh+0x46>
  }
  m_pos += i_len - len;
    49f8:	6d 2d       	mov	r22, r13
    49fa:	70 e0       	ldi	r23, 0x00	; 0
    49fc:	6c 19       	sub	r22, r12
    49fe:	71 09       	sbc	r23, r1
    4a00:	29 81       	ldd	r18, Y+1	; 0x01
    4a02:	3a 81       	ldd	r19, Y+2	; 0x02
    4a04:	26 0f       	add	r18, r22
    4a06:	37 1f       	adc	r19, r23
    4a08:	3a 83       	std	Y+2, r19	; 0x02
    4a0a:	29 83       	std	Y+1, r18	; 0x01
  return   i_len - len;
}
    4a0c:	8d 2d       	mov	r24, r13
    4a0e:	8c 19       	sub	r24, r12
    4a10:	df 91       	pop	r29
    4a12:	cf 91       	pop	r28
    4a14:	1f 91       	pop	r17
    4a16:	0f 91       	pop	r16
    4a18:	ff 90       	pop	r15
    4a1a:	ef 90       	pop	r14
    4a1c:	df 90       	pop	r13
    4a1e:	cf 90       	pop	r12
    4a20:	bf 90       	pop	r11
    4a22:	af 90       	pop	r10
    4a24:	08 95       	ret

00004a26 <_ZN5EFile6createEhhj>:
void EFile::create(uint8_t i_fileId, uint8_t typ, uint16_t maxTme10ms){
    4a26:	ef 92       	push	r14
    4a28:	ff 92       	push	r15
    4a2a:	0f 93       	push	r16
    4a2c:	1f 93       	push	r17
    4a2e:	cf 93       	push	r28
    4a30:	df 93       	push	r29
    4a32:	ec 01       	movw	r28, r24
    4a34:	f6 2e       	mov	r15, r22
    4a36:	e4 2e       	mov	r14, r20
    4a38:	89 01       	movw	r16, r18
  openRd(i_fileId); //internal use
    4a3a:	96 de       	rcall	.-724    	; 0x4768 <_ZN5EFile6openRdEh>
  eeFs.files[i_fileId].typ      = typ;
    4a3c:	6f 2d       	mov	r22, r15
    4a3e:	70 e0       	ldi	r23, 0x00	; 0
    4a40:	fb 01       	movw	r30, r22
    4a42:	ee 0f       	add	r30, r30
    4a44:	ff 1f       	adc	r31, r31
    4a46:	e6 0f       	add	r30, r22
    4a48:	f7 1f       	adc	r31, r23
    4a4a:	e0 57       	subi	r30, 0x70	; 112
    4a4c:	f9 4f       	sbci	r31, 0xF9	; 249
  eeFs.files[i_fileId].size     = 0;
    4a4e:	10 82       	st	Z, r1
    4a50:	e2 94       	swap	r14
    4a52:	30 ef       	ldi	r19, 0xF0	; 240
    4a54:	e3 22       	and	r14, r19
    4a56:	e1 82       	std	Z+1, r14	; 0x01
  m_stopTime10ms = get_tmr10ms() + maxTme10ms;
    4a58:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_Z11get_tmr10msv>
    4a5c:	80 0f       	add	r24, r16
    4a5e:	91 1f       	adc	r25, r17
    4a60:	98 87       	std	Y+8, r25	; 0x08
    4a62:	8f 83       	std	Y+7, r24	; 0x07
}
    4a64:	df 91       	pop	r29
    4a66:	cf 91       	pop	r28
    4a68:	1f 91       	pop	r17
    4a6a:	0f 91       	pop	r16
    4a6c:	ff 90       	pop	r15
    4a6e:	ef 90       	pop	r14
    4a70:	08 95       	ret

00004a72 <_ZN5EFile10closeTruncEv>:
void EFile::closeTrunc()
{
    4a72:	1f 93       	push	r17
    4a74:	cf 93       	push	r28
    4a76:	df 93       	push	r29
    4a78:	ec 01       	movw	r28, r24
  uint8_t fri=0;
  eeFs.files[m_fileId].size     = m_pos;
    4a7a:	88 81       	ld	r24, Y
    4a7c:	90 e0       	ldi	r25, 0x00	; 0
    4a7e:	fc 01       	movw	r30, r24
    4a80:	ee 0f       	add	r30, r30
    4a82:	ff 1f       	adc	r31, r31
    4a84:	e8 0f       	add	r30, r24
    4a86:	f9 1f       	adc	r31, r25
    4a88:	e0 57       	subi	r30, 0x70	; 112
    4a8a:	f9 4f       	sbci	r31, 0xF9	; 249
    4a8c:	89 81       	ldd	r24, Y+1	; 0x01
    4a8e:	80 83       	st	Z, r24
    4a90:	9a 81       	ldd	r25, Y+2	; 0x02
    4a92:	9f 70       	andi	r25, 0x0F	; 15
    4a94:	81 81       	ldd	r24, Z+1	; 0x01
    4a96:	80 7f       	andi	r24, 0xF0	; 240
    4a98:	89 2b       	or	r24, r25
    4a9a:	81 83       	std	Z+1, r24	; 0x01
  if(m_currBlk && ( fri = EeFsGetLink(m_currBlk)))    EeFsSetLink(m_currBlk, 0);
    4a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a9e:	88 23       	and	r24, r24
    4aa0:	21 f0       	breq	.+8      	; 0x4aaa <_ZN5EFile10closeTruncEv+0x38>
    4aa2:	28 dd       	rcall	.-1456   	; 0x44f4 <_ZL11EeFsGetLinkh>
    4aa4:	18 2f       	mov	r17, r24
    4aa6:	81 11       	cpse	r24, r1
    4aa8:	0a c0       	rjmp	.+20     	; 0x4abe <_ZN5EFile10closeTruncEv+0x4c>
  eeFs.files[i_fileId].typ      = typ;
  eeFs.files[i_fileId].size     = 0;
  m_stopTime10ms = get_tmr10ms() + maxTme10ms;
}
void EFile::closeTrunc()
{
    4aaa:	10 e0       	ldi	r17, 0x00	; 0
  uint8_t fri=0;
  eeFs.files[m_fileId].size     = m_pos;
  if(m_currBlk && ( fri = EeFsGetLink(m_currBlk)))    EeFsSetLink(m_currBlk, 0);
  EeFsFlush(); //chained out
    4aac:	00 dd       	rcall	.-1536   	; 0x44ae <_ZL9EeFsFlushv>

  if(fri) EeFsFree( fri );  //chain in
    4aae:	11 23       	and	r17, r17
    4ab0:	11 f0       	breq	.+4      	; 0x4ab6 <_ZN5EFile10closeTruncEv+0x44>
    4ab2:	81 2f       	mov	r24, r17
    4ab4:	33 dd       	rcall	.-1434   	; 0x451c <_ZL8EeFsFreeh>
	asm("") ;
}
    4ab6:	df 91       	pop	r29
    4ab8:	cf 91       	pop	r28
    4aba:	1f 91       	pop	r17
    4abc:	08 95       	ret
}
void EFile::closeTrunc()
{
  uint8_t fri=0;
  eeFs.files[m_fileId].size     = m_pos;
  if(m_currBlk && ( fri = EeFsGetLink(m_currBlk)))    EeFsSetLink(m_currBlk, 0);
    4abe:	60 e0       	ldi	r22, 0x00	; 0
    4ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ac2:	05 dd       	rcall	.-1526   	; 0x44ce <_ZL11EeFsSetLinkhh>
    4ac4:	f3 cf       	rjmp	.-26     	; 0x4aac <_ZN5EFile10closeTruncEv+0x3a>

00004ac6 <_ZN5EFile8writeRlcEhhPhjh>:

  if(fri) EeFsFree( fri );  //chain in
	asm("") ;
}

uint16_t EFile::writeRlc(uint8_t i_fileId, uint8_t typ,uint8_t*buf,uint16_t i_len, uint8_t maxTme10ms){
    4ac6:	7f 92       	push	r7
    4ac8:	8f 92       	push	r8
    4aca:	9f 92       	push	r9
    4acc:	af 92       	push	r10
    4ace:	bf 92       	push	r11
    4ad0:	cf 92       	push	r12
    4ad2:	df 92       	push	r13
    4ad4:	ef 92       	push	r14
    4ad6:	ff 92       	push	r15
    4ad8:	0f 93       	push	r16
    4ada:	1f 93       	push	r17
    4adc:	cf 93       	push	r28
    4ade:	df 93       	push	r29
    4ae0:	1f 92       	push	r1
    4ae2:	cd b7       	in	r28, 0x3d	; 61
    4ae4:	de b7       	in	r29, 0x3e	; 62
    4ae6:	6c 01       	movw	r12, r24
    4ae8:	59 01       	movw	r10, r18
  create(i_fileId,typ,maxTme10ms);
    4aea:	2e 2d       	mov	r18, r14
    4aec:	30 e0       	ldi	r19, 0x00	; 0
    4aee:	9b df       	rcall	.-202    	; 0x4a26 <_ZN5EFile6createEhhj>
  bool    state0 = true;
  uint8_t cnt    = 0;
    4af0:	19 82       	std	Y+1, r1	; 0x01
    4af2:	45 01       	movw	r8, r10

  //RLE compression:
  //rb = read byte
  //if (rb | 0x80) write rb & 0x7F zeros
  //else write rb bytes
  for( i=0; i<=i_len; i++)
    4af4:	e1 2c       	mov	r14, r1
    4af6:	f1 2c       	mov	r15, r1
	asm("") ;
}

uint16_t EFile::writeRlc(uint8_t i_fileId, uint8_t typ,uint8_t*buf,uint16_t i_len, uint8_t maxTme10ms){
  create(i_fileId,typ,maxTme10ms);
  bool    state0 = true;
    4af8:	77 24       	eor	r7, r7
    4afa:	73 94       	inc	r7
  //rb = read byte
  //if (rb | 0x80) write rb & 0x7F zeros
  //else write rb bytes
  for( i=0; i<=i_len; i++)
  {
    bool nst0 = buf[i] == 0;                   
    4afc:	f4 01       	movw	r30, r8
    4afe:	81 91       	ld	r24, Z+
    4b00:	4f 01       	movw	r8, r30
    4b02:	99 81       	ldd	r25, Y+1	; 0x01
    if( nst0 && !state0 && buf[i+1]!=0) nst0 = false ;
    4b04:	81 11       	cpse	r24, r1
    4b06:	08 c0       	rjmp	.+16     	; 0x4b18 <_ZN5EFile8writeRlcEhhPhjh+0x52>
    4b08:	71 10       	cpse	r7, r1
    4b0a:	4c c0       	rjmp	.+152    	; 0x4ba4 <_ZN5EFile8writeRlcEhhPhjh+0xde>
    4b0c:	80 81       	ld	r24, Z
    4b0e:	81 11       	cpse	r24, r1
    4b10:	05 c0       	rjmp	.+10     	; 0x4b1c <_ZN5EFile8writeRlcEhhPhjh+0x56>
    4b12:	77 24       	eor	r7, r7
    4b14:	73 94       	inc	r7
    4b16:	1b c0       	rjmp	.+54     	; 0x4b4e <_ZN5EFile8writeRlcEhhPhjh+0x88>
    if(nst0 != state0 || cnt>=0x7f || i==i_len){
    4b18:	71 10       	cpse	r7, r1
    4b1a:	0a c0       	rjmp	.+20     	; 0x4b30 <_ZN5EFile8writeRlcEhhPhjh+0x6a>
    4b1c:	80 e0       	ldi	r24, 0x00	; 0
    4b1e:	9f 37       	cpi	r25, 0x7F	; 127
    4b20:	18 f4       	brcc	.+6      	; 0x4b28 <_ZN5EFile8writeRlcEhhPhjh+0x62>
    4b22:	e0 16       	cp	r14, r16
    4b24:	f1 06       	cpc	r15, r17
    4b26:	61 f5       	brne	.+88     	; 0x4b80 <_ZN5EFile8writeRlcEhhPhjh+0xba>
      if(state0){  
    4b28:	77 20       	and	r7, r7
    4b2a:	81 f0       	breq	.+32     	; 0x4b4c <_ZN5EFile8writeRlcEhhPhjh+0x86>
    4b2c:	78 2e       	mov	r7, r24
    4b2e:	01 c0       	rjmp	.+2      	; 0x4b32 <_ZN5EFile8writeRlcEhhPhjh+0x6c>
    4b30:	71 2c       	mov	r7, r1
        if(cnt>0){
    4b32:	99 23       	and	r25, r25
    4b34:	29 f1       	breq	.+74     	; 0x4b80 <_ZN5EFile8writeRlcEhhPhjh+0xba>
          cnt|=0x80;
    4b36:	90 68       	ori	r25, 0x80	; 128
    4b38:	99 83       	std	Y+1, r25	; 0x01
          if( write(&cnt,1)!=1)           goto error;
    4b3a:	41 e0       	ldi	r20, 0x01	; 1
    4b3c:	be 01       	movw	r22, r28
    4b3e:	6f 5f       	subi	r22, 0xFF	; 255
    4b40:	7f 4f       	sbci	r23, 0xFF	; 255
    4b42:	c6 01       	movw	r24, r12
    4b44:	f7 de       	rcall	.-530    	; 0x4934 <_ZN5EFile5writeEPhh>
    4b46:	81 30       	cpi	r24, 0x01	; 1
    4b48:	d1 f0       	breq	.+52     	; 0x4b7e <_ZN5EFile8writeRlcEhhPhjh+0xb8>
    4b4a:	26 c0       	rjmp	.+76     	; 0x4b98 <_ZN5EFile8writeRlcEhhPhjh+0xd2>
    4b4c:	78 2e       	mov	r7, r24
          cnt=0;
        }
      }else{
        if(cnt>0) {
    4b4e:	99 23       	and	r25, r25
    4b50:	b9 f0       	breq	.+46     	; 0x4b80 <_ZN5EFile8writeRlcEhhPhjh+0xba>
          if( write(&cnt,1) !=1)            goto error;
    4b52:	41 e0       	ldi	r20, 0x01	; 1
    4b54:	be 01       	movw	r22, r28
    4b56:	6f 5f       	subi	r22, 0xFF	; 255
    4b58:	7f 4f       	sbci	r23, 0xFF	; 255
    4b5a:	c6 01       	movw	r24, r12
    4b5c:	eb de       	rcall	.-554    	; 0x4934 <_ZN5EFile5writeEPhh>
    4b5e:	81 30       	cpi	r24, 0x01	; 1
    4b60:	d9 f4       	brne	.+54     	; 0x4b98 <_ZN5EFile8writeRlcEhhPhjh+0xd2>
          uint8_t ret=write(&buf[i-cnt],cnt);
    4b62:	49 81       	ldd	r20, Y+1	; 0x01
    4b64:	b7 01       	movw	r22, r14
    4b66:	64 1b       	sub	r22, r20
    4b68:	71 09       	sbc	r23, r1
    4b6a:	6a 0d       	add	r22, r10
    4b6c:	7b 1d       	adc	r23, r11
    4b6e:	c6 01       	movw	r24, r12
    4b70:	e1 de       	rcall	.-574    	; 0x4934 <_ZN5EFile5writeEPhh>
          if( ret !=cnt) { cnt-=ret;        goto error;}
    4b72:	99 81       	ldd	r25, Y+1	; 0x01
    4b74:	89 17       	cp	r24, r25
    4b76:	19 f0       	breq	.+6      	; 0x4b7e <_ZN5EFile8writeRlcEhhPhjh+0xb8>
    4b78:	98 1b       	sub	r25, r24
    4b7a:	99 83       	std	Y+1, r25	; 0x01
    4b7c:	0d c0       	rjmp	.+26     	; 0x4b98 <_ZN5EFile8writeRlcEhhPhjh+0xd2>
          cnt=0;
    4b7e:	19 82       	std	Y+1, r1	; 0x01
        }
      }
      state0 = nst0;
    }
    cnt++;
    4b80:	89 81       	ldd	r24, Y+1	; 0x01
    4b82:	8f 5f       	subi	r24, 0xFF	; 255
    4b84:	89 83       	std	Y+1, r24	; 0x01
    wdt_reset() ;		// Can take too long for the WD timeout.
    4b86:	a8 95       	wdr

  //RLE compression:
  //rb = read byte
  //if (rb | 0x80) write rb & 0x7F zeros
  //else write rb bytes
  for( i=0; i<=i_len; i++)
    4b88:	ff ef       	ldi	r31, 0xFF	; 255
    4b8a:	ef 1a       	sub	r14, r31
    4b8c:	ff 0a       	sbc	r15, r31
    4b8e:	0e 15       	cp	r16, r14
    4b90:	1f 05       	cpc	r17, r15
    4b92:	08 f0       	brcs	.+2      	; 0x4b96 <_ZN5EFile8writeRlcEhhPhjh+0xd0>
    4b94:	b3 cf       	rjmp	.-154    	; 0x4afc <_ZN5EFile8writeRlcEhhPhjh+0x36>
    4b96:	08 c0       	rjmp	.+16     	; 0x4ba8 <_ZN5EFile8writeRlcEhhPhjh+0xe2>
    cnt++;
    wdt_reset() ;		// Can take too long for the WD timeout.
  }
  if(0){
    error:
    i_len = i - (cnt & 0x7f);
    4b98:	89 81       	ldd	r24, Y+1	; 0x01
    4b9a:	8f 77       	andi	r24, 0x7F	; 127
    4b9c:	87 01       	movw	r16, r14
    4b9e:	08 1b       	sub	r16, r24
    4ba0:	11 09       	sbc	r17, r1
    4ba2:	02 c0       	rjmp	.+4      	; 0x4ba8 <_ZN5EFile8writeRlcEhhPhjh+0xe2>
    4ba4:	87 2d       	mov	r24, r7
    4ba6:	bb cf       	rjmp	.-138    	; 0x4b1e <_ZN5EFile8writeRlcEhhPhjh+0x58>
  }
  closeTrunc();
    4ba8:	c6 01       	movw	r24, r12
    4baa:	63 df       	rcall	.-314    	; 0x4a72 <_ZN5EFile10closeTruncEv>
  return i_len;
}
    4bac:	c8 01       	movw	r24, r16
    4bae:	0f 90       	pop	r0
    4bb0:	df 91       	pop	r29
    4bb2:	cf 91       	pop	r28
    4bb4:	1f 91       	pop	r17
    4bb6:	0f 91       	pop	r16
    4bb8:	ff 90       	pop	r15
    4bba:	ef 90       	pop	r14
    4bbc:	df 90       	pop	r13
    4bbe:	cf 90       	pop	r12
    4bc0:	bf 90       	pop	r11
    4bc2:	af 90       	pop	r10
    4bc4:	9f 90       	pop	r9
    4bc6:	8f 90       	pop	r8
    4bc8:	7f 90       	pop	r7
    4bca:	08 95       	ret

00004bcc <_Z9lcd_clearv>:


void lcd_clear()
{
  //for(unsigned i=0; i<sizeof(displayBuf); i++) displayBuf[i]=0;
  memset(displayBuf, 0, sizeof(displayBuf));
    4bcc:	80 e0       	ldi	r24, 0x00	; 0
    4bce:	94 e0       	ldi	r25, 0x04	; 4
    4bd0:	ee ec       	ldi	r30, 0xCE	; 206
    4bd2:	f6 e0       	ldi	r31, 0x06	; 6
    4bd4:	df 01       	movw	r26, r30
    4bd6:	9c 01       	movw	r18, r24
    4bd8:	1d 92       	st	X+, r1
    4bda:	21 50       	subi	r18, 0x01	; 1
    4bdc:	30 40       	sbci	r19, 0x00	; 0
    4bde:	e1 f7       	brne	.-8      	; 0x4bd8 <_Z9lcd_clearv+0xc>
    4be0:	08 95       	ret

00004be2 <_Z7lcd_imghhPKhh>:
	putsVolts(x, y, g_vbat100mV, att);
}


void lcd_img(uint8_t i_x,uint8_t i_y,const prog_uchar * imgdat,uint8_t idx/*,uint8_t mode*/)
{
    4be2:	ff 92       	push	r15
    4be4:	0f 93       	push	r16
    4be6:	1f 93       	push	r17
    4be8:	cf 93       	push	r28
    4bea:	df 93       	push	r29
  const prog_uchar  *q = imgdat;

  uint8_t w    = pgm_read_byte(q++);
    4bec:	fa 01       	movw	r30, r20
    4bee:	14 91       	lpm	r17, Z
  uint8_t hb   = pgm_read_byte(q++) ;
    4bf0:	31 96       	adiw	r30, 0x01	; 1
    4bf2:	74 91       	lpm	r23, Z
	hb += 7 ;
    4bf4:	79 5f       	subi	r23, 0xF9	; 249
	hb /= 8 ;
    4bf6:	76 95       	lsr	r23
    4bf8:	76 95       	lsr	r23
    4bfa:	76 95       	lsr	r23
  uint8_t sze1 = pgm_read_byte(q++);
    4bfc:	da 01       	movw	r26, r20
    4bfe:	13 96       	adiw	r26, 0x03	; 3
    4c00:	31 96       	adiw	r30, 0x01	; 1
    4c02:	44 91       	lpm	r20, Z
  q += idx*sze1;
    4c04:	24 9f       	mul	r18, r20
    4c06:	a0 0d       	add	r26, r0
    4c08:	b1 1d       	adc	r27, r1
    4c0a:	11 24       	eor	r1, r1
//  bool    inv  = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
  for(uint8_t yb = 0; yb < hb; yb++){
    uint8_t   *p = &displayBuf[ (i_y / 8 + yb) * DISPLAY_W + i_x ];
    4c0c:	66 95       	lsr	r22
    4c0e:	66 95       	lsr	r22
    4c10:	66 95       	lsr	r22
    4c12:	90 e0       	ldi	r25, 0x00	; 0
    4c14:	f0 e8       	ldi	r31, 0x80	; 128
    4c16:	6f 9f       	mul	r22, r31
    4c18:	80 0d       	add	r24, r0
    4c1a:	91 1d       	adc	r25, r1
    4c1c:	11 24       	eor	r1, r1
	hb += 7 ;
	hb /= 8 ;
  uint8_t sze1 = pgm_read_byte(q++);
  q += idx*sze1;
//  bool    inv  = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
  for(uint8_t yb = 0; yb < hb; yb++){
    4c1e:	20 e0       	ldi	r18, 0x00	; 0
    4c20:	30 e0       	ldi	r19, 0x00	; 0
    4c22:	60 e0       	ldi	r22, 0x00	; 0
    4c24:	82 53       	subi	r24, 0x32	; 50
    4c26:	99 4f       	sbci	r25, 0xF9	; 249
    4c28:	41 2f       	mov	r20, r17
    4c2a:	50 e0       	ldi	r21, 0x00	; 0
    4c2c:	67 17       	cp	r22, r23
    4c2e:	99 f0       	breq	.+38     	; 0x4c56 <_Z7lcd_imghhPKhh+0x74>
    4c30:	0a 2f       	mov	r16, r26
    4c32:	ec 01       	movw	r28, r24
    4c34:	c2 0f       	add	r28, r18
    4c36:	d3 1f       	adc	r29, r19
    uint8_t   *p = &displayBuf[ (i_y / 8 + yb) * DISPLAY_W + i_x ];
    for(uint8_t x=0; x < w; x++){
    4c38:	fd 01       	movw	r30, r26
    4c3a:	fe 2e       	mov	r15, r30
    4c3c:	f0 1a       	sub	r15, r16
    4c3e:	f1 16       	cp	r15, r17
    4c40:	20 f4       	brcc	.+8      	; 0x4c4a <_Z7lcd_imghhPKhh+0x68>
      uint8_t b = pgm_read_byte(q++);
    4c42:	f4 90       	lpm	r15, Z
      *p++ = b;
    4c44:	f9 92       	st	Y+, r15
    4c46:	31 96       	adiw	r30, 0x01	; 1
    4c48:	f8 cf       	rjmp	.-16     	; 0x4c3a <_Z7lcd_imghhPKhh+0x58>
    4c4a:	a4 0f       	add	r26, r20
    4c4c:	b5 1f       	adc	r27, r21
	hb += 7 ;
	hb /= 8 ;
  uint8_t sze1 = pgm_read_byte(q++);
  q += idx*sze1;
//  bool    inv  = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
  for(uint8_t yb = 0; yb < hb; yb++){
    4c4e:	6f 5f       	subi	r22, 0xFF	; 255
    4c50:	20 58       	subi	r18, 0x80	; 128
    4c52:	3f 4f       	sbci	r19, 0xFF	; 255
    4c54:	eb cf       	rjmp	.-42     	; 0x4c2c <_Z7lcd_imghhPKhh+0x4a>
      uint8_t b = pgm_read_byte(q++);
      *p++ = b;
      //*p++ = inv ? ~b : b;
    }
  }
}
    4c56:	df 91       	pop	r29
    4c58:	cf 91       	pop	r28
    4c5a:	1f 91       	pop	r17
    4c5c:	0f 91       	pop	r16
    4c5e:	ff 90       	pop	r15
    4c60:	08 95       	ret

00004c62 <_Z11lcd_putcAtthhch>:
  return lcd_putcAtt(x,y,c,0);
}


// invers: 0 no 1=yes 2=blink
uint8_t lcd_putcAtt(uint8_t x,uint8_t y,const char c,uint8_t mode){
    4c62:	cf 93       	push	r28
    4c64:	df 93       	push	r29
    4c66:	38 2f       	mov	r19, r24
	uint8_t *p  = &displayBuf[ (y & 0xF8) * 16 + x ];
	#else
	uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
#endif
    //uint8_t *pmax = &displayBuf[ DISPLAY_H/8 * DISPLAY_W ];
	if ( c < 22 ){		// Move to specific x position (c)*FW
    4c68:	46 31       	cpi	r20, 0x16	; 22
    4c6a:	2c f4       	brge	.+10     	; 0x4c76 <_Z11lcd_putcAtthhch+0x14>
		x = c * FW ;
    4c6c:	84 2f       	mov	r24, r20
    4c6e:	88 0f       	add	r24, r24
    4c70:	84 0f       	add	r24, r20
    4c72:	88 0f       	add	r24, r24
		//if(mode&DBLSIZE){
		//x += x ;
		//}
		return x ;
    4c74:	84 c0       	rjmp	.+264    	; 0x4d7e <_Z11lcd_putcAtthhch+0x11c>
	}

	x += FW ;
    4c76:	86 e0       	ldi	r24, 0x06	; 6
    4c78:	83 0f       	add	r24, r19
    const prog_uchar    *q = &font_5x8_x20_x7f[(c-0x20)*5];
    bool         inv = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
    4c7a:	20 fd       	sbrc	r18, 0
    4c7c:	08 c0       	rjmp	.+16     	; 0x4c8e <_Z11lcd_putcAtthhch+0x2c>
    4c7e:	21 fd       	sbrc	r18, 1
    4c80:	02 c0       	rjmp	.+4      	; 0x4c86 <_Z11lcd_putcAtthhch+0x24>
    4c82:	90 e0       	ldi	r25, 0x00	; 0
    4c84:	05 c0       	rjmp	.+10     	; 0x4c90 <_Z11lcd_putcAtthhch+0x2e>
    4c86:	90 91 cf 0a 	lds	r25, 0x0ACF
    4c8a:	96 ff       	sbrs	r25, 6
    4c8c:	fa cf       	rjmp	.-12     	; 0x4c82 <_Z11lcd_putcAtthhch+0x20>
    4c8e:	91 e0       	ldi	r25, 0x01	; 1

// invers: 0 no 1=yes 2=blink
uint8_t lcd_putcAtt(uint8_t x,uint8_t y,const char c,uint8_t mode){

	#if (DISPLAY_W==128)
	uint8_t *p  = &displayBuf[ (y & 0xF8) * 16 + x ];
    4c90:	68 7f       	andi	r22, 0xF8	; 248
    4c92:	a3 2f       	mov	r26, r19
    4c94:	b0 e0       	ldi	r27, 0x00	; 0
    4c96:	50 e1       	ldi	r21, 0x10	; 16
    4c98:	65 9f       	mul	r22, r21
    4c9a:	a0 0d       	add	r26, r0
    4c9c:	b1 1d       	adc	r27, r1
    4c9e:	11 24       	eor	r1, r1
    4ca0:	a2 53       	subi	r26, 0x32	; 50
    4ca2:	b9 4f       	sbci	r27, 0xF9	; 249

	x += FW ;
    const prog_uchar    *q = &font_5x8_x20_x7f[(c-0x20)*5];
    bool         inv = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);

	if(mode	&	DBLSIZE){
    4ca4:	22 ff       	sbrs	r18, 2
    4ca6:	3e c0       	rjmp	.+124    	; 0x4d24 <_Z11lcd_putcAtthhch+0xc2>
		if ( (c!=0x2E)) x+=FW; //check for decimal point
    4ca8:	4e 32       	cpi	r20, 0x2E	; 46
    4caa:	11 f0       	breq	.+4      	; 0x4cb0 <_Z11lcd_putcAtthhch+0x4e>
    4cac:	8c e0       	ldi	r24, 0x0C	; 12
    4cae:	83 0f       	add	r24, r19
	 * five bottom by ten bottom bytes (20 bytes per 
	 * char) */
		  unsigned char c_mapped ;

	#ifdef DBL_FONT_SMALL
		if ( c >= ',' && c <= ':' ){
    4cb0:	24 ed       	ldi	r18, 0xD4	; 212
    4cb2:	24 0f       	add	r18, r20
    4cb4:	2f 30       	cpi	r18, 0x0F	; 15
    4cb6:	10 f4       	brcc	.+4      	; 0x4cbc <_Z11lcd_putcAtthhch+0x5a>
			c_mapped = c - ',' + 1 ;
    4cb8:	4b 52       	subi	r20, 0x2B	; 43
    4cba:	11 c0       	rjmp	.+34     	; 0x4cde <_Z11lcd_putcAtthhch+0x7c>

		}else if (c>='A' && c<='Z'){
    4cbc:	2f eb       	ldi	r18, 0xBF	; 191
    4cbe:	24 0f       	add	r18, r20
    4cc0:	2a 31       	cpi	r18, 0x1A	; 26
    4cc2:	10 f4       	brcc	.+4      	; 0x4cc8 <_Z11lcd_putcAtthhch+0x66>
			c_mapped = c - 'A' + 0x10 ;
    4cc4:	41 53       	subi	r20, 0x31	; 49
    4cc6:	0b c0       	rjmp	.+22     	; 0x4cde <_Z11lcd_putcAtthhch+0x7c>

		}else if (c>='a' && c<='z')	{
    4cc8:	2f e9       	ldi	r18, 0x9F	; 159
    4cca:	24 0f       	add	r18, r20
    4ccc:	2a 31       	cpi	r18, 0x1A	; 26
    4cce:	10 f4       	brcc	.+4      	; 0x4cd4 <_Z11lcd_putcAtthhch+0x72>
			c_mapped = c - 'a' + 0x2B ;
    4cd0:	46 53       	subi	r20, 0x36	; 54
    4cd2:	05 c0       	rjmp	.+10     	; 0x4cde <_Z11lcd_putcAtthhch+0x7c>

		}else if (c=='_' ){
    4cd4:	4f 35       	cpi	r20, 0x5F	; 95
    4cd6:	11 f4       	brne	.+4      	; 0x4cdc <_Z11lcd_putcAtthhch+0x7a>
			c_mapped = 0x2A ;
    4cd8:	4a e2       	ldi	r20, 0x2A	; 42
    4cda:	01 c0       	rjmp	.+2      	; 0x4cde <_Z11lcd_putcAtthhch+0x7c>
		}else{
			c_mapped = 0 ;
    4cdc:	40 e0       	ldi	r20, 0x00	; 0
		}
	#else
		c_mapped = c - 0x20 ;
	#endif
        q = &font_10x16_x20_x7f[(c_mapped)*20] ;// + ((c-0x20)/16)*160];
    4cde:	64 e1       	ldi	r22, 0x14	; 20
    4ce0:	46 9f       	mul	r20, r22
    4ce2:	a0 01       	movw	r20, r0
    4ce4:	11 24       	eor	r1, r1
    4ce6:	45 5f       	subi	r20, 0xF5	; 245
    4ce8:	57 4f       	sbci	r21, 0xF7	; 247
        for(char i=11; i>=0; i--){
    4cea:	2b e0       	ldi	r18, 0x0B	; 11
	    /*top byte*/
            uint8_t b1 = i>1 ? pgm_read_byte(q) : 0;
    4cec:	22 30       	cpi	r18, 0x02	; 2
    4cee:	2c f0       	brlt	.+10     	; 0x4cfa <_Z11lcd_putcAtthhch+0x98>
    4cf0:	fa 01       	movw	r30, r20
    4cf2:	34 91       	lpm	r19, Z
    4cf4:	3a 96       	adiw	r30, 0x0a	; 10
	    /*bottom byte*/
            uint8_t b3 = i>1 ? pgm_read_byte(10+q) : 0;
    4cf6:	e4 91       	lpm	r30, Z
    4cf8:	02 c0       	rjmp	.+4      	; 0x4cfe <_Z11lcd_putcAtthhch+0x9c>
		c_mapped = c - 0x20 ;
	#endif
        q = &font_10x16_x20_x7f[(c_mapped)*20] ;// + ((c-0x20)/16)*160];
        for(char i=11; i>=0; i--){
	    /*top byte*/
            uint8_t b1 = i>1 ? pgm_read_byte(q) : 0;
    4cfa:	30 e0       	ldi	r19, 0x00	; 0
	    /*bottom byte*/
            uint8_t b3 = i>1 ? pgm_read_byte(10+q) : 0;
    4cfc:	e0 e0       	ldi	r30, 0x00	; 0
	    /*top byte*/
         //uint8_t b2 = i>0 ? pgm_read_byte(++q) : 0;
	    /*bottom byte*/
           //uint8_t b4 = i>0 ? pgm_read_byte(10+q) : 0;
            q++;
    4cfe:	4f 5f       	subi	r20, 0xFF	; 255
    4d00:	5f 4f       	sbci	r21, 0xFF	; 255
            if(inv) {
    4d02:	99 23       	and	r25, r25
    4d04:	11 f0       	breq	.+4      	; 0x4d0a <_Z11lcd_putcAtthhch+0xa8>
                b1=~b1;
    4d06:	30 95       	com	r19
                //b2=~b2;
                b3=~b3;
    4d08:	e0 95       	com	r30
                //b4=~b4;
            }

            if(p < DISPLAY_END-(DISPLAY_W+1)){
    4d0a:	fa e0       	ldi	r31, 0x0A	; 10
    4d0c:	ad 34       	cpi	r26, 0x4D	; 77
    4d0e:	bf 07       	cpc	r27, r31
    4d10:	30 f4       	brcc	.+12     	; 0x4d1e <_Z11lcd_putcAtthhch+0xbc>
                p[0]=b1;
    4d12:	3c 93       	st	X, r19
                //p[1]=b2;
                p[DISPLAY_W] = b3;
    4d14:	ed 01       	movw	r28, r26
    4d16:	c0 58       	subi	r28, 0x80	; 128
    4d18:	df 4f       	sbci	r29, 0xFF	; 255
    4d1a:	e8 83       	st	Y, r30
                //p[DISPLAY_W+1] = b4;
                p+=1;
    4d1c:	11 96       	adiw	r26, 0x01	; 1
    4d1e:	21 50       	subi	r18, 0x01	; 1
    4d20:	28 f7       	brcc	.-54     	; 0x4cec <_Z11lcd_putcAtthhch+0x8a>
    4d22:	2d c0       	rjmp	.+90     	; 0x4d7e <_Z11lcd_putcAtthhch+0x11c>
        }

  }else{
		uint8_t condense=0;

		if (mode & CONDENSED){
    4d24:	23 ff       	sbrs	r18, 3
    4d26:	07 c0       	rjmp	.+14     	; 0x4d36 <_Z11lcd_putcAtthhch+0xd4>
			*p = inv ? ~0 : 0;
    4d28:	89 2f       	mov	r24, r25
    4d2a:	81 95       	neg	r24
    4d2c:	8d 93       	st	X+, r24
			p += 1 ;
			condense=1;
			x += FWNUM-FW ;
    4d2e:	85 e0       	ldi	r24, 0x05	; 5
    4d30:	83 0f       	add	r24, r19
		uint8_t condense=0;

		if (mode & CONDENSED){
			*p = inv ? ~0 : 0;
			p += 1 ;
			condense=1;
    4d32:	31 e0       	ldi	r19, 0x01	; 1
    4d34:	01 c0       	rjmp	.+2      	; 0x4d38 <_Z11lcd_putcAtthhch+0xd6>
                p+=1;
            }
        }

  }else{
		uint8_t condense=0;
    4d36:	30 e0       	ldi	r19, 0x00	; 0
		//}
		return x ;
	}

	x += FW ;
    const prog_uchar    *q = &font_5x8_x20_x7f[(c-0x20)*5];
    4d38:	55 27       	eor	r21, r21
    4d3a:	47 fd       	sbrc	r20, 7
    4d3c:	50 95       	com	r21
    4d3e:	40 52       	subi	r20, 0x20	; 32
    4d40:	51 09       	sbc	r21, r1
    4d42:	25 e0       	ldi	r18, 0x05	; 5
    4d44:	24 9f       	mul	r18, r20
    4d46:	f0 01       	movw	r30, r0
    4d48:	25 9f       	mul	r18, r21
    4d4a:	f0 0d       	add	r31, r0
    4d4c:	11 24       	eor	r1, r1
    4d4e:	e1 59       	subi	r30, 0x91	; 145
    4d50:	f2 4f       	sbci	r31, 0xF2	; 242
			condense=1;
			x += FWNUM-FW ;
		}

        for(char i=5; i!=0; i--){
            uint8_t b = pgm_read_byte(q++);
    4d52:	44 91       	lpm	r20, Z
    	    if (condense && i==4) {
    4d54:	33 23       	and	r19, r19
    4d56:	11 f0       	breq	.+4      	; 0x4d5c <_Z11lcd_putcAtthhch+0xfa>
    4d58:	24 30       	cpi	r18, 0x04	; 4
    4d5a:	39 f0       	breq	.+14     	; 0x4d6a <_Z11lcd_putcAtthhch+0x108>
                /*condense the letter by skipping column 4 */
                continue;
            }
            if(p<DISPLAY_END) {*p = inv ? ~b : b; p += 1 ; }
    4d5c:	5a e0       	ldi	r21, 0x0A	; 10
    4d5e:	ae 3c       	cpi	r26, 0xCE	; 206
    4d60:	b5 07       	cpc	r27, r21
    4d62:	18 f4       	brcc	.+6      	; 0x4d6a <_Z11lcd_putcAtthhch+0x108>
    4d64:	91 11       	cpse	r25, r1
    4d66:	40 95       	com	r20
    4d68:	4d 93       	st	X+, r20
    4d6a:	21 50       	subi	r18, 0x01	; 1
    4d6c:	31 96       	adiw	r30, 0x01	; 1
			p += 1 ;
			condense=1;
			x += FWNUM-FW ;
		}

        for(char i=5; i!=0; i--){
    4d6e:	21 11       	cpse	r18, r1
    4d70:	f0 cf       	rjmp	.-32     	; 0x4d52 <_Z11lcd_putcAtthhch+0xf0>
                /*condense the letter by skipping column 4 */
                continue;
            }
            if(p<DISPLAY_END) {*p = inv ? ~b : b; p += 1 ; }
        }
        if(p<DISPLAY_END) *p++ = inv ? ~0 : 0;
    4d72:	6a e0       	ldi	r22, 0x0A	; 10
    4d74:	ae 3c       	cpi	r26, 0xCE	; 206
    4d76:	b6 07       	cpc	r27, r22
    4d78:	10 f4       	brcc	.+4      	; 0x4d7e <_Z11lcd_putcAtthhch+0x11c>
    4d7a:	91 95       	neg	r25
    4d7c:	9c 93       	st	X, r25
    }

	return x ;
}
    4d7e:	df 91       	pop	r29
    4d80:	cf 91       	pop	r28
    4d82:	08 95       	ret

00004d84 <_Z8lcd_putchhc>:
  }
}

uint8_t lcd_putc(uint8_t x,uint8_t y,const char c )
{
  return lcd_putcAtt(x,y,c,0);
    4d84:	20 e0       	ldi	r18, 0x00	; 0
    4d86:	6d cf       	rjmp	.-294    	; 0x4c62 <_Z11lcd_putcAtthhch>

00004d88 <_Z12lcd_putsnAtthhPKchh>:

  lcd_putsnAtt(x,y,s+length*idx,length,att) ;
}

void lcd_putsnAtt(uint8_t x,uint8_t y,const prog_char * s,uint8_t len,uint8_t mode)
{
    4d88:	ef 92       	push	r14
    4d8a:	ff 92       	push	r15
    4d8c:	0f 93       	push	r16
    4d8e:	1f 93       	push	r17
    4d90:	cf 93       	push	r28
    4d92:	df 93       	push	r29
    4d94:	f6 2e       	mov	r15, r22
    4d96:	12 2f       	mov	r17, r18
	uint8_t source ;
	source = mode & BSS ;
    4d98:	90 2f       	mov	r25, r16
    4d9a:	90 71       	andi	r25, 0x10	; 16
    4d9c:	e9 2e       	mov	r14, r25
//	size = mode & DBLSIZE ;
  while(len!=0) {
    4d9e:	fa 01       	movw	r30, r20
    4da0:	11 23       	and	r17, r17
    4da2:	79 f0       	breq	.+30     	; 0x4dc2 <_Z12lcd_putsnAtthhPKchh+0x3a>
    char c = (source) ? *s++ : pgm_read_byte(s++);
    4da4:	ee 20       	and	r14, r14
    4da6:	11 f0       	breq	.+4      	; 0x4dac <_Z12lcd_putsnAtthhPKchh+0x24>
    4da8:	40 81       	ld	r20, Z
    4daa:	01 c0       	rjmp	.+2      	; 0x4dae <_Z12lcd_putsnAtthhPKchh+0x26>
    4dac:	44 91       	lpm	r20, Z
    4dae:	ef 01       	movw	r28, r30
    4db0:	21 96       	adiw	r28, 0x01	; 1
		if ( c == 0 )
    4db2:	44 23       	and	r20, r20
    4db4:	31 f0       	breq	.+12     	; 0x4dc2 <_Z12lcd_putsnAtthhPKchh+0x3a>
		{
			return ;
		}
    x = lcd_putcAtt(x,y,c,mode);
    4db6:	20 2f       	mov	r18, r16
    4db8:	6f 2d       	mov	r22, r15
    4dba:	53 df       	rcall	.-346    	; 0x4c62 <_Z11lcd_putcAtthhch>
//    x+=FW;
//		if ((size)&& (c!=0x2E)) x+=FW; //check for decimal point
    len--;
    4dbc:	11 50       	subi	r17, 0x01	; 1
    4dbe:	fe 01       	movw	r30, r28
    4dc0:	ef cf       	rjmp	.-34     	; 0x4da0 <_Z12lcd_putsnAtthhPKchh+0x18>
  }
}
    4dc2:	df 91       	pop	r29
    4dc4:	cf 91       	pop	r28
    4dc6:	1f 91       	pop	r17
    4dc8:	0f 91       	pop	r16
    4dca:	ff 90       	pop	r15
    4dcc:	ef 90       	pop	r14
    4dce:	08 95       	ret

00004dd0 <_Z14lcd_putsAttIdxhhPKchh>:
// Puts sub-string from string options
// First byte of string is sub-string length
// idx is index into string (in length units)
// Output length characters
void lcd_putsAttIdx(uint8_t x,uint8_t y,const prog_char * s,uint8_t idx,uint8_t att)
{
    4dd0:	0f 93       	push	r16
	uint8_t length ;
	length = pgm_read_byte(s++) ;
    4dd2:	fa 01       	movw	r30, r20
    4dd4:	94 91       	lpm	r25, Z
    4dd6:	4f 5f       	subi	r20, 0xFF	; 255
    4dd8:	5f 4f       	sbci	r21, 0xFF	; 255

  lcd_putsnAtt(x,y,s+length*idx,length,att) ;
    4dda:	92 9f       	mul	r25, r18
    4ddc:	40 0d       	add	r20, r0
    4dde:	51 1d       	adc	r21, r1
    4de0:	11 24       	eor	r1, r1
    4de2:	29 2f       	mov	r18, r25
    4de4:	d1 df       	rcall	.-94     	; 0x4d88 <_Z12lcd_putsnAtthhPKchh>
}
    4de6:	0f 91       	pop	r16
    4de8:	08 95       	ret

00004dea <_Z11lcd_putsn_PhhPKch>:
//		if ((size)&& (c!=0x2E)) x+=FW; //check for decimal point
    len--;
  }
}
void lcd_putsn_P(uint8_t x,uint8_t y,const prog_char * s,uint8_t len)
{
    4dea:	0f 93       	push	r16
  lcd_putsnAtt( x,y,s,len,0);
    4dec:	00 e0       	ldi	r16, 0x00	; 0
    4dee:	cc df       	rcall	.-104    	; 0x4d88 <_Z12lcd_putsnAtthhPKchh>
}
    4df0:	0f 91       	pop	r16
    4df2:	08 95       	ret

00004df4 <_Z11lcd_putsAtthhPKch>:


uint8_t lcd_putsAtt(uint8_t x,uint8_t y,const prog_char * s,uint8_t mode){
    4df4:	ff 92       	push	r15
    4df6:	0f 93       	push	r16
    4df8:	1f 93       	push	r17
    4dfa:	cf 93       	push	r28
    4dfc:	df 93       	push	r29
    4dfe:	16 2f       	mov	r17, r22
    4e00:	02 2f       	mov	r16, r18

	uint8_t source ;
	source = mode & BSS ;
    4e02:	92 2f       	mov	r25, r18
    4e04:	90 71       	andi	r25, 0x10	; 16
    4e06:	f9 2e       	mov	r15, r25
    4e08:	ea 01       	movw	r28, r20

	while(1){
		char c = (source) ? *s++ : pgm_read_byte(s++);
    4e0a:	ff 20       	and	r15, r15
    4e0c:	11 f0       	breq	.+4      	; 0x4e12 <_Z11lcd_putsAtthhPKch+0x1e>
    4e0e:	48 81       	ld	r20, Y
    4e10:	02 c0       	rjmp	.+4      	; 0x4e16 <_Z11lcd_putsAtthhPKch+0x22>
    4e12:	fe 01       	movw	r30, r28
    4e14:	44 91       	lpm	r20, Z
		if(!c) break;
    4e16:	44 23       	and	r20, r20
    4e18:	61 f0       	breq	.+24     	; 0x4e32 <_Z11lcd_putsAtthhPKch+0x3e>
		if ( c == 31 ){
    4e1a:	4f 31       	cpi	r20, 0x1F	; 31
    4e1c:	31 f4       	brne	.+12     	; 0x4e2a <_Z11lcd_putsAtthhPKch+0x36>
			if ( (y += FH) >= DISPLAY_H )break;// Screen height
    4e1e:	18 5f       	subi	r17, 0xF8	; 248
    4e20:	10 34       	cpi	r17, 0x40	; 64
    4e22:	38 f4       	brcc	.+14     	; 0x4e32 <_Z11lcd_putsAtthhPKch+0x3e>
			x = 0 ;
    4e24:	80 e0       	ldi	r24, 0x00	; 0
    4e26:	21 96       	adiw	r28, 0x01	; 1
    4e28:	f0 cf       	rjmp	.-32     	; 0x4e0a <_Z11lcd_putsAtthhPKch+0x16>
		}else{
			x = lcd_putcAtt(x,y,c,mode) ;
    4e2a:	20 2f       	mov	r18, r16
    4e2c:	61 2f       	mov	r22, r17
    4e2e:	19 df       	rcall	.-462    	; 0x4c62 <_Z11lcd_putcAtthhch>
    4e30:	fa cf       	rjmp	.-12     	; 0x4e26 <_Z11lcd_putsAtthhPKch+0x32>
		}
		//x+=FW;
		//if ((size)&& (c!=0x2E)) x+=FW; //check for decimal point
	}
	return x;
}
    4e32:	df 91       	pop	r29
    4e34:	cf 91       	pop	r28
    4e36:	1f 91       	pop	r17
    4e38:	0f 91       	pop	r16
    4e3a:	ff 90       	pop	r15
    4e3c:	08 95       	ret

00004e3e <_Z14lcd_puts_PlefthPKc>:

void lcd_puts_Pleft(uint8_t y,const prog_char * s)
{
    4e3e:	ab 01       	movw	r20, r22
  lcd_putsAtt( 0, y, s, 0);
    4e40:	20 e0       	ldi	r18, 0x00	; 0
    4e42:	68 2f       	mov	r22, r24
    4e44:	80 e0       	ldi	r24, 0x00	; 0
    4e46:	d6 cf       	rjmp	.-84     	; 0x4df4 <_Z11lcd_putsAtthhPKch>

00004e48 <_Z14lcd_puts_PskiphPKch>:
}

// This routine skips 'skip' strings, then displays the rest
void lcd_puts_Pskip(uint8_t y,const prog_char * s, uint8_t skip)
{
	while ( skip )
    4e48:	fb 01       	movw	r30, r22
    4e4a:	44 23       	and	r20, r20
    4e4c:	41 f0       	breq	.+16     	; 0x4e5e <_Z14lcd_puts_PskiphPKch+0x16>
	{
    char c = pgm_read_byte(s++);
    4e4e:	94 91       	lpm	r25, Z
    if(!c) return ;
    4e50:	99 23       	and	r25, r25
    4e52:	51 f0       	breq	.+20     	; 0x4e68 <_Z14lcd_puts_PskiphPKch+0x20>
		if ( c == 31 )
    4e54:	9f 31       	cpi	r25, 0x1F	; 31
    4e56:	09 f4       	brne	.+2      	; 0x4e5a <_Z14lcd_puts_PskiphPKch+0x12>
		{
			skip -= 1 ;
    4e58:	41 50       	subi	r20, 0x01	; 1
    4e5a:	31 96       	adiw	r30, 0x01	; 1
    4e5c:	f6 cf       	rjmp	.-20     	; 0x4e4a <_Z14lcd_puts_PskiphPKch+0x2>
		}
	}
  lcd_putsAtt( 0, y, s, 0);
    4e5e:	20 e0       	ldi	r18, 0x00	; 0
    4e60:	af 01       	movw	r20, r30
    4e62:	68 2f       	mov	r22, r24
    4e64:	80 e0       	ldi	r24, 0x00	; 0
    4e66:	c6 cf       	rjmp	.-116    	; 0x4df4 <_Z11lcd_putsAtthhPKch>
    4e68:	08 95       	ret

00004e6a <_Z10lcd_puts_PhhPKc>:
}

void lcd_puts_P(uint8_t x,uint8_t y,const prog_char * s)
{
  lcd_putsAtt( x, y, s, 0);
    4e6a:	20 e0       	ldi	r18, 0x00	; 0
    4e6c:	c3 cf       	rjmp	.-122    	; 0x4df4 <_Z11lcd_putsAtthhPKch>

00004e6e <_Z11lcd_outhex4hhj>:
}


void lcd_outhex4(uint8_t x,uint8_t y,uint16_t val)
{
    4e6e:	ff 92       	push	r15
    4e70:	0f 93       	push	r16
    4e72:	1f 93       	push	r17
    4e74:	cf 93       	push	r28
    4e76:	df 93       	push	r29
    4e78:	08 2f       	mov	r16, r24
    4e7a:	f6 2e       	mov	r15, r22
    4e7c:	ea 01       	movw	r28, r20
	uint8_t i ;
  x+=FWNUM*4;
    4e7e:	14 e1       	ldi	r17, 0x14	; 20
    4e80:	18 0f       	add	r17, r24
  for(i=0; i<4; i++)
  {
    x-=FWNUM;
    4e82:	15 50       	subi	r17, 0x05	; 5
    char c = val & 0xf;
    4e84:	4c 2f       	mov	r20, r28
    4e86:	4f 70       	andi	r20, 0x0F	; 15
    c = c>9 ? c+'A'-10 : c+'0';
    4e88:	4a 30       	cpi	r20, 0x0A	; 10
    4e8a:	1c f0       	brlt	.+6      	; 0x4e92 <_Z11lcd_outhex4hhj+0x24>
    4e8c:	49 5c       	subi	r20, 0xC9	; 201
    lcd_putcAtt(x,y,c,c>='A'?CONDENSED:0);
    4e8e:	28 e0       	ldi	r18, 0x08	; 8
    4e90:	02 c0       	rjmp	.+4      	; 0x4e96 <_Z11lcd_outhex4hhj+0x28>
  x+=FWNUM*4;
  for(i=0; i<4; i++)
  {
    x-=FWNUM;
    char c = val & 0xf;
    c = c>9 ? c+'A'-10 : c+'0';
    4e92:	40 5d       	subi	r20, 0xD0	; 208
    lcd_putcAtt(x,y,c,c>='A'?CONDENSED:0);
    4e94:	20 e0       	ldi	r18, 0x00	; 0
    4e96:	6f 2d       	mov	r22, r15
    4e98:	81 2f       	mov	r24, r17
    4e9a:	e3 de       	rcall	.-570    	; 0x4c62 <_Z11lcd_putcAtthhch>
    val>>=4;
    4e9c:	84 e0       	ldi	r24, 0x04	; 4
    4e9e:	d6 95       	lsr	r29
    4ea0:	c7 95       	ror	r28
    4ea2:	8a 95       	dec	r24
    4ea4:	e1 f7       	brne	.-8      	; 0x4e9e <_Z11lcd_outhex4hhj+0x30>

void lcd_outhex4(uint8_t x,uint8_t y,uint16_t val)
{
	uint8_t i ;
  x+=FWNUM*4;
  for(i=0; i<4; i++)
    4ea6:	10 13       	cpse	r17, r16
    4ea8:	ec cf       	rjmp	.-40     	; 0x4e82 <_Z11lcd_outhex4hhj+0x14>
    char c = val & 0xf;
    c = c>9 ? c+'A'-10 : c+'0';
    lcd_putcAtt(x,y,c,c>='A'?CONDENSED:0);
    val>>=4;
  }
}
    4eaa:	df 91       	pop	r29
    4eac:	cf 91       	pop	r28
    4eae:	1f 91       	pop	r17
    4eb0:	0f 91       	pop	r16
    4eb2:	ff 90       	pop	r15
    4eb4:	08 95       	ret

00004eb6 <_Z16lcd_char_inversehhhh>:

// Reverse video 8 pixels high, w pixels wide
// Vertically on an 8 pixel high boundary
void lcd_char_inverse( uint8_t x, uint8_t y, uint8_t w, uint8_t blink )
{
	if ( blink && BLINK_ON_PHASE )
    4eb6:	22 23       	and	r18, r18
    4eb8:	21 f0       	breq	.+8      	; 0x4ec2 <_Z16lcd_char_inversehhhh+0xc>
    4eba:	90 91 cf 0a 	lds	r25, 0x0ACF
    4ebe:	96 fd       	sbrc	r25, 6
    4ec0:	08 95       	ret
	{
		return ;
	}
	uint8_t end = x + w ;
    4ec2:	48 0f       	add	r20, r24
#if (DISPLAY_W==128)
  uint8_t *p  = &displayBuf[ (y & 0xF8) * 16 + x ];
    4ec4:	68 7f       	andi	r22, 0xF8	; 248
    4ec6:	e8 2f       	mov	r30, r24
    4ec8:	f0 e0       	ldi	r31, 0x00	; 0
    4eca:	90 e1       	ldi	r25, 0x10	; 16
    4ecc:	69 9f       	mul	r22, r25
    4ece:	e0 0d       	add	r30, r0
    4ed0:	f1 1d       	adc	r31, r1
    4ed2:	11 24       	eor	r1, r1
    4ed4:	e2 53       	subi	r30, 0x32	; 50
    4ed6:	f9 4f       	sbci	r31, 0xF9	; 249
    4ed8:	8e 1b       	sub	r24, r30
    4eda:	98 2f       	mov	r25, r24
    4edc:	9e 0f       	add	r25, r30
#else  
	uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
#endif

	while ( x < end )
    4ede:	94 17       	cp	r25, r20
    4ee0:	20 f4       	brcc	.+8      	; 0x4eea <_Z16lcd_char_inversehhhh+0x34>
	{
		*p++ ^= 0xFF ;
    4ee2:	90 81       	ld	r25, Z
    4ee4:	90 95       	com	r25
    4ee6:	91 93       	st	Z+, r25
    4ee8:	f8 cf       	rjmp	.-16     	; 0x4eda <_Z16lcd_char_inversehhhh+0x24>
    4eea:	08 95       	ret

00004eec <_Z14lcd_write_bitsPhh>:
}


void lcd_write_bits( uint8_t *p, uint8_t mask )
{
  if(p<DISPLAY_END)
    4eec:	2a e0       	ldi	r18, 0x0A	; 10
    4eee:	8e 3c       	cpi	r24, 0xCE	; 206
    4ef0:	92 07       	cpc	r25, r18
    4ef2:	60 f4       	brcc	.+24     	; 0x4f0c <_Z14lcd_write_bitsPhh+0x20>
	{
		uint8_t temp = *p ;
    4ef4:	fc 01       	movw	r30, r24
    4ef6:	20 81       	ld	r18, Z
		if ( plotType != PLOT_XOR )
    4ef8:	30 91 cd 06 	lds	r19, 0x06CD
    4efc:	33 23       	and	r19, r19
    4efe:	19 f0       	breq	.+6      	; 0x4f06 <_Z14lcd_write_bitsPhh+0x1a>
		{
			temp |= mask ;
    4f00:	26 2b       	or	r18, r22
		}
		if ( plotType != PLOT_BLACK )
    4f02:	31 30       	cpi	r19, 0x01	; 1
    4f04:	09 f0       	breq	.+2      	; 0x4f08 <_Z14lcd_write_bitsPhh+0x1c>
		{
			temp ^= mask ;
    4f06:	26 27       	eor	r18, r22
		}
		*p = temp ;
    4f08:	fc 01       	movw	r30, r24
    4f0a:	20 83       	st	Z, r18
    4f0c:	08 95       	ret

00004f0e <_Z8lcd_plothh>:
}

void lcd_plot(uint8_t x,uint8_t y)
{
#if (DISPLAY_W==128)
  uint8_t *p  = &displayBuf[ (y & 0xF8) * 16 + x ];
    4f0e:	26 2f       	mov	r18, r22
    4f10:	28 7f       	andi	r18, 0xF8	; 248
#else  
	uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
#endif
	lcd_write_bits( p, XBITMASK(y%8) ) ;
    4f12:	67 70       	andi	r22, 0x07	; 7
    4f14:	e6 2f       	mov	r30, r22
    4f16:	f0 e0       	ldi	r31, 0x00	; 0
    4f18:	e1 5b       	subi	r30, 0xB1	; 177
    4f1a:	f0 4f       	sbci	r31, 0xF0	; 240
    4f1c:	64 91       	lpm	r22, Z
}

void lcd_plot(uint8_t x,uint8_t y)
{
#if (DISPLAY_W==128)
  uint8_t *p  = &displayBuf[ (y & 0xF8) * 16 + x ];
    4f1e:	90 e0       	ldi	r25, 0x00	; 0
    4f20:	30 e1       	ldi	r19, 0x10	; 16
    4f22:	23 9f       	mul	r18, r19
    4f24:	80 0d       	add	r24, r0
    4f26:	91 1d       	adc	r25, r1
    4f28:	11 24       	eor	r1, r1
#else  
	uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
#endif
	lcd_write_bits( p, XBITMASK(y%8) ) ;
    4f2a:	82 53       	subi	r24, 0x32	; 50
    4f2c:	99 4f       	sbci	r25, 0xF9	; 249
    4f2e:	de cf       	rjmp	.-68     	; 0x4eec <_Z14lcd_write_bitsPhh>

00004f30 <_Z13lcd_hlineStiphhah>:
}

void lcd_hlineStip(unsigned char x,unsigned char y, signed char w,uint8_t pat)
{
    4f30:	ef 92       	push	r14
    4f32:	ff 92       	push	r15
    4f34:	0f 93       	push	r16
    4f36:	1f 93       	push	r17
    4f38:	cf 93       	push	r28
    4f3a:	df 93       	push	r29
    4f3c:	f4 2e       	mov	r15, r20
  if(w<0) {x+=w; w=-w;}
    4f3e:	47 ff       	sbrs	r20, 7
    4f40:	02 c0       	rjmp	.+4      	; 0x4f46 <_Z13lcd_hlineStiphhah+0x16>
    4f42:	84 0f       	add	r24, r20
    4f44:	f1 94       	neg	r15
#if (DISPLAY_W==128)
  uint8_t *p  = &displayBuf[ (y & 0xF8) * 16 + x ];
    4f46:	96 2f       	mov	r25, r22
    4f48:	98 7f       	andi	r25, 0xF8	; 248
    4f4a:	c8 2f       	mov	r28, r24
    4f4c:	d0 e0       	ldi	r29, 0x00	; 0
    4f4e:	80 e1       	ldi	r24, 0x10	; 16
    4f50:	98 9f       	mul	r25, r24
    4f52:	c0 0d       	add	r28, r0
    4f54:	d1 1d       	adc	r29, r1
    4f56:	11 24       	eor	r1, r1
    4f58:	c2 53       	subi	r28, 0x32	; 50
    4f5a:	d9 4f       	sbci	r29, 0xF9	; 249
#else  
	uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
#endif
  uint8_t msk = XBITMASK(y%8);
    4f5c:	67 70       	andi	r22, 0x07	; 7
    4f5e:	e6 2f       	mov	r30, r22
    4f60:	f0 e0       	ldi	r31, 0x00	; 0
    4f62:	e1 5b       	subi	r30, 0xB1	; 177
    4f64:	f0 4f       	sbci	r31, 0xF0	; 240
    4f66:	e4 90       	lpm	r14, Z
  while(w){
    4f68:	ff 20       	and	r15, r15
    4f6a:	b1 f0       	breq	.+44     	; 0x4f98 <_Z13lcd_hlineStiphhah+0x68>
    if ( p>=DISPLAY_END)
    4f6c:	8a e0       	ldi	r24, 0x0A	; 10
    4f6e:	ce 3c       	cpi	r28, 0xCE	; 206
    4f70:	d8 07       	cpc	r29, r24
    4f72:	90 f4       	brcc	.+36     	; 0x4f98 <_Z13lcd_hlineStiphhah+0x68>
    4f74:	02 2f       	mov	r16, r18
    4f76:	10 e0       	ldi	r17, 0x00	; 0
    {
      break ;			
    }
    if(pat&1) {
    4f78:	20 ff       	sbrs	r18, 0
    4f7a:	08 c0       	rjmp	.+16     	; 0x4f8c <_Z13lcd_hlineStiphhah+0x5c>
			lcd_write_bits( p, msk ) ;
    4f7c:	6e 2d       	mov	r22, r14
    4f7e:	ce 01       	movw	r24, r28
    4f80:	b5 df       	rcall	.-150    	; 0x4eec <_Z14lcd_write_bitsPhh>
      pat = (pat >> 1) | 0x80;
    4f82:	15 95       	asr	r17
    4f84:	07 95       	ror	r16
    4f86:	20 2f       	mov	r18, r16
    4f88:	20 68       	ori	r18, 0x80	; 128
    4f8a:	03 c0       	rjmp	.+6      	; 0x4f92 <_Z13lcd_hlineStiphhah+0x62>
    }else{
      pat = pat >> 1;
    4f8c:	15 95       	asr	r17
    4f8e:	07 95       	ror	r16
    4f90:	20 2f       	mov	r18, r16
    4f92:	fa 94       	dec	r15
    }
    w--;
    p++;
    4f94:	21 96       	adiw	r28, 0x01	; 1
    4f96:	e8 cf       	rjmp	.-48     	; 0x4f68 <_Z13lcd_hlineStiphhah+0x38>
  }
}
    4f98:	df 91       	pop	r29
    4f9a:	cf 91       	pop	r28
    4f9c:	1f 91       	pop	r17
    4f9e:	0f 91       	pop	r16
    4fa0:	ff 90       	pop	r15
    4fa2:	ef 90       	pop	r14
    4fa4:	08 95       	ret

00004fa6 <_Z9lcd_hlinehha>:

void lcd_hline(uint8_t x,uint8_t y, int8_t w)
{
  lcd_hlineStip(x,y,w,0xff);
    4fa6:	2f ef       	ldi	r18, 0xFF	; 255
    4fa8:	c3 cf       	rjmp	.-122    	; 0x4f30 <_Z13lcd_hlineStiphhah>

00004faa <_Z9lcd_vlinehha>:
}

void lcd_vline(uint8_t x,uint8_t y, int8_t h)
{
    4faa:	1f 93       	push	r17
    4fac:	cf 93       	push	r28
    4fae:	df 93       	push	r29
    4fb0:	14 2f       	mov	r17, r20
//    while ((y+h)>=DISPLAY_H) h--;
  if (h<0) { y+=h; h=-h; }
    4fb2:	47 ff       	sbrs	r20, 7
    4fb4:	02 c0       	rjmp	.+4      	; 0x4fba <_Z9lcd_vlinehha+0x10>
    4fb6:	64 0f       	add	r22, r20
    4fb8:	11 95       	neg	r17
#if (DISPLAY_W==128)
  uint8_t *p  = &displayBuf[ (y & 0xF8) * 16 + x ];
    4fba:	96 2f       	mov	r25, r22
    4fbc:	98 7f       	andi	r25, 0xF8	; 248
    4fbe:	c8 2f       	mov	r28, r24
    4fc0:	d0 e0       	ldi	r29, 0x00	; 0
    4fc2:	80 e1       	ldi	r24, 0x10	; 16
    4fc4:	98 9f       	mul	r25, r24
    4fc6:	c0 0d       	add	r28, r0
    4fc8:	d1 1d       	adc	r29, r1
    4fca:	11 24       	eor	r1, r1
    4fcc:	c2 53       	subi	r28, 0x32	; 50
    4fce:	d9 4f       	sbci	r29, 0xF9	; 249
#else  
	uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
#endif
  y &= 0x07 ;
    4fd0:	86 2f       	mov	r24, r22
    4fd2:	87 70       	andi	r24, 0x07	; 7
	if ( y )
    4fd4:	99 f0       	breq	.+38     	; 0x4ffc <_Z9lcd_vlinehha+0x52>
	{
    uint8_t msk = ~(XBITMASK(y)-1) ;
    4fd6:	e8 2f       	mov	r30, r24
    4fd8:	f0 e0       	ldi	r31, 0x00	; 0
    4fda:	e1 5b       	subi	r30, 0xB1	; 177
    4fdc:	f0 4f       	sbci	r31, 0xF0	; 240
    4fde:	64 91       	lpm	r22, Z
    4fe0:	61 95       	neg	r22
    h -= 8-y ;
    4fe2:	18 0f       	add	r17, r24
    4fe4:	18 50       	subi	r17, 0x08	; 8
    if (h < 0)
    4fe6:	17 ff       	sbrs	r17, 7
    4fe8:	0d c0       	rjmp	.+26     	; 0x5004 <_Z9lcd_vlinehha+0x5a>
      msk -= ~(XBITMASK(8+h)-1) ;
    4fea:	e1 2f       	mov	r30, r17
    4fec:	ff 27       	eor	r31, r31
    4fee:	e7 fd       	sbrc	r30, 7
    4ff0:	f0 95       	com	r31
    4ff2:	e9 5a       	subi	r30, 0xA9	; 169
    4ff4:	f0 4f       	sbci	r31, 0xF0	; 240
    4ff6:	e4 91       	lpm	r30, Z
    4ff8:	6e 0f       	add	r22, r30
    4ffa:	04 c0       	rjmp	.+8      	; 0x5004 <_Z9lcd_vlinehha+0x5a>
		lcd_write_bits( p, msk ) ;
    p += DISPLAY_W ;
	}
    
  while( h >= 8 )
    4ffc:	18 30       	cpi	r17, 0x08	; 8
    4ffe:	3c f0       	brlt	.+14     	; 0x500e <_Z9lcd_vlinehha+0x64>
    5000:	18 50       	subi	r17, 0x08	; 8
	{
		h -= 8 ;
		lcd_write_bits( p, 0xFF ) ;
    5002:	6f ef       	ldi	r22, 0xFF	; 255
    5004:	ce 01       	movw	r24, r28
    5006:	72 df       	rcall	.-284    	; 0x4eec <_Z14lcd_write_bitsPhh>
    p += DISPLAY_W ;
    5008:	c0 58       	subi	r28, 0x80	; 128
    500a:	df 4f       	sbci	r29, 0xFF	; 255
    500c:	f7 cf       	rjmp	.-18     	; 0x4ffc <_Z9lcd_vlinehha+0x52>
  }
    
	if ( h > 0 )
    500e:	11 16       	cp	r1, r17
    5010:	54 f4       	brge	.+20     	; 0x5026 <_Z9lcd_vlinehha+0x7c>
	{
  	lcd_write_bits( p, (XBITMASK(h)-1) ) ;
    5012:	e1 2f       	mov	r30, r17
    5014:	ff 27       	eor	r31, r31
    5016:	e7 fd       	sbrc	r30, 7
    5018:	f0 95       	com	r31
    501a:	e1 5b       	subi	r30, 0xB1	; 177
    501c:	f0 4f       	sbci	r31, 0xF0	; 240
    501e:	64 91       	lpm	r22, Z
    5020:	61 50       	subi	r22, 0x01	; 1
    5022:	ce 01       	movw	r24, r28
    5024:	63 df       	rcall	.-314    	; 0x4eec <_Z14lcd_write_bitsPhh>
	}
	asm("") ;
}
    5026:	df 91       	pop	r29
    5028:	cf 91       	pop	r28
    502a:	1f 91       	pop	r17
    502c:	08 95       	ret

0000502e <_Z14lcd_outdezNAtthhlha>:
	lcd_outdezNAtt( x, y, value, attr + LEADING0, 2 ) ;
}

#define PREC(n) ((n&0x20) ? ((n&0x10) ? 2 : 1) : 0)
uint8_t lcd_outdezNAtt( uint8_t x, uint8_t y, int32_t val, uint8_t mode, int8_t len )
{
    502e:	3f 92       	push	r3
    5030:	4f 92       	push	r4
    5032:	5f 92       	push	r5
    5034:	6f 92       	push	r6
    5036:	7f 92       	push	r7
    5038:	8f 92       	push	r8
    503a:	9f 92       	push	r9
    503c:	af 92       	push	r10
    503e:	bf 92       	push	r11
    5040:	cf 92       	push	r12
    5042:	df 92       	push	r13
    5044:	ef 92       	push	r14
    5046:	ff 92       	push	r15
    5048:	0f 93       	push	r16
    504a:	1f 93       	push	r17
    504c:	cf 93       	push	r28
    504e:	df 93       	push	r29
    5050:	18 2f       	mov	r17, r24
    5052:	b6 2e       	mov	r11, r22
    5054:	80 2f       	mov	r24, r16
  uint8_t fw = FWNUM;
  uint8_t prec = PREC(mode);
    5056:	05 ff       	sbrs	r16, 5
    5058:	04 c0       	rjmp	.+8      	; 0x5062 <_Z14lcd_outdezNAtthhlha+0x34>
    505a:	04 ff       	sbrs	r16, 4
    505c:	04 c0       	rjmp	.+8      	; 0x5066 <_Z14lcd_outdezNAtthhlha+0x38>
    505e:	02 e0       	ldi	r16, 0x02	; 2
    5060:	03 c0       	rjmp	.+6      	; 0x5068 <_Z14lcd_outdezNAtthhlha+0x3a>
    5062:	00 e0       	ldi	r16, 0x00	; 0
    5064:	01 c0       	rjmp	.+2      	; 0x5068 <_Z14lcd_outdezNAtthhlha+0x3a>
    5066:	01 e0       	ldi	r16, 0x01	; 1
  uint8_t ln = 2;
  char c;
  uint8_t xinc ;
	uint8_t fullwidth = 0 ;

	mode &= ~NO_UNIT ;
    5068:	98 2f       	mov	r25, r24
    506a:	9f 77       	andi	r25, 0x7F	; 127
    506c:	c9 2e       	mov	r12, r25
	if ( len < 0 )
    506e:	e7 fe       	sbrs	r14, 7
    5070:	04 c0       	rjmp	.+8      	; 0x507a <_Z14lcd_outdezNAtthhlha+0x4c>
	{
		fullwidth = 1 ;
		len = -len ;		
    5072:	e1 94       	neg	r14
	uint8_t fullwidth = 0 ;

	mode &= ~NO_UNIT ;
	if ( len < 0 )
	{
		fullwidth = 1 ;
    5074:	66 24       	eor	r6, r6
    5076:	63 94       	inc	r6
    5078:	01 c0       	rjmp	.+2      	; 0x507c <_Z14lcd_outdezNAtthhlha+0x4e>
	uint8_t negative = 0 ;
  uint8_t xn = 0;
  uint8_t ln = 2;
  char c;
  uint8_t xinc ;
	uint8_t fullwidth = 0 ;
    507a:	61 2c       	mov	r6, r1
	{
		fullwidth = 1 ;
		len = -len ;		
	}

  if ( val < 0 )
    507c:	57 ff       	sbrs	r21, 7
    507e:	0a c0       	rjmp	.+20     	; 0x5094 <_Z14lcd_outdezNAtthhlha+0x66>
	{
		val = -val ;
    5080:	50 95       	com	r21
    5082:	40 95       	com	r20
    5084:	30 95       	com	r19
    5086:	21 95       	neg	r18
    5088:	3f 4f       	sbci	r19, 0xFF	; 255
    508a:	4f 4f       	sbci	r20, 0xFF	; 255
    508c:	5f 4f       	sbci	r21, 0xFF	; 255
		negative = 1 ;
    508e:	77 24       	eor	r7, r7
    5090:	73 94       	inc	r7
    5092:	01 c0       	rjmp	.+2      	; 0x5096 <_Z14lcd_outdezNAtthhlha+0x68>
#define PREC(n) ((n&0x20) ? ((n&0x10) ? 2 : 1) : 0)
uint8_t lcd_outdezNAtt( uint8_t x, uint8_t y, int32_t val, uint8_t mode, int8_t len )
{
  uint8_t fw = FWNUM;
  uint8_t prec = PREC(mode);
	uint8_t negative = 0 ;
    5094:	71 2c       	mov	r7, r1
	{
		val = -val ;
		negative = 1 ;
	}

  if (mode & DBLSIZE)
    5096:	82 ff       	sbrs	r24, 2
    5098:	06 c0       	rjmp	.+12     	; 0x50a6 <_Z14lcd_outdezNAtthhlha+0x78>
  {
    fw += FWNUM ;
    xinc = 2*FWNUM;
    lcd_lastPos = 2*FW;
    509a:	9c e0       	ldi	r25, 0x0C	; 12
    509c:	90 93 ce 0a 	sts	0x0ACE, r25
		negative = 1 ;
	}

  if (mode & DBLSIZE)
  {
    fw += FWNUM ;
    50a0:	ea e0       	ldi	r30, 0x0A	; 10
    50a2:	de 2e       	mov	r13, r30
    50a4:	05 c0       	rjmp	.+10     	; 0x50b0 <_Z14lcd_outdezNAtthhlha+0x82>
    lcd_lastPos = 2*FW;
  }
  else
  {
    xinc = FWNUM ;
    lcd_lastPos = FW;
    50a6:	96 e0       	ldi	r25, 0x06	; 6
    50a8:	90 93 ce 0a 	sts	0x0ACE, r25
}

#define PREC(n) ((n&0x20) ? ((n&0x10) ? 2 : 1) : 0)
uint8_t lcd_outdezNAtt( uint8_t x, uint8_t y, int32_t val, uint8_t mode, int8_t len )
{
  uint8_t fw = FWNUM;
    50ac:	75 e0       	ldi	r23, 0x05	; 5
    50ae:	d7 2e       	mov	r13, r23
  {
    xinc = FWNUM ;
    lcd_lastPos = FW;
  }

  if (mode & LEFT) {
    50b0:	86 ff       	sbrs	r24, 6
    50b2:	28 c0       	rjmp	.+80     	; 0x5104 <_Z14lcd_outdezNAtthhlha+0xd6>
//    if (val >= 10000)
//      x += fw;
    if(negative)
    50b4:	71 10       	cpse	r7, r1
    {
      x += fw;
    50b6:	1d 0d       	add	r17, r13
    }
    if (val >= 1000)
    50b8:	28 3e       	cpi	r18, 0xE8	; 232
    50ba:	83 e0       	ldi	r24, 0x03	; 3
    50bc:	38 07       	cpc	r19, r24
    50be:	41 05       	cpc	r20, r1
    50c0:	51 05       	cpc	r21, r1
    50c2:	14 f0       	brlt	.+4      	; 0x50c8 <_Z14lcd_outdezNAtthhlha+0x9a>
      x += fw;
    50c4:	1d 0d       	add	r17, r13
    50c6:	05 c0       	rjmp	.+10     	; 0x50d2 <_Z14lcd_outdezNAtthhlha+0xa4>
    if (val >= 100)
    50c8:	24 36       	cpi	r18, 0x64	; 100
    50ca:	31 05       	cpc	r19, r1
    50cc:	41 05       	cpc	r20, r1
    50ce:	51 05       	cpc	r21, r1
    50d0:	14 f0       	brlt	.+4      	; 0x50d6 <_Z14lcd_outdezNAtthhlha+0xa8>
      x += fw;
    50d2:	1d 0d       	add	r17, r13
    50d4:	05 c0       	rjmp	.+10     	; 0x50e0 <_Z14lcd_outdezNAtthhlha+0xb2>
    if (val >= 10)
    50d6:	2a 30       	cpi	r18, 0x0A	; 10
    50d8:	31 05       	cpc	r19, r1
    50da:	41 05       	cpc	r20, r1
    50dc:	51 05       	cpc	r21, r1
    50de:	0c f0       	brlt	.+2      	; 0x50e2 <_Z14lcd_outdezNAtthhlha+0xb4>
      x += fw;
    50e0:	1d 0d       	add	r17, r13
    if ( prec )
    50e2:	00 23       	and	r16, r16
    50e4:	81 f0       	breq	.+32     	; 0x5106 <_Z14lcd_outdezNAtthhlha+0xd8>
    {
      if ( prec == 2 )
    50e6:	02 30       	cpi	r16, 0x02	; 2
    50e8:	31 f4       	brne	.+12     	; 0x50f6 <_Z14lcd_outdezNAtthhlha+0xc8>
      {
        if ( val < 100 )
    50ea:	24 36       	cpi	r18, 0x64	; 100
    50ec:	31 05       	cpc	r19, r1
    50ee:	41 05       	cpc	r20, r1
    50f0:	51 05       	cpc	r21, r1
    50f2:	4c f4       	brge	.+18     	; 0x5106 <_Z14lcd_outdezNAtthhlha+0xd8>
        {
          x += fw;
    50f4:	1d 0d       	add	r17, r13
        }
      }
      if ( val < 10 )
    50f6:	2a 30       	cpi	r18, 0x0A	; 10
    50f8:	31 05       	cpc	r19, r1
    50fa:	41 05       	cpc	r20, r1
    50fc:	51 05       	cpc	r21, r1
    50fe:	1c f4       	brge	.+6      	; 0x5106 <_Z14lcd_outdezNAtthhlha+0xd8>
      {
        x+= fw;
    5100:	1d 0d       	add	r17, r13
    5102:	01 c0       	rjmp	.+2      	; 0x5106 <_Z14lcd_outdezNAtthhlha+0xd8>
      }
    }
  }
  else
  {
    x -= xinc;
    5104:	1d 19       	sub	r17, r13
  }
  lcd_lastPos += x ;
    5106:	80 91 ce 0a 	lds	r24, 0x0ACE
    510a:	81 0f       	add	r24, r17
    510c:	80 93 ce 0a 	sts	0x0ACE, r24

  if ( prec == 2 )
    5110:	02 30       	cpi	r16, 0x02	; 2
    5112:	11 f4       	brne	.+4      	; 0x5118 <_Z14lcd_outdezNAtthhlha+0xea>
  {
    mode -= LEADING0;  // Can't have PREC2 and LEADING0
    5114:	90 ef       	ldi	r25, 0xF0	; 240
    5116:	c9 0e       	add	r12, r25
      {
        if ( prec == 2 )
        {
          if ( i > 1 )
          {
            prec = 0 ;
    5118:	88 24       	eor	r8, r8
    511a:	83 94       	inc	r8
    511c:	52 e0       	ldi	r21, 0x02	; 2
    511e:	95 2e       	mov	r9, r21
    5120:	a1 2c       	mov	r10, r1
  if ( prec == 2 )
  {
    mode -= LEADING0;  // Can't have PREC2 and LEADING0
  }

  for (uint8_t i=1; i<=len; i++)
    5122:	ff 24       	eor	r15, r15
    5124:	e7 fc       	sbrc	r14, 7
    5126:	f0 94       	com	r15
      else {
        x -= 2;
        if (mode & INVERS)
          lcd_vline(x+1, y, 7);
        else
          lcd_plot(x+1, y+6);
    5128:	66 e0       	ldi	r22, 0x06	; 6
    512a:	56 2e       	mov	r5, r22
    512c:	5b 0c       	add	r5, r11
  if ( prec == 2 )
  {
    mode -= LEADING0;  // Can't have PREC2 and LEADING0
  }

  for (uint8_t i=1; i<=len; i++)
    512e:	e8 2d       	mov	r30, r8
    5130:	f0 e0       	ldi	r31, 0x00	; 0
    5132:	ee 16       	cp	r14, r30
    5134:	ff 06       	cpc	r15, r31
    5136:	0c f4       	brge	.+2      	; 0x513a <_Z14lcd_outdezNAtthhlha+0x10c>
    5138:	5d c0       	rjmp	.+186    	; 0x51f4 <_Z14lcd_outdezNAtthhlha+0x1c6>
	{
		div_t qr ;
		qr = div( val, 10 ) ;
    513a:	6a e0       	ldi	r22, 0x0A	; 10
    513c:	70 e0       	ldi	r23, 0x00	; 0
    513e:	c9 01       	movw	r24, r18
    5140:	0e 94 ea 71 	call	0xe3d4	; 0xe3d4 <__divmodhi4>
    5144:	38 2e       	mov	r3, r24
    5146:	eb 01       	movw	r28, r22
    c = (qr.rem) + '0';
    5148:	40 e3       	ldi	r20, 0x30	; 48
    514a:	44 2e       	mov	r4, r20
    514c:	48 0e       	add	r4, r24
    lcd_putcAtt(x, y, c, mode);
    514e:	2c 2d       	mov	r18, r12
    5150:	44 2d       	mov	r20, r4
    5152:	6b 2d       	mov	r22, r11
    5154:	81 2f       	mov	r24, r17
    5156:	85 dd       	rcall	.-1270   	; 0x4c62 <_Z11lcd_putcAtthhch>
    if (prec==i) {
    5158:	08 11       	cpse	r16, r8
    515a:	2f c0       	rjmp	.+94     	; 0x51ba <_Z14lcd_outdezNAtthhlha+0x18c>
      if (mode & DBLSIZE) {
    515c:	c2 fe       	sbrs	r12, 2
    515e:	1a c0       	rjmp	.+52     	; 0x5194 <_Z14lcd_outdezNAtthhlha+0x166>
        xn = x;
        if( c<='3' && c>='1') ln++;
    5160:	8f ef       	ldi	r24, 0xFF	; 255
    5162:	83 0d       	add	r24, r3
    5164:	83 30       	cpi	r24, 0x03	; 3
    5166:	08 f4       	brcc	.+2      	; 0x516a <_Z14lcd_outdezNAtthhlha+0x13c>
    5168:	93 94       	inc	r9
        uint8_t tn = (qr.quot) % 10;
    516a:	ce 01       	movw	r24, r28
    516c:	6a e0       	ldi	r22, 0x0A	; 10
    516e:	70 e0       	ldi	r23, 0x00	; 0
    5170:	0e 94 ea 71 	call	0xe3d4	; 0xe3d4 <__divmodhi4>
        if(tn==2 || tn==4) {
    5174:	82 30       	cpi	r24, 0x02	; 2
    5176:	11 f0       	breq	.+4      	; 0x517c <_Z14lcd_outdezNAtthhlha+0x14e>
    5178:	84 30       	cpi	r24, 0x04	; 4
    517a:	d9 f4       	brne	.+54     	; 0x51b2 <_Z14lcd_outdezNAtthhlha+0x184>
          if (c=='4') {
    517c:	84 e3       	ldi	r24, 0x34	; 52
    517e:	48 12       	cpse	r4, r24
    5180:	04 c0       	rjmp	.+8      	; 0x518a <_Z14lcd_outdezNAtthhlha+0x15c>
            xn++;
    5182:	aa 24       	eor	r10, r10
    5184:	a3 94       	inc	r10
    5186:	a1 0e       	add	r10, r17
    5188:	15 c0       	rjmp	.+42     	; 0x51b4 <_Z14lcd_outdezNAtthhlha+0x186>
          }
          else {
            xn--; ln++;
    518a:	aa 24       	eor	r10, r10
    518c:	aa 94       	dec	r10
    518e:	a1 0e       	add	r10, r17
    5190:	93 94       	inc	r9
    5192:	10 c0       	rjmp	.+32     	; 0x51b4 <_Z14lcd_outdezNAtthhlha+0x186>
          }
        }
      }
      else {
        x -= 2;
    5194:	3e ef       	ldi	r19, 0xFE	; 254
    5196:	43 2e       	mov	r4, r19
    5198:	41 0e       	add	r4, r17
    519a:	8f ef       	ldi	r24, 0xFF	; 255
    519c:	81 0f       	add	r24, r17
        if (mode & INVERS)
    519e:	c0 fe       	sbrs	r12, 0
    51a0:	04 c0       	rjmp	.+8      	; 0x51aa <_Z14lcd_outdezNAtthhlha+0x17c>
          lcd_vline(x+1, y, 7);
    51a2:	47 e0       	ldi	r20, 0x07	; 7
    51a4:	6b 2d       	mov	r22, r11
    51a6:	01 df       	rcall	.-510    	; 0x4faa <_Z9lcd_vlinehha>
    51a8:	02 c0       	rjmp	.+4      	; 0x51ae <_Z14lcd_outdezNAtthhlha+0x180>
        else
          lcd_plot(x+1, y+6);
    51aa:	65 2d       	mov	r22, r5
    51ac:	b0 de       	rcall	.-672    	; 0x4f0e <_Z8lcd_plothh>
            xn--; ln++;
          }
        }
      }
      else {
        x -= 2;
    51ae:	14 2d       	mov	r17, r4
    51b0:	01 c0       	rjmp	.+2      	; 0x51b4 <_Z14lcd_outdezNAtthhlha+0x186>
    51b2:	a1 2e       	mov	r10, r17
        if (mode & INVERS)
          lcd_vline(x+1, y, 7);
        else
          lcd_plot(x+1, y+6);
      }
      if (qr.quot)
    51b4:	20 97       	sbiw	r28, 0x00	; 0
    51b6:	09 f0       	breq	.+2      	; 0x51ba <_Z14lcd_outdezNAtthhlha+0x18c>
        prec = 0;
    51b8:	00 e0       	ldi	r16, 0x00	; 0
    }
    val = qr.quot ;
    51ba:	9e 01       	movw	r18, r28
    51bc:	44 27       	eor	r20, r20
    51be:	37 fd       	sbrc	r19, 7
    51c0:	40 95       	com	r20
    51c2:	54 2f       	mov	r21, r20
    if (!val)
    51c4:	21 15       	cp	r18, r1
    51c6:	31 05       	cpc	r19, r1
    51c8:	41 05       	cpc	r20, r1
    51ca:	51 05       	cpc	r21, r1
    51cc:	81 f4       	brne	.+32     	; 0x51ee <_Z14lcd_outdezNAtthhlha+0x1c0>
    {
      if (prec)
    51ce:	00 23       	and	r16, r16
    51d0:	31 f0       	breq	.+12     	; 0x51de <_Z14lcd_outdezNAtthhlha+0x1b0>
      {
        if ( prec == 2 )
    51d2:	02 30       	cpi	r16, 0x02	; 2
    51d4:	59 f4       	brne	.+22     	; 0x51ec <_Z14lcd_outdezNAtthhlha+0x1be>
        {
          if ( i > 1 )
    51d6:	91 e0       	ldi	r25, 0x01	; 1
    51d8:	98 15       	cp	r25, r8
    51da:	40 f0       	brcs	.+16     	; 0x51ec <_Z14lcd_outdezNAtthhlha+0x1be>
    51dc:	08 c0       	rjmp	.+16     	; 0x51ee <_Z14lcd_outdezNAtthhlha+0x1c0>
        else
        {
          prec = 0 ;
        }
      }
      else if (mode & LEADING0)
    51de:	c4 fe       	sbrs	r12, 4
    51e0:	09 c0       	rjmp	.+18     	; 0x51f4 <_Z14lcd_outdezNAtthhlha+0x1c6>
			{
				if ( fullwidth == 0 )
    51e2:	61 10       	cpse	r6, r1
    51e4:	04 c0       	rjmp	.+8      	; 0x51ee <_Z14lcd_outdezNAtthhlha+0x1c0>
				{
        	mode -= LEADING0;
    51e6:	80 ef       	ldi	r24, 0xF0	; 240
    51e8:	c8 0e       	add	r12, r24
    51ea:	01 c0       	rjmp	.+2      	; 0x51ee <_Z14lcd_outdezNAtthhlha+0x1c0>
      {
        if ( prec == 2 )
        {
          if ( i > 1 )
          {
            prec = 0 ;
    51ec:	00 e0       	ldi	r16, 0x00	; 0
				}
			}
      else
        break;
    }
    x-=fw;
    51ee:	1d 19       	sub	r17, r13
  if ( prec == 2 )
  {
    mode -= LEADING0;  // Can't have PREC2 and LEADING0
  }

  for (uint8_t i=1; i<=len; i++)
    51f0:	83 94       	inc	r8
    51f2:	9d cf       	rjmp	.-198    	; 0x512e <_Z14lcd_outdezNAtthhlha+0x100>
      else
        break;
    }
    x-=fw;
  }
  if (xn) {
    51f4:	aa 20       	and	r10, r10
    51f6:	51 f0       	breq	.+20     	; 0x520c <_Z14lcd_outdezNAtthhlha+0x1de>
    lcd_hline(xn, y+2*FH-4, ln);
    51f8:	49 2d       	mov	r20, r9
    51fa:	6c e0       	ldi	r22, 0x0C	; 12
    51fc:	6b 0d       	add	r22, r11
    51fe:	8a 2d       	mov	r24, r10
    5200:	d2 de       	rcall	.-604    	; 0x4fa6 <_Z9lcd_hlinehha>
    lcd_hline(xn, y+2*FH-3, ln);
    5202:	49 2d       	mov	r20, r9
    5204:	6d e0       	ldi	r22, 0x0D	; 13
    5206:	6b 0d       	add	r22, r11
    5208:	8a 2d       	mov	r24, r10
    520a:	cd de       	rcall	.-614    	; 0x4fa6 <_Z9lcd_hlinehha>
  }
  if(negative) lcd_putcAtt(x-fw,y,'-',mode);
    520c:	77 20       	and	r7, r7
    520e:	31 f0       	breq	.+12     	; 0x521c <_Z14lcd_outdezNAtthhlha+0x1ee>
    5210:	2c 2d       	mov	r18, r12
    5212:	4d e2       	ldi	r20, 0x2D	; 45
    5214:	6b 2d       	mov	r22, r11
    5216:	81 2f       	mov	r24, r17
    5218:	8d 19       	sub	r24, r13
    521a:	23 dd       	rcall	.-1466   	; 0x4c62 <_Z11lcd_putcAtthhch>
	asm("") ;
	return 0 ;		// Stops compiler creating two sets of POPS, saves flash
}
    521c:	80 e0       	ldi	r24, 0x00	; 0
    521e:	df 91       	pop	r29
    5220:	cf 91       	pop	r28
    5222:	1f 91       	pop	r17
    5224:	0f 91       	pop	r16
    5226:	ff 90       	pop	r15
    5228:	ef 90       	pop	r14
    522a:	df 90       	pop	r13
    522c:	cf 90       	pop	r12
    522e:	bf 90       	pop	r11
    5230:	af 90       	pop	r10
    5232:	9f 90       	pop	r9
    5234:	8f 90       	pop	r8
    5236:	7f 90       	pop	r7
    5238:	6f 90       	pop	r6
    523a:	5f 90       	pop	r5
    523c:	4f 90       	pop	r4
    523e:	3f 90       	pop	r3
    5240:	08 95       	ret

00005242 <_Z13lcd_outdezAtthhih>:
{
  lcd_outdezAtt(x,y,val,0);
}

void lcd_outdezAtt( uint8_t x, uint8_t y, int16_t val, uint8_t mode )
{
    5242:	ef 92       	push	r14
    5244:	0f 93       	push	r16
    5246:	02 2f       	mov	r16, r18
  lcd_outdezNAtt( x,y,val,mode,5);
    5248:	9a 01       	movw	r18, r20
    524a:	44 27       	eor	r20, r20
    524c:	37 fd       	sbrc	r19, 7
    524e:	40 95       	com	r20
    5250:	54 2f       	mov	r21, r20
    5252:	f5 e0       	ldi	r31, 0x05	; 5
    5254:	ef 2e       	mov	r14, r31
    5256:	eb de       	rcall	.-554    	; 0x502e <_Z14lcd_outdezNAtthhlha>
}
    5258:	0f 91       	pop	r16
    525a:	ef 90       	pop	r14
    525c:	08 95       	ret

0000525e <_Z9putsVoltshhhh>:
	x += (att&DBLSIZE) ? FWNUM*6-4 : FW*3-3;
	lcd_2_digits( x, y, (uint16_t)qr.rem, att2 ) ;
//	lcd_outdezNAtt(x, y, (uint16_t)qr.rem, LEADING0|att2,2);
}

void putsVolts(uint8_t x,uint8_t y, uint8_t volts, uint8_t att){
    525e:	cf 93       	push	r28
    5260:	df 93       	push	r29
    5262:	d6 2f       	mov	r29, r22
    5264:	c2 2f       	mov	r28, r18

	lcd_outdezAtt(x, y, volts, att|PREC1);
    5266:	20 62       	ori	r18, 0x20	; 32
    5268:	50 e0       	ldi	r21, 0x00	; 0
    526a:	eb df       	rcall	.-42     	; 0x5242 <_Z13lcd_outdezAtthhih>
	if(!(att&NO_UNIT)) lcd_putcAtt(lcd_lastPos, y, 'v', att);
    526c:	c7 fd       	sbrc	r28, 7
    526e:	08 c0       	rjmp	.+16     	; 0x5280 <_Z9putsVoltshhhh+0x22>
    5270:	2c 2f       	mov	r18, r28
    5272:	46 e7       	ldi	r20, 0x76	; 118
    5274:	6d 2f       	mov	r22, r29
    5276:	80 91 ce 0a 	lds	r24, 0x0ACE
}
    527a:	df 91       	pop	r29
    527c:	cf 91       	pop	r28
}

void putsVolts(uint8_t x,uint8_t y, uint8_t volts, uint8_t att){

	lcd_outdezAtt(x, y, volts, att|PREC1);
	if(!(att&NO_UNIT)) lcd_putcAtt(lcd_lastPos, y, 'v', att);
    527e:	f1 cc       	rjmp	.-1566   	; 0x4c62 <_Z11lcd_putcAtthhch>
}
    5280:	df 91       	pop	r29
    5282:	cf 91       	pop	r28
    5284:	08 95       	ret

00005286 <_Z8putsVBathhh>:


void putsVBat(uint8_t x,uint8_t y,uint8_t att)
{
    5286:	24 2f       	mov	r18, r20
    //att |= g_vbat100mV < g_eeGeneral.vBatWarn ? BLINK : 0;
	putsVolts(x, y, g_vbat100mV, att);
    5288:	40 91 6c 01 	lds	r20, 0x016C
    528c:	e8 cf       	rjmp	.-48     	; 0x525e <_Z9putsVoltshhhh>

0000528e <_Z10lcd_outdezhhi>:
    val>>=4;
  }
}
void lcd_outdez( uint8_t x, uint8_t y, int16_t val)
{
  lcd_outdezAtt(x,y,val,0);
    528e:	20 e0       	ldi	r18, 0x00	; 0
    5290:	d8 cf       	rjmp	.-80     	; 0x5242 <_Z13lcd_outdezAtthhih>

00005292 <_Z12lcd_2_digitshhhh>:
{
  lcd_outdezNAtt( x,y,val,mode,5);
}

void lcd_2_digits( uint8_t x, uint8_t y, uint8_t value, uint8_t attr )
{
    5292:	ef 92       	push	r14
    5294:	0f 93       	push	r16
    5296:	02 2f       	mov	r16, r18
	lcd_outdezNAtt( x, y, value, attr + LEADING0, 2 ) ;
    5298:	00 5f       	subi	r16, 0xF0	; 240
    529a:	24 2f       	mov	r18, r20
    529c:	30 e0       	ldi	r19, 0x00	; 0
    529e:	40 e0       	ldi	r20, 0x00	; 0
    52a0:	50 e0       	ldi	r21, 0x00	; 0
    52a2:	a2 e0       	ldi	r26, 0x02	; 2
    52a4:	ea 2e       	mov	r14, r26
    52a6:	c3 de       	rcall	.-634    	; 0x502e <_Z14lcd_outdezNAtthhlha>
}
    52a8:	0f 91       	pop	r16
    52aa:	ef 90       	pop	r14
    52ac:	08 95       	ret

000052ae <_Z8putsTimehhihh>:
  memset(displayBuf, 0, sizeof(displayBuf));
}


void putsTime(uint8_t x,uint8_t y,int16_t tme,uint8_t att,uint8_t att2)
{
    52ae:	df 92       	push	r13
    52b0:	ef 92       	push	r14
    52b2:	ff 92       	push	r15
    52b4:	0f 93       	push	r16
    52b6:	1f 93       	push	r17
    52b8:	cf 93       	push	r28
    52ba:	df 93       	push	r29
    52bc:	18 2f       	mov	r17, r24
    52be:	f6 2e       	mov	r15, r22
    52c0:	ea 01       	movw	r28, r20
    52c2:	e2 2e       	mov	r14, r18
    52c4:	82 2f       	mov	r24, r18
    52c6:	84 70       	andi	r24, 0x04	; 4
    52c8:	d8 2e       	mov	r13, r24
	div_t qr ;

	if ( tme<0 )
    52ca:	57 ff       	sbrs	r21, 7
    52cc:	0f c0       	rjmp	.+30     	; 0x52ec <_Z8putsTimehhihh+0x3e>
	{
		lcd_putcAtt( x - ((att&DBLSIZE) ? FWNUM*6-2 : FWNUM*3),    y, '-',att);
    52ce:	88 23       	and	r24, r24
    52d0:	11 f0       	breq	.+4      	; 0x52d6 <_Z8putsTimehhihh+0x28>
    52d2:	8c e1       	ldi	r24, 0x1C	; 28
    52d4:	01 c0       	rjmp	.+2      	; 0x52d8 <_Z8putsTimehhihh+0x2a>
    52d6:	8f e0       	ldi	r24, 0x0F	; 15
    52d8:	2e 2d       	mov	r18, r14
    52da:	4d e2       	ldi	r20, 0x2D	; 45
    52dc:	6f 2d       	mov	r22, r15
    52de:	91 2f       	mov	r25, r17
    52e0:	98 1b       	sub	r25, r24
    52e2:	89 2f       	mov	r24, r25
    52e4:	be dc       	rcall	.-1668   	; 0x4c62 <_Z11lcd_putcAtthhch>
		tme = -tme;
    52e6:	d1 95       	neg	r29
    52e8:	c1 95       	neg	r28
    52ea:	d1 09       	sbc	r29, r1
	}

	lcd_putcAtt(x, y, ':',att&att2);
    52ec:	2e 2d       	mov	r18, r14
    52ee:	20 23       	and	r18, r16
    52f0:	4a e3       	ldi	r20, 0x3A	; 58
    52f2:	6f 2d       	mov	r22, r15
    52f4:	81 2f       	mov	r24, r17
    52f6:	b5 dc       	rcall	.-1686   	; 0x4c62 <_Z11lcd_putcAtthhch>
	qr = div( tme, 60 ) ;
    52f8:	6c e3       	ldi	r22, 0x3C	; 60
    52fa:	70 e0       	ldi	r23, 0x00	; 0
    52fc:	ce 01       	movw	r24, r28
    52fe:	0e 94 ea 71 	call	0xe3d4	; 0xe3d4 <__divmodhi4>
    5302:	46 2f       	mov	r20, r22
    5304:	c8 2f       	mov	r28, r24
	lcd_2_digits( x, y, (uint16_t)qr.quot, att ) ;
    5306:	2e 2d       	mov	r18, r14
    5308:	6f 2d       	mov	r22, r15
    530a:	81 2f       	mov	r24, r17
    530c:	c2 df       	rcall	.-124    	; 0x5292 <_Z12lcd_2_digitshhhh>
//	lcd_outdezNAtt(x/*+ ((att&DBLSIZE) ? 2 : 0)*/, y, (uint16_t)qr.quot, LEADING0|att,2);
	x += (att&DBLSIZE) ? FWNUM*6-4 : FW*3-3;
    530e:	dd 20       	and	r13, r13
    5310:	11 f0       	breq	.+4      	; 0x5316 <_Z8putsTimehhihh+0x68>
    5312:	8a e1       	ldi	r24, 0x1A	; 26
    5314:	01 c0       	rjmp	.+2      	; 0x5318 <_Z8putsTimehhihh+0x6a>
    5316:	8f e0       	ldi	r24, 0x0F	; 15
	lcd_2_digits( x, y, (uint16_t)qr.rem, att2 ) ;
    5318:	20 2f       	mov	r18, r16
    531a:	4c 2f       	mov	r20, r28
    531c:	6f 2d       	mov	r22, r15
    531e:	81 0f       	add	r24, r17
//	lcd_outdezNAtt(x, y, (uint16_t)qr.rem, LEADING0|att2,2);
}
    5320:	df 91       	pop	r29
    5322:	cf 91       	pop	r28
    5324:	1f 91       	pop	r17
    5326:	0f 91       	pop	r16
    5328:	ff 90       	pop	r15
    532a:	ef 90       	pop	r14
    532c:	df 90       	pop	r13
	lcd_putcAtt(x, y, ':',att&att2);
	qr = div( tme, 60 ) ;
	lcd_2_digits( x, y, (uint16_t)qr.quot, att ) ;
//	lcd_outdezNAtt(x/*+ ((att&DBLSIZE) ? 2 : 0)*/, y, (uint16_t)qr.quot, LEADING0|att,2);
	x += (att&DBLSIZE) ? FWNUM*6-4 : FW*3-3;
	lcd_2_digits( x, y, (uint16_t)qr.rem, att2 ) ;
    532e:	b1 cf       	rjmp	.-158    	; 0x5292 <_Z12lcd_2_digitshhhh>

00005330 <_Z8lcd_recthhhh>:
}

uint8_t plotType = PLOT_XOR ;

void lcd_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h )
{
    5330:	ff 92       	push	r15
    5332:	0f 93       	push	r16
    5334:	1f 93       	push	r17
    5336:	cf 93       	push	r28
    5338:	df 93       	push	r29
    533a:	18 2f       	mov	r17, r24
    533c:	c6 2f       	mov	r28, r22
    533e:	04 2f       	mov	r16, r20
    5340:	d2 2f       	mov	r29, r18
	uint8_t oldPlotType = plotType ;
    5342:	f0 90 cd 06 	lds	r15, 0x06CD
	plotType = PLOT_BLACK ;
    5346:	81 e0       	ldi	r24, 0x01	; 1
    5348:	80 93 cd 06 	sts	0x06CD, r24
  lcd_vline(x, y, h ) ;
    534c:	42 2f       	mov	r20, r18
    534e:	81 2f       	mov	r24, r17
    5350:	2c de       	rcall	.-936    	; 0x4faa <_Z9lcd_vlinehha>
	if ( w > 1 )
    5352:	02 30       	cpi	r16, 0x02	; 2
    5354:	30 f0       	brcs	.+12     	; 0x5362 <_Z8lcd_recthhhh+0x32>
	{
  	lcd_vline(x+w-1, y, h ) ;
    5356:	4d 2f       	mov	r20, r29
    5358:	6c 2f       	mov	r22, r28
    535a:	8f ef       	ldi	r24, 0xFF	; 255
    535c:	80 0f       	add	r24, r16
    535e:	81 0f       	add	r24, r17
    5360:	24 de       	rcall	.-952    	; 0x4faa <_Z9lcd_vlinehha>
	}
 	lcd_hline(x+1, y+h-1, w-2 ) ;
    5362:	02 50       	subi	r16, 0x02	; 2
    5364:	1f 5f       	subi	r17, 0xFF	; 255
    5366:	6f ef       	ldi	r22, 0xFF	; 255
    5368:	6c 0f       	add	r22, r28
    536a:	6d 0f       	add	r22, r29
    536c:	40 2f       	mov	r20, r16
    536e:	81 2f       	mov	r24, r17
    5370:	1a de       	rcall	.-972    	; 0x4fa6 <_Z9lcd_hlinehha>
 	lcd_hline(x+1, y, w-2 ) ;
    5372:	40 2f       	mov	r20, r16
    5374:	6c 2f       	mov	r22, r28
    5376:	81 2f       	mov	r24, r17
    5378:	16 de       	rcall	.-980    	; 0x4fa6 <_Z9lcd_hlinehha>
	plotType = oldPlotType ;
    537a:	f0 92 cd 06 	sts	0x06CD, r15
}
    537e:	df 91       	pop	r29
    5380:	cf 91       	pop	r28
    5382:	1f 91       	pop	r17
    5384:	0f 91       	pop	r16
    5386:	ff 90       	pop	r15
    5388:	08 95       	ret

0000538a <_Z8lcd_hbarhhhhh>:
	asm("") ;
	return 0 ;		// Stops compiler creating two sets of POPS, saves flash
}

void lcd_hbar( uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t percent )
{
    538a:	0f 93       	push	r16
    538c:	1f 93       	push	r17
    538e:	cf 93       	push	r28
    5390:	df 93       	push	r29
    5392:	18 2f       	mov	r17, r24
    5394:	c6 2f       	mov	r28, r22
    5396:	d2 2f       	mov	r29, r18
	uint8_t solid ;
	if ( percent > 100 )
	{
		percent = 100 ;
	}
	solid = (w-2) * percent / 100 ;
    5398:	e4 2f       	mov	r30, r20
    539a:	f0 e0       	ldi	r31, 0x00	; 0
    539c:	32 97       	sbiw	r30, 0x02	; 2
    539e:	05 36       	cpi	r16, 0x65	; 101
    53a0:	08 f0       	brcs	.+2      	; 0x53a4 <_Z8lcd_hbarhhhhh+0x1a>
    53a2:	04 e6       	ldi	r16, 0x64	; 100
    53a4:	0e 9f       	mul	r16, r30
    53a6:	c0 01       	movw	r24, r0
    53a8:	0f 9f       	mul	r16, r31
    53aa:	90 0d       	add	r25, r0
    53ac:	11 24       	eor	r1, r1
    53ae:	64 e6       	ldi	r22, 0x64	; 100
    53b0:	70 e0       	ldi	r23, 0x00	; 0
    53b2:	0e 94 ea 71 	call	0xe3d4	; 0xe3d4 <__divmodhi4>
    53b6:	06 2f       	mov	r16, r22
	lcd_rect( x, y, w, h ) ;
    53b8:	2d 2f       	mov	r18, r29
    53ba:	6c 2f       	mov	r22, r28
    53bc:	81 2f       	mov	r24, r17
    53be:	b8 df       	rcall	.-144    	; 0x5330 <_Z8lcd_recthhhh>

	if ( solid )
    53c0:	00 23       	and	r16, r16
    53c2:	61 f0       	breq	.+24     	; 0x53dc <_Z8lcd_hbarhhhhh+0x52>
	{
		w = y + h - 1 ;
    53c4:	d1 50       	subi	r29, 0x01	; 1
    53c6:	dc 0f       	add	r29, r28
		y += 1 ;
    53c8:	cf 5f       	subi	r28, 0xFF	; 255
		x += 1 ;
    53ca:	1f 5f       	subi	r17, 0xFF	; 255
		while ( y < w )
    53cc:	cd 17       	cp	r28, r29
    53ce:	30 f4       	brcc	.+12     	; 0x53dc <_Z8lcd_hbarhhhhh+0x52>
		{
 			lcd_hline(x, y, solid ) ;
    53d0:	40 2f       	mov	r20, r16
    53d2:	6c 2f       	mov	r22, r28
    53d4:	81 2f       	mov	r24, r17
    53d6:	e7 dd       	rcall	.-1074   	; 0x4fa6 <_Z9lcd_hlinehha>
			y += 1 ;			
    53d8:	cf 5f       	subi	r28, 0xFF	; 255
    53da:	f8 cf       	rjmp	.-16     	; 0x53cc <_Z8lcd_hbarhhhhh+0x42>
		}
	}
}
    53dc:	df 91       	pop	r29
    53de:	cf 91       	pop	r28
    53e0:	1f 91       	pop	r17
    53e2:	0f 91       	pop	r16
    53e4:	08 95       	ret

000053e6 <_Z10lcdSendCtlh>:


#ifndef LCD_2_CS
void lcdSendCtl(uint8_t val)
{
  PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_CS1);
    53e6:	a9 98       	cbi	0x15, 1	; 21
  PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_A0);
    53e8:	ab 98       	cbi	0x15, 3	; 21
  PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_RnW);
    53ea:	ac 98       	cbi	0x15, 4	; 21
  PORTA_LCD_DAT = val;
    53ec:	8b bb       	out	0x1b, r24	; 27
  PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_E);
    53ee:	ad 9a       	sbi	0x15, 5	; 21
  PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_E);
    53f0:	ad 98       	cbi	0x15, 5	; 21
  PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_A0);
    53f2:	ab 9a       	sbi	0x15, 3	; 21
  PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_CS1);
    53f4:	a9 9a       	sbi	0x15, 1	; 21
    53f6:	08 95       	ret

000053f8 <_Z13lcdSetRefVolth>:

}


void lcdSetRefVolt(uint8_t val)
{
    53f8:	cf 93       	push	r28
    53fa:	c8 2f       	mov	r28, r24
	LcdLock = 1 ;						// Lock LCD data lines
    53fc:	81 e0       	ldi	r24, 0x01	; 1
    53fe:	80 93 cb 06 	sts	0x06CB, r24
  lcdSendCtl(0x81);
    5402:	81 e8       	ldi	r24, 0x81	; 129
    5404:	f0 df       	rcall	.-32     	; 0x53e6 <_Z10lcdSendCtlh>
  lcdSendCtl(val);
    5406:	8c 2f       	mov	r24, r28
    5408:	ee df       	rcall	.-36     	; 0x53e6 <_Z10lcdSendCtlh>
	LcdLock = 0 ;						// Free LCD data lines
    540a:	10 92 cb 06 	sts	0x06CB, r1
}
    540e:	cf 91       	pop	r28
    5410:	08 95       	ret

00005412 <_Z14lcdSetContrastv>:

uint8_t EepromActive ;

void lcdSetContrast()
{
	lcdSetRefVolt(g_eeGeneral.contrast);
    5412:	80 91 10 06 	lds	r24, 0x0610
    5416:	f0 cf       	rjmp	.-32     	; 0x53f8 <_Z13lcdSetRefVolth>

00005418 <_Z8lcd_initv>:
#endif
} ;	


void lcd_init()
{
    5418:	cf 93       	push	r28
    541a:	df 93       	push	r29
  // /home/thus/txt/datasheets/lcd/KS0713.pdf
  // ~/txt/flieger/ST7565RV17.pdf  from http://www.glyn.de/content.asp?wdid=132&sid=
	uint8_t i ;

	LcdLock = 1 ;						// Lock LCD data lines
    541c:	81 e0       	ldi	r24, 0x01	; 1
    541e:	80 93 cb 06 	sts	0x06CB, r24
  PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_RES);  //LCD_RES
    5422:	aa 98       	cbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5424:	2a e0       	ldi	r18, 0x0A	; 10
    5426:	2a 95       	dec	r18
    5428:	f1 f7       	brne	.-4      	; 0x5426 <_Z8lcd_initv+0xe>
    542a:	00 c0       	rjmp	.+0      	; 0x542c <_Z8lcd_initv+0x14>
  delay_2us();
  PORTC_LCD_CTRL |= (1<<OUT_C_LCD_RES); //  f524  sbi 0x15, 2 IOADR-PORTC_LCD_CTRL; 21           1
    542c:	aa 9a       	sbi	0x15, 2	; 21
    542e:	8c ed       	ldi	r24, 0xDC	; 220
    5430:	95 e0       	ldi	r25, 0x05	; 5
    5432:	e5 e0       	ldi	r30, 0x05	; 5
    5434:	ea 95       	dec	r30
    5436:	f1 f7       	brne	.-4      	; 0x5434 <_Z8lcd_initv+0x1c>
    5438:	00 00       	nop
    543a:	01 97       	sbiw	r24, 0x01	; 1

#define delay_1us() _delay_us(1)
#define delay_2us() _delay_us(2)
static void delay_1_5us( uint16_t ms)
{
  for( uint16_t i=0; i<ms; i++) delay_1us();
    543c:	00 97       	sbiw	r24, 0x00	; 0
    543e:	c9 f7       	brne	.-14     	; 0x5432 <_Z8lcd_initv+0x1a>
    5440:	c1 e0       	ldi	r28, 0x01	; 1
    5442:	d8 e0       	ldi	r29, 0x08	; 8
  delay_2us();
  PORTC_LCD_CTRL |= (1<<OUT_C_LCD_RES); //  f524  sbi 0x15, 2 IOADR-PORTC_LCD_CTRL; 21           1
  delay_1_5us(1500);
	for ( i = 0 ; i < sizeof(Lcdinit) ; i += 1 )
	{
	  lcdSendCtl(pgm_read_byte(&Lcdinit[i]) ) ;
    5444:	fe 01       	movw	r30, r28
    5446:	84 91       	lpm	r24, Z
    5448:	ce df       	rcall	.-100    	; 0x53e6 <_Z10lcdSendCtlh>
    544a:	21 96       	adiw	r28, 0x01	; 1
	LcdLock = 1 ;						// Lock LCD data lines
  PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_RES);  //LCD_RES
  delay_2us();
  PORTC_LCD_CTRL |= (1<<OUT_C_LCD_RES); //  f524  sbi 0x15, 2 IOADR-PORTC_LCD_CTRL; 21           1
  delay_1_5us(1500);
	for ( i = 0 ; i < sizeof(Lcdinit) ; i += 1 )
    544c:	f8 e0       	ldi	r31, 0x08	; 8
    544e:	cb 30       	cpi	r28, 0x0B	; 11
    5450:	df 07       	cpc	r29, r31
    5452:	c1 f7       	brne	.-16     	; 0x5444 <_Z8lcd_initv+0x2c>
  lcdSendCtl(0xAF);       // turn-on display
#endif
	lcdSetContrast() ;
//	LcdLock = 0 ;						// Free LCD data lines

}
    5454:	df 91       	pop	r29
    5456:	cf 91       	pop	r28
    lcdSendCtl(0xA1);     // ADC = 1: rev direction(SEG132/SEG128->SEG1)
    lcdSendCtl(0xC0);     // SHL = 0: norm direction(COM1->COM64)
  }
  lcdSendCtl(0xAF);       // turn-on display
#endif
	lcdSetContrast() ;
    5458:	dc cf       	rjmp	.-72     	; 0x5412 <_Z14lcdSetContrastv>

0000545a <_Z13refreshDiplayv>:
//volatile uint8_t LcdTrims ;
//uint8_t LcdTrimSwapped ;


void refreshDiplay()
{
    545a:	1f 93       	push	r17
    545c:	cf 93       	push	r28
    545e:	df 93       	push	r29
//	lcd_putc( 20*FW, 0, RotaryState + 'A' ) ;
//	lcd_putc( 19*FW, 0, s_editMode + '0' ) ;
	if ( EepromActive && BLINK_ON_PHASE )
    5460:	40 91 cc 06 	lds	r20, 0x06CC
    5464:	44 23       	and	r20, r20
    5466:	21 f0       	breq	.+8      	; 0x5470 <_Z13refreshDiplayv+0x16>
    5468:	80 91 cf 0a 	lds	r24, 0x0ACF
    546c:	86 fd       	sbrc	r24, 6
    546e:	33 c0       	rjmp	.+102    	; 0x54d6 <_Z13refreshDiplayv+0x7c>
#ifdef SIMU
  memcpy(lcd_buf, displayBuf, sizeof(displayBuf));
  lcd_refresh = true;
#else

	LcdLock = 1 ;						// Lock LCD data lines
    5470:	81 e0       	ldi	r24, 0x01	; 1
    5472:	80 93 cb 06 	sts	0x06CB, r24
#if defined(CPUM128) || defined(CPUM2561)
  if (g_eeGeneral.rotateScreen)
    column_start_lo = 0x00;       // don't skip if screen is rotated
#endif
  uint8_t *p=displayBuf;
  for(uint8_t y=0xB0; y < 0xB8; y++) {
    5476:	10 eb       	ldi	r17, 0xB0	; 176
  uint8_t column_start_lo = 0x04; // skip first 4 columns for normal ST7565
#if defined(CPUM128) || defined(CPUM2561)
  if (g_eeGeneral.rotateScreen)
    column_start_lo = 0x00;       // don't skip if screen is rotated
#endif
  uint8_t *p=displayBuf;
    5478:	ce ec       	ldi	r28, 0xCE	; 206
    547a:	d6 e0       	ldi	r29, 0x06	; 6
  for(uint8_t y=0xB0; y < 0xB8; y++) {
    lcdSendCtl(column_start_lo);
    547c:	84 e0       	ldi	r24, 0x04	; 4
    547e:	b3 df       	rcall	.-154    	; 0x53e6 <_Z10lcdSendCtlh>
    lcdSendCtl(0x10); //column addr 0
    5480:	80 e1       	ldi	r24, 0x10	; 16
    5482:	b1 df       	rcall	.-158    	; 0x53e6 <_Z10lcdSendCtlh>
    lcdSendCtl( y ); //page addr y
    5484:	81 2f       	mov	r24, r17
    5486:	af df       	rcall	.-162    	; 0x53e6 <_Z10lcdSendCtlh>
    
		PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_CS1);
    5488:	a9 98       	cbi	0x15, 1	; 21
    PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_A0);
    548a:	ab 9a       	sbi	0x15, 3	; 21
    PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_RnW);
    548c:	ac 98       	cbi	0x15, 4	; 21
    548e:	fe 01       	movw	r30, r28
    5490:	9e 01       	movw	r18, r28
    5492:	20 58       	subi	r18, 0x80	; 128
    5494:	3f 4f       	sbci	r19, 0xFF	; 255
		
    for(uint8_t x=32; x>0; x--){
//      lcdSendDat(*p);
      PORTA_LCD_DAT = *p++;
    5496:	80 81       	ld	r24, Z
    5498:	8b bb       	out	0x1b, r24	; 27
      PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_E);
    549a:	ad 9a       	sbi	0x15, 5	; 21
      PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_E);
    549c:	ad 98       	cbi	0x15, 5	; 21
      PORTA_LCD_DAT = *p++;
    549e:	81 81       	ldd	r24, Z+1	; 0x01
    54a0:	8b bb       	out	0x1b, r24	; 27
      PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_E);
    54a2:	ad 9a       	sbi	0x15, 5	; 21
      PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_E);
    54a4:	ad 98       	cbi	0x15, 5	; 21
      PORTA_LCD_DAT = *p++;
    54a6:	82 81       	ldd	r24, Z+2	; 0x02
    54a8:	8b bb       	out	0x1b, r24	; 27
      PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_E);
    54aa:	ad 9a       	sbi	0x15, 5	; 21
      PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_E);
    54ac:	ad 98       	cbi	0x15, 5	; 21
      PORTA_LCD_DAT = *p++;
    54ae:	83 81       	ldd	r24, Z+3	; 0x03
    54b0:	8b bb       	out	0x1b, r24	; 27
      PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_E);
    54b2:	ad 9a       	sbi	0x15, 5	; 21
      PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_E);
    54b4:	ad 98       	cbi	0x15, 5	; 21
    54b6:	34 96       	adiw	r30, 0x04	; 4
    
		PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_CS1);
    PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_A0);
    PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_RnW);
		
    for(uint8_t x=32; x>0; x--){
    54b8:	e2 17       	cp	r30, r18
    54ba:	f3 07       	cpc	r31, r19
    54bc:	61 f7       	brne	.-40     	; 0x5496 <_Z13refreshDiplayv+0x3c>
    54be:	ef 01       	movw	r28, r30
      PORTA_LCD_DAT = *p++;
      PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_E);
      PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_E);
//      p++;
    }
    PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_A0);
    54c0:	ab 9a       	sbi	0x15, 3	; 21
    PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_CS1);
    54c2:	a9 9a       	sbi	0x15, 1	; 21
#if defined(CPUM128) || defined(CPUM2561)
  if (g_eeGeneral.rotateScreen)
    column_start_lo = 0x00;       // don't skip if screen is rotated
#endif
  uint8_t *p=displayBuf;
  for(uint8_t y=0xB0; y < 0xB8; y++) {
    54c4:	1f 5f       	subi	r17, 0xFF	; 255
    54c6:	18 3b       	cpi	r17, 0xB8	; 184
    54c8:	c9 f6       	brne	.-78     	; 0x547c <_Z13refreshDiplayv+0x22>
//      p++;
    }
    PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_A0);
    PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_CS1);
  }
	LcdLock = 0 ;						// Free LCD data lines
    54ca:	10 92 cb 06 	sts	0x06CB, r1
#endif
}
    54ce:	df 91       	pop	r29
    54d0:	cf 91       	pop	r28
    54d2:	1f 91       	pop	r17
    54d4:	08 95       	ret
{
//	lcd_putc( 20*FW, 0, RotaryState + 'A' ) ;
//	lcd_putc( 19*FW, 0, s_editMode + '0' ) ;
	if ( EepromActive && BLINK_ON_PHASE )
	{
		lcd_hline( 0, 0, EepromActive - '0' + 6 ) ;
    54d6:	4a 52       	subi	r20, 0x2A	; 42
    54d8:	60 e0       	ldi	r22, 0x00	; 0
    54da:	80 e0       	ldi	r24, 0x00	; 0
    54dc:	64 dd       	rcall	.-1336   	; 0x4fa6 <_Z9lcd_hlinehha>
    54de:	c8 cf       	rjmp	.-112    	; 0x5470 <_Z13refreshDiplayv+0x16>

000054e0 <_Z15eeWriteBlockCmpPKvjj>:
#endif
  SREG = flags;
}

void eeWriteBlockCmp(const void *i_pointer_ram, uint16_t i_pointer_eeprom, size_t size)
{
    54e0:	bf 92       	push	r11
    54e2:	cf 92       	push	r12
    54e4:	df 92       	push	r13
    54e6:	ef 92       	push	r14
    54e8:	ff 92       	push	r15
    54ea:	0f 93       	push	r16
    54ec:	1f 93       	push	r17
    54ee:	cf 93       	push	r28
    54f0:	df 93       	push	r29
    54f2:	7b 01       	movw	r14, r22
    54f4:	8a 01       	movw	r16, r20
    54f6:	08 0f       	add	r16, r24
    54f8:	19 1f       	adc	r17, r25
  const char* pointer_ram = (const char*)i_pointer_ram;
  uint16_t    pointer_eeprom = i_pointer_eeprom;
  while(size){
    54fa:	ec 01       	movw	r28, r24
    54fc:	e8 1a       	sub	r14, r24
    54fe:	f9 0a       	sbc	r15, r25
    5500:	67 01       	movw	r12, r14
    5502:	cc 0e       	add	r12, r28
    5504:	dd 1e       	adc	r13, r29
    5506:	c0 17       	cp	r28, r16
    5508:	d1 07       	cpc	r29, r17
    550a:	c1 f0       	breq	.+48     	; 0x553c <_Z15eeWriteBlockCmpPKvjj+0x5c>
    eeprom_write_byte_cmp(*pointer_ram++,pointer_eeprom++);
    550c:	b9 90       	ld	r11, Y+
  while(EECR & (1<<EEPE)) /* make sure EEPROM is ready */
#else
  while(EECR & (1<<EEWE)) /* make sure EEPROM is ready */
#endif
  {
    if (Ee_lock & EE_TRIM_LOCK)    // Only if writing trim changes
    550e:	80 91 6b 06 	lds	r24, 0x066B
    5512:	82 70       	andi	r24, 0x02	; 2
{
  //see /home/thus/work/avr/avrsdk4/avr-libc-1.4.4/libc/misc/eeprom.S:98 143
#ifdef CPUM2561
  while(EECR & (1<<EEPE)) /* make sure EEPROM is ready */
#else
  while(EECR & (1<<EEWE)) /* make sure EEPROM is ready */
    5514:	e1 9b       	sbis	0x1c, 1	; 28
    5516:	05 c0       	rjmp	.+10     	; 0x5522 <_Z15eeWriteBlockCmpPKvjj+0x42>
#endif
  {
    if (Ee_lock & EE_TRIM_LOCK)    // Only if writing trim changes
    5518:	88 23       	and	r24, r24
    551a:	e1 f3       	breq	.-8      	; 0x5514 <_Z15eeWriteBlockCmpPKvjj+0x34>
    {
      mainSequence() ;      // Keep the controls running while waiting		
    551c:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_Z12mainSequencev>
    5520:	f6 cf       	rjmp	.-20     	; 0x550e <_Z15eeWriteBlockCmpPKvjj+0x2e>
    }
  } ;
  EEAR  = pointer_eeprom;
    5522:	df ba       	out	0x1f, r13	; 31
    5524:	ce ba       	out	0x1e, r12	; 30

  EECR |= 1<<EERE;
    5526:	e0 9a       	sbi	0x1c, 0	; 28
  if(dat == EEDR) return;
    5528:	8d b3       	in	r24, 0x1d	; 29
    552a:	b8 16       	cp	r11, r24
    552c:	49 f3       	breq	.-46     	; 0x5500 <_Z15eeWriteBlockCmpPKvjj+0x20>

  EEDR  = dat;
    552e:	bd ba       	out	0x1d, r11	; 29
  uint8_t flags=SREG;
    5530:	8f b7       	in	r24, 0x3f	; 63
  cli();
    5532:	f8 94       	cli
#ifdef CPUM2561
  EECR |= 1<<EEMPE;
  EECR |= 1<<EEPE;
#else
  EECR |= 1<<EEMWE;
    5534:	e2 9a       	sbi	0x1c, 2	; 28
  EECR |= 1<<EEWE;
    5536:	e1 9a       	sbi	0x1c, 1	; 28
#endif
  SREG = flags;
    5538:	8f bf       	out	0x3f, r24	; 63
    553a:	e2 cf       	rjmp	.-60     	; 0x5500 <_Z15eeWriteBlockCmpPKvjj+0x20>
  uint16_t    pointer_eeprom = i_pointer_eeprom;
  while(size){
    eeprom_write_byte_cmp(*pointer_ram++,pointer_eeprom++);
    size--;
  }
}
    553c:	df 91       	pop	r29
    553e:	cf 91       	pop	r28
    5540:	1f 91       	pop	r17
    5542:	0f 91       	pop	r16
    5544:	ff 90       	pop	r15
    5546:	ef 90       	pop	r14
    5548:	df 90       	pop	r13
    554a:	cf 90       	pop	r12
    554c:	bf 90       	pop	r11
    554e:	08 95       	ret

00005550 <_Z8getEventv>:

uint8_t s_evt;

uint8_t getEvent()
{
  uint8_t evt = s_evt;
    5550:	80 91 ff 0a 	lds	r24, 0x0AFF
  s_evt=0;
    5554:	10 92 ff 0a 	sts	0x0AFF, r1
  return evt;
}
    5558:	08 95       	ret

0000555a <_ZN3Key5inputEb8EnumKeys>:
};


Key keys[NUM_KEYS];
void Key::input(bool val, EnumKeys enuk)
{
    555a:	fc 01       	movw	r30, r24
  //  uint8_t old=m_vals;
	uint8_t t_vals ;
//  m_vals <<= 1;  if(val) m_vals |= 1; //portbit einschieben
	t_vals = m_vals ;
    555c:	80 81       	ld	r24, Z
    555e:	8f 70       	andi	r24, 0x0F	; 15
	t_vals <<= 1 ;
    5560:	88 0f       	add	r24, r24
  if(val) t_vals |= 1; //portbit einschieben
    5562:	61 11       	cpse	r22, r1
    5564:	81 60       	ori	r24, 0x01	; 1
	m_vals = t_vals ;
    5566:	8f 70       	andi	r24, 0x0F	; 15
    5568:	90 81       	ld	r25, Z
    556a:	90 7f       	andi	r25, 0xF0	; 240
    556c:	98 2b       	or	r25, r24
    556e:	90 83       	st	Z, r25
  m_cnt++;
    5570:	81 81       	ldd	r24, Z+1	; 0x01
    5572:	8f 5f       	subi	r24, 0xFF	; 255
    5574:	81 83       	std	Z+1, r24	; 0x01

  if(m_state && m_vals==0){  //gerade eben sprung auf 0
    5576:	82 81       	ldd	r24, Z+2	; 0x02
    5578:	88 23       	and	r24, r24
    557a:	51 f0       	breq	.+20     	; 0x5590 <_ZN3Key5inputEb8EnumKeys+0x36>
    557c:	9f 70       	andi	r25, 0x0F	; 15
    557e:	41 f4       	brne	.+16     	; 0x5590 <_ZN3Key5inputEb8EnumKeys+0x36>
    if(m_state!=KSTATE_KILLED) {
    5580:	83 36       	cpi	r24, 0x63	; 99
    5582:	21 f0       	breq	.+8      	; 0x558c <_ZN3Key5inputEb8EnumKeys+0x32>
      putEvent(EVT_KEY_BREAK(enuk));
    5584:	84 2f       	mov	r24, r20
    5586:	80 62       	ori	r24, 0x20	; 32
    5588:	80 93 ff 0a 	sts	0x0AFF, r24
//      if(!( m_state == 16 && m_cnt<16)){
//        m_dblcnt=0;
//      }
        //      }
    }
    m_cnt   = 0;
    558c:	11 82       	std	Z+1, r1	; 0x01
    m_state = KSTATE_OFF;
    558e:	12 82       	std	Z+2, r1	; 0x02
  }
  switch(m_state){
    5590:	82 81       	ldd	r24, Z+2	; 0x02
    5592:	88 30       	cpi	r24, 0x08	; 8
    5594:	69 f1       	breq	.+90     	; 0x55f0 <_ZN3Key5inputEb8EnumKeys+0x96>
    5596:	48 f4       	brcc	.+18     	; 0x55aa <_ZN3Key5inputEb8EnumKeys+0x50>
    5598:	81 30       	cpi	r24, 0x01	; 1
    559a:	91 f1       	breq	.+100    	; 0x5600 <_ZN3Key5inputEb8EnumKeys+0xa6>
    559c:	88 f0       	brcs	.+34     	; 0x55c0 <_ZN3Key5inputEb8EnumKeys+0x66>
    559e:	82 30       	cpi	r24, 0x02	; 2
    55a0:	39 f1       	breq	.+78     	; 0x55f0 <_ZN3Key5inputEb8EnumKeys+0x96>
    55a2:	84 30       	cpi	r24, 0x04	; 4
    55a4:	09 f0       	breq	.+2      	; 0x55a8 <_ZN3Key5inputEb8EnumKeys+0x4e>
    55a6:	3f c0       	rjmp	.+126    	; 0x5626 <_ZN3Key5inputEb8EnumKeys+0xcc>
    55a8:	23 c0       	rjmp	.+70     	; 0x55f0 <_ZN3Key5inputEb8EnumKeys+0x96>
    55aa:	8f 35       	cpi	r24, 0x5F	; 95
    55ac:	c1 f0       	breq	.+48     	; 0x55de <_ZN3Key5inputEb8EnumKeys+0x84>
    55ae:	18 f4       	brcc	.+6      	; 0x55b6 <_ZN3Key5inputEb8EnumKeys+0x5c>
    55b0:	80 31       	cpi	r24, 0x10	; 16
    55b2:	f1 f0       	breq	.+60     	; 0x55f0 <_ZN3Key5inputEb8EnumKeys+0x96>
    55b4:	08 95       	ret
    55b6:	81 36       	cpi	r24, 0x61	; 97
    55b8:	49 f0       	breq	.+18     	; 0x55cc <_ZN3Key5inputEb8EnumKeys+0x72>
    55ba:	82 36       	cpi	r24, 0x62	; 98
    55bc:	71 f1       	breq	.+92     	; 0x561a <_ZN3Key5inputEb8EnumKeys+0xc0>
    55be:	08 95       	ret
    case KSTATE_OFF:
      if(m_vals==FFVAL){ //gerade eben sprung auf ff
    55c0:	80 81       	ld	r24, Z
    55c2:	8f 70       	andi	r24, 0x0F	; 15
    55c4:	8f 30       	cpi	r24, 0x0F	; 15
    55c6:	79 f5       	brne	.+94     	; 0x5626 <_ZN3Key5inputEb8EnumKeys+0xcc>
        m_state = KSTATE_START;
    55c8:	81 e6       	ldi	r24, 0x61	; 97
    55ca:	2b c0       	rjmp	.+86     	; 0x5622 <_ZN3Key5inputEb8EnumKeys+0xc8>
        m_cnt   = 0;
      }
      break;
      //fallthrough
    case KSTATE_START:
      putEvent(EVT_KEY_FIRST(enuk));
    55cc:	40 66       	ori	r20, 0x60	; 96
    55ce:	40 93 ff 0a 	sts	0x0AFF, r20
      Inactivity.inacCounter = 0;
    55d2:	10 92 2e 0d 	sts	0x0D2E, r1
    55d6:	10 92 2d 0d 	sts	0x0D2D, r1
//      m_dblcnt++;
#ifdef KSTATE_RPTDELAY
      m_state   = KSTATE_RPTDELAY;
    55da:	8f e5       	ldi	r24, 0x5F	; 95
    55dc:	22 c0       	rjmp	.+68     	; 0x5622 <_ZN3Key5inputEb8EnumKeys+0xc8>
#endif
      m_cnt     = 0;
      break;
#ifdef KSTATE_RPTDELAY
    case KSTATE_RPTDELAY: // gruvin: longer delay before first key repeat
      if(m_cnt == 32) putEvent(EVT_KEY_LONG(enuk)); // need to catch this inside RPTDELAY time
    55de:	81 81       	ldd	r24, Z+1	; 0x01
    55e0:	80 32       	cpi	r24, 0x20	; 32
    55e2:	11 f4       	brne	.+4      	; 0x55e8 <_ZN3Key5inputEb8EnumKeys+0x8e>
    55e4:	40 68       	ori	r20, 0x80	; 128
    55e6:	16 c0       	rjmp	.+44     	; 0x5614 <_ZN3Key5inputEb8EnumKeys+0xba>
      if (m_cnt == 40) {
    55e8:	88 32       	cpi	r24, 0x28	; 40
    55ea:	e9 f4       	brne	.+58     	; 0x5626 <_ZN3Key5inputEb8EnumKeys+0xcc>
        m_state = 16;
    55ec:	80 e1       	ldi	r24, 0x10	; 16
    55ee:	19 c0       	rjmp	.+50     	; 0x5622 <_ZN3Key5inputEb8EnumKeys+0xc8>
      //fallthrough
#endif
    case 8:
    case 4:
    case 2:
      if(m_cnt >= 48)  { //3 6 12 24 48 pulses in every 480ms
    55f0:	91 81       	ldd	r25, Z+1	; 0x01
    55f2:	90 33       	cpi	r25, 0x30	; 48
    55f4:	28 f0       	brcs	.+10     	; 0x5600 <_ZN3Key5inputEb8EnumKeys+0xa6>
        m_state >>= 1;
    55f6:	90 e0       	ldi	r25, 0x00	; 0
    55f8:	95 95       	asr	r25
    55fa:	87 95       	ror	r24
    55fc:	82 83       	std	Z+2, r24	; 0x02
        m_cnt     = 0;
    55fe:	11 82       	std	Z+1, r1	; 0x01
      }
      //fallthrough
    case 1:
      if( (m_cnt & (m_state-1)) == 0)  putEvent(EVT_KEY_REPT(enuk));
    5600:	82 81       	ldd	r24, Z+2	; 0x02
    5602:	90 e0       	ldi	r25, 0x00	; 0
    5604:	01 97       	sbiw	r24, 0x01	; 1
    5606:	21 81       	ldd	r18, Z+1	; 0x01
    5608:	30 e0       	ldi	r19, 0x00	; 0
    560a:	82 23       	and	r24, r18
    560c:	93 23       	and	r25, r19
    560e:	89 2b       	or	r24, r25
    5610:	51 f4       	brne	.+20     	; 0x5626 <_ZN3Key5inputEb8EnumKeys+0xcc>
    5612:	40 64       	ori	r20, 0x40	; 64
    5614:	40 93 ff 0a 	sts	0x0AFF, r20
    5618:	08 95       	ret
      break;

    case KSTATE_PAUSE: //pause
      if(m_cnt >= 64)      {
    561a:	81 81       	ldd	r24, Z+1	; 0x01
    561c:	80 34       	cpi	r24, 0x40	; 64
    561e:	18 f0       	brcs	.+6      	; 0x5626 <_ZN3Key5inputEb8EnumKeys+0xcc>
        m_state = 8;
    5620:	88 e0       	ldi	r24, 0x08	; 8
    5622:	82 83       	std	Z+2, r24	; 0x02
        m_cnt   = 0;
    5624:	11 82       	std	Z+1, r1	; 0x01
    5626:	08 95       	ret

00005628 <_Z8keyState8EnumKeys>:
}

bool keyState(EnumKeys enuk)
{
  uint8_t xxx = 0 ;
	uint8_t ping = PING ;
    5628:	40 91 63 00 	lds	r20, 0x0063
  if(enuk < (int)DIM(keys))  return keys[enuk].state() ? 1 : 0;
    562c:	28 2f       	mov	r18, r24
    562e:	30 e0       	ldi	r19, 0x00	; 0
    5630:	2f 30       	cpi	r18, 0x0F	; 15
    5632:	31 05       	cpc	r19, r1
    5634:	6c f4       	brge	.+26     	; 0x5650 <_Z8keyState8EnumKeys+0x28>
    5636:	f9 01       	movw	r30, r18
    5638:	ee 0f       	add	r30, r30
    563a:	ff 1f       	adc	r31, r31
    563c:	e2 0f       	add	r30, r18
    563e:	f3 1f       	adc	r31, r19
  uint8_t unused_m_dblcnt:2;
  uint8_t m_cnt;
  uint8_t m_state;
public:
  void input(bool val, EnumKeys enuk);
  bool state()       { return m_vals==FFVAL;                }
    5640:	ee 52       	subi	r30, 0x2E	; 46
    5642:	f5 4f       	sbci	r31, 0xF5	; 245
    5644:	90 81       	ld	r25, Z
    5646:	9f 70       	andi	r25, 0x0F	; 15
    5648:	81 e0       	ldi	r24, 0x01	; 1
    564a:	9f 30       	cpi	r25, 0x0F	; 15
    564c:	51 f5       	brne	.+84     	; 0x56a2 <_Z8keyState8EnumKeys+0x7a>
    564e:	2a c0       	rjmp	.+84     	; 0x56a4 <_Z8keyState8EnumKeys+0x7c>
{
  uint8_t xxx = 0 ;
	uint8_t ping = PING ;
  if(enuk < (int)DIM(keys))  return keys[enuk].state() ? 1 : 0;

  switch((uint8_t)enuk){
    5650:	90 e0       	ldi	r25, 0x00	; 0
    5652:	fc 01       	movw	r30, r24
    5654:	3f 97       	sbiw	r30, 0x0f	; 15
    5656:	e9 30       	cpi	r30, 0x09	; 9
    5658:	f1 05       	cpc	r31, r1
    565a:	18 f5       	brcc	.+70     	; 0x56a2 <_Z8keyState8EnumKeys+0x7a>
    565c:	ec 5a       	subi	r30, 0xAC	; 172
    565e:	ff 4f       	sbci	r31, 0xFF	; 255
    5660:	0c 94 3b 72 	jmp	0xe476	; 0xe476 <__tablejump2__>
    case SW_ElevDR : xxx = PINE & (1<<INP_E_ElevDR);
    5664:	91 b1       	in	r25, 0x01	; 1
    5666:	94 70       	andi	r25, 0x04	; 4
    break ;
    5668:	19 c0       	rjmp	.+50     	; 0x569c <_Z8keyState8EnumKeys+0x74>
#else
    //case SW_AileDR : return PINE & (1<<INP_E_AileDR);
 #if (!(defined(JETI) || defined(FRSKY) || defined(ARDUPILOT) || defined(ELERES) || defined(NMEA) || defined(ELERES)))
    case SW_AileDR : xxx = PINE & (1<<INP_E_AileDR);
 #else
    case SW_AileDR : xxx = PINC & (1<<INP_C_AileDR); //shad974: rerouted inputs to free up UART0
    566a:	93 b3       	in	r25, 0x13	; 19
    566c:	90 78       	andi	r25, 0x80	; 128
//										{
//											xxx = 0 ;											
//										}
 #endif
#endif
    break ;
    566e:	16 c0       	rjmp	.+44     	; 0x569c <_Z8keyState8EnumKeys+0x74>


    case SW_RuddDR : xxx = ping & (1<<INP_G_RuddDR);
    5670:	94 2f       	mov	r25, r20
    5672:	91 70       	andi	r25, 0x01	; 1
    break ;
    5674:	13 c0       	rjmp	.+38     	; 0x569c <_Z8keyState8EnumKeys+0x74>
      //     INP_G_ID1 INP_E_ID2
      // id0    0        1
      // id1    1        1
      // id2    1        0
    case SW_ID0    : xxx = ~ping & (1<<INP_G_ID1);
    5676:	94 2f       	mov	r25, r20
    5678:	90 95       	com	r25
    567a:	98 70       	andi	r25, 0x08	; 8
    break ;
    567c:	0f c0       	rjmp	.+30     	; 0x569c <_Z8keyState8EnumKeys+0x74>
    case SW_ID1    : xxx = (ping & (1<<INP_G_ID1)) ; if ( xxx ) xxx = (PINE & (1<<INP_E_ID2));
    567e:	43 ff       	sbrs	r20, 3
    5680:	10 c0       	rjmp	.+32     	; 0x56a2 <_Z8keyState8EnumKeys+0x7a>
    5682:	91 b1       	in	r25, 0x01	; 1
    5684:	02 c0       	rjmp	.+4      	; 0x568a <_Z8keyState8EnumKeys+0x62>
    break ;
    case SW_ID2    : xxx = ~PINE & (1<<INP_E_ID2);
    5686:	91 b1       	in	r25, 0x01	; 1
    5688:	90 95       	com	r25
    568a:	90 74       	andi	r25, 0x40	; 64
    break ;
    568c:	07 c0       	rjmp	.+14     	; 0x569c <_Z8keyState8EnumKeys+0x74>
    case SW_Gear   : xxx = PINE & (1<<INP_E_Gear);
    568e:	91 b1       	in	r25, 0x01	; 1
    5690:	90 71       	andi	r25, 0x10	; 16
    break ;
    5692:	04 c0       	rjmp	.+8      	; 0x569c <_Z8keyState8EnumKeys+0x74>
			}
#else
 #if (!(defined(JETI) || defined(FRSKY) || defined(ARDUPILOT) || defined(ELERES) || defined(NMEA) || defined(ELERES)))
     case SW_ThrCt  : xxx = PINE & (1<<INP_E_ThrCt);
 #else
    case SW_ThrCt  : xxx = PINC & (1<<INP_C_ThrCt); //shad974: rerouted inputs to free up UART0
    5694:	93 b3       	in	r25, 0x13	; 19
    5696:	f9 cf       	rjmp	.-14     	; 0x568a <_Z8keyState8EnumKeys+0x62>
 #endif
#endif
		break ;

    case SW_Trainer: xxx = PINE & (1<<INP_E_Trainer);
    5698:	91 b1       	in	r25, 0x01	; 1
    569a:	90 72       	andi	r25, 0x20	; 32
    break ;
    default:;
  }
  if ( xxx )
    569c:	81 e0       	ldi	r24, 0x01	; 1
    569e:	91 11       	cpse	r25, r1
    56a0:	01 c0       	rjmp	.+2      	; 0x56a4 <_Z8keyState8EnumKeys+0x7c>
  {
    return 1 ;
  }
  return 0;
    56a2:	80 e0       	ldi	r24, 0x00	; 0
}
    56a4:	08 95       	ret

000056a6 <_Z11pauseEventsh>:

void pauseEvents(uint8_t event)
{
  event=event & EVT_KEY_MASK;
    56a6:	8f 70       	andi	r24, 0x0F	; 15
  if(event < (int)DIM(keys))  keys[event].pauseEvents();
    56a8:	90 e0       	ldi	r25, 0x00	; 0
    56aa:	8f 30       	cpi	r24, 0x0F	; 15
    56ac:	91 05       	cpc	r25, r1
    56ae:	51 f0       	breq	.+20     	; 0x56c4 <_Z11pauseEventsh+0x1e>
    56b0:	fc 01       	movw	r30, r24
    56b2:	ee 0f       	add	r30, r30
    56b4:	ff 1f       	adc	r31, r31
    56b6:	e8 0f       	add	r30, r24
    56b8:	f9 1f       	adc	r31, r25
    56ba:	ee 52       	subi	r30, 0x2E	; 46
    56bc:	f5 4f       	sbci	r31, 0xF5	; 245
  uint8_t m_cnt;
  uint8_t m_state;
public:
  void input(bool val, EnumKeys enuk);
  bool state()       { return m_vals==FFVAL;                }
  void pauseEvents() { m_state = KSTATE_PAUSE;  m_cnt   = 0;}
    56be:	82 e6       	ldi	r24, 0x62	; 98
    56c0:	82 83       	std	Z+2, r24	; 0x02
    56c2:	11 82       	std	Z+1, r1	; 0x01
    56c4:	08 95       	ret

000056c6 <_Z10killEventsh>:
  event=event & EVT_KEY_MASK;
  if(event < (int)DIM(keys))  keys[event].pauseEvents();
}
void killEvents(uint8_t event)
{
  event=event & EVT_KEY_MASK;
    56c6:	8f 70       	andi	r24, 0x0F	; 15
  if(event < (int)DIM(keys))  keys[event].killEvents();
    56c8:	90 e0       	ldi	r25, 0x00	; 0
    56ca:	8f 30       	cpi	r24, 0x0F	; 15
    56cc:	91 05       	cpc	r25, r1
    56ce:	49 f0       	breq	.+18     	; 0x56e2 <_Z10killEventsh+0x1c>
    56d0:	fc 01       	movw	r30, r24
    56d2:	ee 0f       	add	r30, r30
    56d4:	ff 1f       	adc	r31, r31
    56d6:	e8 0f       	add	r30, r24
    56d8:	f9 1f       	adc	r31, r25
  uint8_t m_state;
public:
  void input(bool val, EnumKeys enuk);
  bool state()       { return m_vals==FFVAL;                }
  void pauseEvents() { m_state = KSTATE_PAUSE;  m_cnt   = 0;}
  void killEvents()  { m_state = KSTATE_KILLED; /*m_dblcnt=0;*/ }
    56da:	ee 52       	subi	r30, 0x2E	; 46
    56dc:	f5 4f       	sbci	r31, 0xF5	; 245
    56de:	83 e6       	ldi	r24, 0x63	; 99
    56e0:	82 83       	std	Z+2, r24	; 0x02
    56e2:	08 95       	ret

000056e4 <_Z7per10msv>:
volatile uint8_t  g_blinkTmr10ms;
extern uint8_t StickScrollTimer ;


void per10ms()
{
    56e4:	ef 92       	push	r14
    56e6:	ff 92       	push	r15
    56e8:	0f 93       	push	r16
    56ea:	1f 93       	push	r17
    56ec:	cf 93       	push	r28
    56ee:	df 93       	push	r29
	uint16_t tmr ;
//  g_tmr10ms++;				// 16 bit sized
//	g8_tmr10ms += 1 ;		// byte sized
//  g_blinkTmr10ms++;
  tmr = g_tmr10ms + 1 ;
    56f0:	80 91 d0 0a 	lds	r24, 0x0AD0
    56f4:	90 91 d1 0a 	lds	r25, 0x0AD1
    56f8:	01 96       	adiw	r24, 0x01	; 1
	g_tmr10ms = tmr ;
    56fa:	90 93 d1 0a 	sts	0x0AD1, r25
    56fe:	80 93 d0 0a 	sts	0x0AD0, r24
	g_blinkTmr10ms = tmr ;
    5702:	80 93 cf 0a 	sts	0x0ACF, r24
  uint8_t enuk = KEY_MENU;
  uint8_t    in = ~PINB;
    5706:	96 b3       	in	r25, 0x16	; 22
    5708:	90 95       	com	r25
	static uint8_t current ;
	uint8_t dir_keys ;
	uint8_t lcurrent ;

	dir_keys = in & 0x78 ;		// Mask to direction keys
	if ( ( lcurrent = current ) )
    570a:	80 91 00 0b 	lds	r24, 0x0B00
    570e:	88 23       	and	r24, r24
    5710:	21 f0       	breq	.+8      	; 0x571a <_Z7per10msv+0x36>
	
	static uint8_t current ;
	uint8_t dir_keys ;
	uint8_t lcurrent ;

	dir_keys = in & 0x78 ;		// Mask to direction keys
    5712:	28 2f       	mov	r18, r24
    5714:	28 77       	andi	r18, 0x78	; 120
	if ( ( lcurrent = current ) )
	{ // Something already pressed
		if ( ( lcurrent & dir_keys ) == 0 )
    5716:	29 23       	and	r18, r25
    5718:	49 f4       	brne	.+18     	; 0x572c <_Z7per10msv+0x48>
    571a:	89 2f       	mov	r24, r25
    571c:	80 76       	andi	r24, 0x60	; 96
	{ // look for a key
		if ( dir_keys & 0x20 )	// right
		{
			lcurrent = 0x60 ;		// Allow L and R for 9X
		}
		else if ( dir_keys & 0x40 )	// left
    571e:	09 f0       	breq	.+2      	; 0x5722 <_Z7per10msv+0x3e>
    5720:	4d c0       	rjmp	.+154    	; 0x57bc <_Z7per10msv+0xd8>
		{
			lcurrent = 0x60 ;		// Allow L and R for 9X
		}
		else if ( dir_keys & 0x08 )	// down
    5722:	93 fd       	sbrc	r25, 3
    5724:	47 c0       	rjmp	.+142    	; 0x57b4 <_Z7per10msv+0xd0>
		{
			lcurrent = 0x08 ;
		}
		else if ( dir_keys & 0x10 )	// up
    5726:	94 ff       	sbrs	r25, 4
    5728:	47 c0       	rjmp	.+142    	; 0x57b8 <_Z7per10msv+0xd4>
		{
			lcurrent = 0x10 ;
    572a:	80 e1       	ldi	r24, 0x10	; 16
		}
		in &= lcurrent | 0x06 ;	// current or MENU or EXIT allowed
    572c:	18 2f       	mov	r17, r24
    572e:	16 60       	ori	r17, 0x06	; 6
    5730:	19 23       	and	r17, r25
	}
	current = lcurrent ;
    5732:	80 93 00 0b 	sts	0x0B00, r24
    5736:	c2 ed       	ldi	r28, 0xD2	; 210
    5738:	da e0       	ldi	r29, 0x0A	; 10
//	g8_tmr10ms += 1 ;		// byte sized
//  g_blinkTmr10ms++;
  tmr = g_tmr10ms + 1 ;
	g_tmr10ms = tmr ;
	g_blinkTmr10ms = tmr ;
  uint8_t enuk = KEY_MENU;
    573a:	f1 2c       	mov	r15, r1
	current = lcurrent ;

  for(uint8_t i=1; i<7; i++)
  {
    //INP_B_KEY_MEN 1  .. INP_B_KEY_LFT 6
    keys[enuk].input(in & 2,(EnumKeys)enuk);
    573c:	11 fb       	bst	r17, 1
    573e:	66 27       	eor	r22, r22
    5740:	60 f9       	bld	r22, 0
    5742:	4f 2d       	mov	r20, r15
    5744:	ce 01       	movw	r24, r28
    5746:	09 df       	rcall	.-494    	; 0x555a <_ZN3Key5inputEb8EnumKeys>
    ++enuk;
    5748:	f3 94       	inc	r15
		in >>= 1 ;
    574a:	16 95       	lsr	r17
    574c:	23 96       	adiw	r28, 0x03	; 3
		}
		in &= lcurrent | 0x06 ;	// current or MENU or EXIT allowed
	}
	current = lcurrent ;

  for(uint8_t i=1; i<7; i++)
    574e:	86 e0       	ldi	r24, 0x06	; 6
    5750:	f8 12       	cpse	r15, r24
    5752:	f4 cf       	rjmp	.-24     	; 0x573c <_Z7per10msv+0x58>
    1<<INP_D_TRM_RV_DWN,
    1<<INP_D_TRM_RV_UP,
    1<<INP_D_TRM_RH_DWN,
    1<<INP_D_TRM_RH_UP
  };
  in = ~PIND;
    5754:	e0 b2       	in	r14, 0x10	; 16
    5756:	e0 94       	com	r14
    5758:	c7 e5       	ldi	r28, 0x57	; 87
    575a:	df e0       	ldi	r29, 0x0F	; 15
    575c:	00 e0       	ldi	r16, 0x00	; 0
    575e:	10 e0       	ldi	r17, 0x00	; 0
    5760:	fc 1a       	sub	r15, r28

	for(int i=0; i<8; i++)
  {
    // INP_D_TRM_RH_UP   0 .. INP_D_TRM_LH_UP   7
    keys[enuk].input(in & pgm_read_byte(crossTrim+i),(EnumKeys)enuk);
    5762:	fe 01       	movw	r30, r28
    5764:	84 91       	lpm	r24, Z
    5766:	4c 2f       	mov	r20, r28
    5768:	4f 0d       	add	r20, r15
    576a:	8e 21       	and	r24, r14
    576c:	61 e0       	ldi	r22, 0x01	; 1
    576e:	09 f4       	brne	.+2      	; 0x5772 <_Z7per10msv+0x8e>
    5770:	60 e0       	ldi	r22, 0x00	; 0
    5772:	c8 01       	movw	r24, r16
    5774:	8c 51       	subi	r24, 0x1C	; 28
    5776:	95 4f       	sbci	r25, 0xF5	; 245
    5778:	f0 de       	rcall	.-544    	; 0x555a <_ZN3Key5inputEb8EnumKeys>
    577a:	21 96       	adiw	r28, 0x01	; 1
    577c:	0d 5f       	subi	r16, 0xFD	; 253
    577e:	1f 4f       	sbci	r17, 0xFF	; 255
    1<<INP_D_TRM_RH_DWN,
    1<<INP_D_TRM_RH_UP
  };
  in = ~PIND;

	for(int i=0; i<8; i++)
    5780:	08 31       	cpi	r16, 0x18	; 24
    5782:	11 05       	cpc	r17, r1
    5784:	71 f7       	brne	.-36     	; 0x5762 <_Z7per10msv+0x7e>
    // INP_D_TRM_RH_UP   0 .. INP_D_TRM_LH_UP   7
    keys[enuk].input(in & pgm_read_byte(crossTrim+i),(EnumKeys)enuk);
    ++enuk;
  }
	
	uint8_t value = Rotary.RotEncoder & 0x20 ;
    5786:	90 91 e6 01 	lds	r25, 0x01E6
	keys[enuk].input( value,(EnumKeys)enuk); // Rotary Enc. Switch
    578a:	61 e0       	ldi	r22, 0x01	; 1
    578c:	c9 2f       	mov	r28, r25
    578e:	c0 72       	andi	r28, 0x20	; 32
    5790:	95 ff       	sbrs	r25, 5
    5792:	60 e0       	ldi	r22, 0x00	; 0
    5794:	4e e0       	ldi	r20, 0x0E	; 14
    5796:	8c ef       	ldi	r24, 0xFC	; 252
    5798:	9a e0       	ldi	r25, 0x0A	; 10
    579a:	df de       	rcall	.-578    	; 0x555a <_ZN3Key5inputEb8EnumKeys>
	
	value |= ~PINB & 0x7E ;
    579c:	86 b3       	in	r24, 0x16	; 22
    579e:	90 e0       	ldi	r25, 0x00	; 0
    57a0:	80 95       	com	r24
    57a2:	90 95       	com	r25
    57a4:	8e 77       	andi	r24, 0x7E	; 126
    57a6:	99 27       	eor	r25, r25
	if ( value )
    57a8:	8c 2b       	or	r24, r28
    57aa:	51 f0       	breq	.+20     	; 0x57c0 <_Z7per10msv+0xdc>
	{
		StickScrollTimer = STICK_SCROLL_TIMEOUT ;
    57ac:	89 e0       	ldi	r24, 0x09	; 9
    57ae:	80 93 84 01 	sts	0x0184, r24
    57b2:	06 c0       	rjmp	.+12     	; 0x57c0 <_Z7per10msv+0xdc>
		{
			lcurrent = 0x60 ;		// Allow L and R for 9X
		}
		else if ( dir_keys & 0x08 )	// down
		{
			lcurrent = 0x08 ;
    57b4:	88 e0       	ldi	r24, 0x08	; 8
    57b6:	ba cf       	rjmp	.-140    	; 0x572c <_Z7per10msv+0x48>
    57b8:	80 e0       	ldi	r24, 0x00	; 0
    57ba:	b8 cf       	rjmp	.-144    	; 0x572c <_Z7per10msv+0x48>
		{
			lcurrent = 0x60 ;		// Allow L and R for 9X
		}
		else if ( dir_keys & 0x40 )	// left
		{
			lcurrent = 0x60 ;		// Allow L and R for 9X
    57bc:	80 e6       	ldi	r24, 0x60	; 96
    57be:	b6 cf       	rjmp	.-148    	; 0x572c <_Z7per10msv+0x48>
	value |= ~PINB & 0x7E ;
	if ( value )
	{
		StickScrollTimer = STICK_SCROLL_TIMEOUT ;
	}
}
    57c0:	df 91       	pop	r29
    57c2:	cf 91       	pop	r28
    57c4:	1f 91       	pop	r17
    57c6:	0f 91       	pop	r16
    57c8:	ff 90       	pop	r15
    57ca:	ef 90       	pop	r14
    57cc:	08 95       	ret

000057ce <_ZL8setCurvehPKa>:

static void setCurve(uint8_t c, const prog_int8_t *ar )
{
	int8_t *p ;
	
	p = g_model.curves5[c] ;
    57ce:	95 e0       	ldi	r25, 0x05	; 5
    57d0:	89 9f       	mul	r24, r25
    57d2:	d0 01       	movw	r26, r0
    57d4:	11 24       	eor	r1, r1
    57d6:	a9 5f       	subi	r26, 0xF9	; 249
    57d8:	bb 4f       	sbci	r27, 0xFB	; 251
    57da:	cb 01       	movw	r24, r22
    57dc:	05 96       	adiw	r24, 0x05	; 5
    57de:	fb 01       	movw	r30, r22
  for(uint8_t i=0; i<5; i++)
	{
		*p++ = pgm_read_byte(ar++) ;
    57e0:	24 91       	lpm	r18, Z
    57e2:	2d 93       	st	X+, r18
    57e4:	31 96       	adiw	r30, 0x01	; 1
static void setCurve(uint8_t c, const prog_int8_t *ar )
{
	int8_t *p ;
	
	p = g_model.curves5[c] ;
  for(uint8_t i=0; i<5; i++)
    57e6:	e8 17       	cp	r30, r24
    57e8:	f9 07       	cpc	r31, r25
    57ea:	d1 f7       	brne	.-12     	; 0x57e0 <_ZL8setCurvehPKa+0x12>
	{
		*p++ = pgm_read_byte(ar++) ;
	}
}
    57ec:	08 95       	ret

000057ee <_ZL7setDesth>:
};

#endif

static MixData* setDest(uint8_t dch)
{
    57ee:	0f 93       	push	r16
    57f0:	1f 93       	push	r17
    57f2:	cf 93       	push	r28
    57f4:	df 93       	push	r29
    57f6:	18 2f       	mov	r17, r24
    uint8_t i = 0;
    MixData *md = &g_model.mixData[0];
    57f8:	cb e3       	ldi	r28, 0x3B	; 59
    57fa:	d2 e0       	ldi	r29, 0x02	; 2

#endif

static MixData* setDest(uint8_t dch)
{
    uint8_t i = 0;
    57fc:	90 e0       	ldi	r25, 0x00	; 0
    MixData *md = &g_model.mixData[0];

    while ((md->destCh<=dch) && (md->destCh) && (i<MAX_MIXERS)) i++, md++;
    57fe:	88 81       	ld	r24, Y
    5800:	18 17       	cp	r17, r24
    5802:	38 f0       	brcs	.+14     	; 0x5812 <_ZL7setDesth+0x24>
    5804:	88 23       	and	r24, r24
    5806:	29 f0       	breq	.+10     	; 0x5812 <_ZL7setDesth+0x24>
    5808:	90 32       	cpi	r25, 0x20	; 32
    580a:	01 f1       	breq	.+64     	; 0x584c <_ZL7setDesth+0x5e>
    580c:	9f 5f       	subi	r25, 0xFF	; 255
    580e:	2a 96       	adiw	r28, 0x0a	; 10
    5810:	f6 cf       	rjmp	.-20     	; 0x57fe <_ZL7setDesth+0x10>
    if(i==MAX_MIXERS) return &g_model.mixData[0];
    5812:	90 32       	cpi	r25, 0x20	; 32
    5814:	d9 f0       	breq	.+54     	; 0x584c <_ZL7setDesth+0x5e>

    memmove(md+1, md, (MAX_MIXERS-(i+1))*sizeof(MixData) );
    5816:	2f e1       	ldi	r18, 0x1F	; 31
    5818:	30 e0       	ldi	r19, 0x00	; 0
    581a:	29 1b       	sub	r18, r25
    581c:	31 09       	sbc	r19, r1
    581e:	0a e0       	ldi	r16, 0x0A	; 10
    5820:	02 9f       	mul	r16, r18
    5822:	a0 01       	movw	r20, r0
    5824:	03 9f       	mul	r16, r19
    5826:	50 0d       	add	r21, r0
    5828:	11 24       	eor	r1, r1
    582a:	be 01       	movw	r22, r28
    582c:	ce 01       	movw	r24, r28
    582e:	0a 96       	adiw	r24, 0x0a	; 10
    5830:	0e 94 95 72 	call	0xe52a	; 0xe52a <memmove>
    memset( md, 0, sizeof(MixData) ) ;
    5834:	fe 01       	movw	r30, r28
    5836:	11 92       	st	Z+, r1
    5838:	0a 95       	dec	r16
    583a:	e9 f7       	brne	.-6      	; 0x5836 <_ZL7setDesth+0x48>
    md->destCh = dch;
    583c:	18 83       	st	Y, r17
		md->weight = 100 ;
    583e:	84 e6       	ldi	r24, 0x64	; 100
    5840:	8a 83       	std	Y+2, r24	; 0x02
		md->lateOffset = 1 ;
    5842:	8f 81       	ldd	r24, Y+7	; 0x07
    5844:	88 60       	ori	r24, 0x08	; 8
    5846:	8f 83       	std	Y+7, r24	; 0x07
    return md ;
    5848:	ce 01       	movw	r24, r28
    584a:	02 c0       	rjmp	.+4      	; 0x5850 <_ZL7setDesth+0x62>
{
    uint8_t i = 0;
    MixData *md = &g_model.mixData[0];

    while ((md->destCh<=dch) && (md->destCh) && (i<MAX_MIXERS)) i++, md++;
    if(i==MAX_MIXERS) return &g_model.mixData[0];
    584c:	8b e3       	ldi	r24, 0x3B	; 59
    584e:	92 e0       	ldi	r25, 0x02	; 2
    memset( md, 0, sizeof(MixData) ) ;
    md->destCh = dch;
		md->weight = 100 ;
		md->lateOffset = 1 ;
    return md ;
}
    5850:	df 91       	pop	r29
    5852:	cf 91       	pop	r28
    5854:	1f 91       	pop	r17
    5856:	0f 91       	pop	r16
    5858:	08 95       	ret

0000585a <_Z10clearMixesv>:
#ifdef NO_TEMPLATES
inline
#endif 
void clearMixes()
{
    memset(g_model.mixData,0,sizeof(g_model.mixData)); //clear all mixes
    585a:	80 e4       	ldi	r24, 0x40	; 64
    585c:	91 e0       	ldi	r25, 0x01	; 1
    585e:	eb e3       	ldi	r30, 0x3B	; 59
    5860:	f2 e0       	ldi	r31, 0x02	; 2
    5862:	df 01       	movw	r26, r30
    5864:	9c 01       	movw	r18, r24
    5866:	1d 92       	st	X+, r1
    5868:	21 50       	subi	r18, 0x01	; 1
    586a:	30 40       	sbci	r19, 0x00	; 0
    586c:	e1 f7       	brne	.-8      	; 0x5866 <_Z10clearMixesv+0xc>
    586e:	08 95       	ret

00005870 <_Z11clearCurvesv>:
}

#ifndef NO_TEMPLATES
void clearCurves()
{
    memset(g_model.curves5,0,sizeof(g_model.curves5)); //clear all curves
    5870:	88 e2       	ldi	r24, 0x28	; 40
    5872:	e7 e0       	ldi	r30, 0x07	; 7
    5874:	f4 e0       	ldi	r31, 0x04	; 4
    5876:	df 01       	movw	r26, r30
    5878:	1d 92       	st	X+, r1
    587a:	8a 95       	dec	r24
    587c:	e9 f7       	brne	.-6      	; 0x5878 <_Z11clearCurvesv+0x8>
    memset(g_model.curves9,0,sizeof(g_model.curves9)); //clear all curves
    587e:	88 e4       	ldi	r24, 0x48	; 72
    5880:	ef e2       	ldi	r30, 0x2F	; 47
    5882:	f4 e0       	ldi	r31, 0x04	; 4
    5884:	df 01       	movw	r26, r30
    5886:	1d 92       	st	X+, r1
    5888:	8a 95       	dec	r24
    588a:	e9 f7       	brne	.-6      	; 0x5886 <_Z11clearCurvesv+0x16>
    588c:	08 95       	ret

0000588e <_Z9setSwitchhhaa>:
	}
}

void setSwitch(uint8_t idx, uint8_t func, int8_t v1, int8_t v2)
{
  CSwData *cs = &g_model.customSw[idx-1] ;
    588e:	90 e0       	ldi	r25, 0x00	; 0
    5890:	01 97       	sbiw	r24, 0x01	; 1
    5892:	fc 01       	movw	r30, r24
    5894:	ee 0f       	add	r30, r30
    5896:	ff 1f       	adc	r31, r31
    5898:	e8 0f       	add	r30, r24
    589a:	f9 1f       	adc	r31, r25
    589c:	e9 58       	subi	r30, 0x89	; 137
    589e:	fb 4f       	sbci	r31, 0xFB	; 251
  cs->func = func ;
  cs->andsw = 0 ;
    58a0:	6f 70       	andi	r22, 0x0F	; 15
    58a2:	62 83       	std	Z+2, r22	; 0x02
  cs->v1   = v1 ;
    58a4:	40 83       	st	Z, r20
  cs->v2   = v2 ;
    58a6:	21 83       	std	Z+1, r18	; 0x01
    58a8:	08 95       	ret

000058aa <_Z6setMixhh>:
const prog_int8_t heli_ar5[] PROGMEM = {-100, -50, 0, 50, 100};
#endif


void setMix( uint8_t dch, uint8_t stick )
{
    58aa:	cf 93       	push	r28
    58ac:	c6 2f       	mov	r28, r22
  MixData *md ;
	md=setDest( dch ) ;
    58ae:	9f df       	rcall	.-194    	; 0x57ee <_ZL7setDesth>
	md->srcRaw=CM( stick ) ;
    58b0:	fc 01       	movw	r30, r24
    58b2:	c1 83       	std	Z+1, r28	; 0x01
}
    58b4:	cf 91       	pop	r28
    58b6:	08 95       	ret

000058b8 <_Z13applyTemplateh>:
#ifdef NO_TEMPLATES
void applyTemplate()
#else
void applyTemplate(uint8_t idx)
#endif
{
    58b8:	9f 92       	push	r9
    58ba:	af 92       	push	r10
    58bc:	bf 92       	push	r11
    58be:	cf 92       	push	r12
    58c0:	df 92       	push	r13
    58c2:	ef 92       	push	r14
    58c4:	ff 92       	push	r15
    58c6:	0f 93       	push	r16
    58c8:	1f 93       	push	r17
    58ca:	cf 93       	push	r28
    58cc:	df 93       	push	r29
    58ce:	00 d0       	rcall	.+0      	; 0x58d0 <_Z13applyTemplateh+0x18>
    58d0:	00 d0       	rcall	.+0      	; 0x58d2 <_Z13applyTemplateh+0x1a>
    58d2:	cd b7       	in	r28, 0x3d	; 61
    58d4:	de b7       	in	r29, 0x3e	; 62
    58d6:	18 2f       	mov	r17, r24
#endif

    //CC(STK)   -> vSTK
    //ICC(vSTK) -> STK
#define ICC(x) icc[(x)-1]
    uint8_t icc[4] = {0};
    58d8:	19 82       	std	Y+1, r1	; 0x01
    58da:	1a 82       	std	Y+2, r1	; 0x02
    58dc:	1b 82       	std	Y+3, r1	; 0x03
    58de:	1c 82       	std	Y+4, r1	; 0x04
    for(uint8_t i=1; i<=4; i++) //generate inverse array
        for(uint8_t j=1; j<=4; j++) if(CC(i)==j) icc[j-1]=i;
    58e0:	e0 91 2b 06 	lds	r30, 0x062B
    58e4:	f0 e0       	ldi	r31, 0x00	; 0
    58e6:	e1 5f       	subi	r30, 0xF1	; 241
    58e8:	fc 4f       	sbci	r31, 0xFC	; 252
    58ea:	46 e0       	ldi	r20, 0x06	; 6
    58ec:	50 e0       	ldi	r21, 0x00	; 0

    //CC(STK)   -> vSTK
    //ICC(vSTK) -> STK
#define ICC(x) icc[(x)-1]
    uint8_t icc[4] = {0};
    for(uint8_t i=1; i<=4; i++) //generate inverse array
    58ee:	01 e0       	ldi	r16, 0x01	; 1
        for(uint8_t j=1; j<=4; j++) if(CC(i)==j) icc[j-1]=i;
    58f0:	f4 2e       	mov	r15, r20
    58f2:	81 e0       	ldi	r24, 0x01	; 1
    58f4:	90 e0       	ldi	r25, 0x00	; 0
    58f6:	24 91       	lpm	r18, Z
    58f8:	30 e0       	ldi	r19, 0x00	; 0
    58fa:	0f 2c       	mov	r0, r15
    58fc:	02 c0       	rjmp	.+4      	; 0x5902 <_Z13applyTemplateh+0x4a>
    58fe:	35 95       	asr	r19
    5900:	27 95       	ror	r18
    5902:	0a 94       	dec	r0
    5904:	e2 f7       	brpl	.-8      	; 0x58fe <_Z13applyTemplateh+0x46>
    5906:	23 70       	andi	r18, 0x03	; 3
    5908:	33 27       	eor	r19, r19
    590a:	b9 01       	movw	r22, r18
    590c:	6f 5f       	subi	r22, 0xFF	; 255
    590e:	7f 4f       	sbci	r23, 0xFF	; 255
    5910:	68 17       	cp	r22, r24
    5912:	79 07       	cpc	r23, r25
    5914:	41 f4       	brne	.+16     	; 0x5926 <_Z13applyTemplateh+0x6e>
    5916:	61 e0       	ldi	r22, 0x01	; 1
    5918:	70 e0       	ldi	r23, 0x00	; 0
    591a:	6c 0f       	add	r22, r28
    591c:	7d 1f       	adc	r23, r29
    591e:	26 0f       	add	r18, r22
    5920:	37 1f       	adc	r19, r23
    5922:	d9 01       	movw	r26, r18
    5924:	0c 93       	st	X, r16
    5926:	01 96       	adiw	r24, 0x01	; 1
    5928:	85 30       	cpi	r24, 0x05	; 5
    592a:	91 05       	cpc	r25, r1
    592c:	21 f7       	brne	.-56     	; 0x58f6 <_Z13applyTemplateh+0x3e>

    //CC(STK)   -> vSTK
    //ICC(vSTK) -> STK
#define ICC(x) icc[(x)-1]
    uint8_t icc[4] = {0};
    for(uint8_t i=1; i<=4; i++) //generate inverse array
    592e:	0f 5f       	subi	r16, 0xFF	; 255
    5930:	42 50       	subi	r20, 0x02	; 2
    5932:	51 09       	sbc	r21, r1
    5934:	05 30       	cpi	r16, 0x05	; 5
    5936:	e1 f6       	brne	.-72     	; 0x58f0 <_Z13applyTemplateh+0x38>

#ifndef NO_TEMPLATES
    uint8_t j = 0;

    //Simple 4-Ch
    if(idx==j++) 
    5938:	11 11       	cpse	r17, r1
    593a:	0d c0       	rjmp	.+26     	; 0x5956 <_Z13applyTemplateh+0x9e>
    {
#endif
        clearMixes();
    593c:	8e df       	rcall	.-228    	; 0x585a <_Z10clearMixesv>
        setMix(ICC(STK_RUD), STK_RUD ) ;
    593e:	61 e0       	ldi	r22, 0x01	; 1
    5940:	89 81       	ldd	r24, Y+1	; 0x01
    5942:	b3 df       	rcall	.-154    	; 0x58aa <_Z6setMixhh>
        setMix(ICC(STK_ELE), STK_ELE ) ;
    5944:	62 e0       	ldi	r22, 0x02	; 2
    5946:	8a 81       	ldd	r24, Y+2	; 0x02
    5948:	b0 df       	rcall	.-160    	; 0x58aa <_Z6setMixhh>
        setMix(ICC(STK_THR), STK_THR ) ;
    594a:	63 e0       	ldi	r22, 0x03	; 3
    594c:	8b 81       	ldd	r24, Y+3	; 0x03
    594e:	ad df       	rcall	.-166    	; 0x58aa <_Z6setMixhh>
        setMix(ICC(STK_AIL), STK_AIL ) ;
    5950:	64 e0       	ldi	r22, 0x04	; 4
    5952:	8c 81       	ldd	r24, Y+4	; 0x04
    5954:	2b c0       	rjmp	.+86     	; 0x59ac <_Z13applyTemplateh+0xf4>

#ifndef NO_TEMPLATES
    }

    //T-Cut
    if(idx==j++)
    5956:	11 30       	cpi	r17, 0x01	; 1
    5958:	41 f4       	brne	.+16     	; 0x596a <_Z13applyTemplateh+0xb2>
    {
//        md=setDest(ICC(STK_THR));  md->srcRaw=MIX_MAX;  md->weight=-100;  md->swtch=DSW_THR;  md->mltpx=MLTPX_REP;
    	SafetySwData *sd = &g_model.safetySw[ICC(STK_THR)-1] ;
    595a:	eb 81       	ldd	r30, Y+3	; 0x03
    595c:	f0 e0       	ldi	r31, 0x00	; 0
    595e:	ee 0f       	add	r30, r30
    5960:	ff 1f       	adc	r31, r31
    5962:	e4 56       	subi	r30, 0x64	; 100
    5964:	fb 4f       	sbci	r31, 0xFB	; 251
			sd->opt.ss.mode = 0 ;
			sd->opt.ss.swtch = DSW_THR ;
    5966:	10 83       	st	Z, r17
    5968:	0a c0       	rjmp	.+20     	; 0x597e <_Z13applyTemplateh+0xc6>
			sd->opt.ss.val = -100 ;
    }

    //sticky t-cut
    if(idx==j++)
    596a:	12 30       	cpi	r17, 0x02	; 2
    596c:	59 f4       	brne	.+22     	; 0x5984 <_Z13applyTemplateh+0xcc>
//        md=setDest(14);            md->srcRaw=MIX_MAX;  md->swtch=DSW_THR;  md->mltpx=MLTPX_REP;

//        setSwitch(0xB,CS_VNEG, CM(STK_THR), -99);
//        setSwitch(0xC,CS_VPOS, CH(14), 0);

    	SafetySwData *sd = &g_model.safetySw[ICC(STK_THR)-1] ;
    596e:	eb 81       	ldd	r30, Y+3	; 0x03
    5970:	f0 e0       	ldi	r31, 0x00	; 0
    5972:	ee 0f       	add	r30, r30
    5974:	ff 1f       	adc	r31, r31
    5976:	e4 56       	subi	r30, 0x64	; 100
    5978:	fb 4f       	sbci	r31, 0xFB	; 251
			sd->opt.ss.mode = 3 ;
			sd->opt.ss.swtch = DSW_THR ;
    597a:	81 ec       	ldi	r24, 0xC1	; 193
    597c:	80 83       	st	Z, r24
			sd->opt.ss.val = -100 ;
    597e:	8c e9       	ldi	r24, 0x9C	; 156
    5980:	81 83       	std	Z+1, r24	; 0x01
    5982:	1a c1       	rjmp	.+564    	; 0x5bb8 <_Z13applyTemplateh+0x300>
    }

    //V-Tail
    if(idx==j++) 
    5984:	13 30       	cpi	r17, 0x03	; 3
    5986:	a1 f4       	brne	.+40     	; 0x59b0 <_Z13applyTemplateh+0xf8>
    {
        clearMixes();
    5988:	68 df       	rcall	.-304    	; 0x585a <_Z10clearMixesv>
        setMix(ICC(STK_RUD), STK_RUD ) ;
    598a:	19 81       	ldd	r17, Y+1	; 0x01
    598c:	61 e0       	ldi	r22, 0x01	; 1
    598e:	81 2f       	mov	r24, r17
    5990:	8c df       	rcall	.-232    	; 0x58aa <_Z6setMixhh>
        md=setDest(ICC(STK_RUD));  md->srcRaw=CM(STK_ELE);  md->weight=-100;
    5992:	81 2f       	mov	r24, r17
    5994:	2c df       	rcall	.-424    	; 0x57ee <_ZL7setDesth>
    5996:	22 e0       	ldi	r18, 0x02	; 2
    5998:	fc 01       	movw	r30, r24
    599a:	21 83       	std	Z+1, r18	; 0x01
    599c:	2c e9       	ldi	r18, 0x9C	; 156
    599e:	22 83       	std	Z+2, r18	; 0x02
        setMix(ICC(STK_ELE), STK_RUD ) ;
    59a0:	1a 81       	ldd	r17, Y+2	; 0x02
    59a2:	61 e0       	ldi	r22, 0x01	; 1
    59a4:	81 2f       	mov	r24, r17
    59a6:	81 df       	rcall	.-254    	; 0x58aa <_Z6setMixhh>
        setMix(ICC(STK_ELE), STK_ELE ) ;
    59a8:	62 e0       	ldi	r22, 0x02	; 2
    59aa:	81 2f       	mov	r24, r17
    59ac:	7e df       	rcall	.-260    	; 0x58aa <_Z6setMixhh>
    59ae:	04 c1       	rjmp	.+520    	; 0x5bb8 <_Z13applyTemplateh+0x300>
    }

    //Elevon\\Delta
    if(idx==j++)
    59b0:	14 30       	cpi	r17, 0x04	; 4
    59b2:	99 f4       	brne	.+38     	; 0x59da <_Z13applyTemplateh+0x122>
    {
        clearMixes();
    59b4:	52 df       	rcall	.-348    	; 0x585a <_Z10clearMixesv>
        setMix(ICC(STK_ELE), STK_ELE ) ;
    59b6:	0a 81       	ldd	r16, Y+2	; 0x02
    59b8:	62 e0       	ldi	r22, 0x02	; 2
    59ba:	80 2f       	mov	r24, r16
    59bc:	76 df       	rcall	.-276    	; 0x58aa <_Z6setMixhh>
        setMix(ICC(STK_ELE), STK_AIL ) ;
    59be:	64 e0       	ldi	r22, 0x04	; 4
    59c0:	80 2f       	mov	r24, r16
    59c2:	73 df       	rcall	.-282    	; 0x58aa <_Z6setMixhh>
        setMix(ICC(STK_AIL), STK_ELE ) ;
    59c4:	0c 81       	ldd	r16, Y+4	; 0x04
    59c6:	62 e0       	ldi	r22, 0x02	; 2
    59c8:	80 2f       	mov	r24, r16
    59ca:	6f df       	rcall	.-290    	; 0x58aa <_Z6setMixhh>
        md=setDest(ICC(STK_AIL));  md->srcRaw=CM(STK_AIL);  md->weight=-100;
    59cc:	80 2f       	mov	r24, r16
    59ce:	0f df       	rcall	.-482    	; 0x57ee <_ZL7setDesth>
    59d0:	fc 01       	movw	r30, r24
    59d2:	11 83       	std	Z+1, r17	; 0x01
    59d4:	2c e9       	ldi	r18, 0x9C	; 156
    59d6:	22 83       	std	Z+2, r18	; 0x02
    59d8:	ef c0       	rjmp	.+478    	; 0x5bb8 <_Z13applyTemplateh+0x300>
    }


    //Heli Setup
    if(idx==j++)
    59da:	15 30       	cpi	r17, 0x05	; 5
    59dc:	09 f0       	breq	.+2      	; 0x59e0 <_Z13applyTemplateh+0x128>
    59de:	92 c0       	rjmp	.+292    	; 0x5b04 <_Z13applyTemplateh+0x24c>
    {
        clearMixes();  //This time we want a clean slate
    59e0:	3c df       	rcall	.-392    	; 0x585a <_Z10clearMixesv>
        clearCurves();
    59e2:	46 df       	rcall	.-372    	; 0x5870 <_Z11clearCurvesv>

        //Set up Mixes
        //3 cyclic channels
        md=setDest(1);  md->srcRaw=MIX_CYC1;
    59e4:	81 e0       	ldi	r24, 0x01	; 1
    59e6:	03 df       	rcall	.-506    	; 0x57ee <_ZL7setDesth>
    59e8:	5a e0       	ldi	r21, 0x0A	; 10
    59ea:	c5 2e       	mov	r12, r21
    59ec:	fc 01       	movw	r30, r24
    59ee:	c1 82       	std	Z+1, r12	; 0x01
        md=setDest(2);  md->srcRaw=MIX_CYC2;
    59f0:	82 e0       	ldi	r24, 0x02	; 2
    59f2:	fd de       	rcall	.-518    	; 0x57ee <_ZL7setDesth>
    59f4:	6b e0       	ldi	r22, 0x0B	; 11
    59f6:	d6 2e       	mov	r13, r22
    59f8:	fc 01       	movw	r30, r24
    59fa:	d1 82       	std	Z+1, r13	; 0x01
        md=setDest(3);  md->srcRaw=MIX_CYC3;
    59fc:	83 e0       	ldi	r24, 0x03	; 3
    59fe:	f7 de       	rcall	.-530    	; 0x57ee <_ZL7setDesth>
    5a00:	7c e0       	ldi	r23, 0x0C	; 12
    5a02:	f7 2e       	mov	r15, r23
    5a04:	fc 01       	movw	r30, r24
    5a06:	f1 82       	std	Z+1, r15	; 0x01

        //rudder
        setMix(4, STK_RUD ) ;
    5a08:	61 e0       	ldi	r22, 0x01	; 1
    5a0a:	84 e0       	ldi	r24, 0x04	; 4
    5a0c:	4e df       	rcall	.-356    	; 0x58aa <_Z6setMixhh>

        //Throttle
        md=setDest(5);  md->srcRaw=CM(STK_THR); md->swtch= DSW_ID0; md->curve=CV(1); md->carryTrim=TRIM_OFF;
    5a0e:	85 e0       	ldi	r24, 0x05	; 5
    5a10:	ee de       	rcall	.-548    	; 0x57ee <_ZL7setDesth>
    5a12:	fc 01       	movw	r30, r24
    5a14:	03 e0       	ldi	r16, 0x03	; 3
    5a16:	01 83       	std	Z+1, r16	; 0x01
    5a18:	a4 e0       	ldi	r26, 0x04	; 4
    5a1a:	ba 2e       	mov	r11, r26
    5a1c:	b3 82       	std	Z+3, r11	; 0x03
    5a1e:	87 e0       	ldi	r24, 0x07	; 7
    5a20:	84 83       	std	Z+4, r24	; 0x04
    5a22:	87 81       	ldd	r24, Z+7	; 0x07
    5a24:	81 60       	ori	r24, 0x01	; 1
    5a26:	87 83       	std	Z+7, r24	; 0x07
        md=setDest(5);  md->srcRaw=CM(STK_THR); md->swtch= DSW_ID1; md->curve=CV(2); md->carryTrim=TRIM_OFF;
    5a28:	85 e0       	ldi	r24, 0x05	; 5
    5a2a:	e1 de       	rcall	.-574    	; 0x57ee <_ZL7setDesth>
    5a2c:	fc 01       	movw	r30, r24
    5a2e:	01 83       	std	Z+1, r16	; 0x01
    5a30:	13 83       	std	Z+3, r17	; 0x03
    5a32:	b8 e0       	ldi	r27, 0x08	; 8
    5a34:	9b 2e       	mov	r9, r27
    5a36:	94 82       	std	Z+4, r9	; 0x04
    5a38:	87 81       	ldd	r24, Z+7	; 0x07
    5a3a:	81 60       	ori	r24, 0x01	; 1
    5a3c:	87 83       	std	Z+7, r24	; 0x07
        md=setDest(5);  md->srcRaw=CM(STK_THR); md->swtch= DSW_ID2; md->curve=CV(3); md->carryTrim=TRIM_OFF;
    5a3e:	85 e0       	ldi	r24, 0x05	; 5
    5a40:	d6 de       	rcall	.-596    	; 0x57ee <_ZL7setDesth>
    5a42:	fc 01       	movw	r30, r24
    5a44:	01 83       	std	Z+1, r16	; 0x01
    5a46:	86 e0       	ldi	r24, 0x06	; 6
    5a48:	e8 2e       	mov	r14, r24
    5a4a:	e3 82       	std	Z+3, r14	; 0x03
    5a4c:	99 e0       	ldi	r25, 0x09	; 9
    5a4e:	a9 2e       	mov	r10, r25
    5a50:	a4 82       	std	Z+4, r10	; 0x04
    5a52:	87 81       	ldd	r24, Z+7	; 0x07
    5a54:	81 60       	ori	r24, 0x01	; 1
    5a56:	87 83       	std	Z+7, r24	; 0x07
        md=setDest(5);  md->srcRaw=MIX_MAX;      md->weight=-100; md->swtch= DSW_THR; md->mltpx=MLTPX_REP;
    5a58:	85 e0       	ldi	r24, 0x05	; 5
    5a5a:	c9 de       	rcall	.-622    	; 0x57ee <_ZL7setDesth>
    5a5c:	fc 01       	movw	r30, r24
    5a5e:	91 82       	std	Z+1, r9	; 0x01
    5a60:	8c e9       	ldi	r24, 0x9C	; 156
    5a62:	82 83       	std	Z+2, r24	; 0x02
    5a64:	81 e0       	ldi	r24, 0x01	; 1
    5a66:	83 83       	std	Z+3, r24	; 0x03
    5a68:	87 81       	ldd	r24, Z+7	; 0x07
    5a6a:	89 7f       	andi	r24, 0xF9	; 249
    5a6c:	84 60       	ori	r24, 0x04	; 4
    5a6e:	87 83       	std	Z+7, r24	; 0x07

        //gyro gain
        md=setDest(6);  md->srcRaw=MIX_FULL; md->weight=30; md->swtch=-DSW_GEA;
    5a70:	86 e0       	ldi	r24, 0x06	; 6
    5a72:	bd de       	rcall	.-646    	; 0x57ee <_ZL7setDesth>
    5a74:	fc 01       	movw	r30, r24
    5a76:	a1 82       	std	Z+1, r10	; 0x01
    5a78:	8e e1       	ldi	r24, 0x1E	; 30
    5a7a:	82 83       	std	Z+2, r24	; 0x02
    5a7c:	88 ef       	ldi	r24, 0xF8	; 248
    5a7e:	83 83       	std	Z+3, r24	; 0x03

        //collective
        md=setDest(11); md->srcRaw=CM(STK_THR);  md->weight=70; md->swtch= DSW_ID0; md->curve=CV(4); md->carryTrim=TRIM_OFF;
    5a80:	8b e0       	ldi	r24, 0x0B	; 11
    5a82:	b5 de       	rcall	.-662    	; 0x57ee <_ZL7setDesth>
    5a84:	fc 01       	movw	r30, r24
    5a86:	01 83       	std	Z+1, r16	; 0x01
    5a88:	26 e4       	ldi	r18, 0x46	; 70
    5a8a:	a2 2e       	mov	r10, r18
    5a8c:	a2 82       	std	Z+2, r10	; 0x02
    5a8e:	b3 82       	std	Z+3, r11	; 0x03
    5a90:	c4 82       	std	Z+4, r12	; 0x04
    5a92:	87 81       	ldd	r24, Z+7	; 0x07
    5a94:	81 60       	ori	r24, 0x01	; 1
    5a96:	87 83       	std	Z+7, r24	; 0x07
        md=setDest(11); md->srcRaw=CM(STK_THR);  md->weight=70; md->swtch= DSW_ID1; md->curve=CV(5); md->carryTrim=TRIM_OFF;
    5a98:	8b e0       	ldi	r24, 0x0B	; 11
    5a9a:	a9 de       	rcall	.-686    	; 0x57ee <_ZL7setDesth>
    5a9c:	fc 01       	movw	r30, r24
    5a9e:	01 83       	std	Z+1, r16	; 0x01
    5aa0:	a2 82       	std	Z+2, r10	; 0x02
    5aa2:	13 83       	std	Z+3, r17	; 0x03
    5aa4:	d4 82       	std	Z+4, r13	; 0x04
    5aa6:	87 81       	ldd	r24, Z+7	; 0x07
    5aa8:	81 60       	ori	r24, 0x01	; 1
    5aaa:	87 83       	std	Z+7, r24	; 0x07
        md=setDest(11); md->srcRaw=CM(STK_THR);  md->weight=70; md->swtch= DSW_ID2; md->curve=CV(6); md->carryTrim=TRIM_OFF;
    5aac:	8b e0       	ldi	r24, 0x0B	; 11
    5aae:	9f de       	rcall	.-706    	; 0x57ee <_ZL7setDesth>
    5ab0:	fc 01       	movw	r30, r24
    5ab2:	01 83       	std	Z+1, r16	; 0x01
    5ab4:	a2 82       	std	Z+2, r10	; 0x02
    5ab6:	e3 82       	std	Z+3, r14	; 0x03
    5ab8:	f4 82       	std	Z+4, r15	; 0x04
    5aba:	87 81       	ldd	r24, Z+7	; 0x07
    5abc:	81 60       	ori	r24, 0x01	; 1
    5abe:	87 83       	std	Z+7, r24	; 0x07

        g_model.swashType = SWASH_TYPE_120;
    5ac0:	80 91 37 02 	lds	r24, 0x0237
    5ac4:	8f 71       	andi	r24, 0x1F	; 31
    5ac6:	80 62       	ori	r24, 0x20	; 32
    5ac8:	80 93 37 02 	sts	0x0237, r24
        g_model.swashCollectiveSource = CH(11);
    5acc:	8f e1       	ldi	r24, 0x1F	; 31
    5ace:	80 93 38 02 	sts	0x0238, r24

        //Set up Curves
        setCurve(CURVE5(1),heli_ar1);
    5ad2:	63 e7       	ldi	r22, 0x73	; 115
    5ad4:	7f e0       	ldi	r23, 0x0F	; 15
    5ad6:	80 e0       	ldi	r24, 0x00	; 0
    5ad8:	7a de       	rcall	.-780    	; 0x57ce <_ZL8setCurvehPKa>
        setCurve(CURVE5(2),heli_ar2);
    5ada:	6e e6       	ldi	r22, 0x6E	; 110
    5adc:	7f e0       	ldi	r23, 0x0F	; 15
    5ade:	81 e0       	ldi	r24, 0x01	; 1
    5ae0:	76 de       	rcall	.-788    	; 0x57ce <_ZL8setCurvehPKa>
        setCurve(CURVE5(3),heli_ar3);
    5ae2:	69 e6       	ldi	r22, 0x69	; 105
    5ae4:	7f e0       	ldi	r23, 0x0F	; 15
    5ae6:	82 e0       	ldi	r24, 0x02	; 2
    5ae8:	72 de       	rcall	.-796    	; 0x57ce <_ZL8setCurvehPKa>
        setCurve(CURVE5(4),heli_ar4);
    5aea:	64 e6       	ldi	r22, 0x64	; 100
    5aec:	7f e0       	ldi	r23, 0x0F	; 15
    5aee:	83 e0       	ldi	r24, 0x03	; 3
    5af0:	6e de       	rcall	.-804    	; 0x57ce <_ZL8setCurvehPKa>
        setCurve(CURVE5(5),heli_ar5);
    5af2:	6f e5       	ldi	r22, 0x5F	; 95
    5af4:	7f e0       	ldi	r23, 0x0F	; 15
    5af6:	84 e0       	ldi	r24, 0x04	; 4
    5af8:	6a de       	rcall	.-812    	; 0x57ce <_ZL8setCurvehPKa>
        setCurve(CURVE5(6),heli_ar5);
    5afa:	6f e5       	ldi	r22, 0x5F	; 95
    5afc:	7f e0       	ldi	r23, 0x0F	; 15
    5afe:	85 e0       	ldi	r24, 0x05	; 5
    5b00:	66 de       	rcall	.-820    	; 0x57ce <_ZL8setCurvehPKa>
    5b02:	5a c0       	rjmp	.+180    	; 0x5bb8 <_Z13applyTemplateh+0x300>
    }

    //Gyro Gain
    if(idx==j++)
    5b04:	16 30       	cpi	r17, 0x06	; 6
    5b06:	a1 f4       	brne	.+40     	; 0x5b30 <_Z13applyTemplateh+0x278>
    {
        md=setDest(6);  md->srcRaw=STK_P2; md->weight= 50; md->swtch=-DSW_GEA; md->sOffset=100;
    5b08:	86 e0       	ldi	r24, 0x06	; 6
    5b0a:	71 de       	rcall	.-798    	; 0x57ee <_ZL7setDesth>
    5b0c:	fc 01       	movw	r30, r24
    5b0e:	11 83       	std	Z+1, r17	; 0x01
    5b10:	82 e3       	ldi	r24, 0x32	; 50
    5b12:	82 83       	std	Z+2, r24	; 0x02
    5b14:	88 ef       	ldi	r24, 0xF8	; 248
    5b16:	83 83       	std	Z+3, r24	; 0x03
    5b18:	04 e6       	ldi	r16, 0x64	; 100
    5b1a:	00 87       	std	Z+8, r16	; 0x08
        md=setDest(6);  md->srcRaw=STK_P2; md->weight=-50; md->swtch= DSW_GEA; md->sOffset=100;
    5b1c:	86 e0       	ldi	r24, 0x06	; 6
    5b1e:	67 de       	rcall	.-818    	; 0x57ee <_ZL7setDesth>
    5b20:	fc 01       	movw	r30, r24
    5b22:	11 83       	std	Z+1, r17	; 0x01
    5b24:	8e ec       	ldi	r24, 0xCE	; 206
    5b26:	82 83       	std	Z+2, r24	; 0x02
    5b28:	88 e0       	ldi	r24, 0x08	; 8
    5b2a:	83 83       	std	Z+3, r24	; 0x03
    5b2c:	00 87       	std	Z+8, r16	; 0x08
    5b2e:	44 c0       	rjmp	.+136    	; 0x5bb8 <_Z13applyTemplateh+0x300>
    }

    //Servo Test
    if(idx==j++)
    5b30:	17 30       	cpi	r17, 0x07	; 7
    5b32:	09 f0       	breq	.+2      	; 0x5b36 <_Z13applyTemplateh+0x27e>
    5b34:	41 c0       	rjmp	.+130    	; 0x5bb8 <_Z13applyTemplateh+0x300>
    {
        md=setDest(15); md->srcRaw=CH(16);   md->speedUp = 8; md->speedDown = 8;
    5b36:	8f e0       	ldi	r24, 0x0F	; 15
    5b38:	5a de       	rcall	.-844    	; 0x57ee <_ZL7setDesth>
    5b3a:	14 e2       	ldi	r17, 0x24	; 36
    5b3c:	fc 01       	movw	r30, r24
    5b3e:	11 83       	std	Z+1, r17	; 0x01
    5b40:	28 e8       	ldi	r18, 0x88	; 136
    5b42:	26 83       	std	Z+6, r18	; 0x06
        md=setDest(16); md->srcRaw=MIX_FULL; md->weight= 110; md->swtch=DSW_SW1;
    5b44:	80 e1       	ldi	r24, 0x10	; 16
    5b46:	53 de       	rcall	.-858    	; 0x57ee <_ZL7setDesth>
    5b48:	fc 01       	movw	r30, r24
    5b4a:	89 e0       	ldi	r24, 0x09	; 9
    5b4c:	81 83       	std	Z+1, r24	; 0x01
    5b4e:	0e e6       	ldi	r16, 0x6E	; 110
    5b50:	02 83       	std	Z+2, r16	; 0x02
    5b52:	8a e0       	ldi	r24, 0x0A	; 10
    5b54:	83 83       	std	Z+3, r24	; 0x03
        md=setDest(16); md->srcRaw=MIX_MAX;  md->weight=-110; md->swtch=DSW_SW2; md->mltpx=MLTPX_REP;
    5b56:	80 e1       	ldi	r24, 0x10	; 16
    5b58:	4a de       	rcall	.-876    	; 0x57ee <_ZL7setDesth>
    5b5a:	fc 01       	movw	r30, r24
    5b5c:	48 e0       	ldi	r20, 0x08	; 8
    5b5e:	f4 2e       	mov	r15, r20
    5b60:	f1 82       	std	Z+1, r15	; 0x01
    5b62:	82 e9       	ldi	r24, 0x92	; 146
    5b64:	82 83       	std	Z+2, r24	; 0x02
    5b66:	8b e0       	ldi	r24, 0x0B	; 11
    5b68:	83 83       	std	Z+3, r24	; 0x03
    5b6a:	87 81       	ldd	r24, Z+7	; 0x07
    5b6c:	89 7f       	andi	r24, 0xF9	; 249
    5b6e:	84 60       	ori	r24, 0x04	; 4
    5b70:	87 83       	std	Z+7, r24	; 0x07
        md=setDest(16); md->srcRaw=MIX_MAX;  md->weight= 110; md->swtch=DSW_SW3; md->mltpx=MLTPX_REP;
    5b72:	80 e1       	ldi	r24, 0x10	; 16
    5b74:	3c de       	rcall	.-904    	; 0x57ee <_ZL7setDesth>
    5b76:	fc 01       	movw	r30, r24
    5b78:	f1 82       	std	Z+1, r15	; 0x01
    5b7a:	02 83       	std	Z+2, r16	; 0x02
    5b7c:	8c e0       	ldi	r24, 0x0C	; 12
    5b7e:	83 83       	std	Z+3, r24	; 0x03
    5b80:	87 81       	ldd	r24, Z+7	; 0x07
    5b82:	89 7f       	andi	r24, 0xF9	; 249
    5b84:	84 60       	ori	r24, 0x04	; 4
    5b86:	87 83       	std	Z+7, r24	; 0x07

void setSwitch(uint8_t idx, uint8_t func, int8_t v1, int8_t v2)
{
  CSwData *cs = &g_model.customSw[idx-1] ;
  cs->func = func ;
  cs->andsw = 0 ;
    5b88:	8b e0       	ldi	r24, 0x0B	; 11
    5b8a:	80 93 79 04 	sts	0x0479, r24
  cs->v1   = v1 ;
    5b8e:	83 e2       	ldi	r24, 0x23	; 35
    5b90:	80 93 77 04 	sts	0x0477, r24
  cs->v2   = v2 ;
    5b94:	10 93 78 04 	sts	0x0478, r17

void setSwitch(uint8_t idx, uint8_t func, int8_t v1, int8_t v2)
{
  CSwData *cs = &g_model.customSw[idx-1] ;
  cs->func = func ;
  cs->andsw = 0 ;
    5b98:	91 e0       	ldi	r25, 0x01	; 1
    5b9a:	90 93 7c 04 	sts	0x047C, r25
  cs->v1   = v1 ;
    5b9e:	80 93 7a 04 	sts	0x047A, r24
  cs->v2   = v2 ;
    5ba2:	99 e6       	ldi	r25, 0x69	; 105
    5ba4:	90 93 7b 04 	sts	0x047B, r25

void setSwitch(uint8_t idx, uint8_t func, int8_t v1, int8_t v2)
{
  CSwData *cs = &g_model.customSw[idx-1] ;
  cs->func = func ;
  cs->andsw = 0 ;
    5ba8:	92 e0       	ldi	r25, 0x02	; 2
    5baa:	90 93 7f 04 	sts	0x047F, r25
  cs->v1   = v1 ;
    5bae:	80 93 7d 04 	sts	0x047D, r24
  cs->v2   = v2 ;
    5bb2:	87 e9       	ldi	r24, 0x97	; 151
    5bb4:	80 93 7e 04 	sts	0x047E, r24
        setSwitch(3,CS_VNEG,CH(15),  -105);
    }



    STORE_MODELVARS;
    5bb8:	82 e0       	ldi	r24, 0x02	; 2
    5bba:	0e 94 4e 20 	call	0x409c	; 0x409c <_Z7eeDirtyh>
    eeWaitComplete() ;

#endif

}
    5bbe:	0f 90       	pop	r0
    5bc0:	0f 90       	pop	r0
    5bc2:	0f 90       	pop	r0
    5bc4:	0f 90       	pop	r0
    5bc6:	df 91       	pop	r29
    5bc8:	cf 91       	pop	r28
    5bca:	1f 91       	pop	r17
    5bcc:	0f 91       	pop	r16
    5bce:	ff 90       	pop	r15
    5bd0:	ef 90       	pop	r14
    5bd2:	df 90       	pop	r13
    5bd4:	cf 90       	pop	r12
    5bd6:	bf 90       	pop	r11
    5bd8:	af 90       	pop	r10
    5bda:	9f 90       	pop	r9
    }



    STORE_MODELVARS;
    eeWaitComplete() ;
    5bdc:	0c 94 4c 21 	jmp	0x4298	; 0x4298 <_Z14eeWaitCompletev>

00005be0 <_Z12setPpmTimersv>:
	PausePulses = 0;
	setupPulses();
}

void setPpmTimers() {
	OCR1A = 40000;		// Next frame starts in 20 mS
    5be0:	80 e4       	ldi	r24, 0x40	; 64
    5be2:	9c e9       	ldi	r25, 0x9C	; 156
    5be4:	9b bd       	out	0x2b, r25	; 43
    5be6:	8a bd       	out	0x2a, r24	; 42
#ifdef CPUM2561
			TIMSK1 |= (1<<OCIE1A);		// Enable COMPA
#else
	TIMSK |= (1 << OCIE1A);		// Enable COMPA
    5be8:	87 b7       	in	r24, 0x37	; 55
    5bea:	80 61       	ori	r24, 0x10	; 16
    5bec:	87 bf       	out	0x37, r24	; 55
#endif
	TCCR1A = (0 << WGM10);
    5bee:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << WGM12) | (2 << CS10); // CTC OCRA, 16MHz / 8
    5bf0:	8a e0       	ldi	r24, 0x0A	; 10
    5bf2:	8e bd       	out	0x2e, r24	; 46
    5bf4:	08 95       	ret

00005bf6 <_Z14setupPulsesPPMh>:
//uint16_t PPM_gap = 300 * 2; //Stoplen *2
//uint16_t PPM_frame ;

uint16_t B3_comp_value;

void setupPulsesPPM(uint8_t proto) {
    5bf6:	0f 93       	push	r16
    5bf8:	1f 93       	push	r17
    5bfa:	cf 93       	push	r28
    5bfc:	df 93       	push	r29
#define PPM_CENTER 1500*2
	int16_t PPM_range;

	uint8_t startChan = g_model.ppmStart;
    5bfe:	10 91 32 02 	lds	r17, 0x0232
    5c02:	12 95       	swap	r17
    5c04:	16 95       	lsr	r17
    5c06:	17 70       	andi	r17, 0x07	; 7

	//Total frame length = 22.5msec
	//each pulse is 0.7..1.7ms long with a 0.3ms stop tail
	//The pulse ISR is 2mhz that's why everything is multiplied by 2
	uint16_t *ptr;
	ptr = (proto == PROTO_PPM) ? pulses2MHz.pword : &pulses2MHz.pword[PULSES_WORD_SIZE / 2];
    5c08:	88 23       	and	r24, r24
    5c0a:	31 f0       	breq	.+12     	; 0x5c18 <_Z14setupPulsesPPMh+0x22>
    5c0c:	a6 e5       	ldi	r26, 0x56	; 86
    5c0e:	bb e0       	ldi	r27, 0x0B	; 11
	uint8_t p = ((proto == PROTO_PPM16) ? 16 : 8) + g_model.ppmNCH * 2; //Channels *2
    5c10:	83 30       	cpi	r24, 0x03	; 3
    5c12:	21 f4       	brne	.+8      	; 0x5c1c <_Z14setupPulsesPPMh+0x26>
    5c14:	20 e1       	ldi	r18, 0x10	; 16
    5c16:	03 c0       	rjmp	.+6      	; 0x5c1e <_Z14setupPulsesPPMh+0x28>

	//Total frame length = 22.5msec
	//each pulse is 0.7..1.7ms long with a 0.3ms stop tail
	//The pulse ISR is 2mhz that's why everything is multiplied by 2
	uint16_t *ptr;
	ptr = (proto == PROTO_PPM) ? pulses2MHz.pword : &pulses2MHz.pword[PULSES_WORD_SIZE / 2];
    5c18:	ae e0       	ldi	r26, 0x0E	; 14
    5c1a:	bb e0       	ldi	r27, 0x0B	; 11
	uint8_t p = ((proto == PROTO_PPM16) ? 16 : 8) + g_model.ppmNCH * 2; //Channels *2
    5c1c:	28 e0       	ldi	r18, 0x08	; 8
    5c1e:	90 91 31 02 	lds	r25, 0x0231
    5c22:	99 0f       	add	r25, r25
    5c24:	91 0f       	add	r25, r17
	p += startChan;
    5c26:	92 0f       	add	r25, r18
	uint16_t q = (g_model.ppmDelay * 50 + 300) * 2; //Stoplen *2
    5c28:	60 91 34 02 	lds	r22, 0x0234
    5c2c:	24 e6       	ldi	r18, 0x64	; 100
    5c2e:	62 02       	muls	r22, r18
    5c30:	b0 01       	movw	r22, r0
    5c32:	11 24       	eor	r1, r1
    5c34:	68 5a       	subi	r22, 0xA8	; 168
    5c36:	7d 4f       	sbci	r23, 0xFD	; 253
	uint16_t rest = 22500u * 2 - q; //Minimum Framelen=22.5 ms
	rest += (int16_t(g_model.ppmFrameLength)) * 1000;
    5c38:	00 91 3a 02 	lds	r16, 0x023A
    5c3c:	48 ee       	ldi	r20, 0xE8	; 232
    5c3e:	53 e0       	ldi	r21, 0x03	; 3
    5c40:	04 03       	mulsu	r16, r20
    5c42:	90 01       	movw	r18, r0
    5c44:	05 9f       	mul	r16, r21
    5c46:	30 0d       	add	r19, r0
    5c48:	11 24       	eor	r1, r1
	uint16_t *ptr;
	ptr = (proto == PROTO_PPM) ? pulses2MHz.pword : &pulses2MHz.pword[PULSES_WORD_SIZE / 2];
	uint8_t p = ((proto == PROTO_PPM16) ? 16 : 8) + g_model.ppmNCH * 2; //Channels *2
	p += startChan;
	uint16_t q = (g_model.ppmDelay * 50 + 300) * 2; //Stoplen *2
	uint16_t rest = 22500u * 2 - q; //Minimum Framelen=22.5 ms
    5c4a:	28 53       	subi	r18, 0x38	; 56
    5c4c:	30 45       	sbci	r19, 0x50	; 80
	rest += (int16_t(g_model.ppmFrameLength)) * 1000;
    5c4e:	26 1b       	sub	r18, r22
    5c50:	37 0b       	sbc	r19, r23
	//    if(p>9) rest=p*(1720u*2 + q) + 4000u*2; //for more than 9 channels, frame must be longer
//	if ( proto != PROTO_PPM )
//	{
	*ptr++ = q;
    5c52:	fd 01       	movw	r30, r26
    5c54:	32 96       	adiw	r30, 0x02	; 2
    5c56:	6d 93       	st	X+, r22
    5c58:	7c 93       	st	X, r23
//	}
	PPM_range = g_model.extendedLimits ? 640 * 2 : 512 * 2;   //range of 0.7..1.7msec
    5c5a:	40 91 37 02 	lds	r20, 0x0237
    5c5e:	41 ff       	sbrs	r20, 1
    5c60:	03 c0       	rjmp	.+6      	; 0x5c68 <_Z14setupPulsesPPMh+0x72>
    5c62:	40 e0       	ldi	r20, 0x00	; 0
    5c64:	55 e0       	ldi	r21, 0x05	; 5
    5c66:	02 c0       	rjmp	.+4      	; 0x5c6c <_Z14setupPulsesPPMh+0x76>
    5c68:	40 e0       	ldi	r20, 0x00	; 0
    5c6a:	54 e0       	ldi	r21, 0x04	; 4
	for (uint8_t i = (proto == PROTO_PPM16) ? p - 8 : startChan; i < p; i++) { //NUM_CHNOUT
    5c6c:	83 30       	cpi	r24, 0x03	; 3
    5c6e:	11 f4       	brne	.+4      	; 0x5c74 <_Z14setupPulsesPPMh+0x7e>
    5c70:	18 ef       	ldi	r17, 0xF8	; 248
    5c72:	19 0f       	add	r17, r25
//    int16_t v = max(min(g_chans512[i],PPM_range),-PPM_range) + PPM_CENTER;
		int16_t v = g_chans512[i];
		if (v > PPM_range) {
			v = PPM_range;
		}
		if (v < -PPM_range) {
    5c74:	cc 27       	eor	r28, r28
    5c76:	dd 27       	eor	r29, r29
    5c78:	c4 1b       	sub	r28, r20
    5c7a:	d5 0b       	sbc	r29, r21
//	if ( proto != PROTO_PPM )
//	{
	*ptr++ = q;
//	}
	PPM_range = g_model.extendedLimits ? 640 * 2 : 512 * 2;   //range of 0.7..1.7msec
	for (uint8_t i = (proto == PROTO_PPM16) ? p - 8 : startChan; i < p; i++) { //NUM_CHNOUT
    5c7c:	19 17       	cp	r17, r25
    5c7e:	f0 f4       	brcc	.+60     	; 0x5cbc <_Z14setupPulsesPPMh+0xc6>
//    int16_t v = max(min(g_chans512[i],PPM_range),-PPM_range) + PPM_CENTER;
		int16_t v = g_chans512[i];
    5c80:	a1 2f       	mov	r26, r17
    5c82:	b0 e0       	ldi	r27, 0x00	; 0
    5c84:	aa 0f       	add	r26, r26
    5c86:	bb 1f       	adc	r27, r27
    5c88:	a1 58       	subi	r26, 0x81	; 129
    5c8a:	b2 4f       	sbci	r27, 0xF2	; 242
    5c8c:	0d 90       	ld	r0, X+
    5c8e:	bc 91       	ld	r27, X
    5c90:	a0 2d       	mov	r26, r0
    5c92:	4a 17       	cp	r20, r26
    5c94:	5b 07       	cpc	r21, r27
    5c96:	0c f4       	brge	.+2      	; 0x5c9a <_Z14setupPulsesPPMh+0xa4>
    5c98:	da 01       	movw	r26, r20
    5c9a:	ac 17       	cp	r26, r28
    5c9c:	bd 07       	cpc	r27, r29
    5c9e:	0c f4       	brge	.+2      	; 0x5ca2 <_Z14setupPulsesPPMh+0xac>
    5ca0:	de 01       	movw	r26, r28
			v = PPM_range;
		}
		if (v < -PPM_range) {
			v = -PPM_range;
		}
		v += PPM_CENTER;
    5ca2:	a8 54       	subi	r26, 0x48	; 72
    5ca4:	b4 4f       	sbci	r27, 0xF4	; 244

		rest -= v; // (*ptr + q);
    5ca6:	2a 1b       	sub	r18, r26
    5ca8:	3b 0b       	sbc	r19, r27
		*ptr++ = v - q; /* as Pat MacKenzie suggests */
    5caa:	a6 1b       	sub	r26, r22
    5cac:	b7 0b       	sbc	r27, r23
    5cae:	b1 83       	std	Z+1, r27	; 0x01
    5cb0:	a0 83       	st	Z, r26
		*ptr++ = q;      //to here
    5cb2:	73 83       	std	Z+3, r23	; 0x03
    5cb4:	62 83       	std	Z+2, r22	; 0x02
//	if ( proto != PROTO_PPM )
//	{
	*ptr++ = q;
//	}
	PPM_range = g_model.extendedLimits ? 640 * 2 : 512 * 2;   //range of 0.7..1.7msec
	for (uint8_t i = (proto == PROTO_PPM16) ? p - 8 : startChan; i < p; i++) { //NUM_CHNOUT
    5cb6:	1f 5f       	subi	r17, 0xFF	; 255
    5cb8:	34 96       	adiw	r30, 0x04	; 4
    5cba:	e0 cf       	rjmp	.-64     	; 0x5c7c <_Z14setupPulsesPPMh+0x86>

		rest -= v; // (*ptr + q);
		*ptr++ = v - q; /* as Pat MacKenzie suggests */
		*ptr++ = q;      //to here
	}
	if (rest < 9000) {
    5cbc:	28 32       	cpi	r18, 0x28	; 40
    5cbe:	93 e2       	ldi	r25, 0x23	; 35
    5cc0:	39 07       	cpc	r19, r25
    5cc2:	10 f4       	brcc	.+4      	; 0x5cc8 <_Z14setupPulsesPPMh+0xd2>
		rest = 9000;
    5cc4:	28 e2       	ldi	r18, 0x28	; 40
    5cc6:	33 e2       	ldi	r19, 0x23	; 35
	}
	*ptr++ = rest;
    5cc8:	31 83       	std	Z+1, r19	; 0x01
    5cca:	20 83       	st	Z, r18
	if (proto != PROTO_PPM) {
    5ccc:	88 23       	and	r24, r24
    5cce:	31 f0       	breq	.+12     	; 0x5cdc <_Z14setupPulsesPPMh+0xe6>
		B3_comp_value = rest - 1000;		// 500uS before end of sync pulse
    5cd0:	28 5e       	subi	r18, 0xE8	; 232
    5cd2:	33 40       	sbci	r19, 0x03	; 3
    5cd4:	30 93 09 0b 	sts	0x0B09, r19
    5cd8:	20 93 08 0b 	sts	0x0B08, r18
//	if ( proto == PROTO_PPM )
//	{
//		*ptr++ = q ;
//	}

	*ptr = 0;
    5cdc:	13 82       	std	Z+3, r1	; 0x03
    5cde:	12 82       	std	Z+2, r1	; 0x02
}
    5ce0:	df 91       	pop	r29
    5ce2:	cf 91       	pop	r28
    5ce4:	1f 91       	pop	r17
    5ce6:	0f 91       	pop	r16
    5ce8:	08 95       	ret

00005cea <_Z15setupPulsesDsm2h>:
	*ptr++ = len + BITLEN_DSM2 - 1; // 2 stop bits
	pulses2MHzptr = ptr;
}

static uint8_t *Dsm2_pulsePtr = pulses2MHz.pbyte;
void setupPulsesDsm2(uint8_t chns) {
    5cea:	1f 93       	push	r17
    5cec:	cf 93       	push	r28
    5cee:	df 93       	push	r29
    5cf0:	18 2f       	mov	r17, r24
			0xFF, 0x00, 0x00, 0xAA, 0x05, 0xFF, 0x09, 0xFF, 0x0D, 0xFF, 0x13, 0x54, 0x14, 0xAA };
	uint8_t counter;
	uint8_t dsmdat0copy;
	//	CSwData &cs = g_model.customSw[NUM_CSW-1];

	pulses2MHzptr = pulses2MHz.pbyte;
    5cf2:	2e e0       	ldi	r18, 0x0E	; 14
    5cf4:	3b e0       	ldi	r19, 0x0B	; 11
    5cf6:	30 93 1b 01 	sts	0x011B, r19
    5cfa:	20 93 1a 01 	sts	0x011A, r18

	// If more channels needed make sure the pulses union/array is large enough

	dsmdat0copy = dsmDat[0];		// Fetch byte once, saves flash
    5cfe:	c0 91 08 01 	lds	r28, 0x0108
	if (dsmdat0copy & BadData)  //first time through, setup header
    5d02:	8c 2f       	mov	r24, r28
    5d04:	87 74       	andi	r24, 0x47	; 71
    5d06:	61 f0       	breq	.+24     	; 0x5d20 <_Z15setupPulsesDsm2h+0x36>
	{
		if (g_model.sub_protocol == LPXDSM2) {
    5d08:	90 91 30 02 	lds	r25, 0x0230
    5d0c:	90 7c       	andi	r25, 0xC0	; 192
    5d0e:	21 f0       	breq	.+8      	; 0x5d18 <_Z15setupPulsesDsm2h+0x2e>
			dsmdat0copy = 0x80;
		} else if (g_model.sub_protocol == DSM2only) {
    5d10:	90 34       	cpi	r25, 0x40	; 64
    5d12:	21 f4       	brne	.+8      	; 0x5d1c <_Z15setupPulsesDsm2h+0x32>
			dsmdat0copy = 0x90;
    5d14:	c0 e9       	ldi	r28, 0x90	; 144
    5d16:	06 c0       	rjmp	.+12     	; 0x5d24 <_Z15setupPulsesDsm2h+0x3a>

	dsmdat0copy = dsmDat[0];		// Fetch byte once, saves flash
	if (dsmdat0copy & BadData)  //first time through, setup header
	{
		if (g_model.sub_protocol == LPXDSM2) {
			dsmdat0copy = 0x80;
    5d18:	c0 e8       	ldi	r28, 0x80	; 128
    5d1a:	04 c0       	rjmp	.+8      	; 0x5d24 <_Z15setupPulsesDsm2h+0x3a>
		} else if (g_model.sub_protocol == DSM2only) {
			dsmdat0copy = 0x90;
		} else {
			dsmdat0copy = 0x98;  //dsmx, bind mode
    5d1c:	c8 e9       	ldi	r28, 0x98	; 152
    5d1e:	02 c0       	rjmp	.+4      	; 0x5d24 <_Z15setupPulsesDsm2h+0x3a>
		}
	}
	if ((dsmdat0copy & BindBit) && (!keyState(SW_Trainer)))
    5d20:	c7 ff       	sbrs	r28, 7
    5d22:	05 c0       	rjmp	.+10     	; 0x5d2e <_Z15setupPulsesDsm2h+0x44>
    5d24:	87 e1       	ldi	r24, 0x17	; 23
    5d26:	80 dc       	rcall	.-1792   	; 0x5628 <_Z8keyState8EnumKeys>
    5d28:	88 23       	and	r24, r24
    5d2a:	09 f4       	brne	.+2      	; 0x5d2e <_Z15setupPulsesDsm2h+0x44>
    5d2c:	6e c0       	rjmp	.+220    	; 0x5e0a <_Z15setupPulsesDsm2h+0x120>
		dsmdat0copy &= ~BindBit;		//clear bind bit if trainer not pulled
	if ((!(dsmdat0copy & BindBit)) && getSwitch(MAX_DRSWITCH - 1, 0, 0))
    5d2e:	c7 fd       	sbrc	r28, 7
    5d30:	6e c0       	rjmp	.+220    	; 0x5e0e <_Z15setupPulsesDsm2h+0x124>
    5d32:	40 e0       	ldi	r20, 0x00	; 0
    5d34:	60 e0       	ldi	r22, 0x00	; 0
    5d36:	85 e1       	ldi	r24, 0x15	; 21
    5d38:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_Z9getSwitchabh>
    5d3c:	88 23       	and	r24, r24
    5d3e:	09 f4       	brne	.+2      	; 0x5d42 <_Z15setupPulsesDsm2h+0x58>
    5d40:	66 c0       	rjmp	.+204    	; 0x5e0e <_Z15setupPulsesDsm2h+0x124>
		dsmdat0copy |= RangeCheckBit;   //range check function
    5d42:	c0 62       	ori	r28, 0x20	; 32
	else dsmdat0copy &= ~RangeCheckBit;

	dsmDat[0] = dsmdat0copy;		// Put byte back
    5d44:	c0 93 08 01 	sts	0x0108, r28

//    dsmDat[1]=g_eeGeneral.currModel+1;  //DSM2 Header second byte for model match
	dsmDat[1] = g_model.ppmNCH;  //DSM2 Header second byte for model match
    5d48:	80 91 31 02 	lds	r24, 0x0231
    5d4c:	80 93 09 01 	sts	0x0109, r24
    5d50:	eb e0       	ldi	r30, 0x0B	; 11
    5d52:	f1 e0       	ldi	r31, 0x01	; 1
    5d54:	af e7       	ldi	r26, 0x7F	; 127
    5d56:	bd e0       	ldi	r27, 0x0D	; 13
//    uint8_t *p = &dsmDat[2] ;
//		FORCE_INDIRECT(p) ;
	for (uint8_t i = 0; i < chns; i++) {
    5d58:	90 e0       	ldi	r25, 0x00	; 0
		uint16_t pulse = limit(0, ((g_chans512[i] * 13) >> 5) + 512, 1023);
    5d5a:	6d e0       	ldi	r22, 0x0D	; 13

//    dsmDat[1]=g_eeGeneral.currModel+1;  //DSM2 Header second byte for model match
	dsmDat[1] = g_model.ppmNCH;  //DSM2 Header second byte for model match
//    uint8_t *p = &dsmDat[2] ;
//		FORCE_INDIRECT(p) ;
	for (uint8_t i = 0; i < chns; i++) {
    5d5c:	91 17       	cp	r25, r17
    5d5e:	19 f1       	breq	.+70     	; 0x5da6 <_Z15setupPulsesDsm2h+0xbc>
		uint16_t pulse = limit(0, ((g_chans512[i] * 13) >> 5) + 512, 1023);
    5d60:	4d 91       	ld	r20, X+
    5d62:	5d 91       	ld	r21, X+
    5d64:	64 9f       	mul	r22, r20
    5d66:	90 01       	movw	r18, r0
    5d68:	65 9f       	mul	r22, r21
    5d6a:	30 0d       	add	r19, r0
    5d6c:	11 24       	eor	r1, r1
    5d6e:	85 e0       	ldi	r24, 0x05	; 5
    5d70:	35 95       	asr	r19
    5d72:	27 95       	ror	r18
    5d74:	8a 95       	dec	r24
    5d76:	e1 f7       	brne	.-8      	; 0x5d70 <_Z15setupPulsesDsm2h+0x86>
    5d78:	3e 5f       	subi	r19, 0xFE	; 254
/// liefert Betrag des Arguments
template<class t> inline t abs(t a){ return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> inline t min(t a, t b){ return a<b?a:b; }
/// liefert das Maximum der Argumente
template<class t> inline t max(t a, t b){ return a>b?a:b; }
    5d7a:	37 fd       	sbrc	r19, 7
    5d7c:	07 c0       	rjmp	.+14     	; 0x5d8c <_Z15setupPulsesDsm2h+0xa2>
#define DIM(arr) (sizeof((arr))/sizeof((arr)[0]))

/// liefert Betrag des Arguments
template<class t> inline t abs(t a){ return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> inline t min(t a, t b){ return a<b?a:b; }
    5d7e:	2f 3f       	cpi	r18, 0xFF	; 255
    5d80:	83 e0       	ldi	r24, 0x03	; 3
    5d82:	38 07       	cpc	r19, r24
    5d84:	2c f0       	brlt	.+10     	; 0x5d90 <_Z15setupPulsesDsm2h+0xa6>
    5d86:	2f ef       	ldi	r18, 0xFF	; 255
    5d88:	33 e0       	ldi	r19, 0x03	; 3
    5d8a:	02 c0       	rjmp	.+4      	; 0x5d90 <_Z15setupPulsesDsm2h+0xa6>
/// liefert das Maximum der Argumente
template<class t> inline t max(t a, t b){ return a>b?a:b; }
    5d8c:	20 e0       	ldi	r18, 0x00	; 0
    5d8e:	30 e0       	ldi	r19, 0x00	; 0
    5d90:	ef 01       	movw	r28, r30
    5d92:	21 97       	sbiw	r28, 0x01	; 1
		dsmDat[2 + 2 * i] = (i << 2) | ((pulse >> 8) & 0x03);
    5d94:	89 2f       	mov	r24, r25
    5d96:	88 0f       	add	r24, r24
    5d98:	88 0f       	add	r24, r24
    5d9a:	83 2b       	or	r24, r19
    5d9c:	88 83       	st	Y, r24
		dsmDat[3 + 2 * i] = pulse & 0xff;
    5d9e:	20 83       	st	Z, r18

//    dsmDat[1]=g_eeGeneral.currModel+1;  //DSM2 Header second byte for model match
	dsmDat[1] = g_model.ppmNCH;  //DSM2 Header second byte for model match
//    uint8_t *p = &dsmDat[2] ;
//		FORCE_INDIRECT(p) ;
	for (uint8_t i = 0; i < chns; i++) {
    5da0:	9f 5f       	subi	r25, 0xFF	; 255
    5da2:	32 96       	adiw	r30, 0x02	; 2
    5da4:	db cf       	rjmp	.-74     	; 0x5d5c <_Z15setupPulsesDsm2h+0x72>
    5da6:	a8 e0       	ldi	r26, 0x08	; 8
    5da8:	b1 e0       	ldi	r27, 0x01	; 1
//        *p++ = (i<<2) | ((pulse>>8)&0x03);
//        *p++ = pulse & 0xff;
	}

	for (counter = 0; counter < 14; counter += 1) {
		sendByteDsm2(dsmDat[counter]);
    5daa:	9d 91       	ld	r25, X+
		{
	bool lev = 0;
	uint8_t len = BITLEN_DSM2; //max val: 9*16 < 256
	uint8_t *ptr;

	ptr = pulses2MHzptr;
    5dac:	e0 91 1a 01 	lds	r30, 0x011A
    5db0:	f0 91 1b 01 	lds	r31, 0x011B
    5db4:	29 e0       	ldi	r18, 0x09	; 9
//}
#define BITLEN_DSM2 (8*2) //125000 Baud
static void sendByteDsm2(uint8_t b) //max 10changes 0 10 10 10 10 1
		{
	bool lev = 0;
	uint8_t len = BITLEN_DSM2; //max val: 9*16 < 256
    5db6:	80 e1       	ldi	r24, 0x10	; 16
//  pulses2MHzptr = ptr ;
//}
#define BITLEN_DSM2 (8*2) //125000 Baud
static void sendByteDsm2(uint8_t b) //max 10changes 0 10 10 10 10 1
		{
	bool lev = 0;
    5db8:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t len = BITLEN_DSM2; //max val: 9*16 < 256
	uint8_t *ptr;

	ptr = pulses2MHzptr;
	for (uint8_t i = 0; i <= 8; i++) { //8Bits + Stop=1
		bool nlev = b & 1; //lsb first
    5dba:	49 2f       	mov	r20, r25
    5dbc:	41 70       	andi	r20, 0x01	; 1
		if (lev == nlev) {
    5dbe:	34 13       	cpse	r19, r20
    5dc0:	02 c0       	rjmp	.+4      	; 0x5dc6 <_Z15setupPulsesDsm2h+0xdc>
			len += BITLEN_DSM2;
    5dc2:	80 5f       	subi	r24, 0xF0	; 240
    5dc4:	04 c0       	rjmp	.+8      	; 0x5dce <_Z15setupPulsesDsm2h+0xe4>
		} else {
			*ptr++ = len - 1;
    5dc6:	81 50       	subi	r24, 0x01	; 1
    5dc8:	80 83       	st	Z, r24
    5dca:	31 96       	adiw	r30, 0x01	; 1
			len = BITLEN_DSM2;
    5dcc:	80 e1       	ldi	r24, 0x10	; 16
			lev = nlev;
		}
		b = (b >> 1) | 0x80; //shift in stop bit
    5dce:	96 95       	lsr	r25
    5dd0:	90 68       	ori	r25, 0x80	; 128
    5dd2:	21 50       	subi	r18, 0x01	; 1
	bool lev = 0;
	uint8_t len = BITLEN_DSM2; //max val: 9*16 < 256
	uint8_t *ptr;

	ptr = pulses2MHzptr;
	for (uint8_t i = 0; i <= 8; i++) { //8Bits + Stop=1
    5dd4:	11 f0       	breq	.+4      	; 0x5dda <_Z15setupPulsesDsm2h+0xf0>
    5dd6:	34 2f       	mov	r19, r20
    5dd8:	f0 cf       	rjmp	.-32     	; 0x5dba <_Z15setupPulsesDsm2h+0xd0>
			len = BITLEN_DSM2;
			lev = nlev;
		}
		b = (b >> 1) | 0x80; //shift in stop bit
	}
	*ptr++ = len + BITLEN_DSM2 - 1; // 2 stop bits
    5dda:	81 5f       	subi	r24, 0xF1	; 241
    5ddc:	ef 01       	movw	r28, r30
    5dde:	89 93       	st	Y+, r24
	pulses2MHzptr = ptr;
    5de0:	d0 93 1b 01 	sts	0x011B, r29
    5de4:	c0 93 1a 01 	sts	0x011A, r28
		dsmDat[3 + 2 * i] = pulse & 0xff;
//        *p++ = (i<<2) | ((pulse>>8)&0x03);
//        *p++ = pulse & 0xff;
	}

	for (counter = 0; counter < 14; counter += 1) {
    5de8:	81 e0       	ldi	r24, 0x01	; 1
    5dea:	a6 31       	cpi	r26, 0x16	; 22
    5dec:	b8 07       	cpc	r27, r24
    5dee:	e9 f6       	brne	.-70     	; 0x5daa <_Z15setupPulsesDsm2h+0xc0>

	ptr = pulses2MHzptr;

//    pulses2MHzptr-=1 ; //remove last stopbits and
//    _send_1( 255 ) ;	 //prolong them
	*ptr = 0;
    5df0:	11 82       	std	Z+1, r1	; 0x01
	*(ptr - 1) = 255;
    5df2:	8f ef       	ldi	r24, 0xFF	; 255
    5df4:	80 83       	st	Z, r24
//    _send_1(0);        //end of pulse stream
	Dsm2_pulsePtr = pulses2MHz.pbyte;
    5df6:	8e e0       	ldi	r24, 0x0E	; 14
    5df8:	9b e0       	ldi	r25, 0x0B	; 11
    5dfa:	90 93 19 01 	sts	0x0119, r25
    5dfe:	80 93 18 01 	sts	0x0118, r24
}
    5e02:	df 91       	pop	r29
    5e04:	cf 91       	pop	r28
    5e06:	1f 91       	pop	r17
    5e08:	08 95       	ret
		} else {
			dsmdat0copy = 0x98;  //dsmx, bind mode
		}
	}
	if ((dsmdat0copy & BindBit) && (!keyState(SW_Trainer)))
		dsmdat0copy &= ~BindBit;		//clear bind bit if trainer not pulled
    5e0a:	cf 77       	andi	r28, 0x7F	; 127
    5e0c:	90 cf       	rjmp	.-224    	; 0x5d2e <_Z15setupPulsesDsm2h+0x44>
	if ((!(dsmdat0copy & BindBit)) && getSwitch(MAX_DRSWITCH - 1, 0, 0))
		dsmdat0copy |= RangeCheckBit;   //range check function
	else dsmdat0copy &= ~RangeCheckBit;
    5e0e:	cf 7d       	andi	r28, 0xDF	; 223
    5e10:	99 cf       	rjmp	.-206    	; 0x5d44 <_Z15setupPulsesDsm2h+0x5a>

00005e12 <__vector_11>:
//    _send_1(0);        //end of pulse stream
	Dsm2_pulsePtr = pulses2MHz.pbyte;
}

ISR(TIMER1_CAPT_vect) //2MHz pulse generation
{
    5e12:	1f 92       	push	r1
    5e14:	0f 92       	push	r0
    5e16:	0f b6       	in	r0, 0x3f	; 63
    5e18:	0f 92       	push	r0
    5e1a:	11 24       	eor	r1, r1
    5e1c:	2f 93       	push	r18
    5e1e:	8f 93       	push	r24
    5e20:	9f 93       	push	r25
    5e22:	ef 93       	push	r30
    5e24:	ff 93       	push	r31
	//      static uint8_t  pulsePol;
	uint8_t x;
	PORTB ^= (1 << OUT_B_PPM);
    5e26:	88 b3       	in	r24, 0x18	; 24
    5e28:	91 e0       	ldi	r25, 0x01	; 1
    5e2a:	89 27       	eor	r24, r25
    5e2c:	88 bb       	out	0x18, r24	; 24
	x = *Dsm2_pulsePtr;      // Byte size
    5e2e:	e0 91 18 01 	lds	r30, 0x0118
    5e32:	f0 91 19 01 	lds	r31, 0x0119
    5e36:	21 91       	ld	r18, Z+
	Dsm2_pulsePtr += 1;
    5e38:	f0 93 19 01 	sts	0x0119, r31
    5e3c:	e0 93 18 01 	sts	0x0118, r30
	ICR1 = x;
    5e40:	82 2f       	mov	r24, r18
    5e42:	90 e0       	ldi	r25, 0x00	; 0
    5e44:	97 bd       	out	0x27, r25	; 39
    5e46:	86 bd       	out	0x26, r24	; 38
	if (x > 200) {
    5e48:	29 3c       	cpi	r18, 0xC9	; 201
    5e4a:	08 f0       	brcs	.+2      	; 0x5e4e <__vector_11+0x3c>
		PORTB |= (1 << OUT_B_PPM);      // Make sure pulses are the correct way up
    5e4c:	c0 9a       	sbi	0x18, 0	; 24
	}
	heartbeat |= HEART_TIMER2Mhz
    5e4e:	80 91 0d 0b 	lds	r24, 0x0B0D
    5e52:	81 60       	ori	r24, 0x01	; 1
    5e54:	80 93 0d 0b 	sts	0x0B0D, r24
	;
}
    5e58:	ff 91       	pop	r31
    5e5a:	ef 91       	pop	r30
    5e5c:	9f 91       	pop	r25
    5e5e:	8f 91       	pop	r24
    5e60:	2f 91       	pop	r18
    5e62:	0f 90       	pop	r0
    5e64:	0f be       	out	0x3f, r0	; 63
    5e66:	0f 90       	pop	r0
    5e68:	1f 90       	pop	r1
    5e6a:	18 95       	reti

00005e6c <__vector_13>:
}

// This interrupt for PXX

ISR(TIMER1_COMPB_vect) // PXX main interrupt
{
    5e6c:	1f 92       	push	r1
    5e6e:	0f 92       	push	r0
    5e70:	0f b6       	in	r0, 0x3f	; 63
    5e72:	0f 92       	push	r0
    5e74:	11 24       	eor	r1, r1
    5e76:	2f 93       	push	r18
    5e78:	3f 93       	push	r19
    5e7a:	8f 93       	push	r24
    5e7c:	9f 93       	push	r25
    5e7e:	ef 93       	push	r30
    5e80:	ff 93       	push	r31
	uint8_t x;
	PORTB ^= (1 << OUT_B_PPM);
    5e82:	88 b3       	in	r24, 0x18	; 24
    5e84:	91 e0       	ldi	r25, 0x01	; 1
    5e86:	89 27       	eor	r24, r25
    5e88:	88 bb       	out	0x18, r24	; 24
	x = *pulses2MHzptr;      // Byte size
    5e8a:	e0 91 1a 01 	lds	r30, 0x011A
    5e8e:	f0 91 1b 01 	lds	r31, 0x011B
    5e92:	80 81       	ld	r24, Z
	if ((x & 1) == 0) {
		OCR1B += 32;
    5e94:	28 b5       	in	r18, 0x28	; 40
    5e96:	39 b5       	in	r19, 0x29	; 41
ISR(TIMER1_COMPB_vect) // PXX main interrupt
{
	uint8_t x;
	PORTB ^= (1 << OUT_B_PPM);
	x = *pulses2MHzptr;      // Byte size
	if ((x & 1) == 0) {
    5e98:	80 fd       	sbrc	r24, 0
    5e9a:	03 c0       	rjmp	.+6      	; 0x5ea2 <__vector_13+0x36>
		OCR1B += 32;
    5e9c:	20 5e       	subi	r18, 0xE0	; 224
    5e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    5ea0:	02 c0       	rjmp	.+4      	; 0x5ea6 <__vector_13+0x3a>
	} else {
		OCR1B += 16;
    5ea2:	20 5f       	subi	r18, 0xF0	; 240
    5ea4:	3f 4f       	sbci	r19, 0xFF	; 255
    5ea6:	39 bd       	out	0x29, r19	; 41
    5ea8:	28 bd       	out	0x28, r18	; 40
	}
	if ((x >>= 1) == 0) {
    5eaa:	90 e0       	ldi	r25, 0x00	; 0
    5eac:	95 95       	asr	r25
    5eae:	87 95       	ror	r24
    5eb0:	00 97       	sbiw	r24, 0x00	; 0
    5eb2:	69 f4       	brne	.+26     	; 0x5ece <__vector_13+0x62>
		if (*(++pulses2MHzptr) == 0) {
    5eb4:	cf 01       	movw	r24, r30
    5eb6:	01 96       	adiw	r24, 0x01	; 1
    5eb8:	90 93 1b 01 	sts	0x011B, r25
    5ebc:	80 93 1a 01 	sts	0x011A, r24
    5ec0:	81 81       	ldd	r24, Z+1	; 0x01
    5ec2:	81 11       	cpse	r24, r1
    5ec4:	05 c0       	rjmp	.+10     	; 0x5ed0 <__vector_13+0x64>
//            OCR1B -= 48 ; // = OCR1C + 3000 ;		// 1.5mS on from OCR1C
			// disable COMPB interrupt
#ifdef CPUM2561
			TIMSK1 &= ~(1<<OCIE1B);	// COMPB interrupt off
#else
			TIMSK &= ~(1 << OCIE1B);	// COMPB interrupt off
    5ec6:	87 b7       	in	r24, 0x37	; 55
    5ec8:	87 7f       	andi	r24, 0xF7	; 247
    5eca:	87 bf       	out	0x37, r24	; 55
    5ecc:	01 c0       	rjmp	.+2      	; 0x5ed0 <__vector_13+0x64>
#endif
		}
	} else {
		*pulses2MHzptr = x;
    5ece:	80 83       	st	Z, r24
	}
	heartbeat |= HEART_TIMER2Mhz
    5ed0:	80 91 0d 0b 	lds	r24, 0x0B0D
    5ed4:	81 60       	ori	r24, 0x01	; 1
    5ed6:	80 93 0d 0b 	sts	0x0B0D, r24
	;
}
    5eda:	ff 91       	pop	r31
    5edc:	ef 91       	pop	r30
    5ede:	9f 91       	pop	r25
    5ee0:	8f 91       	pop	r24
    5ee2:	3f 91       	pop	r19
    5ee4:	2f 91       	pop	r18
    5ee6:	0f 90       	pop	r0
    5ee8:	0f be       	out	0x3f, r0	; 63
    5eea:	0f 90       	pop	r0
    5eec:	1f 90       	pop	r1
    5eee:	18 95       	reti

00005ef0 <_Z18set_timer3_capturev>:

void set_timer3_capture() {
#ifdef CPUM2561
	TIMSK3 &= ~( (1<<OCIE3A) | (1<<OCIE3B) | (1<<OCIE3C) );	// Stop compare interrupts
#else
	ETIMSK &= ~((1 << OCIE3A) | (1 << OCIE3B) | (1 << OCIE3C));	// Stop compare interrupts
    5ef0:	ed e7       	ldi	r30, 0x7D	; 125
    5ef2:	f0 e0       	ldi	r31, 0x00	; 0
    5ef4:	80 81       	ld	r24, Z
    5ef6:	85 7e       	andi	r24, 0xE5	; 229
    5ef8:	80 83       	st	Z, r24
#endif
	DDRE &= ~0x80;
    5efa:	17 98       	cbi	0x02, 7	; 2
	PORTE |= 0x80;	// Bit 7 input + pullup
    5efc:	1f 9a       	sbi	0x03, 7	; 3

	TCCR3B = 0;			// Stop counter
    5efe:	aa e8       	ldi	r26, 0x8A	; 138
    5f00:	b0 e0       	ldi	r27, 0x00	; 0
    5f02:	1c 92       	st	X, r1
	TCCR3A = 0;
    5f04:	10 92 8b 00 	sts	0x008B, r1
	TCCR3B = (1 << ICNC3) | (2 << CS30);      //ICNC3 16MHz / 8
    5f08:	82 e8       	ldi	r24, 0x82	; 130
    5f0a:	8c 93       	st	X, r24
#ifdef CPUM2561
			TIMSK3 |= (1<<ICIE3);
#else
	ETIMSK |= (1 << TICIE3);
    5f0c:	80 81       	ld	r24, Z
    5f0e:	80 62       	ori	r24, 0x20	; 32
    5f10:	80 83       	st	Z, r24
    5f12:	08 95       	ret

00005f14 <_Z14set_timer3_ppmv>:

void set_timer3_ppm() {
#ifdef CPUM2561
	TIMSK3 &= ~( 1<<ICIE3);	// Stop capture interrupt
#else
	ETIMSK &= ~(1 << TICIE3);	// Stop capture interrupt
    5f14:	ed e7       	ldi	r30, 0x7D	; 125
    5f16:	f0 e0       	ldi	r31, 0x00	; 0
    5f18:	80 81       	ld	r24, Z
    5f1a:	8f 7d       	andi	r24, 0xDF	; 223
    5f1c:	80 83       	st	Z, r24
#endif
	DDRE |= 0x80;					// Bit 7 output
    5f1e:	17 9a       	sbi	0x02, 7	; 2

	TCCR3B = 0;			// Stop counter
    5f20:	aa e8       	ldi	r26, 0x8A	; 138
    5f22:	b0 e0       	ldi	r27, 0x00	; 0
    5f24:	1c 92       	st	X, r1
	TCCR3A = (0 << WGM10);
    5f26:	10 92 8b 00 	sts	0x008B, r1
	TCCR3B = (1 << WGM12) | (2 << CS10); // CTC OCR1A, 16MHz / 8
    5f2a:	8a e0       	ldi	r24, 0x0A	; 10
    5f2c:	8c 93       	st	X, r24

#ifdef CPUM2561
	TIMSK3 |= ( (1<<OCIE3A) | (1<<OCIE3B) ); 			// enable immediately before mainloop
#else
	ETIMSK |= ((1 << OCIE3A) | (1 << OCIE3B)); 			// enable immediately before mainloop
    5f2e:	80 81       	ld	r24, Z
    5f30:	88 61       	ori	r24, 0x18	; 24
    5f32:	80 83       	st	Z, r24
    5f34:	08 95       	ret

00005f36 <__vector_26>:
#endif
}

ISR(TIMER3_COMPA_vect) //2MHz pulse generation
{
    5f36:	1f 92       	push	r1
    5f38:	0f 92       	push	r0
    5f3a:	0f b6       	in	r0, 0x3f	; 63
    5f3c:	0f 92       	push	r0
    5f3e:	11 24       	eor	r1, r1
    5f40:	8f 93       	push	r24
    5f42:	9f 93       	push	r25
    5f44:	ef 93       	push	r30
    5f46:	ff 93       	push	r31
	static uint16_t *pulsePtr = &pulses2MHz.pword[PULSES_WORD_SIZE / 2];
	uint16_t *xpulsePtr;

	if (PulsePol16) {
    5f48:	80 91 9f 0b 	lds	r24, 0x0B9F
    5f4c:	88 23       	and	r24, r24
    5f4e:	21 f0       	breq	.+8      	; 0x5f58 <__vector_26+0x22>
		PORTE |= 0x80; // (1<<OUT_B_PPM);
    5f50:	1f 9a       	sbi	0x03, 7	; 3
		PulsePol16 = 0;
    5f52:	10 92 9f 0b 	sts	0x0B9F, r1
    5f56:	04 c0       	rjmp	.+8      	; 0x5f60 <__vector_26+0x2a>
	} else {
		PORTE &= ~0x80;		// (1<<OUT_B_PPM);
    5f58:	1f 98       	cbi	0x03, 7	; 3
		PulsePol16 = 1;
    5f5a:	81 e0       	ldi	r24, 0x01	; 1
    5f5c:	80 93 9f 0b 	sts	0x0B9F, r24
	}

	xpulsePtr = pulsePtr;	// read memory once
    5f60:	e0 91 06 01 	lds	r30, 0x0106
    5f64:	f0 91 07 01 	lds	r31, 0x0107

	OCR3A = *xpulsePtr++;
    5f68:	80 81       	ld	r24, Z
    5f6a:	91 81       	ldd	r25, Z+1	; 0x01
    5f6c:	90 93 87 00 	sts	0x0087, r25
    5f70:	80 93 86 00 	sts	0x0086, r24
	OCR3B = B3_comp_value;
    5f74:	80 91 08 0b 	lds	r24, 0x0B08
    5f78:	90 91 09 0b 	lds	r25, 0x0B09
    5f7c:	90 93 85 00 	sts	0x0085, r25
    5f80:	80 93 84 00 	sts	0x0084, r24

	if (*xpulsePtr == 0) {
    5f84:	82 81       	ldd	r24, Z+2	; 0x02
    5f86:	93 81       	ldd	r25, Z+3	; 0x03
    5f88:	89 2b       	or	r24, r25
    5f8a:	11 f0       	breq	.+4      	; 0x5f90 <__vector_26+0x5a>
		PulsePol16 = 1;
	}

	xpulsePtr = pulsePtr;	// read memory once

	OCR3A = *xpulsePtr++;
    5f8c:	32 96       	adiw	r30, 0x02	; 2
    5f8e:	08 c0       	rjmp	.+16     	; 0x5fa0 <__vector_26+0x6a>
	OCR3B = B3_comp_value;

	if (*xpulsePtr == 0) {
		xpulsePtr = &pulses2MHz.pword[PULSES_WORD_SIZE / 2];
		PulsePol16 = !g_model.pulsePol;	//0;     // changed polarity
    5f90:	80 91 37 02 	lds	r24, 0x0237
    5f94:	80 95       	com	r24
    5f96:	81 70       	andi	r24, 0x01	; 1
    5f98:	80 93 9f 0b 	sts	0x0B9F, r24

	OCR3A = *xpulsePtr++;
	OCR3B = B3_comp_value;

	if (*xpulsePtr == 0) {
		xpulsePtr = &pulses2MHz.pword[PULSES_WORD_SIZE / 2];
    5f9c:	e6 e5       	ldi	r30, 0x56	; 86
    5f9e:	fb e0       	ldi	r31, 0x0B	; 11
		PulsePol16 = !g_model.pulsePol;	//0;     // changed polarity
	}
	pulsePtr = xpulsePtr;	// write memory back
    5fa0:	f0 93 07 01 	sts	0x0107, r31
    5fa4:	e0 93 06 01 	sts	0x0106, r30
	heartbeat |= HEART_TIMER2Mhz
    5fa8:	80 91 0d 0b 	lds	r24, 0x0B0D
    5fac:	81 60       	ori	r24, 0x01	; 1
    5fae:	80 93 0d 0b 	sts	0x0B0D, r24
	;
}
    5fb2:	ff 91       	pop	r31
    5fb4:	ef 91       	pop	r30
    5fb6:	9f 91       	pop	r25
    5fb8:	8f 91       	pop	r24
    5fba:	0f 90       	pop	r0
    5fbc:	0f be       	out	0x3f, r0	; 63
    5fbe:	0f 90       	pop	r0
    5fc0:	1f 90       	pop	r1
    5fc2:	18 95       	reti

00005fc4 <_Z10putPcmParth>:

void putPcmPart(uint8_t value) {
	struct t_pcm_control *ptrControl;

	ptrControl = &PcmControl;
	FORCE_INDIRECT(ptrControl);
    5fc4:	e1 e0       	ldi	r30, 0x01	; 1
    5fc6:	fb e0       	ldi	r31, 0x0B	; 11

	ptrControl->PcmByte >>= 2;
    5fc8:	20 81       	ld	r18, Z
    5fca:	26 95       	lsr	r18
    5fcc:	26 95       	lsr	r18
	ptrControl->PcmByte |= value;
    5fce:	28 2b       	or	r18, r24
    5fd0:	20 83       	st	Z, r18
	if (++ptrControl->PcmBitCount >= 4) {
    5fd2:	81 81       	ldd	r24, Z+1	; 0x01
    5fd4:	8f 5f       	subi	r24, 0xFF	; 255
    5fd6:	81 83       	std	Z+1, r24	; 0x01
    5fd8:	84 30       	cpi	r24, 0x04	; 4
    5fda:	48 f0       	brcs	.+18     	; 0x5fee <_Z10putPcmParth+0x2a>
		*ptrControl->PcmPtr++ = ptrControl->PcmByte;
    5fdc:	a2 81       	ldd	r26, Z+2	; 0x02
    5fde:	b3 81       	ldd	r27, Z+3	; 0x03
    5fe0:	cd 01       	movw	r24, r26
    5fe2:	01 96       	adiw	r24, 0x01	; 1
    5fe4:	93 83       	std	Z+3, r25	; 0x03
    5fe6:	82 83       	std	Z+2, r24	; 0x02
    5fe8:	2c 93       	st	X, r18
		ptrControl->PcmBitCount = ptrControl->PcmByte = 0;
    5fea:	10 82       	st	Z, r1
    5fec:	11 82       	std	Z+1, r1	; 0x01
    5fee:	08 95       	ret

00005ff0 <_Z9putPcmBith>:
	*PcmControl.PcmPtr = 0;				// Mark end
	asm("");
}

void putPcmBit(uint8_t bit) {
	if (bit) {
    5ff0:	88 23       	and	r24, r24
    5ff2:	39 f0       	breq	.+14     	; 0x6002 <_Z9putPcmBith+0x12>
		PcmControl.PcmOnesCount += 1;
    5ff4:	80 91 07 0b 	lds	r24, 0x0B07
    5ff8:	8f 5f       	subi	r24, 0xFF	; 255
    5ffa:	80 93 07 0b 	sts	0x0B07, r24
		putPcmPart(0x80);
    5ffe:	80 e8       	ldi	r24, 0x80	; 128
    6000:	03 c0       	rjmp	.+6      	; 0x6008 <_Z9putPcmBith+0x18>
	} else {
		PcmControl.PcmOnesCount = 0;
    6002:	10 92 07 0b 	sts	0x0B07, r1
		putPcmPart(0xC0);
    6006:	80 ec       	ldi	r24, 0xC0	; 192
    6008:	dd df       	rcall	.-70     	; 0x5fc4 <_Z10putPcmParth>
	}
	if (PcmControl.PcmOnesCount >= 5) {
    600a:	80 91 07 0b 	lds	r24, 0x0B07
    600e:	85 30       	cpi	r24, 0x05	; 5
    6010:	c0 f7       	brcc	.-16     	; 0x6002 <_Z9putPcmBith+0x12>
		putPcmBit(0);				// Stuff a 0 bit in
	}
}
    6012:	08 95       	ret

00006014 <_Z10putPcmByteh>:

void putPcmByte(uint8_t byte) {
    6014:	cf 93       	push	r28
    6016:	df 93       	push	r29
    6018:	c8 2f       	mov	r28, r24
} PcmControl;

static void crc(uint8_t data) {
	//	uint8_t i ;

	PcmControl.PcmCrc = (PcmControl.PcmCrc << 8)
    601a:	80 91 05 0b 	lds	r24, 0x0B05
    601e:	e0 91 06 0b 	lds	r30, 0x0B06
			^ pgm_read_word(&CRCTable[((uint8_t )(PcmControl.PcmCrc >> 8) ^ data) & 0xFF]);
    6022:	ec 27       	eor	r30, r28
    6024:	f0 e0       	ldi	r31, 0x00	; 0
    6026:	ee 0f       	add	r30, r30
    6028:	ff 1f       	adc	r31, r31
    602a:	e4 52       	subi	r30, 0x24	; 36
    602c:	f0 4f       	sbci	r31, 0xF0	; 240
    602e:	45 91       	lpm	r20, Z+
    6030:	54 91       	lpm	r21, Z
} PcmControl;

static void crc(uint8_t data) {
	//	uint8_t i ;

	PcmControl.PcmCrc = (PcmControl.PcmCrc << 8)
    6032:	20 e0       	ldi	r18, 0x00	; 0
    6034:	30 e0       	ldi	r19, 0x00	; 0
    6036:	38 2f       	mov	r19, r24
			^ pgm_read_word(&CRCTable[((uint8_t )(PcmControl.PcmCrc >> 8) ^ data) & 0xFF]);
    6038:	24 27       	eor	r18, r20
    603a:	35 27       	eor	r19, r21
    603c:	30 93 06 0b 	sts	0x0B06, r19
    6040:	20 93 05 0b 	sts	0x0B05, r18
    6044:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t i;

	crc(byte);

	for (i = 0; i < 8; i += 1) {
		putPcmBit(byte & 0x80);
    6046:	8c 2f       	mov	r24, r28
    6048:	80 78       	andi	r24, 0x80	; 128
    604a:	d2 df       	rcall	.-92     	; 0x5ff0 <_Z9putPcmBith>
		byte <<= 1;
    604c:	cc 0f       	add	r28, r28
    604e:	d1 50       	subi	r29, 0x01	; 1
void putPcmByte(uint8_t byte) {
	uint8_t i;

	crc(byte);

	for (i = 0; i < 8; i += 1) {
    6050:	d1 f7       	brne	.-12     	; 0x6046 <_Z10putPcmByteh+0x32>
		putPcmBit(byte & 0x80);
		byte <<= 1;
	}
}
    6052:	df 91       	pop	r29
    6054:	cf 91       	pop	r28
    6056:	08 95       	ret

00006058 <_Z10putPcmHeadv>:

void putPcmHead() {
    6058:	cf 93       	push	r28
	uint8_t i;
	// send 7E, do not CRC
	// 01111110
	putPcmPart(0xC0);
    605a:	80 ec       	ldi	r24, 0xC0	; 192
    605c:	b3 df       	rcall	.-154    	; 0x5fc4 <_Z10putPcmParth>
    605e:	c6 e0       	ldi	r28, 0x06	; 6
	for (i = 0; i < 6; i += 1) {
		putPcmPart(0x80);
    6060:	80 e8       	ldi	r24, 0x80	; 128
    6062:	b0 df       	rcall	.-160    	; 0x5fc4 <_Z10putPcmParth>
    6064:	c1 50       	subi	r28, 0x01	; 1
void putPcmHead() {
	uint8_t i;
	// send 7E, do not CRC
	// 01111110
	putPcmPart(0xC0);
	for (i = 0; i < 6; i += 1) {
    6066:	e1 f7       	brne	.-8      	; 0x6060 <_Z10putPcmHeadv+0x8>
//    putPcmPart( 0x80 ) ;
//    putPcmPart( 0x80 ) ;
//    putPcmPart( 0x80 ) ;
//    putPcmPart( 0x80 ) ;
//    putPcmPart( 0x80 ) ;
	putPcmPart(0xC0);
    6068:	80 ec       	ldi	r24, 0xC0	; 192
}
    606a:	cf 91       	pop	r28
//    putPcmPart( 0x80 ) ;
//    putPcmPart( 0x80 ) ;
//    putPcmPart( 0x80 ) ;
//    putPcmPart( 0x80 ) ;
//    putPcmPart( 0x80 ) ;
	putPcmPart(0xC0);
    606c:	ab cf       	rjmp	.-170    	; 0x5fc4 <_Z10putPcmParth>

0000606e <_Z11scaleForPXXh>:
}

uint16_t scaleForPXX(uint8_t i) {
	int16_t value;

	value = ((i < 16) ? g_chans512[i] * 3 / 4 : 0) + 1024;
    606e:	80 31       	cpi	r24, 0x10	; 16
    6070:	e0 f4       	brcc	.+56     	; 0x60aa <_Z11scaleForPXXh+0x3c>
    6072:	e8 2f       	mov	r30, r24
    6074:	f0 e0       	ldi	r31, 0x00	; 0
    6076:	ee 0f       	add	r30, r30
    6078:	ff 1f       	adc	r31, r31
    607a:	e1 58       	subi	r30, 0x81	; 129
    607c:	f2 4f       	sbci	r31, 0xF2	; 242
    607e:	20 81       	ld	r18, Z
    6080:	31 81       	ldd	r19, Z+1	; 0x01
    6082:	c9 01       	movw	r24, r18
    6084:	88 0f       	add	r24, r24
    6086:	99 1f       	adc	r25, r25
    6088:	82 0f       	add	r24, r18
    608a:	93 1f       	adc	r25, r19
    608c:	97 fd       	sbrc	r25, 7
    608e:	03 96       	adiw	r24, 0x03	; 3
    6090:	95 95       	asr	r25
    6092:	87 95       	ror	r24
    6094:	95 95       	asr	r25
    6096:	87 95       	ror	r24
    6098:	9c 5f       	subi	r25, 0xFC	; 252
    609a:	18 16       	cp	r1, r24
    609c:	19 06       	cpc	r1, r25
    609e:	44 f4       	brge	.+16     	; 0x60b0 <_Z11scaleForPXXh+0x42>
#define DIM(arr) (sizeof((arr))/sizeof((arr)[0]))

/// liefert Betrag des Arguments
template<class t> inline t abs(t a){ return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> inline t min(t a, t b){ return a<b?a:b; }
    60a0:	8e 3f       	cpi	r24, 0xFE	; 254
    60a2:	27 e0       	ldi	r18, 0x07	; 7
    60a4:	92 07       	cpc	r25, r18
    60a6:	3c f4       	brge	.+14     	; 0x60b6 <_Z11scaleForPXXh+0x48>
    60a8:	08 95       	ret
    60aa:	80 e0       	ldi	r24, 0x00	; 0
    60ac:	94 e0       	ldi	r25, 0x04	; 4
    60ae:	08 95       	ret
/// liefert das Maximum der Argumente
template<class t> inline t max(t a, t b){ return a>b?a:b; }
    60b0:	81 e0       	ldi	r24, 0x01	; 1
    60b2:	90 e0       	ldi	r25, 0x00	; 0
    60b4:	08 95       	ret
#define DIM(arr) (sizeof((arr))/sizeof((arr)[0]))

/// liefert Betrag des Arguments
template<class t> inline t abs(t a){ return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> inline t min(t a, t b){ return a<b?a:b; }
    60b6:	8e ef       	ldi	r24, 0xFE	; 254
    60b8:	97 e0       	ldi	r25, 0x07	; 7
	return limit(1, value, 2046);
}
    60ba:	08 95       	ret

000060bc <_Z11setupPulsesv>:
#endif
	TCCR1A = (0 << WGM10);
	TCCR1B = (1 << WGM12) | (2 << CS10); // CTC OCRA, 16MHz / 8
}

void setupPulses() {
    60bc:	cf 92       	push	r12
    60be:	df 92       	push	r13
    60c0:	ef 92       	push	r14
    60c2:	ff 92       	push	r15
    60c4:	0f 93       	push	r16
    60c6:	1f 93       	push	r17
    60c8:	cf 93       	push	r28
    60ca:	df 93       	push	r29
	uint8_t required_protocol;
	required_protocol = g_model.protocol;
    60cc:	c0 91 30 02 	lds	r28, 0x0230
    60d0:	cf 70       	andi	r28, 0x0F	; 15
	// Sort required_protocol depending on student mode and PPMSIM allowed

	if (g_eeGeneral.enablePpmsim) {
    60d2:	80 91 2e 06 	lds	r24, 0x062E
    60d6:	85 ff       	sbrs	r24, 5
    60d8:	04 c0       	rjmp	.+8      	; 0x60e2 <_Z11setupPulsesv+0x26>
		if (SlaveMode) {
    60da:	80 91 1d 02 	lds	r24, 0x021D
    60de:	81 11       	cpse	r24, r1
			required_protocol = PROTO_PPMSIM;
    60e0:	c4 e0       	ldi	r28, 0x04	; 4
		}
	}
	if (PausePulses) {
    60e2:	80 91 0a 0b 	lds	r24, 0x0B0A
    60e6:	81 11       	cpse	r24, r1
		required_protocol = PROTO_NONE;
    60e8:	cf ef       	ldi	r28, 0xFF	; 255
	}

	//	SPY_ON;
	if (Current_protocol != required_protocol) {
    60ea:	80 91 0c 0b 	lds	r24, 0x0B0C
    60ee:	8c 17       	cp	r24, r28
    60f0:	09 f4       	brne	.+2      	; 0x60f4 <_Z11setupPulsesv+0x38>
    60f2:	68 c0       	rjmp	.+208    	; 0x61c4 <_Z11setupPulsesv+0x108>
		Current_protocol = required_protocol;
    60f4:	c0 93 0c 0b 	sts	0x0B0C, r28
		// switch mode here
		TCCR1B = 0;			// Stop counter
    60f8:	1e bc       	out	0x2e, r1	; 46
		TCNT1 = 0;
    60fa:	1d bc       	out	0x2d, r1	; 45
    60fc:	1c bc       	out	0x2c, r1	; 44
		TIMSK1 &= ~( (1<<OCIE1A) | (1<<OCIE1B) | (1<<OCIE1C) | (1<<ICIE1) | (1<<TOIE1) );	// All interrupts off
//        TIMSK1 &= ~(1<<OCIE1C) ;		// COMPC1 off
		TIFR1 = ( (1<<OCF1A) | (1<<OCF1B) | (1<<OCF1C) | (1<<ICF1) | (1<<TOV1) );// Clear all pending interrupts
		TIFR3 = ( (1<<OCF3A) | (1<<OCF3B) | (1<<OCF3C) | (1<<ICF3) | (1<<TOV3) );// Clear all pending interrupts
#else
		TIMSK &= ~0x3C;	// All interrupts off
    60fe:	87 b7       	in	r24, 0x37	; 55
    6100:	83 7c       	andi	r24, 0xC3	; 195
    6102:	87 bf       	out	0x37, r24	; 55
		ETIMSK &= ~(1 << OCIE1C);		// COMPC1 off
    6104:	80 91 7d 00 	lds	r24, 0x007D
    6108:	8e 7f       	andi	r24, 0xFE	; 254
    610a:	80 93 7d 00 	sts	0x007D, r24
		TIFR = 0x3C;			// Clear all pending interrupts
    610e:	8c e3       	ldi	r24, 0x3C	; 60
    6110:	86 bf       	out	0x36, r24	; 54
		ETIFR = 0x3F;			// Clear all pending interrupts
    6112:	8f e3       	ldi	r24, 0x3F	; 63
    6114:	80 93 7c 00 	sts	0x007C, r24
#endif

		switch (required_protocol) {
    6118:	c2 30       	cpi	r28, 0x02	; 2
    611a:	19 f1       	breq	.+70     	; 0x6162 <_Z11setupPulsesv+0xa6>
    611c:	e0 f4       	brcc	.+56     	; 0x6156 <_Z11setupPulsesv+0x9a>
    611e:	cc 23       	and	r28, r28
    6120:	e9 f0       	breq	.+58     	; 0x615c <_Z11setupPulsesv+0xa0>
    6122:	c1 30       	cpi	r28, 0x01	; 1
    6124:	09 f0       	breq	.+2      	; 0x6128 <_Z11setupPulsesv+0x6c>
    6126:	4e c0       	rjmp	.+156    	; 0x61c4 <_Z11setupPulsesv+0x108>
			case PROTO_PPM:
				set_timer3_capture();
				setPpmTimers();
				break;
			case PROTO_PXX:
				set_timer3_capture();
    6128:	e3 de       	rcall	.-570    	; 0x5ef0 <_Z18set_timer3_capturev>
				OCR1B = 7000;		// Next frame starts in 3.5 mS
    612a:	88 e5       	ldi	r24, 0x58	; 88
    612c:	9b e1       	ldi	r25, 0x1B	; 27
    612e:	99 bd       	out	0x29, r25	; 41
    6130:	88 bd       	out	0x28, r24	; 40
				OCR1C = 4000;		// Next frame setup in 2 mS
    6132:	80 ea       	ldi	r24, 0xA0	; 160
    6134:	9f e0       	ldi	r25, 0x0F	; 15
    6136:	90 93 79 00 	sts	0x0079, r25
    613a:	80 93 78 00 	sts	0x0078, r24
#ifdef CPUM2561
						TIMSK1 |= (1<<OCIE1B) | (1<<OCIE1C);	// Enable COMPB and COMPC
#else
				TIMSK |= (1 << OCIE1B);	// Enable COMPB
    613e:	87 b7       	in	r24, 0x37	; 55
    6140:	88 60       	ori	r24, 0x08	; 8
    6142:	87 bf       	out	0x37, r24	; 55
				ETIMSK |= (1 << OCIE1C);	// Enable COMPC
    6144:	80 91 7d 00 	lds	r24, 0x007D
    6148:	81 60       	ori	r24, 0x01	; 1
    614a:	80 93 7d 00 	sts	0x007D, r24
#endif
				TCCR1A = 0;
    614e:	1f bc       	out	0x2f, r1	; 47
				TCCR1B = (2 << CS10);      //ICNC3 16MHz / 8
    6150:	82 e0       	ldi	r24, 0x02	; 2
    6152:	8e bd       	out	0x2e, r24	; 46
    6154:	42 c0       	rjmp	.+132    	; 0x61da <_Z11setupPulsesv+0x11e>
		ETIMSK &= ~(1 << OCIE1C);		// COMPC1 off
		TIFR = 0x3C;			// Clear all pending interrupts
		ETIFR = 0x3F;			// Clear all pending interrupts
#endif

		switch (required_protocol) {
    6156:	c5 30       	cpi	r28, 0x05	; 5
    6158:	f8 f0       	brcs	.+62     	; 0x6198 <_Z11setupPulsesv+0xdc>
    615a:	34 c0       	rjmp	.+104    	; 0x61c4 <_Z11setupPulsesv+0x108>
			case PROTO_PPM:
				set_timer3_capture();
    615c:	c9 de       	rcall	.-622    	; 0x5ef0 <_Z18set_timer3_capturev>
				setPpmTimers();
    615e:	40 dd       	rcall	.-1408   	; 0x5be0 <_Z12setPpmTimersv>
    6160:	e1 c0       	rjmp	.+450    	; 0x6324 <_Z11setupPulsesv+0x268>
#endif
				TCCR1A = 0;
				TCCR1B = (2 << CS10);      //ICNC3 16MHz / 8
				break;
			case PROTO_DSM2:
				set_timer3_capture();
    6162:	c6 de       	rcall	.-628    	; 0x5ef0 <_Z18set_timer3_capturev>
				OCR1C = 200;			// 100 uS
    6164:	88 ec       	ldi	r24, 0xC8	; 200
    6166:	90 e0       	ldi	r25, 0x00	; 0
    6168:	90 93 79 00 	sts	0x0079, r25
    616c:	80 93 78 00 	sts	0x0078, r24
				TCNT1 = 300;			// Past the OCR1C value
    6170:	8c e2       	ldi	r24, 0x2C	; 44
    6172:	91 e0       	ldi	r25, 0x01	; 1
    6174:	9d bd       	out	0x2d, r25	; 45
    6176:	8c bd       	out	0x2c, r24	; 44
				ICR1 = 44000;		// Next frame starts in 22 mS
    6178:	80 ee       	ldi	r24, 0xE0	; 224
    617a:	9b ea       	ldi	r25, 0xAB	; 171
    617c:	97 bd       	out	0x27, r25	; 39
    617e:	86 bd       	out	0x26, r24	; 38
#ifdef CPUM2561
						TIMSK1 |= (1<<ICIE1);		// Enable CAPT
#else
				TIMSK |= (1 << TICIE1);		// Enable CAPT
    6180:	87 b7       	in	r24, 0x37	; 55
    6182:	80 62       	ori	r24, 0x20	; 32
    6184:	87 bf       	out	0x37, r24	; 55
#endif

#ifdef CPUM2561
				TIMSK1 |= (1<<OCIE1C);	// Enable COMPC
#else
				ETIMSK |= (1 << OCIE1C);	// Enable COMPC
    6186:	80 91 7d 00 	lds	r24, 0x007D
    618a:	81 60       	ori	r24, 0x01	; 1
    618c:	80 93 7d 00 	sts	0x007D, r24
#endif
				TCCR1A = (0 << WGM10);
    6190:	1f bc       	out	0x2f, r1	; 47
				TCCR1B = (3 << WGM12) | (2 << CS10); // CTC ICR, 16MHz / 8
    6192:	8a e1       	ldi	r24, 0x1A	; 26
    6194:	8e bd       	out	0x2e, r24	; 46
    6196:	c2 c0       	rjmp	.+388    	; 0x631c <_Z11setupPulsesv+0x260>
				break;
			case PROTO_PPM16:
			case PROTO_PPMSIM:
				if (required_protocol == PROTO_PPMSIM) {
    6198:	c4 30       	cpi	r28, 0x04	; 4
    619a:	21 f4       	brne	.+8      	; 0x61a4 <_Z11setupPulsesv+0xe8>
					setupPulsesPPM(PROTO_PPMSIM);
    619c:	84 e0       	ldi	r24, 0x04	; 4
    619e:	2b dd       	rcall	.-1450   	; 0x5bf6 <_Z14setupPulsesPPMh>
					PORTB &= ~(1 << OUT_B_PPM);			// Hold PPM output low
    61a0:	c0 98       	cbi	0x18, 0	; 24
    61a2:	03 c0       	rjmp	.+6      	; 0x61aa <_Z11setupPulsesv+0xee>
				} else {
					setPpmTimers();
    61a4:	1d dd       	rcall	.-1478   	; 0x5be0 <_Z12setPpmTimersv>
					setupPulsesPPM(PROTO_PPM16);
    61a6:	83 e0       	ldi	r24, 0x03	; 3
    61a8:	26 dd       	rcall	.-1460   	; 0x5bf6 <_Z14setupPulsesPPMh>
				}
				OCR3A = 50000;
    61aa:	80 e5       	ldi	r24, 0x50	; 80
    61ac:	93 ec       	ldi	r25, 0xC3	; 195
    61ae:	90 93 87 00 	sts	0x0087, r25
    61b2:	80 93 86 00 	sts	0x0086, r24
				OCR3B = 5000;
    61b6:	88 e8       	ldi	r24, 0x88	; 136
    61b8:	93 e1       	ldi	r25, 0x13	; 19
    61ba:	90 93 85 00 	sts	0x0085, r25
    61be:	80 93 84 00 	sts	0x0084, r24
				set_timer3_ppm();
    61c2:	a8 de       	rcall	.-688    	; 0x5f14 <_Z14set_timer3_ppmv>
//            OCR3B = 5000 ;
//            set_timer3_ppm() ;
//            break ;
		}
	}
	switch (required_protocol) {
    61c4:	c1 30       	cpi	r28, 0x01	; 1
    61c6:	49 f0       	breq	.+18     	; 0x61da <_Z11setupPulsesv+0x11e>
    61c8:	08 f4       	brcc	.+2      	; 0x61cc <_Z11setupPulsesv+0x110>
    61ca:	ac c0       	rjmp	.+344    	; 0x6324 <_Z11setupPulsesv+0x268>
    61cc:	c2 30       	cpi	r28, 0x02	; 2
    61ce:	09 f4       	brne	.+2      	; 0x61d2 <_Z11setupPulsesv+0x116>
    61d0:	a5 c0       	rjmp	.+330    	; 0x631c <_Z11setupPulsesv+0x260>
    61d2:	c3 30       	cpi	r28, 0x03	; 3
    61d4:	09 f4       	brne	.+2      	; 0x61d8 <_Z11setupPulsesv+0x11c>
    61d6:	a6 c0       	rjmp	.+332    	; 0x6324 <_Z11setupPulsesv+0x268>
    61d8:	a7 c0       	rjmp	.+334    	; 0x6328 <_Z11setupPulsesv+0x26c>
		case PROTO_PPM:
			setupPulsesPPM( PROTO_PPM);		// Don't enable interrupts through here
			break;
		case PROTO_PXX:
			sei();
    61da:	78 94       	sei
//void setUpPulsesPCM()
static void setupPulsesPXX() {
	uint8_t i;
	uint16_t chan;
	uint16_t chan_1;
	uint8_t lpass = pass;
    61dc:	f0 90 9e 0b 	lds	r15, 0x0B9E

#ifdef CPUM2561
	TIMSK1 &= ~( (1<<OCIE1B) | (1<<OCIE1C) );	// COMPC & B interrupts off
#else
	TIMSK &= ~(1 << OCIE1B);	// COMPB interrupt off
    61e0:	87 b7       	in	r24, 0x37	; 55
    61e2:	87 7f       	andi	r24, 0xF7	; 247
    61e4:	87 bf       	out	0x37, r24	; 55
	ETIMSK &= ~(1 << OCIE1C);	// COMPC interrupt off
    61e6:	80 91 7d 00 	lds	r24, 0x007D
    61ea:	8e 7f       	andi	r24, 0xFE	; 254
    61ec:	80 93 7d 00 	sts	0x007D, r24
//		PxxStart = TCNT1 ;
	{
		struct t_pcm_control *ptrControl;

		ptrControl = &PcmControl;
		FORCE_INDIRECT(ptrControl);
    61f0:	e1 e0       	ldi	r30, 0x01	; 1
    61f2:	fb e0       	ldi	r31, 0x0B	; 11

		pulses2MHzptr = pulses2MHz.pbyte;
    61f4:	8e e0       	ldi	r24, 0x0E	; 14
    61f6:	9b e0       	ldi	r25, 0x0B	; 11
    61f8:	90 93 1b 01 	sts	0x011B, r25
    61fc:	80 93 1a 01 	sts	0x011A, r24
		ptrControl->PcmPtr = pulses2MHz.pbyte + 1;		// past preamble
    6200:	8f e0       	ldi	r24, 0x0F	; 15
    6202:	9b e0       	ldi	r25, 0x0B	; 11
    6204:	93 83       	std	Z+3, r25	; 0x03
    6206:	82 83       	std	Z+2, r24	; 0x02
		ptrControl->PcmCrc = 0;
    6208:	15 82       	std	Z+5, r1	; 0x05
    620a:	14 82       	std	Z+4, r1	; 0x04
		ptrControl->PcmBitCount = ptrControl->PcmByte = 0;
    620c:	10 82       	st	Z, r1
    620e:	11 82       	std	Z+1, r1	; 0x01
		ptrControl->PcmOnesCount = 0;
    6210:	16 82       	std	Z+6, r1	; 0x06
	}

	pulses2MHz.pbyte[0] = 0xFF;		// Preamble
    6212:	8f ef       	ldi	r24, 0xFF	; 255
    6214:	80 93 0e 0b 	sts	0x0B0E, r24
//    putPcmPart( 0xC0 ) ;
//    putPcmPart( 0xC0 ) ;
//    putPcmPart( 0xC0 ) ;
//    putPcmPart( 0xC0 ) ;
	putPcmHead();  // sync byte
    6218:	1f df       	rcall	.-450    	; 0x6058 <_Z10putPcmHeadv>
	putPcmByte(g_model.ppmNCH);     // putPcmByte( g_model.rxnum ) ;  //
    621a:	80 91 31 02 	lds	r24, 0x0231
    621e:	fa de       	rcall	.-524    	; 0x6014 <_Z10putPcmByteh>

	uint8_t flag1;
	if (pxxFlag & PXX_BIND) {
    6220:	90 91 0b 0b 	lds	r25, 0x0B0B
    6224:	80 91 30 02 	lds	r24, 0x0230
    6228:	90 ff       	sbrs	r25, 0
    622a:	08 c0       	rjmp	.+16     	; 0x623c <_Z11setupPulsesv+0x180>
		flag1 = (g_model.sub_protocol << 6) | (g_model.country << 1) | pxxFlag;
    622c:	28 2f       	mov	r18, r24
    622e:	20 7c       	andi	r18, 0xC0	; 192
    6230:	86 95       	lsr	r24
    6232:	86 95       	lsr	r24
    6234:	86 95       	lsr	r24
    6236:	86 70       	andi	r24, 0x06	; 6
    6238:	82 2b       	or	r24, r18
    623a:	01 c0       	rjmp	.+2      	; 0x623e <_Z11setupPulsesv+0x182>
	} else {
		flag1 = (g_model.sub_protocol << 6) | pxxFlag;
    623c:	80 7c       	andi	r24, 0xC0	; 192
    623e:	89 2b       	or	r24, r25
	}
	putPcmByte(flag1);     // First byte of flags
    6240:	e9 de       	rcall	.-558    	; 0x6014 <_Z10putPcmByteh>

	putPcmByte(0);     // Second byte of flags
    6242:	80 e0       	ldi	r24, 0x00	; 0
    6244:	e7 de       	rcall	.-562    	; 0x6014 <_Z10putPcmByteh>

	uint8_t startChan = g_model.ppmStart;
    6246:	e0 90 32 02 	lds	r14, 0x0232
    624a:	e2 94       	swap	r14
    624c:	e6 94       	lsr	r14
    624e:	f7 e0       	ldi	r31, 0x07	; 7
    6250:	ef 22       	and	r14, r31
	if (lpass & 1) {
    6252:	8f 2d       	mov	r24, r15
    6254:	81 70       	andi	r24, 0x01	; 1
    6256:	d8 2e       	mov	r13, r24
    6258:	f0 fe       	sbrs	r15, 0
    625a:	02 c0       	rjmp	.+4      	; 0x6260 <_Z11setupPulsesv+0x1a4>
		startChan += 8;
    625c:	88 e0       	ldi	r24, 0x08	; 8
    625e:	e8 0e       	add	r14, r24
    6260:	e8 e0       	ldi	r30, 0x08	; 8
    6262:	ce 2e       	mov	r12, r30
    6264:	ce 0c       	add	r12, r14
	}
	for (i = 0; i < 4; i += 1)		// First 8 channels only
			{												// Next 8 channels would have 2048 added
		chan = scaleForPXX(startChan);
    6266:	8e 2d       	mov	r24, r14
    6268:	02 df       	rcall	.-508    	; 0x606e <_Z11scaleForPXXh>
    626a:	8c 01       	movw	r16, r24
		if (lpass & 1) {
    626c:	d1 10       	cpse	r13, r1
			chan += 2048;
    626e:	18 5f       	subi	r17, 0xF8	; 248
		}
		putPcmByte(chan); // Low byte of channel
    6270:	80 2f       	mov	r24, r16
    6272:	d0 de       	rcall	.-608    	; 0x6014 <_Z10putPcmByteh>
		startChan += 1;
		chan_1 = scaleForPXX(startChan);
    6274:	81 e0       	ldi	r24, 0x01	; 1
    6276:	8e 0d       	add	r24, r14
    6278:	fa de       	rcall	.-524    	; 0x606e <_Z11scaleForPXXh>
    627a:	ec 01       	movw	r28, r24
		if (lpass & 1) {
    627c:	d1 10       	cpse	r13, r1
			chan_1 += 2048;
    627e:	d8 5f       	subi	r29, 0xF8	; 248
		}
		startChan += 1;
    6280:	e3 94       	inc	r14
    6282:	e3 94       	inc	r14
		putPcmByte(((chan >> 8) & 0x0F) | (chan_1 << 4));  // 4 bits each from 2 channels
    6284:	9c 2f       	mov	r25, r28
    6286:	92 95       	swap	r25
    6288:	90 7f       	andi	r25, 0xF0	; 240
    628a:	81 2f       	mov	r24, r17
    628c:	8f 70       	andi	r24, 0x0F	; 15
    628e:	89 2b       	or	r24, r25
    6290:	c1 de       	rcall	.-638    	; 0x6014 <_Z10putPcmByteh>
		putPcmByte(chan_1 >> 4);  // High byte of channel
    6292:	ce 01       	movw	r24, r28
    6294:	74 e0       	ldi	r23, 0x04	; 4
    6296:	96 95       	lsr	r25
    6298:	87 95       	ror	r24
    629a:	7a 95       	dec	r23
    629c:	e1 f7       	brne	.-8      	; 0x6296 <_Z11setupPulsesv+0x1da>
    629e:	ba de       	rcall	.-652    	; 0x6014 <_Z10putPcmByteh>

	uint8_t startChan = g_model.ppmStart;
	if (lpass & 1) {
		startChan += 8;
	}
	for (i = 0; i < 4; i += 1)		// First 8 channels only
    62a0:	ec 10       	cpse	r14, r12
    62a2:	e1 cf       	rjmp	.-62     	; 0x6266 <_Z11setupPulsesv+0x1aa>
		}
		startChan += 1;
		putPcmByte(((chan >> 8) & 0x0F) | (chan_1 << 4));  // 4 bits each from 2 channels
		putPcmByte(chan_1 >> 4);  // High byte of channel
	}
	putPcmByte(0);
    62a4:	80 e0       	ldi	r24, 0x00	; 0
    62a6:	b6 de       	rcall	.-660    	; 0x6014 <_Z10putPcmByteh>
	chan = PcmControl.PcmCrc;		        // get the crc
    62a8:	c0 91 05 0b 	lds	r28, 0x0B05
	putPcmByte(chan >> 8); // Checksum hi
    62ac:	80 91 06 0b 	lds	r24, 0x0B06
    62b0:	b1 de       	rcall	.-670    	; 0x6014 <_Z10putPcmByteh>
	putPcmByte(chan); 			// Checksum lo
    62b2:	8c 2f       	mov	r24, r28
    62b4:	af de       	rcall	.-674    	; 0x6014 <_Z10putPcmByteh>
	putPcmHead();      // sync byte
    62b6:	d0 de       	rcall	.-608    	; 0x6058 <_Z10putPcmHeadv>
		ptrControl->PcmBitCount = ptrControl->PcmByte = 0;
	}
}

static void putPcmFlush() {
	while (PcmControl.PcmBitCount != 0) {
    62b8:	80 91 02 0b 	lds	r24, 0x0B02
    62bc:	88 23       	and	r24, r24
    62be:	19 f0       	breq	.+6      	; 0x62c6 <_Z11setupPulsesv+0x20a>
		putPcmPart(0); // Empty
    62c0:	80 e0       	ldi	r24, 0x00	; 0
    62c2:	80 de       	rcall	.-768    	; 0x5fc4 <_Z10putPcmParth>
    62c4:	f9 cf       	rjmp	.-14     	; 0x62b8 <_Z11setupPulsesv+0x1fc>
	}
	*PcmControl.PcmPtr = 0;				// Mark end
    62c6:	e0 91 03 0b 	lds	r30, 0x0B03
    62ca:	f0 91 04 0b 	lds	r31, 0x0B04
    62ce:	10 82       	st	Z, r1
	putPcmByte(chan >> 8); // Checksum hi
	putPcmByte(chan); 			// Checksum lo
	putPcmHead();      // sync byte
	putPcmFlush();
	volatile uint16_t *ptr = &OCR1C;
	FORCE_INDIRECT(ptr);
    62d0:	e8 e7       	ldi	r30, 0x78	; 120
    62d2:	f0 e0       	ldi	r31, 0x00	; 0
	{
		uint16_t ocrc;
		ocrc = *ptr;
    62d4:	80 81       	ld	r24, Z
    62d6:	91 81       	ldd	r25, Z+1	; 0x01
		OCR1B = ocrc + 3000;		// 1.5mS on from OCR1C
    62d8:	9c 01       	movw	r18, r24
    62da:	28 54       	subi	r18, 0x48	; 72
    62dc:	34 4f       	sbci	r19, 0xF4	; 244
    62de:	39 bd       	out	0x29, r19	; 41
    62e0:	28 bd       	out	0x28, r18	; 40
		*ptr = ocrc + 18000;		// 18mS on, 9mS needed if 16 channels
    62e2:	80 5b       	subi	r24, 0xB0	; 176
    62e4:	99 4b       	sbci	r25, 0xB9	; 185
    62e6:	91 83       	std	Z+1, r25	; 0x01
    62e8:	80 83       	st	Z, r24
	}
//    OCR1B = *ptr + 3000 ;		// 1.5mS on from OCR1C
//    *ptr += 18000 ;		// 18mS on, 9mS needed if 16 channels
	PORTB |= (1 << OUT_B_PPM);		// Idle is line high
    62ea:	c0 9a       	sbi	0x18, 0	; 24
#ifdef CPUM2561
			TIFR1 = (1<<OCF1B) | (1<<OCF1C);			// Clear pending interrupts
			TIMSK1 |= (1<<OCIE1B) | (1<<OCIE1C);// Enable COMPB and COMPC
#else
	TIFR = (1 << OCF1B);			// Clear pending interrupt
    62ec:	88 e0       	ldi	r24, 0x08	; 8
    62ee:	86 bf       	out	0x36, r24	; 54
	ETIFR = (1 << OCF1C);			// Clear pending interrupt
    62f0:	81 e0       	ldi	r24, 0x01	; 1
    62f2:	80 93 7c 00 	sts	0x007C, r24
	TIMSK |= (1 << OCIE1B);	// Enable COMPB
    62f6:	87 b7       	in	r24, 0x37	; 55
    62f8:	88 60       	ori	r24, 0x08	; 8
    62fa:	87 bf       	out	0x37, r24	; 55
	ETIMSK |= (1 << OCIE1C);	// Enable COMPC
    62fc:	80 91 7d 00 	lds	r24, 0x007D
    6300:	81 60       	ori	r24, 0x01	; 1
    6302:	80 93 7d 00 	sts	0x007D, r24
#endif
	if (g_model.sub_protocol == 1)		// D8
    6306:	80 91 30 02 	lds	r24, 0x0230
    630a:	80 7c       	andi	r24, 0xC0	; 192
    630c:	80 34       	cpi	r24, 0x40	; 64
    630e:	11 f0       	breq	.+4      	; 0x6314 <_Z11setupPulsesv+0x258>
			{
		lpass = 0;
	} else {
		lpass += 1;
    6310:	f3 94       	inc	r15
    6312:	01 c0       	rjmp	.+2      	; 0x6316 <_Z11setupPulsesv+0x25a>
	TIMSK |= (1 << OCIE1B);	// Enable COMPB
	ETIMSK |= (1 << OCIE1C);	// Enable COMPC
#endif
	if (g_model.sub_protocol == 1)		// D8
			{
		lpass = 0;
    6314:	f1 2c       	mov	r15, r1
	} else {
		lpass += 1;
	}
	pass = lpass;
    6316:	f0 92 9e 0b 	sts	0x0B9E, r15
//		PxxTime = TCNT1 - PxxStart ;
	asm("");
    631a:	06 c0       	rjmp	.+12     	; 0x6328 <_Z11setupPulsesv+0x26c>
			sei();
			// Interrupts allowed here
			setupPulsesPXX();
			break;
		case PROTO_DSM2:
			sei();
    631c:	78 94       	sei
			// Interrupts allowed here
			setupPulsesDsm2(6);
    631e:	86 e0       	ldi	r24, 0x06	; 6
    6320:	e4 dc       	rcall	.-1592   	; 0x5cea <_Z15setupPulsesDsm2h>
			break;
    6322:	02 c0       	rjmp	.+4      	; 0x6328 <_Z11setupPulsesv+0x26c>
		case PROTO_PPM16:
			setupPulsesPPM( PROTO_PPM);		// Don't enable interrupts through here
    6324:	80 e0       	ldi	r24, 0x00	; 0
    6326:	67 dc       	rcall	.-1842   	; 0x5bf6 <_Z14setupPulsesPPMh>
	}
	//    SPY_OFF;
//extern void nothing() ;
//	nothing() ;
	asm("");
}
    6328:	df 91       	pop	r29
    632a:	cf 91       	pop	r28
    632c:	1f 91       	pop	r17
    632e:	0f 91       	pop	r16
    6330:	ff 90       	pop	r15
    6332:	ef 90       	pop	r14
    6334:	df 90       	pop	r13
    6336:	cf 90       	pop	r12
    6338:	08 95       	ret

0000633a <__vector_12>:
static uint8_t PulsePol;
static uint8_t PulsePol16;

//ISR(TIMER1_OVF_vect)
ISR(TIMER1_COMPA_vect) //2MHz pulse generation
{
    633a:	1f 92       	push	r1
    633c:	0f 92       	push	r0
    633e:	0f b6       	in	r0, 0x3f	; 63
    6340:	0f 92       	push	r0
    6342:	11 24       	eor	r1, r1
    6344:	2f 93       	push	r18
    6346:	3f 93       	push	r19
    6348:	4f 93       	push	r20
    634a:	5f 93       	push	r21
    634c:	6f 93       	push	r22
    634e:	7f 93       	push	r23
    6350:	8f 93       	push	r24
    6352:	9f 93       	push	r25
    6354:	af 93       	push	r26
    6356:	bf 93       	push	r27
    6358:	cf 93       	push	r28
    635a:	df 93       	push	r29
    635c:	ef 93       	push	r30
    635e:	ff 93       	push	r31
	static uint16_t *pulsePtr = pulses2MHz.pword;

	//    uint8_t i = 0;
	//    while((TCNT1L < 10) && (++i < 50))  // Timer does not read too fast, so i
	//        ;
	uint16_t dt = TCNT1;    //-OCR1A;
    6360:	8c b5       	in	r24, 0x2c	; 44
    6362:	9d b5       	in	r25, 0x2d	; 45

	if (PulsePol) {
    6364:	20 91 a0 0b 	lds	r18, 0x0BA0
    6368:	22 23       	and	r18, r18
    636a:	21 f0       	breq	.+8      	; 0x6374 <__vector_12+0x3a>
		PORTB |= (1 << OUT_B_PPM);
    636c:	c0 9a       	sbi	0x18, 0	; 24
		PulsePol = 0;
    636e:	10 92 a0 0b 	sts	0x0BA0, r1
    6372:	04 c0       	rjmp	.+8      	; 0x637c <__vector_12+0x42>
	} else {
		PORTB &= ~(1 << OUT_B_PPM);
    6374:	c0 98       	cbi	0x18, 0	; 24
		PulsePol = 1;
    6376:	21 e0       	ldi	r18, 0x01	; 1
    6378:	20 93 a0 0b 	sts	0x0BA0, r18
	//      *pulsePtr = rest ;
	//    }
	//    channel += 1 ;
	//  }
	//  PulseTotal += (OCR1A  = *pulsePtr++);
	OCR1A = *pulsePtr;
    637c:	c0 91 16 01 	lds	r28, 0x0116
    6380:	d0 91 17 01 	lds	r29, 0x0117
    6384:	fe 01       	movw	r30, r28
    6386:	21 91       	ld	r18, Z+
    6388:	31 91       	ld	r19, Z+
    638a:	3b bd       	out	0x2b, r19	; 43
    638c:	2a bd       	out	0x2a, r18	; 42
	pulsePtr += 1;
    638e:	f0 93 17 01 	sts	0x0117, r31
    6392:	e0 93 16 01 	sts	0x0116, r30

	{
		struct t_latency *ptrLat = &g_latency;

		FORCE_INDIRECT(ptrLat);
    6396:	ec e1       	ldi	r30, 0x1C	; 28
    6398:	f1 e0       	ldi	r31, 0x01	; 1
		if ((uint8_t) dt > ptrLat->g_tmr1Latency_max)
    639a:	28 2f       	mov	r18, r24
    639c:	31 81       	ldd	r19, Z+1	; 0x01
    639e:	38 17       	cp	r19, r24
    63a0:	08 f4       	brcc	.+2      	; 0x63a4 <__vector_12+0x6a>
			ptrLat->g_tmr1Latency_max = dt;    // max has leap, therefore vary in length
    63a2:	81 83       	std	Z+1, r24	; 0x01
		if ((uint8_t) dt < ptrLat->g_tmr1Latency_min)
    63a4:	30 81       	ld	r19, Z
    63a6:	23 17       	cp	r18, r19
    63a8:	08 f4       	brcc	.+2      	; 0x63ac <__vector_12+0x72>
			ptrLat->g_tmr1Latency_min = dt;    // max has leap, therefore vary in length
    63aa:	80 83       	st	Z, r24
	}
	if (*pulsePtr == 0) {
    63ac:	8a 81       	ldd	r24, Y+2	; 0x02
    63ae:	9b 81       	ldd	r25, Y+3	; 0x03
    63b0:	89 2b       	or	r24, r25
    63b2:	d1 f4       	brne	.+52     	; 0x63e8 <__vector_12+0xae>
		//currpulse=0;
		pulsePtr = pulses2MHz.pword;
    63b4:	8e e0       	ldi	r24, 0x0E	; 14
    63b6:	9b e0       	ldi	r25, 0x0B	; 11
    63b8:	90 93 17 01 	sts	0x0117, r25
    63bc:	80 93 16 01 	sts	0x0116, r24
		PulsePol = !g_model.pulsePol;    //0;     // changed polarity
    63c0:	80 91 37 02 	lds	r24, 0x0237
    63c4:	80 95       	com	r24
    63c6:	81 70       	andi	r24, 0x01	; 1
    63c8:	80 93 a0 0b 	sts	0x0BA0, r24
		//    PulseTotal = 0 ;

#ifdef CPUM2561
		TIMSK1 &= ~(1<<OCIE1A); //stop reentrance
#else
		TIMSK &= ~(1 << OCIE1A); //stop reentrance
    63cc:	87 b7       	in	r24, 0x37	; 55
    63ce:	8f 7e       	andi	r24, 0xEF	; 239
    63d0:	87 bf       	out	0x37, r24	; 55
#endif
		//        sei();		// Don't do this yet
		setupPulses();
    63d2:	74 de       	rcall	.-792    	; 0x60bc <_Z11setupPulsesv>
		//					if ( TIFR & (1 << OCF1A ) )		// Interrupt pending
		//					{
		//						TCNT1 = 0 ;
		//					}
		//				}
		if ((g_model.protocol == PROTO_PPM) || (g_model.protocol == PROTO_PPM16)) {
    63d4:	80 91 30 02 	lds	r24, 0x0230
    63d8:	8f 70       	andi	r24, 0x0F	; 15
    63da:	11 f0       	breq	.+4      	; 0x63e0 <__vector_12+0xa6>
    63dc:	83 30       	cpi	r24, 0x03	; 3
    63de:	21 f4       	brne	.+8      	; 0x63e8 <__vector_12+0xae>
			//            cli();		// Not needed if sei() not done above
#ifdef CPUM2561
			TIMSK1 |= (1<<OCIE1A);
#else
			TIMSK |= (1 << OCIE1A);
    63e0:	87 b7       	in	r24, 0x37	; 55
    63e2:	80 61       	ori	r24, 0x10	; 16
    63e4:	87 bf       	out	0x37, r24	; 55
#endif
			sei();
    63e6:	78 94       	sei
		}
	}
	heartbeat |= HEART_TIMER2Mhz
    63e8:	80 91 0d 0b 	lds	r24, 0x0B0D
    63ec:	81 60       	ori	r24, 0x01	; 1
    63ee:	80 93 0d 0b 	sts	0x0B0D, r24
	;
}
    63f2:	ff 91       	pop	r31
    63f4:	ef 91       	pop	r30
    63f6:	df 91       	pop	r29
    63f8:	cf 91       	pop	r28
    63fa:	bf 91       	pop	r27
    63fc:	af 91       	pop	r26
    63fe:	9f 91       	pop	r25
    6400:	8f 91       	pop	r24
    6402:	7f 91       	pop	r23
    6404:	6f 91       	pop	r22
    6406:	5f 91       	pop	r21
    6408:	4f 91       	pop	r20
    640a:	3f 91       	pop	r19
    640c:	2f 91       	pop	r18
    640e:	0f 90       	pop	r0
    6410:	0f be       	out	0x3f, r0	; 63
    6412:	0f 90       	pop	r0
    6414:	1f 90       	pop	r1
    6416:	18 95       	reti

00006418 <_Z11startPulsesv>:

void startPulses() {
	PulsePol16 = PulsePol = !g_model.pulsePol;
    6418:	80 91 37 02 	lds	r24, 0x0237
    641c:	80 95       	com	r24
    641e:	81 70       	andi	r24, 0x01	; 1
    6420:	80 93 a0 0b 	sts	0x0BA0, r24
    6424:	80 93 9f 0b 	sts	0x0B9F, r24
	if (!PulsePol) {
    6428:	81 11       	cpse	r24, r1
    642a:	01 c0       	rjmp	.+2      	; 0x642e <_Z11startPulsesv+0x16>
		PORTB |= (1 << OUT_B_PPM);
    642c:	c0 9a       	sbi	0x18, 0	; 24
	}
	Current_protocol = g_model.protocol + 10;		// Not the same!
    642e:	80 91 30 02 	lds	r24, 0x0230
    6432:	8f 70       	andi	r24, 0x0F	; 15
    6434:	86 5f       	subi	r24, 0xF6	; 246
    6436:	80 93 0c 0b 	sts	0x0B0C, r24
	PausePulses = 0;
    643a:	10 92 0a 0b 	sts	0x0B0A, r1
	setupPulses();
    643e:	3e ce       	rjmp	.-900    	; 0x60bc <_Z11setupPulsesv>

00006440 <__vector_24>:
	heartbeat |= HEART_TIMER2Mhz
	;
}

ISR(TIMER1_COMPC_vect) // DSM2 or PXX end of frame
{
    6440:	1f 92       	push	r1
    6442:	0f 92       	push	r0
    6444:	0f b6       	in	r0, 0x3f	; 63
    6446:	0f 92       	push	r0
    6448:	11 24       	eor	r1, r1
    644a:	2f 93       	push	r18
    644c:	3f 93       	push	r19
    644e:	4f 93       	push	r20
    6450:	5f 93       	push	r21
    6452:	6f 93       	push	r22
    6454:	7f 93       	push	r23
    6456:	8f 93       	push	r24
    6458:	9f 93       	push	r25
    645a:	af 93       	push	r26
    645c:	bf 93       	push	r27
    645e:	ef 93       	push	r30
    6460:	ff 93       	push	r31

	if (g_model.protocol == PROTO_DSM2) {
    6462:	80 91 30 02 	lds	r24, 0x0230
    6466:	8f 70       	andi	r24, 0x0F	; 15
    6468:	82 30       	cpi	r24, 0x02	; 2
    646a:	c1 f4       	brne	.+48     	; 0x649c <__vector_24+0x5c>
		// DSM2
		ICR1 = 41536; //next frame starts in 22 msec 41536 = 2*(22000 - 14*11*8)
    646c:	80 e4       	ldi	r24, 0x40	; 64
    646e:	92 ea       	ldi	r25, 0xA2	; 162
    6470:	97 bd       	out	0x27, r25	; 39
    6472:	86 bd       	out	0x26, r24	; 38
		if (OCR1C < 255)
    6474:	80 91 78 00 	lds	r24, 0x0078
    6478:	90 91 79 00 	lds	r25, 0x0079
    647c:	8f 3f       	cpi	r24, 0xFF	; 255
    647e:	91 05       	cpc	r25, r1
    6480:	38 f4       	brcc	.+14     	; 0x6490 <__vector_24+0x50>
			OCR1C = 39000;  //delay setup pulses by 19.5 msec to reduce sytem latency
    6482:	88 e5       	ldi	r24, 0x58	; 88
    6484:	98 e9       	ldi	r25, 0x98	; 152
    6486:	90 93 79 00 	sts	0x0079, r25
    648a:	80 93 78 00 	sts	0x0078, r24
    648e:	07 c0       	rjmp	.+14     	; 0x649e <__vector_24+0x5e>
		else {
			OCR1C = 200;
    6490:	88 ec       	ldi	r24, 0xC8	; 200
    6492:	90 e0       	ldi	r25, 0x00	; 0
    6494:	90 93 79 00 	sts	0x0079, r25
    6498:	80 93 78 00 	sts	0x0078, r24
			setupPulses();
		}
	} else		// must be PXX
	{
		setupPulses();
    649c:	0f de       	rcall	.-994    	; 0x60bc <_Z11setupPulsesv>
	}
}
    649e:	ff 91       	pop	r31
    64a0:	ef 91       	pop	r30
    64a2:	bf 91       	pop	r27
    64a4:	af 91       	pop	r26
    64a6:	9f 91       	pop	r25
    64a8:	8f 91       	pop	r24
    64aa:	7f 91       	pop	r23
    64ac:	6f 91       	pop	r22
    64ae:	5f 91       	pop	r21
    64b0:	4f 91       	pop	r20
    64b2:	3f 91       	pop	r19
    64b4:	2f 91       	pop	r18
    64b6:	0f 90       	pop	r0
    64b8:	0f be       	out	0x3f, r0	; 63
    64ba:	0f 90       	pop	r0
    64bc:	1f 90       	pop	r1
    64be:	18 95       	reti

000064c0 <__vector_27>:
	heartbeat |= HEART_TIMER2Mhz
	;
}

ISR(TIMER3_COMPB_vect) //2MHz pulse generation
{
    64c0:	1f 92       	push	r1
    64c2:	0f 92       	push	r0
    64c4:	0f b6       	in	r0, 0x3f	; 63
    64c6:	0f 92       	push	r0
    64c8:	11 24       	eor	r1, r1
    64ca:	2f 93       	push	r18
    64cc:	3f 93       	push	r19
    64ce:	4f 93       	push	r20
    64d0:	5f 93       	push	r21
    64d2:	6f 93       	push	r22
    64d4:	7f 93       	push	r23
    64d6:	8f 93       	push	r24
    64d8:	9f 93       	push	r25
    64da:	af 93       	push	r26
    64dc:	bf 93       	push	r27
    64de:	ef 93       	push	r30
    64e0:	ff 93       	push	r31
	uint8_t proto = g_model.protocol;
    64e2:	80 91 30 02 	lds	r24, 0x0230
    64e6:	8f 70       	andi	r24, 0x0F	; 15
	sei();
    64e8:	78 94       	sei
	if (Current_protocol != proto) {
    64ea:	90 91 0c 0b 	lds	r25, 0x0B0C
    64ee:	98 17       	cp	r25, r24
    64f0:	69 f0       	breq	.+26     	; 0x650c <__vector_27+0x4c>
		if (Current_protocol == PROTO_PPMSIM) {
    64f2:	94 30       	cpi	r25, 0x04	; 4
    64f4:	59 f4       	brne	.+22     	; 0x650c <__vector_27+0x4c>
			if ((!SlaveMode) || (g_eeGeneral.enablePpmsim == 0)) {
    64f6:	80 91 1d 02 	lds	r24, 0x021D
    64fa:	88 23       	and	r24, r24
    64fc:	21 f0       	breq	.+8      	; 0x6506 <__vector_27+0x46>
    64fe:	80 91 2e 06 	lds	r24, 0x062E
    6502:	85 fd       	sbrc	r24, 5
    6504:	02 c0       	rjmp	.+4      	; 0x650a <__vector_27+0x4a>
				setupPulses();
    6506:	da dd       	rcall	.-1100   	; 0x60bc <_Z11setupPulsesv>
				return;
    6508:	02 c0       	rjmp	.+4      	; 0x650e <__vector_27+0x4e>
			} else {
				proto = PROTO_PPMSIM;
    650a:	84 e0       	ldi	r24, 0x04	; 4
			}
		}
	}
	setupPulsesPPM(proto);
    650c:	74 db       	rcall	.-2328   	; 0x5bf6 <_Z14setupPulsesPPMh>
}
    650e:	ff 91       	pop	r31
    6510:	ef 91       	pop	r30
    6512:	bf 91       	pop	r27
    6514:	af 91       	pop	r26
    6516:	9f 91       	pop	r25
    6518:	8f 91       	pop	r24
    651a:	7f 91       	pop	r23
    651c:	6f 91       	pop	r22
    651e:	5f 91       	pop	r21
    6520:	4f 91       	pop	r20
    6522:	3f 91       	pop	r19
    6524:	2f 91       	pop	r18
    6526:	0f 90       	pop	r0
    6528:	0f be       	out	0x3f, r0	; 63
    652a:	0f 90       	pop	r0
    652c:	1f 90       	pop	r1
    652e:	18 95       	reti

00006530 <_ZN10audioQueue6aqinitEv>:
  aqinit();
}

// TODO should not be needed
void audioQueue::aqinit()
{
    6530:	fc 01       	movw	r30, r24
  //make sure haptic off by default
  HAPTIC_OFF;
    6532:	a5 e6       	ldi	r26, 0x65	; 101
    6534:	b0 e0       	ldi	r27, 0x00	; 0
    6536:	8c 91       	ld	r24, X
    6538:	8b 7f       	andi	r24, 0xFB	; 251
    653a:	8c 93       	st	X, r24

  toneTimeLeft = 0;
    653c:	14 82       	std	Z+4, r1	; 0x04
  tonePause = 0;
    653e:	15 82       	std	Z+5, r1	; 0x05

  t_queueRidx = 0;
    6540:	10 82       	st	Z, r1
  t_queueWidx = 0;
    6542:	11 82       	std	Z+1, r1	; 0x01

  toneHaptic = 0;
    6544:	16 a6       	std	Z+46, r1	; 0x2e
  hapticTick = 0;
    6546:	17 a6       	std	Z+47, r1	; 0x2f
    6548:	08 95       	ret

0000654a <_ZN10audioQueueC1Ev>:

struct t_voice Voice ;

audioQueue::audioQueue()
{
  aqinit();
    654a:	f2 cf       	rjmp	.-28     	; 0x6530 <_ZN10audioQueue6aqinitEv>

0000654c <_ZN10audioQueue4busyEv>:

}

bool audioQueue::busy()
{
  return (toneTimeLeft > 0);
    654c:	21 e0       	ldi	r18, 0x01	; 1
    654e:	fc 01       	movw	r30, r24
    6550:	84 81       	ldd	r24, Z+4	; 0x04
    6552:	81 11       	cpse	r24, r1
    6554:	01 c0       	rjmp	.+2      	; 0x6558 <_ZN10audioQueue4busyEv+0xc>
    6556:	20 e0       	ldi	r18, 0x00	; 0
}
    6558:	82 2f       	mov	r24, r18
    655a:	08 95       	ret

0000655c <_ZN10audioQueue9freeslotsEv>:


bool audioQueue::freeslots()
{
	uint8_t temp ;
	temp = t_queueWidx ;
    655c:	fc 01       	movw	r30, r24
    655e:	21 81       	ldd	r18, Z+1	; 0x01
	temp += AUDIO_QUEUE_LENGTH ;
	temp -= t_queueRidx ;
    6560:	80 81       	ld	r24, Z
    6562:	28 1b       	sub	r18, r24
	temp %= AUDIO_QUEUE_LENGTH ;
    6564:	27 70       	andi	r18, 0x07	; 7
	temp = AUDIO_QUEUE_LENGTH - temp ;
    6566:	98 e0       	ldi	r25, 0x08	; 8
    6568:	92 1b       	sub	r25, r18
	return temp >= AUDIO_QUEUE_FREESLOTS ;
    656a:	81 e0       	ldi	r24, 0x01	; 1
    656c:	93 30       	cpi	r25, 0x03	; 3
    656e:	08 f4       	brcc	.+2      	; 0x6572 <_ZN10audioQueue9freeslotsEv+0x16>
    6570:	80 e0       	ldi	r24, 0x00	; 0
//  return AUDIO_QUEUE_LENGTH - ((t_queueWidx + AUDIO_QUEUE_LENGTH - t_queueRidx) % AUDIO_QUEUE_LENGTH) >= AUDIO_QUEUE_FREESLOTS;
}
    6572:	08 95       	ret

00006574 <_ZN10audioQueue9heartbeatEv>:

// heartbeat is responsibile for issueing the audio tones and general square waves
// it is essentially the life of the class.
// it is called every 10ms
void audioQueue::heartbeat()
{
    6574:	cf 93       	push	r28
    6576:	df 93       	push	r29
    6578:	fc 01       	movw	r30, r24
  if (toneTimeLeft > 0) {
    657a:	84 81       	ldd	r24, Z+4	; 0x04
    657c:	88 23       	and	r24, r24
    657e:	f1 f0       	breq	.+60     	; 0x65bc <_ZN10audioQueue9heartbeatEv+0x48>
    toneTimeLeft--; //time gets counted down
    6580:	81 50       	subi	r24, 0x01	; 1
    6582:	84 83       	std	Z+4, r24	; 0x04
    toneFreq += toneFreqIncr;
    6584:	82 81       	ldd	r24, Z+2	; 0x02
    6586:	93 81       	ldd	r25, Z+3	; 0x03
    6588:	89 0f       	add	r24, r25
    658a:	82 83       	std	Z+2, r24	; 0x02
    if (toneHaptic){
    658c:	86 a5       	ldd	r24, Z+46	; 0x2e
    658e:	88 23       	and	r24, r24
    6590:	f1 f1       	breq	.+124    	; 0x660e <_ZN10audioQueue9heartbeatEv+0x9a>
      if (hapticTick-- > 0) {
    6592:	87 a5       	ldd	r24, Z+47	; 0x2f
    6594:	9f ef       	ldi	r25, 0xFF	; 255
    6596:	98 0f       	add	r25, r24
    6598:	97 a7       	std	Z+47, r25	; 0x2f
    659a:	88 23       	and	r24, r24
    659c:	31 f0       	breq	.+12     	; 0x65aa <_ZN10audioQueue9heartbeatEv+0x36>
        HAPTIC_ON; // haptic output 'high'
    659e:	80 91 65 00 	lds	r24, 0x0065
    65a2:	84 60       	ori	r24, 0x04	; 4
    65a4:	80 93 65 00 	sts	0x0065, r24
    65a8:	32 c0       	rjmp	.+100    	; 0x660e <_ZN10audioQueue9heartbeatEv+0x9a>
      }
      else {
        HAPTIC_OFF; // haptic output 'low'
    65aa:	80 91 65 00 	lds	r24, 0x0065
    65ae:	8b 7f       	andi	r24, 0xFB	; 251
    65b0:	80 93 65 00 	sts	0x0065, r24
        hapticTick = g_eeGeneral.hapticStrength;
    65b4:	80 91 30 06 	lds	r24, 0x0630
    65b8:	87 a7       	std	Z+47, r24	; 0x2f
    65ba:	29 c0       	rjmp	.+82     	; 0x660e <_ZN10audioQueue9heartbeatEv+0x9a>
      }
    }
  }
  else {
    SPEAKER_OFF;
    65bc:	1b 98       	cbi	0x03, 3	; 3
    HAPTIC_OFF;
    65be:	80 91 65 00 	lds	r24, 0x0065
    65c2:	8b 7f       	andi	r24, 0xFB	; 251
    65c4:	80 93 65 00 	sts	0x0065, r24

    //if (tonePause-- <= 0) {
    if (tonePause > 0) {
    65c8:	85 81       	ldd	r24, Z+5	; 0x05
    65ca:	88 23       	and	r24, r24
    65cc:	19 f0       	breq	.+6      	; 0x65d4 <_ZN10audioQueue9heartbeatEv+0x60>
      tonePause--;
    65ce:	81 50       	subi	r24, 0x01	; 1
    65d0:	85 83       	std	Z+5, r24	; 0x05
    65d2:	1d c0       	rjmp	.+58     	; 0x660e <_ZN10audioQueue9heartbeatEv+0x9a>
    } else  {  
      if (t_queueRidx != t_queueWidx) {
    65d4:	80 81       	ld	r24, Z
    65d6:	91 81       	ldd	r25, Z+1	; 0x01
    65d8:	89 17       	cp	r24, r25
    65da:	c9 f0       	breq	.+50     	; 0x660e <_ZN10audioQueue9heartbeatEv+0x9a>
        toneFreq = queueToneFreq[t_queueRidx];
    65dc:	90 e0       	ldi	r25, 0x00	; 0
    65de:	ef 01       	movw	r28, r30
    65e0:	c8 0f       	add	r28, r24
    65e2:	d9 1f       	adc	r29, r25
    65e4:	2e 81       	ldd	r18, Y+6	; 0x06
    65e6:	22 83       	std	Z+2, r18	; 0x02
        toneTimeLeft = queueToneLength[t_queueRidx];
    65e8:	2e 89       	ldd	r18, Y+22	; 0x16
    65ea:	24 83       	std	Z+4, r18	; 0x04
        toneFreqIncr = queueToneFreqIncr[t_queueRidx];
    65ec:	2e 85       	ldd	r18, Y+14	; 0x0e
    65ee:	23 83       	std	Z+3, r18	; 0x03
        tonePause = queueTonePause[t_queueRidx];
    65f0:	2e 8d       	ldd	r18, Y+30	; 0x1e
    65f2:	25 83       	std	Z+5, r18	; 0x05
        toneHaptic = queueToneHaptic[t_queueRidx];
    65f4:	28 a9       	ldd	r18, Y+48	; 0x30
    65f6:	26 a7       	std	Z+46, r18	; 0x2e
        hapticTick = 0;
    65f8:	17 a6       	std	Z+47, r1	; 0x2f
        if (!queueToneRepeat[t_queueRidx]--) {
    65fa:	2e a1       	ldd	r18, Y+38	; 0x26
    65fc:	3f ef       	ldi	r19, 0xFF	; 255
    65fe:	32 0f       	add	r19, r18
    6600:	3e a3       	std	Y+38, r19	; 0x26
    6602:	21 11       	cpse	r18, r1
    6604:	04 c0       	rjmp	.+8      	; 0x660e <_ZN10audioQueue9heartbeatEv+0x9a>
          t_queueRidx = (t_queueRidx + 1) % AUDIO_QUEUE_LENGTH;
    6606:	01 96       	adiw	r24, 0x01	; 1
    6608:	87 70       	andi	r24, 0x07	; 7
    660a:	99 27       	eor	r25, r25
    660c:	80 83       	st	Z, r24
        }
      }
    }
  }
}
    660e:	df 91       	pop	r29
    6610:	cf 91       	pop	r28
    6612:	08 95       	ret

00006614 <_ZN10audioQueue4playEhhhh>:
  }
  return result;
}

void audioQueue::play(uint8_t tFreq, uint8_t tLen, uint8_t tPause, uint8_t flags )
{
    6614:	ef 92       	push	r14
    6616:	ff 92       	push	r15
    6618:	0f 93       	push	r16
    661a:	1f 93       	push	r17
    661c:	cf 93       	push	r28
    661e:	df 93       	push	r29
    6620:	ec 01       	movw	r28, r24
    6622:	f6 2e       	mov	r15, r22
    6624:	14 2f       	mov	r17, r20
    6626:	e2 2e       	mov	r14, r18
	
	if(!freeslots()){
    6628:	99 df       	rcall	.-206    	; 0x655c <_ZN10audioQueue9freeslotsEv>
    662a:	88 23       	and	r24, r24
    662c:	09 f4       	brne	.+2      	; 0x6630 <_ZN10audioQueue4playEhhhh+0x1c>
    662e:	4f c0       	rjmp	.+158    	; 0x66ce <_ZN10audioQueue4playEhhhh+0xba>
			return;
	}
  if (g_eeGeneral.beeperVal)
    6630:	80 91 25 06 	lds	r24, 0x0625
    6634:	88 73       	andi	r24, 0x38	; 56
    6636:	09 f4       	brne	.+2      	; 0x663a <_ZN10audioQueue4playEhhhh+0x26>
    6638:	4a c0       	rjmp	.+148    	; 0x66ce <_ZN10audioQueue4playEhhhh+0xba>
	{
	  int8_t tFreqIncr = (flags >> 6) ;
    663a:	30 2f       	mov	r19, r16
    663c:	32 95       	swap	r19
    663e:	36 95       	lsr	r19
    6640:	36 95       	lsr	r19
    6642:	33 70       	andi	r19, 0x03	; 3
		uint8_t tRepeat = flags & 0x0F ;
    6644:	40 2f       	mov	r20, r16
    6646:	4f 70       	andi	r20, 0x0F	; 15

	  if (tFreqIncr == 3) tFreqIncr = -1 ;
    6648:	33 30       	cpi	r19, 0x03	; 3
    664a:	09 f4       	brne	.+2      	; 0x664e <_ZN10audioQueue4playEhhhh+0x3a>
    664c:	3f ef       	ldi	r19, 0xFF	; 255

    if (tFreq > 0)
    664e:	ff 20       	and	r15, r15
    6650:	21 f0       	breq	.+8      	; 0x665a <_ZN10audioQueue4playEhhhh+0x46>
		{ //we dont add pitch if zero as this is a pause only event
      tFreq += g_eeGeneral.speakerPitch + BEEP_OFFSET; // add pitch compensator
    6652:	90 91 2f 06 	lds	r25, 0x062F
    6656:	96 5f       	subi	r25, 0xF6	; 246
    6658:	f9 0e       	add	r15, r25
}

inline uint8_t audioQueue::getToneLength(uint8_t tLen)
{
  uint8_t result = tLen; // default
  if (g_eeGeneral.beeperVal == 2) {
    665a:	80 31       	cpi	r24, 0x10	; 16
    665c:	29 f4       	brne	.+10     	; 0x6668 <_ZN10audioQueue4playEhhhh+0x54>
    result /= 3;
    665e:	8b ea       	ldi	r24, 0xAB	; 171
    6660:	18 9f       	mul	r17, r24
    6662:	11 2d       	mov	r17, r1
    6664:	11 24       	eor	r1, r1
    6666:	02 c0       	rjmp	.+4      	; 0x666c <_ZN10audioQueue4playEhhhh+0x58>
  }
  else if (g_eeGeneral.beeperVal == 3) {
    6668:	88 31       	cpi	r24, 0x18	; 24
    666a:	11 f4       	brne	.+4      	; 0x6670 <_ZN10audioQueue4playEhhhh+0x5c>
    result /= 2;
    666c:	16 95       	lsr	r17
    666e:	09 c0       	rjmp	.+18     	; 0x6682 <_ZN10audioQueue4playEhhhh+0x6e>
  }
  else if (g_eeGeneral.beeperVal == 5) {
    6670:	88 32       	cpi	r24, 0x28	; 40
    6672:	11 f4       	brne	.+4      	; 0x6678 <_ZN10audioQueue4playEhhhh+0x64>
    //long
    result *= 2;
    6674:	11 0f       	add	r17, r17
    6676:	05 c0       	rjmp	.+10     	; 0x6682 <_ZN10audioQueue4playEhhhh+0x6e>
  }
  else if (g_eeGeneral.beeperVal == 6) {
    6678:	80 33       	cpi	r24, 0x30	; 48
    667a:	19 f4       	brne	.+6      	; 0x6682 <_ZN10audioQueue4playEhhhh+0x6e>
    //xlong
    result *= 3;
    667c:	81 2f       	mov	r24, r17
    667e:	88 0f       	add	r24, r24
    6680:	18 0f       	add	r17, r24
    6682:	28 81       	ld	r18, Y
		{ //we dont add pitch if zero as this is a pause only event
      tFreq += g_eeGeneral.speakerPitch + BEEP_OFFSET; // add pitch compensator
    }
    tLen = getToneLength(tLen);

		if ( flags & PLAY_NOW )
    6684:	04 ff       	sbrs	r16, 4
    6686:	0d c0       	rjmp	.+26     	; 0x66a2 <_ZN10audioQueue4playEhhhh+0x8e>
		{
    	toneFreq = tFreq ; // add pitch compensator
    6688:	fa 82       	std	Y+2, r15	; 0x02
    	toneTimeLeft = tLen ;
    668a:	1c 83       	std	Y+4, r17	; 0x04
    	tonePause = tPause;
    668c:	ed 82       	std	Y+5, r14	; 0x05
    	toneHaptic = flags & PLAY_HAPTIC ? 1 : 0 ;
    668e:	05 fb       	bst	r16, 5
    6690:	88 27       	eor	r24, r24
    6692:	80 f9       	bld	r24, 0
    6694:	8e a7       	std	Y+46, r24	; 0x2e
    	hapticTick = 0;
    6696:	1f a6       	std	Y+47, r1	; 0x2f
    	toneFreqIncr = tFreqIncr ;
    6698:	3b 83       	std	Y+3, r19	; 0x03
    	t_queueWidx = t_queueRidx;
    669a:	29 83       	std	Y+1, r18	; 0x01
		else
		{
			tRepeat += 1 ;			
		}

		if ( tRepeat )
    669c:	44 23       	and	r20, r20
    669e:	b9 f0       	breq	.+46     	; 0x66ce <_ZN10audioQueue4playEhhhh+0xba>
    66a0:	01 c0       	rjmp	.+2      	; 0x66a4 <_ZN10audioQueue4playEhhhh+0x90>
//    	  playASAP(tFreq, tLen, tPause, tRepeat-1, toneHaptic, 0 ) ;
//    	}
		}
		else
		{
			tRepeat += 1 ;			
    66a2:	4f 5f       	subi	r20, 0xFF	; 255
		}

		if ( tRepeat )
		{
    	uint8_t next_queueWidx = (t_queueWidx + 1) % AUDIO_QUEUE_LENGTH;
    66a4:	e9 81       	ldd	r30, Y+1	; 0x01
    66a6:	f0 e0       	ldi	r31, 0x00	; 0
    66a8:	cf 01       	movw	r24, r30
    66aa:	01 96       	adiw	r24, 0x01	; 1
    66ac:	87 70       	andi	r24, 0x07	; 7
    66ae:	99 27       	eor	r25, r25
    	if (next_queueWidx != t_queueRidx)
    66b0:	28 17       	cp	r18, r24
    66b2:	69 f0       	breq	.+26     	; 0x66ce <_ZN10audioQueue4playEhhhh+0xba>
			{
    	  queueToneFreq[t_queueWidx] = tFreq ; // add pitch compensator
    66b4:	ec 0f       	add	r30, r28
    66b6:	fd 1f       	adc	r31, r29
    66b8:	f6 82       	std	Z+6, r15	; 0x06
    	  queueToneLength[t_queueWidx] = tLen ;
    66ba:	16 8b       	std	Z+22, r17	; 0x16
    	  queueTonePause[t_queueWidx] = tPause;
    66bc:	e6 8e       	std	Z+30, r14	; 0x1e
    	  queueToneHaptic[t_queueWidx] = flags & PLAY_HAPTIC ? 1 : 0;
    66be:	05 fb       	bst	r16, 5
    66c0:	00 27       	eor	r16, r16
    66c2:	00 f9       	bld	r16, 0
    66c4:	00 ab       	std	Z+48, r16	; 0x30
    	  queueToneRepeat[t_queueWidx] = tRepeat - 1;
    66c6:	41 50       	subi	r20, 0x01	; 1
    66c8:	46 a3       	std	Z+38, r20	; 0x26
    	  queueToneFreqIncr[t_queueWidx] = tFreqIncr;
    66ca:	36 87       	std	Z+14, r19	; 0x0e
    	  t_queueWidx = next_queueWidx;
    66cc:	89 83       	std	Y+1, r24	; 0x01
			}
		}
  }
}
    66ce:	df 91       	pop	r29
    66d0:	cf 91       	pop	r28
    66d2:	1f 91       	pop	r17
    66d4:	0f 91       	pop	r16
    66d6:	ff 90       	pop	r15
    66d8:	ef 90       	pop	r14
    66da:	08 95       	ret

000066dc <_ZN10audioQueue5eventEhh>:
//      t_queueWidx = next_queueWidx;
//    }
//  }
//}

void audioQueue::event(uint8_t e, uint8_t f) {
    66dc:	0f 93       	push	r16
    66de:	1f 93       	push	r17
    66e0:	cf 93       	push	r28
    66e2:	df 93       	push	r29
    66e4:	ec 01       	movw	r28, r24
    66e6:	06 2f       	mov	r16, r22
    66e8:	64 2f       	mov	r22, r20

  uint8_t beepVal = g_eeGeneral.beeperVal;
    66ea:	80 91 25 06 	lds	r24, 0x0625
    66ee:	86 95       	lsr	r24
    66f0:	86 95       	lsr	r24
    66f2:	86 95       	lsr	r24
    66f4:	87 70       	andi	r24, 0x07	; 7
	if (t_queueRidx == t_queueWidx) {		
    66f6:	38 81       	ld	r19, Y
    66f8:	29 81       	ldd	r18, Y+1	; 0x01
    66fa:	32 13       	cpse	r19, r18
    66fc:	f0 c0       	rjmp	.+480    	; 0x68de <_ZN10audioQueue5eventEhh+0x202>
	  switch (e) {
    66fe:	10 e0       	ldi	r17, 0x00	; 0
    6700:	03 32       	cpi	r16, 0x23	; 35
    6702:	11 05       	cpc	r17, r1
    6704:	08 f0       	brcs	.+2      	; 0x6708 <_ZN10audioQueue5eventEhh+0x2c>
    6706:	eb c0       	rjmp	.+470    	; 0x68de <_ZN10audioQueue5eventEhh+0x202>
    6708:	f8 01       	movw	r30, r16
    670a:	e3 5a       	subi	r30, 0xA3	; 163
    670c:	ff 4f       	sbci	r31, 0xFF	; 255
    670e:	0c 94 3b 72 	jmp	0xe476	; 0xe476 <__tablejump2__>
		    case AU_WARNING1:
		      play(BEEP_DEFAULT_FREQ, 10, 1, PLAY_HAPTIC | PLAY_NOW ) ;
    6712:	00 e3       	ldi	r16, 0x30	; 48
    6714:	26 c0       	rjmp	.+76     	; 0x6762 <_ZN10audioQueue5eventEhh+0x86>
		      break;
		    case AU_WARNING2:
		      play(BEEP_DEFAULT_FREQ, 20, 1, PLAY_HAPTIC | PLAY_NOW);
    6716:	00 e3       	ldi	r16, 0x30	; 48
    6718:	21 e0       	ldi	r18, 0x01	; 1
    671a:	c0 c0       	rjmp	.+384    	; 0x689c <_ZN10audioQueue5eventEhh+0x1c0>
		      break;
	      case AU_CHEEP:
	        play(BEEP_DEFAULT_FREQ+30,10,2,2 | PLAY_HAPTIC | PLAY_INCREMENT(2) ) ;
    671c:	02 ea       	ldi	r16, 0xA2	; 162
    671e:	22 e0       	ldi	r18, 0x02	; 2
    6720:	4a e0       	ldi	r20, 0x0A	; 10
    6722:	64 e6       	ldi	r22, 0x64	; 100
    6724:	da c0       	rjmp	.+436    	; 0x68da <_ZN10audioQueue5eventEhh+0x1fe>
	        break;
	      case AU_RING:
	        play(BEEP_DEFAULT_FREQ+25,5,2,10 |PLAY_HAPTIC);
    6726:	0a e2       	ldi	r16, 0x2A	; 42
    6728:	22 e0       	ldi	r18, 0x02	; 2
    672a:	45 e0       	ldi	r20, 0x05	; 5
    672c:	6f e5       	ldi	r22, 0x5F	; 95
    672e:	ce 01       	movw	r24, r28
    6730:	71 df       	rcall	.-286    	; 0x6614 <_ZN10audioQueue4playEhhhh>
	        play(BEEP_DEFAULT_FREQ+25,5,10,1 | PLAY_HAPTIC);
    6732:	01 e2       	ldi	r16, 0x21	; 33
    6734:	2a e0       	ldi	r18, 0x0A	; 10
    6736:	45 e0       	ldi	r20, 0x05	; 5
    6738:	6f e5       	ldi	r22, 0x5F	; 95
    673a:	ce 01       	movw	r24, r28
    673c:	6b df       	rcall	.-298    	; 0x6614 <_ZN10audioQueue4playEhhhh>
	        play(BEEP_DEFAULT_FREQ+25,5,2,10 | PLAY_HAPTIC);
    673e:	0a e2       	ldi	r16, 0x2A	; 42
    6740:	22 e0       	ldi	r18, 0x02	; 2
    6742:	45 e0       	ldi	r20, 0x05	; 5
    6744:	6f e5       	ldi	r22, 0x5F	; 95
    6746:	c9 c0       	rjmp	.+402    	; 0x68da <_ZN10audioQueue5eventEhh+0x1fe>
	        break;
	      case AU_SCIFI:
	        play(80,10,3,2 | PLAY_INCREMENT(-1));
    6748:	02 ec       	ldi	r16, 0xC2	; 194
    674a:	23 e0       	ldi	r18, 0x03	; 3
    674c:	4a e0       	ldi	r20, 0x0A	; 10
    674e:	60 e5       	ldi	r22, 0x50	; 80
    6750:	ce 01       	movw	r24, r28
    6752:	60 df       	rcall	.-320    	; 0x6614 <_ZN10audioQueue4playEhhhh>
	        play(60,10,3,2 | PLAY_INCREMENT(1));
    6754:	02 e4       	ldi	r16, 0x42	; 66
    6756:	23 e0       	ldi	r18, 0x03	; 3
    6758:	4a e0       	ldi	r20, 0x0A	; 10
    675a:	6c e3       	ldi	r22, 0x3C	; 60
    675c:	ce 01       	movw	r24, r28
    675e:	5a df       	rcall	.-332    	; 0x6614 <_ZN10audioQueue4playEhhhh>
	        play(70,10,1, PLAY_HAPTIC );
    6760:	00 e2       	ldi	r16, 0x20	; 32
    6762:	21 e0       	ldi	r18, 0x01	; 1
    6764:	65 c0       	rjmp	.+202    	; 0x6830 <_ZN10audioQueue5eventEhh+0x154>
	        break;
	      case AU_ROBOT:
	        play(70,5,1,1 | PLAY_HAPTIC);
    6766:	01 e2       	ldi	r16, 0x21	; 33
    6768:	21 e0       	ldi	r18, 0x01	; 1
    676a:	45 e0       	ldi	r20, 0x05	; 5
    676c:	66 e4       	ldi	r22, 0x46	; 70
    676e:	ce 01       	movw	r24, r28
    6770:	51 df       	rcall	.-350    	; 0x6614 <_ZN10audioQueue4playEhhhh>
	        play(50,15,2,1 | PLAY_HAPTIC);
    6772:	22 e0       	ldi	r18, 0x02	; 2
    6774:	4f e0       	ldi	r20, 0x0F	; 15
    6776:	62 e3       	ldi	r22, 0x32	; 50
    6778:	ce 01       	movw	r24, r28
    677a:	4c df       	rcall	.-360    	; 0x6614 <_ZN10audioQueue4playEhhhh>
	        play(80,15,2,1 | PLAY_HAPTIC);
    677c:	22 e0       	ldi	r18, 0x02	; 2
    677e:	4f e0       	ldi	r20, 0x0F	; 15
    6780:	62 c0       	rjmp	.+196    	; 0x6846 <_ZN10audioQueue5eventEhh+0x16a>
	        break;
	      case AU_CHIRP:
	        play(BEEP_DEFAULT_FREQ+40,5,1,2 | PLAY_HAPTIC);
    6782:	02 e2       	ldi	r16, 0x22	; 34
    6784:	21 e0       	ldi	r18, 0x01	; 1
    6786:	45 e0       	ldi	r20, 0x05	; 5
    6788:	6e e6       	ldi	r22, 0x6E	; 110
    678a:	ce 01       	movw	r24, r28
    678c:	43 df       	rcall	.-378    	; 0x6614 <_ZN10audioQueue4playEhhhh>
	        play(BEEP_DEFAULT_FREQ+54,5,1,3 | PLAY_HAPTIC);
    678e:	03 e2       	ldi	r16, 0x23	; 35
    6790:	21 e0       	ldi	r18, 0x01	; 1
    6792:	45 e0       	ldi	r20, 0x05	; 5
    6794:	97 c0       	rjmp	.+302    	; 0x68c4 <_ZN10audioQueue5eventEhh+0x1e8>
	        break;
	      case AU_TADA:
	        play(50,5,5,0);
    6796:	00 e0       	ldi	r16, 0x00	; 0
    6798:	25 e0       	ldi	r18, 0x05	; 5
    679a:	45 e0       	ldi	r20, 0x05	; 5
    679c:	62 e3       	ldi	r22, 0x32	; 50
    679e:	ce 01       	movw	r24, r28
    67a0:	39 df       	rcall	.-398    	; 0x6614 <_ZN10audioQueue4playEhhhh>
	        play(90,5,5,0);
    67a2:	25 e0       	ldi	r18, 0x05	; 5
    67a4:	45 e0       	ldi	r20, 0x05	; 5
    67a6:	6a e5       	ldi	r22, 0x5A	; 90
    67a8:	ce 01       	movw	r24, r28
    67aa:	34 df       	rcall	.-408    	; 0x6614 <_ZN10audioQueue4playEhhhh>
	        play(110,3,4,2);
    67ac:	02 e0       	ldi	r16, 0x02	; 2
    67ae:	24 e0       	ldi	r18, 0x04	; 4
    67b0:	43 e0       	ldi	r20, 0x03	; 3
    67b2:	6e e6       	ldi	r22, 0x6E	; 110
    67b4:	92 c0       	rjmp	.+292    	; 0x68da <_ZN10audioQueue5eventEhh+0x1fe>
	        break;
	      case AU_CRICKET:
	        play(80,5,10,3 | PLAY_HAPTIC);
    67b6:	03 e2       	ldi	r16, 0x23	; 35
    67b8:	2a e0       	ldi	r18, 0x0A	; 10
    67ba:	45 e0       	ldi	r20, 0x05	; 5
    67bc:	60 e5       	ldi	r22, 0x50	; 80
    67be:	ce 01       	movw	r24, r28
    67c0:	29 df       	rcall	.-430    	; 0x6614 <_ZN10audioQueue4playEhhhh>
	        play(80,5,20,1 | PLAY_HAPTIC);
    67c2:	01 e2       	ldi	r16, 0x21	; 33
    67c4:	24 e1       	ldi	r18, 0x14	; 20
    67c6:	45 e0       	ldi	r20, 0x05	; 5
    67c8:	60 e5       	ldi	r22, 0x50	; 80
    67ca:	ce 01       	movw	r24, r28
    67cc:	23 df       	rcall	.-442    	; 0x6614 <_ZN10audioQueue4playEhhhh>
	        play(80,5,10,3 | PLAY_HAPTIC);
    67ce:	03 e2       	ldi	r16, 0x23	; 35
    67d0:	2a e0       	ldi	r18, 0x0A	; 10
    67d2:	45 e0       	ldi	r20, 0x05	; 5
    67d4:	38 c0       	rjmp	.+112    	; 0x6846 <_ZN10audioQueue5eventEhh+0x16a>
	        break;
	      case AU_SIREN:
	        play(10,20,5,2 | PLAY_HAPTIC | PLAY_INCREMENT(1));
    67d6:	02 e6       	ldi	r16, 0x62	; 98
    67d8:	25 e0       	ldi	r18, 0x05	; 5
    67da:	44 e1       	ldi	r20, 0x14	; 20
    67dc:	6a e0       	ldi	r22, 0x0A	; 10
    67de:	7d c0       	rjmp	.+250    	; 0x68da <_ZN10audioQueue5eventEhh+0x1fe>
	        break;
	      case AU_ALARMC:
	        play(50,4,10,2 | PLAY_HAPTIC);
    67e0:	02 e2       	ldi	r16, 0x22	; 34
    67e2:	2a e0       	ldi	r18, 0x0A	; 10
    67e4:	44 e0       	ldi	r20, 0x04	; 4
    67e6:	62 e3       	ldi	r22, 0x32	; 50
    67e8:	ce 01       	movw	r24, r28
    67ea:	14 df       	rcall	.-472    	; 0x6614 <_ZN10audioQueue4playEhhhh>
	        play(70,8,20,1 | PLAY_HAPTIC);
    67ec:	01 e2       	ldi	r16, 0x21	; 33
    67ee:	24 e1       	ldi	r18, 0x14	; 20
    67f0:	48 e0       	ldi	r20, 0x08	; 8
    67f2:	66 e4       	ldi	r22, 0x46	; 70
    67f4:	ce 01       	movw	r24, r28
    67f6:	0e df       	rcall	.-484    	; 0x6614 <_ZN10audioQueue4playEhhhh>
	        play(50,8,10,2 | PLAY_HAPTIC);
    67f8:	02 e2       	ldi	r16, 0x22	; 34
    67fa:	2a e0       	ldi	r18, 0x0A	; 10
    67fc:	48 e0       	ldi	r20, 0x08	; 8
    67fe:	62 e3       	ldi	r22, 0x32	; 50
    6800:	ce 01       	movw	r24, r28
    6802:	08 df       	rcall	.-496    	; 0x6614 <_ZN10audioQueue4playEhhhh>
	        play(70,4,20,1 | PLAY_HAPTIC);
    6804:	01 e2       	ldi	r16, 0x21	; 33
    6806:	24 e1       	ldi	r18, 0x14	; 20
    6808:	44 e0       	ldi	r20, 0x04	; 4
    680a:	4d c0       	rjmp	.+154    	; 0x68a6 <_ZN10audioQueue5eventEhh+0x1ca>
	        break;
	      case AU_RATATA:
	        play(BEEP_DEFAULT_FREQ+50,5,10,10 | PLAY_HAPTIC);
    680c:	0a e2       	ldi	r16, 0x2A	; 42
    680e:	2a e0       	ldi	r18, 0x0A	; 10
    6810:	02 c0       	rjmp	.+4      	; 0x6816 <_ZN10audioQueue5eventEhh+0x13a>
	        break;
	      case AU_TICK:
	        play(BEEP_DEFAULT_FREQ+50,5,50,2 | PLAY_HAPTIC);
    6812:	02 e2       	ldi	r16, 0x22	; 34
    6814:	22 e3       	ldi	r18, 0x32	; 50
    6816:	45 e0       	ldi	r20, 0x05	; 5
    6818:	4b c0       	rjmp	.+150    	; 0x68b0 <_ZN10audioQueue5eventEhh+0x1d4>
	        break;
	      case AU_HAPTIC1:
	        play(0,20,10,1 | PLAY_HAPTIC);
    681a:	01 e2       	ldi	r16, 0x21	; 33
    681c:	03 c0       	rjmp	.+6      	; 0x6824 <_ZN10audioQueue5eventEhh+0x148>
	        break;
	      case AU_HAPTIC2:
	        play(0,20,10,2 | PLAY_HAPTIC);
    681e:	02 e2       	ldi	r16, 0x22	; 34
    6820:	01 c0       	rjmp	.+2      	; 0x6824 <_ZN10audioQueue5eventEhh+0x148>
	        break;
	      case AU_HAPTIC3:
	        play(0,20,10,3 | PLAY_HAPTIC);
    6822:	03 e2       	ldi	r16, 0x23	; 35
    6824:	2a e0       	ldi	r18, 0x0A	; 10
    6826:	44 e1       	ldi	r20, 0x14	; 20
    6828:	60 e0       	ldi	r22, 0x00	; 0
    682a:	57 c0       	rjmp	.+174    	; 0x68da <_ZN10audioQueue5eventEhh+0x1fe>
	        break;
		    case AU_INACTIVITY:
		      play(70, 10, 2, 2 | PLAY_NOW ) ;
    682c:	02 e1       	ldi	r16, 0x12	; 18
    682e:	22 e0       	ldi	r18, 0x02	; 2
    6830:	4a e0       	ldi	r20, 0x0A	; 10
    6832:	39 c0       	rjmp	.+114    	; 0x68a6 <_ZN10audioQueue5eventEhh+0x1ca>
		      break;
		    case AU_TX_BATTERY_LOW:
		        play(60, 20, 3, 2 | PLAY_INCREMENT(1));
    6834:	02 e4       	ldi	r16, 0x42	; 66
    6836:	23 e0       	ldi	r18, 0x03	; 3
    6838:	44 e1       	ldi	r20, 0x14	; 20
    683a:	6c e3       	ldi	r22, 0x3C	; 60
    683c:	ce 01       	movw	r24, r28
    683e:	ea de       	rcall	.-556    	; 0x6614 <_ZN10audioQueue4playEhhhh>
		        play(80, 20, 3, 2 | PLAY_HAPTIC | PLAY_INCREMENT(-1));
    6840:	02 ee       	ldi	r16, 0xE2	; 226
    6842:	23 e0       	ldi	r18, 0x03	; 3
    6844:	44 e1       	ldi	r20, 0x14	; 20
    6846:	60 e5       	ldi	r22, 0x50	; 80
    6848:	48 c0       	rjmp	.+144    	; 0x68da <_ZN10audioQueue5eventEhh+0x1fe>
		      break;
		    case AU_ERROR:
		      play(BEEP_DEFAULT_FREQ, 40, 1, PLAY_HAPTIC | PLAY_NOW);
    684a:	00 e3       	ldi	r16, 0x30	; 48
    684c:	21 e0       	ldi	r18, 0x01	; 1
    684e:	48 e2       	ldi	r20, 0x28	; 40
    6850:	2a c0       	rjmp	.+84     	; 0x68a6 <_ZN10audioQueue5eventEhh+0x1ca>
		      break;
		    case AU_KEYPAD_UP:
		      if (beepVal != BEEP_NOKEYS) {
    6852:	81 30       	cpi	r24, 0x01	; 1
    6854:	09 f4       	brne	.+2      	; 0x6858 <_ZN10audioQueue5eventEhh+0x17c>
    6856:	43 c0       	rjmp	.+134    	; 0x68de <_ZN10audioQueue5eventEhh+0x202>
		        play(BEEP_KEY_UP_FREQ, 10, 1, PLAY_NOW );
    6858:	00 e1       	ldi	r16, 0x10	; 16
    685a:	21 e0       	ldi	r18, 0x01	; 1
    685c:	4a e0       	ldi	r20, 0x0A	; 10
    685e:	6b e4       	ldi	r22, 0x4B	; 75
    6860:	3c c0       	rjmp	.+120    	; 0x68da <_ZN10audioQueue5eventEhh+0x1fe>
		      }
		      break;
		    case AU_KEYPAD_DOWN:
		      if (beepVal != BEEP_NOKEYS) {
    6862:	81 30       	cpi	r24, 0x01	; 1
    6864:	e1 f1       	breq	.+120    	; 0x68de <_ZN10audioQueue5eventEhh+0x202>
		        play(BEEP_KEY_DOWN_FREQ, 10, 1, PLAY_NOW);
    6866:	00 e1       	ldi	r16, 0x10	; 16
    6868:	21 e0       	ldi	r18, 0x01	; 1
    686a:	4a e0       	ldi	r20, 0x0A	; 10
    686c:	61 e4       	ldi	r22, 0x41	; 65
    686e:	35 c0       	rjmp	.+106    	; 0x68da <_ZN10audioQueue5eventEhh+0x1fe>
		      }
		      break;
		    case AU_TRIM_MOVE:
		      play(f, 6, 1, PLAY_NOW);
    6870:	00 e1       	ldi	r16, 0x10	; 16
    6872:	21 e0       	ldi	r18, 0x01	; 1
    6874:	46 e0       	ldi	r20, 0x06	; 6
    6876:	31 c0       	rjmp	.+98     	; 0x68da <_ZN10audioQueue5eventEhh+0x1fe>
		      break;
		    case AU_TRIM_MIDDLE:
		      play(BEEP_DEFAULT_FREQ, 10, 2, PLAY_HAPTIC | PLAY_NOW);
    6878:	00 e3       	ldi	r16, 0x30	; 48
    687a:	d9 cf       	rjmp	.-78     	; 0x682e <_ZN10audioQueue5eventEhh+0x152>
		      break;
		    case AU_MENUS:
		      if (beepVal != BEEP_NOKEYS) {
    687c:	81 30       	cpi	r24, 0x01	; 1
    687e:	79 f1       	breq	.+94     	; 0x68de <_ZN10audioQueue5eventEhh+0x202>
		        play(BEEP_DEFAULT_FREQ, 10, 2, PLAY_NOW);
    6880:	00 e1       	ldi	r16, 0x10	; 16
    6882:	d5 cf       	rjmp	.-86     	; 0x682e <_ZN10audioQueue5eventEhh+0x152>
		      }
		      break;
		    case AU_POT_STICK_MIDDLE:
		      play(BEEP_DEFAULT_FREQ + 50, 10, 1, PLAY_NOW);
    6884:	00 e1       	ldi	r16, 0x10	; 16
    6886:	12 c0       	rjmp	.+36     	; 0x68ac <_ZN10audioQueue5eventEhh+0x1d0>
		      break;
		    case AU_TIMER_30:
		      play(BEEP_DEFAULT_FREQ + 50, 15, 3, 3 | PLAY_HAPTIC | PLAY_NOW);
    6888:	03 e3       	ldi	r16, 0x33	; 51
    688a:	03 c0       	rjmp	.+6      	; 0x6892 <_ZN10audioQueue5eventEhh+0x1b6>
		      break;
		    case AU_TIMER_20:
		      play(BEEP_DEFAULT_FREQ + 50, 15, 3, 2 | PLAY_HAPTIC | PLAY_NOW);
    688c:	02 e3       	ldi	r16, 0x32	; 50
    688e:	01 c0       	rjmp	.+2      	; 0x6892 <_ZN10audioQueue5eventEhh+0x1b6>
		      break;
		    case AU_TIMER_10:
		      play(BEEP_DEFAULT_FREQ + 50, 15, 3, 1 | PLAY_HAPTIC | PLAY_NOW);
    6890:	01 e3       	ldi	r16, 0x31	; 49
    6892:	23 e0       	ldi	r18, 0x03	; 3
    6894:	4f e0       	ldi	r20, 0x0F	; 15
    6896:	0c c0       	rjmp	.+24     	; 0x68b0 <_ZN10audioQueue5eventEhh+0x1d4>
		      break;
		    case AU_TIMER_LT3:
		      play(BEEP_DEFAULT_FREQ, 20, 25, 1 | PLAY_HAPTIC | PLAY_NOW);
    6898:	01 e3       	ldi	r16, 0x31	; 49
    689a:	29 e1       	ldi	r18, 0x19	; 25
    689c:	44 e1       	ldi	r20, 0x14	; 20
    689e:	03 c0       	rjmp	.+6      	; 0x68a6 <_ZN10audioQueue5eventEhh+0x1ca>
		      break;
		    case AU_WARNING3:
		      play(BEEP_DEFAULT_FREQ, 30, 1, PLAY_HAPTIC | PLAY_NOW);
    68a0:	00 e3       	ldi	r16, 0x30	; 48
    68a2:	21 e0       	ldi	r18, 0x01	; 1
    68a4:	4e e1       	ldi	r20, 0x1E	; 30
    68a6:	66 e4       	ldi	r22, 0x46	; 70
    68a8:	18 c0       	rjmp	.+48     	; 0x68da <_ZN10audioQueue5eventEhh+0x1fe>
		      break;
				case AU_MIX_WARNING_1:
		      play(BEEP_DEFAULT_FREQ + 50, 10, 1, 1 | PLAY_HAPTIC | PLAY_NOW);
    68aa:	01 e3       	ldi	r16, 0x31	; 49
    68ac:	21 e0       	ldi	r18, 0x01	; 1
    68ae:	4a e0       	ldi	r20, 0x0A	; 10
    68b0:	68 e7       	ldi	r22, 0x78	; 120
    68b2:	13 c0       	rjmp	.+38     	; 0x68da <_ZN10audioQueue5eventEhh+0x1fe>
		      break;
		    case AU_MIX_WARNING_2:
		      play(BEEP_DEFAULT_FREQ + 52, 10, 1, 2 | PLAY_HAPTIC | PLAY_NOW);
    68b4:	02 e3       	ldi	r16, 0x32	; 50
    68b6:	21 e0       	ldi	r18, 0x01	; 1
    68b8:	4a e0       	ldi	r20, 0x0A	; 10
    68ba:	6a e7       	ldi	r22, 0x7A	; 122
    68bc:	0e c0       	rjmp	.+28     	; 0x68da <_ZN10audioQueue5eventEhh+0x1fe>
		      break;
		    case AU_MIX_WARNING_3:
		      play(BEEP_DEFAULT_FREQ + 54, 10, 1, 3 | PLAY_HAPTIC | PLAY_NOW);
    68be:	03 e3       	ldi	r16, 0x33	; 51
    68c0:	21 e0       	ldi	r18, 0x01	; 1
    68c2:	4a e0       	ldi	r20, 0x0A	; 10
    68c4:	6c e7       	ldi	r22, 0x7C	; 124
    68c6:	09 c0       	rjmp	.+18     	; 0x68da <_ZN10audioQueue5eventEhh+0x1fe>
		      break;
		    
				case AU_VARIO_UP :
		      play(BEEP_DEFAULT_FREQ + 60, 10, 0, PLAY_INCREMENT(1) | PLAY_NOW ) ;
    68c8:	00 e5       	ldi	r16, 0x50	; 80
    68ca:	20 e0       	ldi	r18, 0x00	; 0
    68cc:	4a e0       	ldi	r20, 0x0A	; 10
    68ce:	62 e8       	ldi	r22, 0x82	; 130
    68d0:	04 c0       	rjmp	.+8      	; 0x68da <_ZN10audioQueue5eventEhh+0x1fe>
		    break ;
		    
				case AU_VARIO_DOWN :
		      play(BEEP_DEFAULT_FREQ - 20, 10, 0, PLAY_INCREMENT(-1) | PLAY_NOW ) ;
    68d2:	00 ed       	ldi	r16, 0xD0	; 208
    68d4:	20 e0       	ldi	r18, 0x00	; 0
    68d6:	4a e0       	ldi	r20, 0x0A	; 10
    68d8:	62 e3       	ldi	r22, 0x32	; 50
    68da:	ce 01       	movw	r24, r28
    68dc:	9b de       	rcall	.-714    	; 0x6614 <_ZN10audioQueue4playEhhhh>
		    
				default:
		      break;
	  }
	}  
}
    68de:	df 91       	pop	r29
    68e0:	cf 91       	pop	r28
    68e2:	1f 91       	pop	r17
    68e4:	0f 91       	pop	r16
    68e6:	08 95       	ret

000068e8 <_Z13audioDefeventh>:

void audioDefevent(uint8_t e)
{
  audio.event(e, BEEP_DEFAULT_FREQ);
    68e8:	46 e4       	ldi	r20, 0x46	; 70
    68ea:	68 2f       	mov	r22, r24
    68ec:	8f e9       	ldi	r24, 0x9F	; 159
    68ee:	91 e0       	ldi	r25, 0x01	; 1
    68f0:	f5 ce       	rjmp	.-534    	; 0x66dc <_ZN10audioQueue5eventEhh>

000068f2 <_Z10audioEventhj>:
}

void audioEvent( uint8_t e, uint16_t f )
{
    68f2:	46 2f       	mov	r20, r22
  audio.event( e, f ) ;
    68f4:	68 2f       	mov	r22, r24
    68f6:	8f e9       	ldi	r24, 0x9F	; 159
    68f8:	91 e0       	ldi	r25, 0x01	; 1
    68fa:	f0 ce       	rjmp	.-544    	; 0x66dc <_ZN10audioQueue5eventEhh>

000068fc <_Z18audioVoiceDefeventhh>:
}

void audioVoiceDefevent( uint8_t e, uint8_t v)
{
	if ( g_eeGeneral.speakerMode & 2 )
    68fc:	90 91 31 06 	lds	r25, 0x0631
    6900:	91 ff       	sbrs	r25, 1
    6902:	03 c0       	rjmp	.+6      	; 0x690a <_Z18audioVoiceDefeventhh+0xe>
	{
		putVoiceQueue( v ) ;
    6904:	86 2f       	mov	r24, r22
    6906:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <_Z13putVoiceQueueh>
	}
	else
	{
    audioDefevent( e ) ;
    690a:	ee cf       	rjmp	.-36     	; 0x68e8 <_Z13audioDefeventh>

0000690c <_Z13voice_numericihh>:

#include <stdlib.h>

// Announce a value using voice
void voice_numeric( int16_t value, uint8_t num_decimals, uint8_t units_index )
{
    690c:	cf 92       	push	r12
    690e:	df 92       	push	r13
    6910:	ef 92       	push	r14
    6912:	ff 92       	push	r15
    6914:	0f 93       	push	r16
    6916:	1f 93       	push	r17
    6918:	cf 93       	push	r28
    691a:	df 93       	push	r29
    691c:	ec 01       	movw	r28, r24
    691e:	06 2f       	mov	r16, r22
    6920:	14 2f       	mov	r17, r20
	uint8_t decimals ;
	div_t qr ;
	uint8_t flag = 0 ;

	if ( units_index > 127 )
    6922:	47 ff       	sbrs	r20, 7
    6924:	03 c0       	rjmp	.+6      	; 0x692c <_Z13voice_numericihh+0x20>
	{
		putVoiceQueue( units_index ) ;
    6926:	84 2f       	mov	r24, r20
    6928:	0e 94 dd 13 	call	0x27ba	; 0x27ba <_Z13putVoiceQueueh>
	}

	if ( value < 0 )
    692c:	d7 ff       	sbrs	r29, 7
    692e:	06 c0       	rjmp	.+12     	; 0x693c <_Z13voice_numericihh+0x30>
	{
		value = - value ;
    6930:	d1 95       	neg	r29
    6932:	c1 95       	neg	r28
    6934:	d1 09       	sbc	r29, r1
		putVoiceQueue( V_MINUS ) ;		
    6936:	8a e1       	ldi	r24, 0x1A	; 26
    6938:	0e 94 dd 13 	call	0x27ba	; 0x27ba <_Z13putVoiceQueueh>
	}

	if ( num_decimals )
    693c:	00 23       	and	r16, r16
    693e:	71 f0       	breq	.+28     	; 0x695c <_Z13voice_numericihh+0x50>
	{
		qr = div( value, num_decimals == 2 ? 100 : 10 ) ;
    6940:	02 30       	cpi	r16, 0x02	; 2
    6942:	19 f4       	brne	.+6      	; 0x694a <_Z13voice_numericihh+0x3e>
    6944:	64 e6       	ldi	r22, 0x64	; 100
    6946:	70 e0       	ldi	r23, 0x00	; 0
    6948:	02 c0       	rjmp	.+4      	; 0x694e <_Z13voice_numericihh+0x42>
    694a:	6a e0       	ldi	r22, 0x0A	; 10
    694c:	70 e0       	ldi	r23, 0x00	; 0
    694e:	ce 01       	movw	r24, r28
    6950:	0e 94 ea 71 	call	0xe3d4	; 0xe3d4 <__divmodhi4>
    6954:	26 2f       	mov	r18, r22
    6956:	c2 2f       	mov	r28, r18
    6958:	d7 2f       	mov	r29, r23
		decimals = qr.rem ;
    695a:	f8 2e       	mov	r15, r24
		value = qr.quot ;
	}

	qr = div( value, 100 ) ;
    695c:	64 e6       	ldi	r22, 0x64	; 100
    695e:	70 e0       	ldi	r23, 0x00	; 0
    6960:	ce 01       	movw	r24, r28
    6962:	0e 94 ea 71 	call	0xe3d4	; 0xe3d4 <__divmodhi4>
    6966:	9b 01       	movw	r18, r22
    6968:	fb 01       	movw	r30, r22
    696a:	ec 01       	movw	r28, r24
	if ( qr.quot )
    696c:	61 15       	cp	r22, r1
    696e:	71 05       	cpc	r23, r1
    6970:	a1 f1       	breq	.+104    	; 0x69da <_Z13voice_numericihh+0xce>
	{
		// At least 100
		num_decimals = 0 ;		// Cancel decimals
		if ( qr.quot > 9 )		// Thousands
    6972:	6a 30       	cpi	r22, 0x0A	; 10
    6974:	71 05       	cpc	r23, r1
    6976:	cc f0       	brlt	.+50     	; 0x69aa <_Z13voice_numericihh+0x9e>
		{
			flag = 1 ;
			div_t xr ;

			xr = div( qr.quot, 10 ) ;
    6978:	6a e0       	ldi	r22, 0x0A	; 10
    697a:	70 e0       	ldi	r23, 0x00	; 0
    697c:	c9 01       	movw	r24, r18
    697e:	0e 94 ea 71 	call	0xe3d4	; 0xe3d4 <__divmodhi4>
    6982:	6b 01       	movw	r12, r22
    6984:	7c 01       	movw	r14, r24
			if ( xr.quot < 21 )
    6986:	65 31       	cpi	r22, 0x15	; 21
    6988:	71 05       	cpc	r23, r1
    698a:	1c f4       	brge	.+6      	; 0x6992 <_Z13voice_numericihh+0x86>
			{
				putVoiceQueue( xr.quot + 110 ) ;
    698c:	8e e6       	ldi	r24, 0x6E	; 110
    698e:	8c 0d       	add	r24, r12
    6990:	05 c0       	rjmp	.+10     	; 0x699c <_Z13voice_numericihh+0x90>
			}
			else
			{
				putVoiceQueueUpper( xr.quot + 140 ) ;
    6992:	8c e8       	ldi	r24, 0x8C	; 140
    6994:	8c 0d       	add	r24, r12
    6996:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <_Z18putVoiceQueueUpperh>
				putVoiceQueue( V_THOUSAND ) ;
    699a:	8e e6       	ldi	r24, 0x6E	; 110
    699c:	0e 94 dd 13 	call	0x27ba	; 0x27ba <_Z13putVoiceQueueh>
			}
			qr.quot = xr.rem ;			
    69a0:	f7 01       	movw	r30, r14
		}
		if ( qr.quot )
    69a2:	30 97       	sbiw	r30, 0x00	; 0
    69a4:	69 f0       	breq	.+26     	; 0x69c0 <_Z13voice_numericihh+0xb4>
	{
		// At least 100
		num_decimals = 0 ;		// Cancel decimals
		if ( qr.quot > 9 )		// Thousands
		{
			flag = 1 ;
    69a6:	01 e0       	ldi	r16, 0x01	; 1
    69a8:	01 c0       	rjmp	.+2      	; 0x69ac <_Z13voice_numericihh+0xa0>
// Announce a value using voice
void voice_numeric( int16_t value, uint8_t num_decimals, uint8_t units_index )
{
	uint8_t decimals ;
	div_t qr ;
	uint8_t flag = 0 ;
    69aa:	00 e0       	ldi	r16, 0x00	; 0
			}
			qr.quot = xr.rem ;			
		}
		if ( qr.quot )
		{
			putVoiceQueue( qr.quot + 100 ) ;
    69ac:	84 e6       	ldi	r24, 0x64	; 100
    69ae:	8e 0f       	add	r24, r30
    69b0:	0e 94 dd 13 	call	0x27ba	; 0x27ba <_Z13putVoiceQueueh>
		}
		if ( flag == 0 )
    69b4:	01 11       	cpse	r16, r1
    69b6:	04 c0       	rjmp	.+8      	; 0x69c0 <_Z13voice_numericihh+0xb4>
		{
			if ( qr.rem )
    69b8:	20 97       	sbiw	r28, 0x00	; 0
    69ba:	51 f1       	breq	.+84     	; 0x6a10 <_Z13voice_numericihh+0x104>
			{
				putVoiceQueueUpper( qr.rem + 140 ) ;
    69bc:	8c 2f       	mov	r24, r28
    69be:	0b c0       	rjmp	.+22     	; 0x69d6 <_Z13voice_numericihh+0xca>
			}
		}
		else
		{
			if ( qr.rem )
    69c0:	20 97       	sbiw	r28, 0x00	; 0
    69c2:	31 f1       	breq	.+76     	; 0x6a10 <_Z13voice_numericihh+0x104>
			{
				qr.rem -= qr.rem % 10 ;
    69c4:	ce 01       	movw	r24, r28
    69c6:	6a e0       	ldi	r22, 0x0A	; 10
    69c8:	70 e0       	ldi	r23, 0x00	; 0
    69ca:	0e 94 ea 71 	call	0xe3d4	; 0xe3d4 <__divmodhi4>
    69ce:	9e 01       	movw	r18, r28
    69d0:	28 1b       	sub	r18, r24
    69d2:	39 0b       	sbc	r19, r25
    69d4:	c9 01       	movw	r24, r18
				putVoiceQueueUpper( qr.rem + 140 ) ;
    69d6:	84 57       	subi	r24, 0x74	; 116
    69d8:	14 c0       	rjmp	.+40     	; 0x6a02 <_Z13voice_numericihh+0xf6>
			}
		}
	}
	else
	{
		putVoiceQueueUpper( qr.rem + 140 ) ;
    69da:	84 57       	subi	r24, 0x74	; 116
    69dc:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <_Z18putVoiceQueueUpperh>
	}

	if ( num_decimals )
    69e0:	00 23       	and	r16, r16
    69e2:	b1 f0       	breq	.+44     	; 0x6a10 <_Z13voice_numericihh+0x104>
	{
		if ( num_decimals == 2 )
    69e4:	02 30       	cpi	r16, 0x02	; 2
    69e6:	81 f4       	brne	.+32     	; 0x6a08 <_Z13voice_numericihh+0xfc>
		{
			qr = div( decimals, 10 ) ;
    69e8:	6a e0       	ldi	r22, 0x0A	; 10
    69ea:	70 e0       	ldi	r23, 0x00	; 0
    69ec:	8f 2d       	mov	r24, r15
    69ee:	90 e0       	ldi	r25, 0x00	; 0
    69f0:	0e 94 ea 71 	call	0xe3d4	; 0xe3d4 <__divmodhi4>
    69f4:	c8 2f       	mov	r28, r24
			putVoiceQueue( qr.quot + 6 ) ;		// Point x
    69f6:	86 e0       	ldi	r24, 0x06	; 6
    69f8:	86 0f       	add	r24, r22
    69fa:	0e 94 dd 13 	call	0x27ba	; 0x27ba <_Z13putVoiceQueueh>
			putVoiceQueueUpper( qr.rem + 140 ) ;
    69fe:	8c e8       	ldi	r24, 0x8C	; 140
    6a00:	8c 0f       	add	r24, r28
    6a02:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <_Z18putVoiceQueueUpperh>
    6a06:	04 c0       	rjmp	.+8      	; 0x6a10 <_Z13voice_numericihh+0x104>
		}
		else
		{
			putVoiceQueue( decimals + 6 ) ;		// Point x
    6a08:	86 e0       	ldi	r24, 0x06	; 6
    6a0a:	8f 0d       	add	r24, r15
    6a0c:	0e 94 dd 13 	call	0x27ba	; 0x27ba <_Z13putVoiceQueueh>
		}
	}
		 
	if ( units_index && ( units_index < 128 ) )
    6a10:	11 16       	cp	r1, r17
    6a12:	1c f4       	brge	.+6      	; 0x6a1a <_Z13voice_numericihh+0x10e>
	{
		putVoiceQueue( units_index ) ;
    6a14:	81 2f       	mov	r24, r17
    6a16:	0e 94 dd 13 	call	0x27ba	; 0x27ba <_Z13putVoiceQueueh>
	}
	asm("") ;
}
    6a1a:	df 91       	pop	r29
    6a1c:	cf 91       	pop	r28
    6a1e:	1f 91       	pop	r17
    6a20:	0f 91       	pop	r16
    6a22:	ff 90       	pop	r15
    6a24:	ef 90       	pop	r14
    6a26:	df 90       	pop	r13
    6a28:	cf 90       	pop	r12
    6a2a:	08 95       	ret

00006a2c <_ZL12curveAddressh>:
		prev_yv = yv;
	}

}

NOINLINE static int8_t *curveAddress (uint8_t idx) {
    6a2c:	28 2f       	mov	r18, r24
    6a2e:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t cv9 = idx >= MAX_CURVE5;
	return cv9 ? g_model.curves9[idx - MAX_CURVE5] : g_model.curves5[idx];
    6a30:	88 30       	cpi	r24, 0x08	; 8
    6a32:	58 f0       	brcs	.+22     	; 0x6a4a <_ZL12curveAddressh+0x1e>
    6a34:	28 50       	subi	r18, 0x08	; 8
    6a36:	31 09       	sbc	r19, r1
    6a38:	49 e0       	ldi	r20, 0x09	; 9
    6a3a:	42 9f       	mul	r20, r18
    6a3c:	c0 01       	movw	r24, r0
    6a3e:	43 9f       	mul	r20, r19
    6a40:	90 0d       	add	r25, r0
    6a42:	11 24       	eor	r1, r1
    6a44:	81 5d       	subi	r24, 0xD1	; 209
    6a46:	9b 4f       	sbci	r25, 0xFB	; 251
    6a48:	08 95       	ret
    6a4a:	45 e0       	ldi	r20, 0x05	; 5
    6a4c:	42 9f       	mul	r20, r18
    6a4e:	c0 01       	movw	r24, r0
    6a50:	43 9f       	mul	r20, r19
    6a52:	90 0d       	add	r25, r0
    6a54:	11 24       	eor	r1, r1
    6a56:	89 5f       	subi	r24, 0xF9	; 249
    6a58:	9b 4f       	sbci	r25, 0xFB	; 251
}
    6a5a:	08 95       	ret

00006a5c <_Z15menuMixersLimith>:
	STORE_MODELVARS;
//    eeWaitComplete() ;
}

void menuMixersLimit (uint8_t event) {
	switch (event) {
    6a5c:	81 36       	cpi	r24, 0x61	; 97
    6a5e:	49 f4       	brne	.+18     	; 0x6a72 <_Z15menuMixersLimith+0x16>
		case EVT_KEY_FIRST(KEY_EXIT):
			killEvents (event);
    6a60:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
			popMenu (true);
    6a64:	81 e0       	ldi	r24, 0x01	; 1
    6a66:	0e 94 95 18 	call	0x312a	; 0x312a <_Z7popMenub>
			pushMenu (menuProcMix);
    6a6a:	80 e1       	ldi	r24, 0x10	; 16
    6a6c:	91 e6       	ldi	r25, 0x61	; 97
    6a6e:	0e 94 ab 18 	call	0x3156	; 0x3156 <_Z8pushMenuPFvhE>
			break;
	}
	lcd_puts_Pleft (2 * FH, PSTR(STR_MAX_MIXERS_EXAB));
    6a72:	6b eb       	ldi	r22, 0xBB	; 187
    6a74:	79 e1       	ldi	r23, 0x19	; 25
    6a76:	80 e1       	ldi	r24, 0x10	; 16
    6a78:	0c 94 1f 27 	jmp	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>

00006a7c <_Z13menuRangeBindh>:
			pushMenu (menuProcModelSelect);
			break;
	}
}

void menuRangeBind (uint8_t event) {
    6a7c:	cf 93       	push	r28
    6a7e:	c8 2f       	mov	r28, r24
	static uint8_t timer;
	uint8_t flag = pxxFlag & PXX_BIND;
    6a80:	80 91 0b 0b 	lds	r24, 0x0B0B
	lcd_puts_Pleft (3 * FH, (flag) ? PSTR("\006BINDING") : PSTR("RANGE CHECK RSSI:"));
    6a84:	80 ff       	sbrs	r24, 0
    6a86:	03 c0       	rjmp	.+6      	; 0x6a8e <_Z13menuRangeBindh+0x12>
    6a88:	66 e4       	ldi	r22, 0x46	; 70
    6a8a:	79 e1       	ldi	r23, 0x19	; 25
    6a8c:	02 c0       	rjmp	.+4      	; 0x6a92 <_Z13menuRangeBindh+0x16>
    6a8e:	64 e3       	ldi	r22, 0x34	; 52
    6a90:	79 e1       	ldi	r23, 0x19	; 25
    6a92:	88 e1       	ldi	r24, 0x18	; 24
    6a94:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
	if (event == EVT_KEY_FIRST(KEY_EXIT)) {
    6a98:	c1 36       	cpi	r28, 0x61	; 97
    6a9a:	29 f4       	brne	.+10     	; 0x6aa6 <_Z13menuRangeBindh+0x2a>
		pxxFlag = 0;
    6a9c:	10 92 0b 0b 	sts	0x0B0B, r1
		popMenu (false);
    6aa0:	80 e0       	ldi	r24, 0x00	; 0
    6aa2:	0e 94 95 18 	call	0x312a	; 0x312a <_Z7popMenub>
#ifdef FRSKY
	if (flag == 0) {
		lcd_outdezAtt(12 * FW, 6 * FH, FrskyHubData[FR_RXRSI_COPY], DBLSIZE);
	}
#endif
	if (--timer == 0) {
    6aa6:	80 91 46 0e 	lds	r24, 0x0E46
    6aaa:	81 50       	subi	r24, 0x01	; 1
    6aac:	80 93 46 0e 	sts	0x0E46, r24
    6ab0:	81 11       	cpse	r24, r1
    6ab2:	02 c0       	rjmp	.+4      	; 0x6ab8 <_Z13menuRangeBindh+0x3c>
		audioDefevent (AU_WARNING2);
    6ab4:	81 e0       	ldi	r24, 0x01	; 1
    6ab6:	18 df       	rcall	.-464    	; 0x68e8 <_Z13audioDefeventh>
	}
	asm("");
}
    6ab8:	cf 91       	pop	r28
    6aba:	08 95       	ret

00006abc <_ZL12indexProcesshP7MState2h>:
const prog_char APM Str_DiagAna[] = "DiagAna";

#define MERGE_INDEX_PROCESS

#ifdef MERGE_INDEX_PROCESS
static uint8_t indexProcess (uint8_t event, MState2 *pmstate, uint8_t extra) {
    6abc:	cf 93       	push	r28
    6abe:	df 93       	push	r29
    6ac0:	eb 01       	movw	r28, r22
//		MenuTimer = 2000 ;	// * 0.01 Seconds = 20 seconds
		pmstate->m_posVert = SubmenuIndex - 1;
		SubmenuIndex = 0;
//		SubMenuFromIndex = 0 ;
	}
	if (event == EVT_ENTRY_UP) {
    6ac2:	92 e4       	ldi	r25, 0x42	; 66
    6ac4:	98 0f       	add	r25, r24
    6ac6:	92 30       	cpi	r25, 0x02	; 2
    6ac8:	30 f4       	brcc	.+12     	; 0x6ad6 <_ZL12indexProcesshP7MState2h+0x1a>

#ifdef MERGE_INDEX_PROCESS
static uint8_t indexProcess (uint8_t event, MState2 *pmstate, uint8_t extra) {
	if (event == EVT_ENTRY) {
//		MenuTimer = 2000 ;	// * 0.01 Seconds = 20 seconds
		pmstate->m_posVert = SubmenuIndex - 1;
    6aca:	90 91 5c 0e 	lds	r25, 0x0E5C
    6ace:	91 50       	subi	r25, 0x01	; 1
    6ad0:	98 83       	st	Y, r25
		SubmenuIndex = 0;
    6ad2:	10 92 5c 0e 	sts	0x0E5C, r1
		pmstate->m_posVert = SubmenuIndex - 1;
		SubmenuIndex = 0;
//		SubMenuFromIndex = 0 ;
	}

	if (UseLastSubmenuIndex) {
    6ad6:	90 91 59 0e 	lds	r25, 0x0E59
    6ada:	99 23       	and	r25, r25
    6adc:	39 f0       	breq	.+14     	; 0x6aec <_ZL12indexProcesshP7MState2h+0x30>
		SubmenuIndex = LastSubmenuIndex & 0x7F;
    6ade:	90 91 5a 0e 	lds	r25, 0x0E5A
    6ae2:	9f 77       	andi	r25, 0x7F	; 127
    6ae4:	90 93 5c 0e 	sts	0x0E5C, r25
		UseLastSubmenuIndex = 0;
    6ae8:	10 92 59 0e 	sts	0x0E59, r1
//		SubMenuFromIndex = 0 ;
	}

	if (SubmenuIndex) {
    6aec:	90 91 5c 0e 	lds	r25, 0x0E5C
    6af0:	99 23       	and	r25, r25
    6af2:	01 f1       	breq	.+64     	; 0x6b34 <_ZL12indexProcesshP7MState2h+0x78>
		if (event == EVT_KEY_LONG(KEY_EXIT)) {
    6af4:	81 38       	cpi	r24, 0x81	; 129
    6af6:	41 f4       	brne	.+16     	; 0x6b08 <_ZL12indexProcesshP7MState2h+0x4c>
			s_editMode = false;
    6af8:	10 92 a5 0d 	sts	0x0DA5, r1
			pmstate->m_posVert = SubmenuIndex;
    6afc:	98 83       	st	Y, r25
			SubmenuIndex = 0;
    6afe:	10 92 5c 0e 	sts	0x0E5C, r1
			killEvents (event);
    6b02:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
    6b06:	37 c0       	rjmp	.+110    	; 0x6b76 <_ZL12indexProcesshP7MState2h+0xba>
			event = 0;
		}
		if (event == EVT_KEY_FIRST(KEY_EXIT)) {
    6b08:	81 36       	cpi	r24, 0x61	; 97
    6b0a:	a9 f1       	breq	.+106    	; 0x6b76 <_ZL12indexProcesshP7MState2h+0xba>
			event = 0;
		}
		if ( (event == EVT_KEY_BREAK(KEY_EXIT)) || (event == EVT_KEY_LONG(BTN_RE))) {
    6b0c:	81 32       	cpi	r24, 0x21	; 33
    6b0e:	11 f0       	breq	.+4      	; 0x6b14 <_ZL12indexProcesshP7MState2h+0x58>
    6b10:	8e 38       	cpi	r24, 0x8E	; 142
    6b12:	91 f5       	brne	.+100    	; 0x6b78 <_ZL12indexProcesshP7MState2h+0xbc>
			if (s_editMode) {
    6b14:	20 91 a5 0d 	lds	r18, 0x0DA5
    6b18:	22 23       	and	r18, r18
    6b1a:	19 f0       	breq	.+6      	; 0x6b22 <_ZL12indexProcesshP7MState2h+0x66>
				s_editMode = false;
    6b1c:	10 92 a5 0d 	sts	0x0DA5, r1
    6b20:	2a c0       	rjmp	.+84     	; 0x6b76 <_ZL12indexProcesshP7MState2h+0xba>
			} else {
				pmstate->m_posVert = SubmenuIndex - 1;
    6b22:	91 50       	subi	r25, 0x01	; 1
    6b24:	98 83       	st	Y, r25
				SubmenuIndex = 0;
    6b26:	10 92 5c 0e 	sts	0x0E5C, r1
				killEvents (event);
    6b2a:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
				audioDefevent (AU_MENUS);
    6b2e:	87 e1       	ldi	r24, 0x17	; 23
    6b30:	db de       	rcall	.-586    	; 0x68e8 <_Z13audioDefeventh>
    6b32:	21 c0       	rjmp	.+66     	; 0x6b76 <_ZL12indexProcesshP7MState2h+0xba>
			}
			event = 0;
		}
	} else {
		uint8_t pv = pmstate->m_posVert;
    6b34:	98 81       	ld	r25, Y
		if (event == EVT_KEY_FIRST(KEY_RIGHT)) {
    6b36:	84 36       	cpi	r24, 0x64	; 100
    6b38:	21 f4       	brne	.+8      	; 0x6b42 <_ZL12indexProcesshP7MState2h+0x86>
			if (pv < extra) {
    6b3a:	94 17       	cp	r25, r20
    6b3c:	d0 f4       	brcc	.+52     	; 0x6b72 <_ZL12indexProcesshP7MState2h+0xb6>
				pv += 7;
    6b3e:	99 5f       	subi	r25, 0xF9	; 249
    6b40:	18 c0       	rjmp	.+48     	; 0x6b72 <_ZL12indexProcesshP7MState2h+0xb6>
			}
		}
		if (event == EVT_KEY_FIRST(KEY_LEFT)) {
    6b42:	85 36       	cpi	r24, 0x65	; 101
    6b44:	21 f4       	brne	.+8      	; 0x6b4e <_ZL12indexProcesshP7MState2h+0x92>
			if (pv >= 7) {
    6b46:	97 30       	cpi	r25, 0x07	; 7
    6b48:	a0 f0       	brcs	.+40     	; 0x6b72 <_ZL12indexProcesshP7MState2h+0xb6>
				pv -= 7;
    6b4a:	97 50       	subi	r25, 0x07	; 7
    6b4c:	12 c0       	rjmp	.+36     	; 0x6b72 <_ZL12indexProcesshP7MState2h+0xb6>
			}
		}

		if ( (event == EVT_KEY_FIRST(KEY_MENU)) || (event == EVT_KEY_BREAK(BTN_RE))) {
    6b4e:	80 36       	cpi	r24, 0x60	; 96
    6b50:	11 f0       	breq	.+4      	; 0x6b56 <_ZL12indexProcesshP7MState2h+0x9a>
    6b52:	8e 32       	cpi	r24, 0x2E	; 46
    6b54:	71 f4       	brne	.+28     	; 0x6b72 <_ZL12indexProcesshP7MState2h+0xb6>
			SubmenuIndex = pv + 1;
    6b56:	9f 5f       	subi	r25, 0xFF	; 255
    6b58:	90 93 5c 0e 	sts	0x0E5C, r25
			LastSubmenuIndex = SubmenuIndex | 0x80;
    6b5c:	90 68       	ori	r25, 0x80	; 128
    6b5e:	90 93 5a 0e 	sts	0x0E5A, r25
			pv = 0;
			killEvents (event);
    6b62:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
			g_posHorz = Tevent = event = 0;
    6b66:	10 92 e1 01 	sts	0x01E1, r1
    6b6a:	10 92 7e 0d 	sts	0x0D7E, r1
		}

		if ( (event == EVT_KEY_FIRST(KEY_MENU)) || (event == EVT_KEY_BREAK(BTN_RE))) {
			SubmenuIndex = pv + 1;
			LastSubmenuIndex = SubmenuIndex | 0x80;
			pv = 0;
    6b6e:	90 e0       	ldi	r25, 0x00	; 0
			killEvents (event);
			g_posHorz = Tevent = event = 0;
    6b70:	80 e0       	ldi	r24, 0x00	; 0
		}
		pmstate->m_posVert = pv;
    6b72:	98 83       	st	Y, r25
    6b74:	01 c0       	rjmp	.+2      	; 0x6b78 <_ZL12indexProcesshP7MState2h+0xbc>
			SubmenuIndex = 0;
			killEvents (event);
			event = 0;
		}
		if (event == EVT_KEY_FIRST(KEY_EXIT)) {
			event = 0;
    6b76:	80 e0       	ldi	r24, 0x00	; 0
			g_posHorz = Tevent = event = 0;
		}
		pmstate->m_posVert = pv;
	}
	return event;
}
    6b78:	df 91       	pop	r29
    6b7a:	cf 91       	pop	r28
    6b7c:	08 95       	ret

00006b7e <_ZL13editSlowDelayhhh>:
	CHECK_INCDEC_MODELSWITCH(drswitch, min, max);
	asm("");
	return drswitch;
}

static uint8_t editSlowDelay (uint8_t y, uint8_t attr, uint8_t value) {
    6b7e:	1f 93       	push	r17
    6b80:	cf 93       	push	r28
    6b82:	df 93       	push	r29
    6b84:	18 2f       	mov	r17, r24
    6b86:	d6 2f       	mov	r29, r22
    6b88:	c4 2f       	mov	r28, r20
	if (attr)
    6b8a:	66 23       	and	r22, r22
    6b8c:	29 f0       	breq	.+10     	; 0x6b98 <_ZL13editSlowDelayhhh+0x1a>
	CHECK_INCDEC_H_MODELVAR_0(value, 15); //!! bitfield
    6b8e:	6f e0       	ldi	r22, 0x0F	; 15
    6b90:	84 2f       	mov	r24, r20
    6b92:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    6b96:	c8 2f       	mov	r28, r24
	uint8_t lval = value;
	if (g_model.mixTime) {
    6b98:	80 91 32 02 	lds	r24, 0x0232
		lval *= 2;
    6b9c:	4c 2f       	mov	r20, r28

static uint8_t editSlowDelay (uint8_t y, uint8_t attr, uint8_t value) {
	if (attr)
	CHECK_INCDEC_H_MODELVAR_0(value, 15); //!! bitfield
	uint8_t lval = value;
	if (g_model.mixTime) {
    6b9e:	83 ff       	sbrs	r24, 3
    6ba0:	02 c0       	rjmp	.+4      	; 0x6ba6 <_ZL13editSlowDelayhhh+0x28>
		lval *= 2;
    6ba2:	44 0f       	add	r20, r20
		attr |= PREC1;
    6ba4:	d0 62       	ori	r29, 0x20	; 32
	}

	lcd_outdezAtt (FW * 16, y, lval, attr);
    6ba6:	50 e0       	ldi	r21, 0x00	; 0
    6ba8:	2d 2f       	mov	r18, r29
    6baa:	61 2f       	mov	r22, r17
    6bac:	80 e6       	ldi	r24, 0x60	; 96
    6bae:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
	return value;
}
    6bb2:	8c 2f       	mov	r24, r28
    6bb4:	df 91       	pop	r29
    6bb6:	cf 91       	pop	r28
    6bb8:	1f 91       	pop	r17
    6bba:	08 95       	ret

00006bbc <_ZL9insertMixhh>:
	memset (&g_model.mixData[MAX_MIXERS - 1], 0, sizeof(MixData));
	STORE_MODELVARS;
	eeWaitComplete ();
}

static void insertMix (uint8_t idx, uint8_t copy) {
    6bbc:	ff 92       	push	r15
    6bbe:	0f 93       	push	r16
    6bc0:	1f 93       	push	r17
    6bc2:	cf 93       	push	r28
    6bc4:	df 93       	push	r29
    6bc6:	18 2f       	mov	r17, r24
    6bc8:	f6 2e       	mov	r15, r22
	MixData *md = &g_model.mixData[0];
	md += idx;
    6bca:	0a e0       	ldi	r16, 0x0A	; 10
    6bcc:	8a e0       	ldi	r24, 0x0A	; 10
    6bce:	18 9f       	mul	r17, r24
    6bd0:	e0 01       	movw	r28, r0
    6bd2:	11 24       	eor	r1, r1
    6bd4:	c5 5c       	subi	r28, 0xC5	; 197
    6bd6:	dd 4f       	sbci	r29, 0xFD	; 253

	memmove (md + 1, md, (MAX_MIXERS - (idx + 1)) * sizeof(MixData));
    6bd8:	2f e1       	ldi	r18, 0x1F	; 31
    6bda:	30 e0       	ldi	r19, 0x00	; 0
    6bdc:	21 1b       	sub	r18, r17
    6bde:	31 09       	sbc	r19, r1
    6be0:	02 9f       	mul	r16, r18
    6be2:	a0 01       	movw	r20, r0
    6be4:	03 9f       	mul	r16, r19
    6be6:	50 0d       	add	r21, r0
    6be8:	11 24       	eor	r1, r1
    6bea:	be 01       	movw	r22, r28
    6bec:	ce 01       	movw	r24, r28
    6bee:	0a 96       	adiw	r24, 0x0a	; 10
    6bf0:	0e 94 95 72 	call	0xe52a	; 0xe52a <memmove>
	if (copy) {
    6bf4:	ff 20       	and	r15, r15
    6bf6:	49 f0       	breq	.+18     	; 0x6c0a <_ZL9insertMixhh+0x4e>
		memmove (md, md - 1, sizeof(MixData));
    6bf8:	be 01       	movw	r22, r28
    6bfa:	6a 50       	subi	r22, 0x0A	; 10
    6bfc:	71 09       	sbc	r23, r1
    6bfe:	4a e0       	ldi	r20, 0x0A	; 10
    6c00:	50 e0       	ldi	r21, 0x00	; 0
    6c02:	ce 01       	movw	r24, r28
    6c04:	0e 94 95 72 	call	0xe52a	; 0xe52a <memmove>
    6c08:	0d c0       	rjmp	.+26     	; 0x6c24 <_ZL9insertMixhh+0x68>
	} else {
		memset (md, 0, sizeof(MixData));
    6c0a:	fe 01       	movw	r30, r28
    6c0c:	11 92       	st	Z+, r1
    6c0e:	0a 95       	dec	r16
    6c10:	e9 f7       	brne	.-6      	; 0x6c0c <_ZL9insertMixhh+0x50>
		md->destCh = s_currDestCh; //-s_mixTab[sub];
    6c12:	80 91 51 0e 	lds	r24, 0x0E51
    6c16:	88 83       	st	Y, r24
		md->srcRaw = s_currDestCh; //1;   //
    6c18:	89 83       	std	Y+1, r24	; 0x01
		md->weight = 100;
    6c1a:	84 e6       	ldi	r24, 0x64	; 100
    6c1c:	8a 83       	std	Y+2, r24	; 0x02
		md->lateOffset = 1;
    6c1e:	8f 81       	ldd	r24, Y+7	; 0x07
    6c20:	88 60       	ori	r24, 0x08	; 8
    6c22:	8f 83       	std	Y+7, r24	; 0x07
	}
	s_currMixIdx = idx;
    6c24:	10 93 53 0e 	sts	0x0E53, r17
}
    6c28:	df 91       	pop	r29
    6c2a:	cf 91       	pop	r28
    6c2c:	1f 91       	pop	r17
    6c2e:	0f 91       	pop	r16
    6c30:	ff 90       	pop	r15
    6c32:	08 95       	ret

00006c34 <_ZL12displayIndexPKPKchhh.constprop.5>:
	}
	return event;
}
#endif // MERGE_INDEX_PROCESS

static void displayIndex (const prog_char * const strings[], uint8_t extra, uint8_t lines,
    6c34:	ef 92       	push	r14
    6c36:	ff 92       	push	r15
    6c38:	0f 93       	push	r16
    6c3a:	1f 93       	push	r17
    6c3c:	cf 93       	push	r28
    6c3e:	df 93       	push	r29
    6c40:	e6 2e       	mov	r14, r22
    6c42:	14 2f       	mov	r17, r20
    6c44:	ec 01       	movw	r28, r24
    6c46:	88 e0       	ldi	r24, 0x08	; 8
    6c48:	f8 2e       	mov	r15, r24
		uint8_t highlight) {
	for (uint8_t i = 0; i < lines; i += 1) {
    6c4a:	00 e0       	ldi	r16, 0x00	; 0
		lcd_puts_Pleft ( (i + 1) * FH, (const prog_char *) pgm_read_adr(&strings[i]));
    6c4c:	fe 01       	movw	r30, r28
    6c4e:	65 91       	lpm	r22, Z+
    6c50:	74 91       	lpm	r23, Z
    6c52:	8f 2d       	mov	r24, r15
    6c54:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
		if (i < extra) {
    6c58:	0e 15       	cp	r16, r14
    6c5a:	40 f4       	brcc	.+16     	; 0x6c6c <_ZL12displayIndexPKPKchhh.constprop.5+0x38>
    6c5c:	fe 01       	movw	r30, r28
    6c5e:	3e 96       	adiw	r30, 0x0e	; 14
			lcd_puts_P (69, (i + 1) * FH, (const prog_char *) pgm_read_adr(&strings[i + 7]));
    6c60:	45 91       	lpm	r20, Z+
    6c62:	54 91       	lpm	r21, Z
    6c64:	6f 2d       	mov	r22, r15
    6c66:	85 e4       	ldi	r24, 0x45	; 69
    6c68:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <_Z10lcd_puts_PhhPKc>
}
#endif // MERGE_INDEX_PROCESS

static void displayIndex (const prog_char * const strings[], uint8_t extra, uint8_t lines,
		uint8_t highlight) {
	for (uint8_t i = 0; i < lines; i += 1) {
    6c6c:	0f 5f       	subi	r16, 0xFF	; 255
    6c6e:	22 96       	adiw	r28, 0x02	; 2
    6c70:	88 e0       	ldi	r24, 0x08	; 8
    6c72:	f8 0e       	add	r15, r24
    6c74:	07 30       	cpi	r16, 0x07	; 7
    6c76:	51 f7       	brne	.-44     	; 0x6c4c <_ZL12displayIndexPKPKchhh.constprop.5+0x18>
		if (i < extra) {
			lcd_puts_P (69, (i + 1) * FH, (const prog_char *) pgm_read_adr(&strings[i + 7]));
		}
	}

	lcd_vline (67, 8, 55);
    6c78:	47 e3       	ldi	r20, 0x37	; 55
    6c7a:	68 e0       	ldi	r22, 0x08	; 8
    6c7c:	83 e4       	ldi	r24, 0x43	; 67
    6c7e:	0e 94 d5 27 	call	0x4faa	; 0x4faa <_Z9lcd_vlinehha>

	if (highlight) {
    6c82:	11 23       	and	r17, r17
    6c84:	b1 f0       	breq	.+44     	; 0x6cb2 <_ZL12displayIndexPKPKchhh.constprop.5+0x7e>
		if (highlight > 7) {
			lcd_char_inverse (69, (highlight - 7) * FH, 59, 0);
    6c86:	61 2f       	mov	r22, r17
    6c88:	66 0f       	add	r22, r22
    6c8a:	66 0f       	add	r22, r22
    6c8c:	66 0f       	add	r22, r22
	}

	lcd_vline (67, 8, 55);

	if (highlight) {
		if (highlight > 7) {
    6c8e:	18 30       	cpi	r17, 0x08	; 8
    6c90:	28 f0       	brcs	.+10     	; 0x6c9c <_ZL12displayIndexPKPKchhh.constprop.5+0x68>
			lcd_char_inverse (69, (highlight - 7) * FH, 59, 0);
    6c92:	68 53       	subi	r22, 0x38	; 56
    6c94:	20 e0       	ldi	r18, 0x00	; 0
    6c96:	4b e3       	ldi	r20, 0x3B	; 59
    6c98:	85 e4       	ldi	r24, 0x45	; 69
    6c9a:	03 c0       	rjmp	.+6      	; 0x6ca2 <_ZL12displayIndexPKPKchhh.constprop.5+0x6e>
		} else {
			lcd_char_inverse (0, highlight * FH, 66, 0);
    6c9c:	20 e0       	ldi	r18, 0x00	; 0
    6c9e:	42 e4       	ldi	r20, 0x42	; 66
    6ca0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    6ca2:	df 91       	pop	r29
    6ca4:	cf 91       	pop	r28
    6ca6:	1f 91       	pop	r17
    6ca8:	0f 91       	pop	r16
    6caa:	ff 90       	pop	r15
    6cac:	ef 90       	pop	r14

	if (highlight) {
		if (highlight > 7) {
			lcd_char_inverse (69, (highlight - 7) * FH, 59, 0);
		} else {
			lcd_char_inverse (0, highlight * FH, 66, 0);
    6cae:	0c 94 5b 27 	jmp	0x4eb6	; 0x4eb6 <_Z16lcd_char_inversehhhh>
		}
	}
}
    6cb2:	df 91       	pop	r29
    6cb4:	cf 91       	pop	r28
    6cb6:	1f 91       	pop	r17
    6cb8:	0f 91       	pop	r16
    6cba:	ff 90       	pop	r15
    6cbc:	ef 90       	pop	r14
    6cbe:	08 95       	ret

00006cc0 <_Z20putsAttIdxTelemItemshhhh>:

#define EDIT_DR_SWITCH_EDIT		0x01
#define EDIT_DR_SWITCH_MOMENT	0x02
int8_t edit_dr_switch (uint8_t x, uint8_t y, int8_t drswitch, uint8_t attr, uint8_t edit);

void putsAttIdxTelemItems (uint8_t x, uint8_t y, uint8_t index, uint8_t attr) {
    6cc0:	0f 93       	push	r16
	if (index == 4) {
    6cc2:	44 30       	cpi	r20, 0x04	; 4
    6cc4:	51 f4       	brne	.+20     	; 0x6cda <_Z20putsAttIdxTelemItemshhhh+0x1a>
		if (g_model.protocol == PROTO_PXX) {
    6cc6:	90 91 30 02 	lds	r25, 0x0230
    6cca:	9f 70       	andi	r25, 0x0F	; 15
    6ccc:	91 30       	cpi	r25, 0x01	; 1
    6cce:	29 f4       	brne	.+10     	; 0x6cda <_Z20putsAttIdxTelemItemshhhh+0x1a>
			lcd_putsAtt (x, y, PSTR("SWR "), attr);
    6cd0:	4a e8       	ldi	r20, 0x8A	; 138
    6cd2:	5b e1       	ldi	r21, 0x1B	; 27
			return;
		}
	}
	lcd_putsAttIdx (x, y, Str_telemItems, index, attr);
}
    6cd4:	0f 91       	pop	r16
int8_t edit_dr_switch (uint8_t x, uint8_t y, int8_t drswitch, uint8_t attr, uint8_t edit);

void putsAttIdxTelemItems (uint8_t x, uint8_t y, uint8_t index, uint8_t attr) {
	if (index == 4) {
		if (g_model.protocol == PROTO_PXX) {
			lcd_putsAtt (x, y, PSTR("SWR "), attr);
    6cd6:	0c 94 fa 26 	jmp	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>
			return;
		}
	}
	lcd_putsAttIdx (x, y, Str_telemItems, index, attr);
    6cda:	02 2f       	mov	r16, r18
    6cdc:	24 2f       	mov	r18, r20
    6cde:	48 ee       	ldi	r20, 0xE8	; 232
    6ce0:	5e e1       	ldi	r21, 0x1E	; 30
    6ce2:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
}
    6ce6:	0f 91       	pop	r16
    6ce8:	08 95       	ret

00006cea <_Z7m_to_fti>:

NOINLINE int16_t m_to_ft (int16_t metres) {
	int16_t result;

	// m to ft *105/32
	result = metres * 3;
    6cea:	9c 01       	movw	r18, r24
    6cec:	22 0f       	add	r18, r18
    6cee:	33 1f       	adc	r19, r19
    6cf0:	28 0f       	add	r18, r24
    6cf2:	39 1f       	adc	r19, r25
	metres >>= 2;
    6cf4:	95 95       	asr	r25
    6cf6:	87 95       	ror	r24
    6cf8:	95 95       	asr	r25
    6cfa:	87 95       	ror	r24
	result += metres;
    6cfc:	28 0f       	add	r18, r24
    6cfe:	39 1f       	adc	r19, r25
	metres >>= 2;
    6d00:	95 95       	asr	r25
    6d02:	87 95       	ror	r24
    6d04:	95 95       	asr	r25
    6d06:	87 95       	ror	r24
	return result + (metres >> 1);
    6d08:	95 95       	asr	r25
    6d0a:	87 95       	ror	r24
}
    6d0c:	82 0f       	add	r24, r18
    6d0e:	93 1f       	adc	r25, r19
    6d10:	08 95       	ret

00006d12 <_Z6c_to_fi>:

NOINLINE int16_t c_to_f (int16_t degrees) {
	degrees += 18;
    6d12:	42 96       	adiw	r24, 0x12	; 18
	degrees *= 115;
    6d14:	43 e7       	ldi	r20, 0x73	; 115
    6d16:	48 9f       	mul	r20, r24
    6d18:	90 01       	movw	r18, r0
    6d1a:	49 9f       	mul	r20, r25
    6d1c:	30 0d       	add	r19, r0
    6d1e:	11 24       	eor	r1, r1
	degrees >>= 6;
	return degrees;
}
    6d20:	c9 01       	movw	r24, r18
    6d22:	e6 e0       	ldi	r30, 0x06	; 6
    6d24:	95 95       	asr	r25
    6d26:	87 95       	ror	r24
    6d28:	ea 95       	dec	r30
    6d2a:	e1 f7       	brne	.-8      	; 0x6d24 <_Z6c_to_fi+0x12>
    6d2c:	08 95       	ret

00006d2e <_Z11calc_scalerhPhS_>:

#ifdef SCALERS
int16_t calc_scaler (uint8_t index, uint8_t *unit, uint8_t *num_decimals) {
    6d2e:	cf 92       	push	r12
    6d30:	df 92       	push	r13
    6d32:	ef 92       	push	r14
    6d34:	ff 92       	push	r15
    6d36:	0f 93       	push	r16
    6d38:	1f 93       	push	r17
    6d3a:	cf 93       	push	r28
    6d3c:	df 93       	push	r29
    6d3e:	7b 01       	movw	r14, r22
    6d40:	8a 01       	movw	r16, r20
	int32_t value;
	uint8_t lnest;
	ScaleData *pscaler;

	lnest = CalcScaleNest;
    6d42:	d0 90 da 0d 	lds	r13, 0x0DDA
	if (lnest > 5) {
    6d46:	95 e0       	ldi	r25, 0x05	; 5
    6d48:	9d 15       	cp	r25, r13
    6d4a:	08 f4       	brcc	.+2      	; 0x6d4e <_Z11calc_scalerhPhS_+0x20>
    6d4c:	5f c0       	rjmp	.+190    	; 0x6e0c <_Z11calc_scalerhPhS_+0xde>
		return 0;
	}
	CalcScaleNest = lnest + 1;
    6d4e:	91 e0       	ldi	r25, 0x01	; 1
    6d50:	9d 0d       	add	r25, r13
    6d52:	90 93 da 0d 	sts	0x0DDA, r25
	// process
	pscaler = &g_model.Scalers[index];
    6d56:	eb e0       	ldi	r30, 0x0B	; 11
    6d58:	8e 9f       	mul	r24, r30
    6d5a:	e0 01       	movw	r28, r0
    6d5c:	11 24       	eor	r1, r1
    6d5e:	cc 59       	subi	r28, 0x9C	; 156
    6d60:	da 4f       	sbci	r29, 0xFA	; 250
	if (pscaler->source) {
    6d62:	88 81       	ld	r24, Y
    6d64:	88 23       	and	r24, r24
    6d66:	49 f0       	breq	.+18     	; 0x6d7a <_Z11calc_scalerhPhS_+0x4c>
		value = getValue (pscaler->source - 1);
    6d68:	81 50       	subi	r24, 0x01	; 1
    6d6a:	0e 94 65 11 	call	0x22ca	; 0x22ca <_Z8getValueh>
    6d6e:	9c 01       	movw	r18, r24
    6d70:	44 27       	eor	r20, r20
    6d72:	37 fd       	sbrc	r19, 7
    6d74:	40 95       	com	r20
    6d76:	54 2f       	mov	r21, r20
    6d78:	03 c0       	rjmp	.+6      	; 0x6d80 <_Z11calc_scalerhPhS_+0x52>
		if ((pscaler->source == NUM_XCHNRAW + 1) || (pscaler->source == NUM_XCHNRAW + 2)) {
			value = scale_telem_value(value, pscaler->source - NUM_XCHNRAW - 1, NULL);
		}
#endif
	} else {
		value = 0;
    6d7a:	20 e0       	ldi	r18, 0x00	; 0
    6d7c:	30 e0       	ldi	r19, 0x00	; 0
    6d7e:	a9 01       	movw	r20, r18
	}
	CalcScaleNest = lnest;
    6d80:	d0 92 da 0d 	sts	0x0DDA, r13
	if (!pscaler->offsetLast) {
    6d84:	de 80       	ldd	r13, Y+6	; 0x06
    6d86:	fd 2d       	mov	r31, r13
    6d88:	f8 70       	andi	r31, 0x08	; 8
    6d8a:	cf 2e       	mov	r12, r31
    6d8c:	d3 fc       	sbrc	r13, 3
    6d8e:	0a c0       	rjmp	.+20     	; 0x6da4 <_Z11calc_scalerhPhS_+0x76>
		value += pscaler->offset;
    6d90:	89 81       	ldd	r24, Y+1	; 0x01
    6d92:	9a 81       	ldd	r25, Y+2	; 0x02
    6d94:	aa 27       	eor	r26, r26
    6d96:	97 fd       	sbrc	r25, 7
    6d98:	a0 95       	com	r26
    6d9a:	ba 2f       	mov	r27, r26
    6d9c:	28 0f       	add	r18, r24
    6d9e:	39 1f       	adc	r19, r25
    6da0:	4a 1f       	adc	r20, r26
    6da2:	5b 1f       	adc	r21, r27
	}
	value *= pscaler->mult + 1;
    6da4:	ab 81       	ldd	r26, Y+3	; 0x03
    6da6:	b0 e0       	ldi	r27, 0x00	; 0
    6da8:	11 96       	adiw	r26, 0x01	; 1
    6daa:	0e 94 66 72 	call	0xe4cc	; 0xe4cc <__mulshisi3>
	value /= pscaler->div + 1;
    6dae:	2c 81       	ldd	r18, Y+4	; 0x04
    6db0:	30 e0       	ldi	r19, 0x00	; 0
    6db2:	2f 5f       	subi	r18, 0xFF	; 255
    6db4:	3f 4f       	sbci	r19, 0xFF	; 255
    6db6:	44 27       	eor	r20, r20
    6db8:	37 fd       	sbrc	r19, 7
    6dba:	40 95       	com	r20
    6dbc:	54 2f       	mov	r21, r20
    6dbe:	0e 94 1f 72 	call	0xe43e	; 0xe43e <__divmodsi4>
	if (pscaler->offsetLast) {
    6dc2:	cc 20       	and	r12, r12
    6dc4:	51 f0       	breq	.+20     	; 0x6dda <_Z11calc_scalerhPhS_+0xac>
		value += pscaler->offset;
    6dc6:	89 81       	ldd	r24, Y+1	; 0x01
    6dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    6dca:	aa 27       	eor	r26, r26
    6dcc:	97 fd       	sbrc	r25, 7
    6dce:	a0 95       	com	r26
    6dd0:	ba 2f       	mov	r27, r26
    6dd2:	28 0f       	add	r18, r24
    6dd4:	39 1f       	adc	r19, r25
    6dd6:	4a 1f       	adc	r20, r26
    6dd8:	5b 1f       	adc	r21, r27
	}
	if (pscaler->neg) {
    6dda:	d0 fe       	sbrs	r13, 0
    6ddc:	07 c0       	rjmp	.+14     	; 0x6dec <_Z11calc_scalerhPhS_+0xbe>
		value = -value;
    6dde:	50 95       	com	r21
    6de0:	40 95       	com	r20
    6de2:	30 95       	com	r19
    6de4:	21 95       	neg	r18
    6de6:	3f 4f       	sbci	r19, 0xFF	; 255
    6de8:	4f 4f       	sbci	r20, 0xFF	; 255
    6dea:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	if (unit) {
    6dec:	e1 14       	cp	r14, r1
    6dee:	f1 04       	cpc	r15, r1
    6df0:	19 f0       	breq	.+6      	; 0x6df8 <_Z11calc_scalerhPhS_+0xca>
		*unit = pscaler->unit;
    6df2:	8d 81       	ldd	r24, Y+5	; 0x05
    6df4:	f7 01       	movw	r30, r14
    6df6:	80 83       	st	Z, r24
	}
	if (num_decimals) {
    6df8:	01 15       	cp	r16, r1
    6dfa:	11 05       	cpc	r17, r1
    6dfc:	29 f0       	breq	.+10     	; 0x6e08 <_Z11calc_scalerhPhS_+0xda>
		*num_decimals = pscaler->precision;
    6dfe:	8e 81       	ldd	r24, Y+6	; 0x06
    6e00:	86 95       	lsr	r24
    6e02:	83 70       	andi	r24, 0x03	; 3
    6e04:	f8 01       	movw	r30, r16
    6e06:	80 83       	st	Z, r24
	}

	return value;
    6e08:	c9 01       	movw	r24, r18
    6e0a:	02 c0       	rjmp	.+4      	; 0x6e10 <_Z11calc_scalerhPhS_+0xe2>
	uint8_t lnest;
	ScaleData *pscaler;

	lnest = CalcScaleNest;
	if (lnest > 5) {
		return 0;
    6e0c:	80 e0       	ldi	r24, 0x00	; 0
    6e0e:	90 e0       	ldi	r25, 0x00	; 0
	if (num_decimals) {
		*num_decimals = pscaler->precision;
	}

	return value;
}
    6e10:	df 91       	pop	r29
    6e12:	cf 91       	pop	r28
    6e14:	1f 91       	pop	r17
    6e16:	0f 91       	pop	r16
    6e18:	ff 90       	pop	r15
    6e1a:	ef 90       	pop	r14
    6e1c:	df 90       	pop	r13
    6e1e:	cf 90       	pop	r12
    6e20:	08 95       	ret

00006e22 <_Z14telemItemValidh>:
	}
	return 0;
#else
	return 1;
#endif
}
    6e22:	81 e0       	ldi	r24, 0x01	; 1
    6e24:	08 95       	ret

00006e26 <_Z20convertTelemConstantha>:
// This routine converts an 8 bit value for custom switch use
int16_t convertTelemConstant (uint8_t channelin, int8_t value) {
	int16_t result;
	int8_t channel;

	channel = pgm_read_byte(&TelemIndex[channelin]);
    6e26:	e8 2f       	mov	r30, r24
    6e28:	f0 e0       	ldi	r31, 0x00	; 0
    6e2a:	e2 52       	subi	r30, 0x22	; 34
    6e2c:	f1 4e       	sbci	r31, 0xE1	; 225
    6e2e:	e4 91       	lpm	r30, Z
	result = value + 125;
    6e30:	86 2f       	mov	r24, r22
    6e32:	99 27       	eor	r25, r25
    6e34:	87 fd       	sbrc	r24, 7
    6e36:	90 95       	com	r25
    6e38:	83 58       	subi	r24, 0x83	; 131
    6e3a:	9f 4f       	sbci	r25, 0xFF	; 255
	switch (channel) {
    6e3c:	ee 5f       	subi	r30, 0xFE	; 254
    6e3e:	e2 30       	cpi	r30, 0x02	; 2
    6e40:	38 f4       	brcc	.+14     	; 0x6e50 <_Z20convertTelemConstantha+0x2a>
		// case FR_FUEL :
		// case FR_CURRENT :

		case TIMER1:
		case TIMER2:
			result *= 10;
    6e42:	2a e0       	ldi	r18, 0x0A	; 10
    6e44:	ac 01       	movw	r20, r24
    6e46:	24 9f       	mul	r18, r20
    6e48:	c0 01       	movw	r24, r0
    6e4a:	25 9f       	mul	r18, r21
    6e4c:	90 0d       	add	r25, r0
    6e4e:	11 24       	eor	r1, r1
			result = value * 10;
			break;
#endif
	}
	return result;
}
    6e50:	08 95       	ret

00006e52 <_Z19get_telemetry_valueh>:

int16_t get_telemetry_value (uint8_t channelIn) {
	int8_t channel = pgm_read_byte(&TelemIndex[channelIn]);
    6e52:	e8 2f       	mov	r30, r24
    6e54:	f0 e0       	ldi	r31, 0x00	; 0
    6e56:	e2 52       	subi	r30, 0x22	; 34
    6e58:	f1 4e       	sbci	r31, 0xE1	; 225
    6e5a:	e4 91       	lpm	r30, Z

	if (channel == TMOK) {
    6e5c:	e0 3f       	cpi	r30, 0xF0	; 240
    6e5e:	f1 f0       	breq	.+60     	; 0x6e9c <_Z19get_telemetry_valueh+0x4a>
	{
		return calc_scaler(channel - V_SC1, 0, 0);
	}
#endif
#endif
	if (channel < -3)	// A GVAR
    6e60:	ed 3f       	cpi	r30, 0xFD	; 253
    6e62:	4c f4       	brge	.+18     	; 0x6e76 <_Z19get_telemetry_valueh+0x24>
			{
		return g_model.gvars[channel - V_GVAR1].gvar;
    6e64:	ee 0f       	add	r30, r30
    6e66:	ff 0b       	sbc	r31, r31
    6e68:	e4 51       	subi	r30, 0x14	; 20
    6e6a:	fb 4f       	sbci	r31, 0xFB	; 251
    6e6c:	80 81       	ld	r24, Z
    6e6e:	99 27       	eor	r25, r25
    6e70:	87 fd       	sbrc	r24, 7
    6e72:	90 95       	com	r25
    6e74:	08 95       	ret
	}
	switch (channel) {
    6e76:	ed 3f       	cpi	r30, 0xFD	; 253
    6e78:	69 f0       	breq	.+26     	; 0x6e94 <_Z19get_telemetry_valueh+0x42>
    6e7a:	84 f0       	brlt	.+32     	; 0x6e9c <_Z19get_telemetry_valueh+0x4a>
    6e7c:	ef 3f       	cpi	r30, 0xFF	; 255
    6e7e:	09 f0       	breq	.+2      	; 0x6e82 <_Z19get_telemetry_valueh+0x30>
    6e80:	6c f4       	brge	.+26     	; 0x6e9c <_Z19get_telemetry_valueh+0x4a>
		case TIMER1:
		case TIMER2:
//#ifdef TWO_TIMERS
			return s_timer[channel + 2].s_timerVal;
    6e82:	80 e1       	ldi	r24, 0x10	; 16
    6e84:	e8 02       	muls	r30, r24
    6e86:	f0 01       	movw	r30, r0
    6e88:	11 24       	eor	r1, r1
    6e8a:	e4 50       	subi	r30, 0x04	; 4
    6e8c:	f2 4f       	sbci	r31, 0xF2	; 242
    6e8e:	84 85       	ldd	r24, Z+12	; 0x0c
    6e90:	95 85       	ldd	r25, Z+13	; 0x0d
    6e92:	08 95       	ret
//#else
//    return TimerG.s_timerVal[channel+2] ;
//#endif

		case BATTERY:
			return g_vbat100mV;
    6e94:	80 91 6c 01 	lds	r24, 0x016C
    6e98:	90 e0       	ldi	r25, 0x00	; 0
    6e9a:	08 95       	ret

			default:
			return getTelemetryValue(channel);
#else
		default:
			return 0;
    6e9c:	80 e0       	ldi	r24, 0x00	; 0
    6e9e:	90 e0       	ldi	r25, 0x00	; 0
#endif
	}
}
    6ea0:	08 95       	ret

00006ea2 <_Z16voice_telem_itemh>:
#endif
}

extern uint8_t Unit;

void voice_telem_item (uint8_t indexIn) {
    6ea2:	cf 92       	push	r12
    6ea4:	df 92       	push	r13
    6ea6:	ef 92       	push	r14
    6ea8:	ff 92       	push	r15
    6eaa:	cf 93       	push	r28
    6eac:	df 93       	push	r29
    6eae:	00 d0       	rcall	.+0      	; 0x6eb0 <_Z16voice_telem_itemh+0xe>
    6eb0:	cd b7       	in	r28, 0x3d	; 61
    6eb2:	de b7       	in	r29, 0x3e	; 62
    6eb4:	f8 2e       	mov	r15, r24
	int16_t value;
	uint8_t spoken = 0;
	uint8_t unit = 0;
    6eb6:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t num_decimals = 0;
    6eb8:	19 82       	std	Y+1, r1	; 0x01
#ifdef FRSKY
//	uint8_t att = 0 ;
#endif

	value = get_telemetry_value (indexIn);
    6eba:	cb df       	rcall	.-106    	; 0x6e52 <_Z19get_telemetry_valueh>
	if (telemItemValid (indexIn) == 0) {
		putVoiceQueue ( V_NOTELEM);
		spoken = 1;
	}
	int8_t index = pgm_read_byte(&TelemIndex[indexIn]);
    6ebc:	ef 2d       	mov	r30, r15
    6ebe:	f0 e0       	ldi	r31, 0x00	; 0
    6ec0:	e2 52       	subi	r30, 0x22	; 34
    6ec2:	f1 4e       	sbci	r31, 0xE1	; 225
    6ec4:	24 91       	lpm	r18, Z

	switch (index) {
    6ec6:	42 2f       	mov	r20, r18
    6ec8:	55 27       	eor	r21, r21
    6eca:	47 fd       	sbrc	r20, 7
    6ecc:	50 95       	com	r21
    6ece:	65 2f       	mov	r22, r21
    6ed0:	75 2f       	mov	r23, r21
    6ed2:	41 5f       	subi	r20, 0xF1	; 241
    6ed4:	5f 4f       	sbci	r21, 0xFF	; 255
    6ed6:	4f 30       	cpi	r20, 0x0F	; 15
    6ed8:	51 05       	cpc	r21, r1
    6eda:	88 f5       	brcc	.+98     	; 0x6f3e <_Z16voice_telem_itemh+0x9c>
    6edc:	40 58       	subi	r20, 0x80	; 128
    6ede:	5f 4f       	sbci	r21, 0xFF	; 255
    6ee0:	fa 01       	movw	r30, r20
    6ee2:	0c 94 3b 72 	jmp	0xe476	; 0xe476 <__tablejump2__>
#ifdef SCALERS
		case V_SC1:
		case V_SC2:
		case V_SC3:
		case V_SC4:
			value = calc_scaler (index - V_SC1, &unit, &num_decimals);
    6ee6:	ae 01       	movw	r20, r28
    6ee8:	4f 5f       	subi	r20, 0xFF	; 255
    6eea:	5f 4f       	sbci	r21, 0xFF	; 255
    6eec:	be 01       	movw	r22, r28
    6eee:	6e 5f       	subi	r22, 0xFE	; 254
    6ef0:	7f 4f       	sbci	r23, 0xFF	; 255
    6ef2:	8f e0       	ldi	r24, 0x0F	; 15
    6ef4:	82 0f       	add	r24, r18
    6ef6:	1b df       	rcall	.-458    	; 0x6d2e <_Z11calc_scalerhPhS_>
			unit = pgm_read_byte(&UnitsVoice[unit]);
    6ef8:	ea 81       	ldd	r30, Y+2	; 0x02
    6efa:	f0 e0       	ldi	r31, 0x00	; 0
    6efc:	e5 50       	subi	r30, 0x05	; 5
    6efe:	f3 4e       	sbci	r31, 0xE3	; 227
    6f00:	e4 91       	lpm	r30, Z
    6f02:	ea 83       	std	Y+2, r30	; 0x02
			break;
    6f04:	1c c0       	rjmp	.+56     	; 0x6f3e <_Z16voice_telem_itemh+0x9c>
		case BATTERY:
#ifdef FRSKY
			case FR_VOLTS:
			case FR_CELLS_TOT:
#endif
			unit = V_VOLTS;
    6f06:	24 e2       	ldi	r18, 0x24	; 36
    6f08:	2a 83       	std	Y+2, r18	; 0x02
			num_decimals = 1;
    6f0a:	21 e0       	ldi	r18, 0x01	; 1
    6f0c:	29 83       	std	Y+1, r18	; 0x01
			break;
    6f0e:	17 c0       	rjmp	.+46     	; 0x6f3e <_Z16voice_telem_itemh+0x9c>
#endif

		case TIMER1:
		case TIMER2: {
			div_t qr;
			qr = div (value, 60);
    6f10:	6c e3       	ldi	r22, 0x3C	; 60
    6f12:	70 e0       	ldi	r23, 0x00	; 0
    6f14:	0e 94 ea 71 	call	0xe3d4	; 0xe3d4 <__divmodhi4>
    6f18:	6b 01       	movw	r12, r22
    6f1a:	7c 01       	movw	r14, r24
			voice_numeric (qr.quot, 0, V_MINUTES);
    6f1c:	46 e2       	ldi	r20, 0x26	; 38
    6f1e:	60 e0       	ldi	r22, 0x00	; 0
    6f20:	c6 01       	movw	r24, r12
    6f22:	f4 dc       	rcall	.-1560   	; 0x690c <_Z13voice_numericihh>
			value = qr.rem;
    6f24:	c7 01       	movw	r24, r14
			unit = V_SECONDS;
    6f26:	25 e3       	ldi	r18, 0x35	; 53
    6f28:	2a 83       	std	Y+2, r18	; 0x02
		}
			break;
    6f2a:	09 c0       	rjmp	.+18     	; 0x6f3e <_Z16voice_telem_itemh+0x9c>
		case V_GVAR3:
		case V_GVAR4:
		case V_GVAR5:
		case V_GVAR6:
		case V_GVAR7:
			value = g_model.gvars[index - V_GVAR1].gvar;
    6f2c:	e2 2f       	mov	r30, r18
    6f2e:	ee 0f       	add	r30, r30
    6f30:	ff 0b       	sbc	r31, r31
    6f32:	e4 51       	subi	r30, 0x14	; 20
    6f34:	fb 4f       	sbci	r31, 0xFB	; 251
    6f36:	80 81       	ld	r24, Z
    6f38:	99 27       	eor	r25, r25
    6f3a:	87 fd       	sbrc	r24, 7
    6f3c:	90 95       	com	r25
#endif

	}

	if (spoken == 0) {
		voice_numeric (value, num_decimals, unit);
    6f3e:	4a 81       	ldd	r20, Y+2	; 0x02
    6f40:	69 81       	ldd	r22, Y+1	; 0x01
    6f42:	e4 dc       	rcall	.-1592   	; 0x690c <_Z13voice_numericihh>
	}
}
    6f44:	0f 90       	pop	r0
    6f46:	0f 90       	pop	r0
    6f48:	df 91       	pop	r29
    6f4a:	cf 91       	pop	r28
    6f4c:	ff 90       	pop	r15
    6f4e:	ef 90       	pop	r14
    6f50:	df 90       	pop	r13
    6f52:	cf 90       	pop	r12
    6f54:	08 95       	ret

00006f56 <_Z12displayTimerhhhh>:
			return 0;
#endif
	}
}

void displayTimer (uint8_t x, uint8_t y, uint8_t timer, uint8_t att) {
    6f56:	0f 93       	push	r16
	struct t_timer *tptr = &s_timer[timer];
    6f58:	90 e1       	ldi	r25, 0x10	; 16
    6f5a:	49 9f       	mul	r20, r25
    6f5c:	f0 01       	movw	r30, r0
    6f5e:	11 24       	eor	r1, r1
    6f60:	e4 52       	subi	r30, 0x24	; 36
    6f62:	f2 4f       	sbci	r31, 0xF2	; 242
	FORCE_INDIRECT(tptr);
	att |= (tptr->s_timerState == TMR_BEEPING ? BLINK : 0);
    6f64:	96 81       	ldd	r25, Z+6	; 0x06
    6f66:	92 30       	cpi	r25, 0x02	; 2
    6f68:	09 f0       	breq	.+2      	; 0x6f6c <_Z12displayTimerhhhh+0x16>
    6f6a:	90 e0       	ldi	r25, 0x00	; 0
    6f6c:	29 2b       	or	r18, r25
	putsTime (x, y, tptr->s_timerVal, att, att);
    6f6e:	44 85       	ldd	r20, Z+12	; 0x0c
    6f70:	55 85       	ldd	r21, Z+13	; 0x0d
    6f72:	02 2f       	mov	r16, r18
    6f74:	0e 94 57 29 	call	0x52ae	; 0x52ae <_Z8putsTimehhihh>
}
    6f78:	0f 91       	pop	r16
    6f7a:	08 95       	ret

00006f7c <_Z20putsTelemetryChannelhhaihh>:
#define TELEM_UNIT_LEFT		0x04
#define TELEM_VALUE_RIGHT	0x08
#define TELEM_CONSTANT		0x80

uint8_t putsTelemetryChannel (uint8_t x, uint8_t y, int8_t channel, int16_t val, uint8_t att,
		uint8_t style) {
    6f7c:	8f 92       	push	r8
    6f7e:	9f 92       	push	r9
    6f80:	af 92       	push	r10
    6f82:	bf 92       	push	r11
    6f84:	cf 92       	push	r12
    6f86:	df 92       	push	r13
    6f88:	ef 92       	push	r14
    6f8a:	ff 92       	push	r15
    6f8c:	0f 93       	push	r16
    6f8e:	1f 93       	push	r17
    6f90:	cf 93       	push	r28
    6f92:	df 93       	push	r29
    6f94:	00 d0       	rcall	.+0      	; 0x6f96 <_Z20putsTelemetryChannelhhaihh+0x1a>
    6f96:	cd b7       	in	r28, 0x3d	; 61
    6f98:	de b7       	in	r29, 0x3e	; 62
    6f9a:	f8 2e       	mov	r15, r24
    6f9c:	d6 2e       	mov	r13, r22
    6f9e:	c2 2e       	mov	r12, r18
    6fa0:	b3 2e       	mov	r11, r19
    6fa2:	10 2f       	mov	r17, r16
	uint8_t unit = ' ';
    6fa4:	80 e2       	ldi	r24, 0x20	; 32
    6fa6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t xbase = x;
	uint8_t fieldW = FW;
	uint8_t displayed = 0;
	int8_t chanIndex;

	chanIndex = pgm_read_byte(&TelemIndex[channel]);
    6fa8:	e4 2f       	mov	r30, r20
    6faa:	ff 27       	eor	r31, r31
    6fac:	e7 fd       	sbrc	r30, 7
    6fae:	f0 95       	com	r31
    6fb0:	e2 52       	subi	r30, 0x22	; 34
    6fb2:	f1 4e       	sbci	r31, 0xE1	; 225
    6fb4:	94 90       	lpm	r9, Z
	if (style & TELEM_LABEL) {
    6fb6:	8e 2d       	mov	r24, r14
    6fb8:	81 70       	andi	r24, 0x01	; 1
    6fba:	88 2e       	mov	r8, r24
    6fbc:	e0 fe       	sbrs	r14, 0
    6fbe:	22 c0       	rjmp	.+68     	; 0x7004 <_Z20putsTelemetryChannelhhaihh+0x88>
#ifdef SCALERS
		uint8_t displayed = 0;
		int8_t index = chanIndex;
		if ( (index >= V_SC1) && (index < V_SC1 + NUM_SCALERS)) {
    6fc0:	af e0       	ldi	r26, 0x0F	; 15
    6fc2:	a9 0d       	add	r26, r9
    6fc4:	a4 30       	cpi	r26, 0x04	; 4
    6fc6:	08 f0       	brcs	.+2      	; 0x6fca <_Z20putsTelemetryChannelhhaihh+0x4e>
    6fc8:	8e c0       	rjmp	.+284    	; 0x70e6 <_Z20putsTelemetryChannelhhaihh+0x16a>
			index -= V_SC1;
			uint8_t *p = &g_model.Scalers[index].name[0];
			if (*p) {
    6fca:	8b e0       	ldi	r24, 0x0B	; 11
    6fcc:	a8 9f       	mul	r26, r24
    6fce:	d0 01       	movw	r26, r0
    6fd0:	11 24       	eor	r1, r1
    6fd2:	fd 01       	movw	r30, r26
    6fd4:	e5 59       	subi	r30, 0x95	; 149
    6fd6:	fa 4f       	sbci	r31, 0xFA	; 250
    6fd8:	80 81       	ld	r24, Z
    6fda:	88 23       	and	r24, r24
    6fdc:	09 f4       	brne	.+2      	; 0x6fe0 <_Z20putsTelemetryChannelhhaihh+0x64>
    6fde:	83 c0       	rjmp	.+262    	; 0x70e6 <_Z20putsTelemetryChannelhhaihh+0x16a>
#ifdef SCALERS
		uint8_t displayed = 0;
		int8_t index = chanIndex;
		if ( (index >= V_SC1) && (index < V_SC1 + NUM_SCALERS)) {
			index -= V_SC1;
			uint8_t *p = &g_model.Scalers[index].name[0];
    6fe0:	af 01       	movw	r20, r30
			if (*p) {
				lcd_putsnAtt (x, y, (const char *) p, 4, BSS);
    6fe2:	00 e1       	ldi	r16, 0x10	; 16
    6fe4:	24 e0       	ldi	r18, 0x04	; 4
    6fe6:	8f 2d       	mov	r24, r15
    6fe8:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <_Z12lcd_putsnAtthhPKchh>
		}
#else 
		lcd_putsAttIdx( x, y, Str_telemItems, channel+1, 0 );
#endif		
		x += 4 * FW;
		if (att & DBLSIZE) {
    6fec:	12 fd       	sbrc	r17, 2
    6fee:	04 c0       	rjmp	.+8      	; 0x6ff8 <_Z20putsTelemetryChannelhhaihh+0x7c>
			putsAttIdxTelemItems (x, y, channel + 1, 0);
		}
#else 
		lcd_putsAttIdx( x, y, Str_telemItems, channel+1, 0 );
#endif		
		x += 4 * FW;
    6ff0:	a8 e1       	ldi	r26, 0x18	; 24
    6ff2:	aa 2e       	mov	r10, r26
    6ff4:	af 0c       	add	r10, r15
    6ff6:	07 c0       	rjmp	.+14     	; 0x7006 <_Z20putsTelemetryChannelhhaihh+0x8a>
		if (att & DBLSIZE) {
			x += 4;
    6ff8:	fc e1       	ldi	r31, 0x1C	; 28
    6ffa:	af 2e       	mov	r10, r31
    6ffc:	af 0c       	add	r10, r15
			y -= FH;
    6ffe:	88 ef       	ldi	r24, 0xF8	; 248
    7000:	d8 0e       	add	r13, r24
    7002:	01 c0       	rjmp	.+2      	; 0x7006 <_Z20putsTelemetryChannelhhaihh+0x8a>
    7004:	af 2c       	mov	r10, r15
			fieldW += FW;
		}
	}

	if (style & TELEM_VALUE_RIGHT) {
    7006:	0e 2d       	mov	r16, r14
    7008:	08 70       	andi	r16, 0x08	; 8
    700a:	e3 fc       	sbrc	r14, 3
		att &= ~LEFT;
    700c:	1f 7b       	andi	r17, 0xBF	; 191
	}
	channel = chanIndex;
	switch (channel) {
    700e:	81 ef       	ldi	r24, 0xF1	; 241
    7010:	98 16       	cp	r9, r24
    7012:	0c f4       	brge	.+2      	; 0x7016 <_Z20putsTelemetryChannelhhaihh+0x9a>
    7014:	3e c0       	rjmp	.+124    	; 0x7092 <_Z20putsTelemetryChannelhhaihh+0x116>
    7016:	84 ef       	ldi	r24, 0xF4	; 244
    7018:	89 15       	cp	r24, r9
    701a:	2c f4       	brge	.+10     	; 0x7026 <_Z20putsTelemetryChannelhhaihh+0xaa>
    701c:	82 e0       	ldi	r24, 0x02	; 2
    701e:	89 0d       	add	r24, r9
    7020:	82 30       	cpi	r24, 0x02	; 2
    7022:	f8 f0       	brcs	.+62     	; 0x7062 <_Z20putsTelemetryChannelhhaihh+0xe6>
    7024:	36 c0       	rjmp	.+108    	; 0x7092 <_Z20putsTelemetryChannelhhaihh+0x116>
		case V_SC2:
		case V_SC3:
		case V_SC4: {
			int16_t cvalue;
			uint8_t precision;
			cvalue = calc_scaler (channel - V_SC1, &unit, &precision);
    7026:	ae 01       	movw	r20, r28
    7028:	4f 5f       	subi	r20, 0xFF	; 255
    702a:	5f 4f       	sbci	r21, 0xFF	; 255
    702c:	be 01       	movw	r22, r28
    702e:	6e 5f       	subi	r22, 0xFE	; 254
    7030:	7f 4f       	sbci	r23, 0xFF	; 255
    7032:	8f e0       	ldi	r24, 0x0F	; 15
    7034:	89 0d       	add	r24, r9
    7036:	7b de       	rcall	.-778    	; 0x6d2e <_Z11calc_scalerhPhS_>
			if (precision == 1) {
    7038:	29 81       	ldd	r18, Y+1	; 0x01
    703a:	21 30       	cpi	r18, 0x01	; 1
    703c:	11 f4       	brne	.+4      	; 0x7042 <_Z20putsTelemetryChannelhhaihh+0xc6>
				att |= PREC1;
    703e:	10 62       	ori	r17, 0x20	; 32
    7040:	03 c0       	rjmp	.+6      	; 0x7048 <_Z20putsTelemetryChannelhhaihh+0xcc>
			} else if (precision == 2) {
    7042:	22 30       	cpi	r18, 0x02	; 2
    7044:	09 f4       	brne	.+2      	; 0x7048 <_Z20putsTelemetryChannelhhaihh+0xcc>
				att |= PREC2;
    7046:	10 63       	ori	r17, 0x30	; 48
			}
			// Sort units here
			unit = pgm_read_byte(&UnitsText[unit]);
    7048:	ea 81       	ldd	r30, Y+2	; 0x02
    704a:	f0 e0       	ldi	r31, 0x00	; 0
    704c:	ed 50       	subi	r30, 0x0D	; 13
    704e:	f3 4e       	sbci	r31, 0xE3	; 227
    7050:	e4 91       	lpm	r30, Z
    7052:	ea 83       	std	Y+2, r30	; 0x02
			if ( (style & TELEM_CONSTANT) == 0) {
    7054:	e7 fe       	sbrs	r14, 7
    7056:	02 c0       	rjmp	.+4      	; 0x705c <_Z20putsTelemetryChannelhhaihh+0xe0>
    7058:	8c 2d       	mov	r24, r12
    705a:	9b 2d       	mov	r25, r11
				val = cvalue;
			}
		}
			break;
    705c:	c8 2e       	mov	r12, r24
    705e:	b9 2e       	mov	r11, r25
    7060:	18 c0       	rjmp	.+48     	; 0x7092 <_Z20putsTelemetryChannelhhaihh+0x116>
#endif		

		case TIMER1:
		case TIMER2:
			if ( (att & DBLSIZE) == 0) {
    7062:	12 fd       	sbrc	r17, 2
    7064:	02 c0       	rjmp	.+4      	; 0x706a <_Z20putsTelemetryChannelhhaihh+0xee>
				x -= 4;
    7066:	8c ef       	ldi	r24, 0xFC	; 252
    7068:	a8 0e       	add	r10, r24
			}
			if (style & TELEM_LABEL) {
    706a:	88 20       	and	r8, r8
    706c:	11 f0       	breq	.+4      	; 0x7072 <_Z20putsTelemetryChannelhhaihh+0xf6>
				x += FW + 4;
    706e:	8a e0       	ldi	r24, 0x0A	; 10
    7070:	a8 0e       	add	r10, r24
			}
			att &= DBLSIZE | INVERS | BLINK;
    7072:	17 70       	andi	r17, 0x07	; 7
			putsTime (x - FW, y, val, att, att);
    7074:	01 2f       	mov	r16, r17
    7076:	21 2f       	mov	r18, r17
    7078:	4c 2d       	mov	r20, r12
    707a:	5b 2d       	mov	r21, r11
    707c:	6d 2d       	mov	r22, r13
    707e:	8a ef       	ldi	r24, 0xFA	; 250
    7080:	8a 0d       	add	r24, r10
    7082:	0e 94 57 29 	call	0x52ae	; 0x52ae <_Z8putsTimehhihh>
			displayed = 1;
			unit = channel + 2 + '1';
    7086:	e3 e3       	ldi	r30, 0x33	; 51
    7088:	e9 0d       	add	r30, r9
    708a:	ea 83       	std	Y+2, r30	; 0x02
			xbase -= FW;
    708c:	8a ef       	ldi	r24, 0xFA	; 250
    708e:	f8 0e       	add	r15, r24
    7090:	0a c0       	rjmp	.+20     	; 0x70a6 <_Z20putsTelemetryChannelhhaihh+0x12a>
			default:
			break;
#endif
	}
	if (!displayed) {
		lcd_outdezAtt ( (style & TELEM_VALUE_RIGHT) ? xbase + 61 : x, y, val, att);
    7092:	00 23       	and	r16, r16
    7094:	71 f1       	breq	.+92     	; 0x70f2 <_Z20putsTelemetryChannelhhaihh+0x176>
    7096:	8d e3       	ldi	r24, 0x3D	; 61
    7098:	8f 0d       	add	r24, r15
    709a:	21 2f       	mov	r18, r17
    709c:	4c 2d       	mov	r20, r12
    709e:	5b 2d       	mov	r21, r11
    70a0:	6d 2d       	mov	r22, r13
    70a2:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
	}
	if (style & ( TELEM_UNIT | TELEM_UNIT_LEFT)) {
    70a6:	8e 2d       	mov	r24, r14
    70a8:	86 70       	andi	r24, 0x06	; 6
    70aa:	69 f0       	breq	.+26     	; 0x70c6 <_Z20putsTelemetryChannelhhaihh+0x14a>
		if (style & TELEM_UNIT_LEFT) {
    70ac:	e2 fe       	sbrs	r14, 2
    70ae:	04 c0       	rjmp	.+8      	; 0x70b8 <_Z20putsTelemetryChannelhhaihh+0x13c>
			x = xbase + FW + 4;
    70b0:	8a e0       	ldi	r24, 0x0A	; 10
    70b2:	8f 0d       	add	r24, r15
			att &= ~DBLSIZE;
    70b4:	1b 7f       	andi	r17, 0xFB	; 251
    70b6:	02 c0       	rjmp	.+4      	; 0x70bc <_Z20putsTelemetryChannelhhaihh+0x140>
		} else {
			x = lcd_lastPos;
    70b8:	80 91 ce 0a 	lds	r24, 0x0ACE
		}
		lcd_putcAtt (x, y, unit, att);
    70bc:	21 2f       	mov	r18, r17
    70be:	4a 81       	ldd	r20, Y+2	; 0x02
    70c0:	6d 2d       	mov	r22, r13
    70c2:	0e 94 31 26 	call	0x4c62	; 0x4c62 <_Z11lcd_putcAtthhch>
	}
	return unit;
    70c6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    70c8:	0f 90       	pop	r0
    70ca:	0f 90       	pop	r0
    70cc:	df 91       	pop	r29
    70ce:	cf 91       	pop	r28
    70d0:	1f 91       	pop	r17
    70d2:	0f 91       	pop	r16
    70d4:	ff 90       	pop	r15
    70d6:	ef 90       	pop	r14
    70d8:	df 90       	pop	r13
    70da:	cf 90       	pop	r12
    70dc:	bf 90       	pop	r11
    70de:	af 90       	pop	r10
    70e0:	9f 90       	pop	r9
    70e2:	8f 90       	pop	r8
    70e4:	08 95       	ret
				lcd_putsnAtt (x, y, (const char *) p, 4, BSS);
				displayed = 1;
			}
		}
		if (displayed == 0) {
			putsAttIdxTelemItems (x, y, channel + 1, 0);
    70e6:	4f 5f       	subi	r20, 0xFF	; 255
    70e8:	20 e0       	ldi	r18, 0x00	; 0
    70ea:	6d 2d       	mov	r22, r13
    70ec:	8f 2d       	mov	r24, r15
    70ee:	e8 dd       	rcall	.-1072   	; 0x6cc0 <_Z20putsAttIdxTelemItemshhhh>
    70f0:	7d cf       	rjmp	.-262    	; 0x6fec <_Z20putsTelemetryChannelhhaihh+0x70>
    70f2:	8a 2d       	mov	r24, r10
    70f4:	d2 cf       	rjmp	.-92     	; 0x709a <_Z20putsTelemetryChannelhhaihh+0x11e>

000070f6 <_Z8dispGvarhhhh>:

#if GVARS

const prog_char APM Str_GV[] = STR_GV;

void dispGvar (uint8_t x, uint8_t y, uint8_t gvar, uint8_t attr) {
    70f6:	0f 93       	push	r16
    70f8:	1f 93       	push	r17
    70fa:	cf 93       	push	r28
    70fc:	df 93       	push	r29
    70fe:	c8 2f       	mov	r28, r24
    7100:	d6 2f       	mov	r29, r22
    7102:	04 2f       	mov	r16, r20
    7104:	12 2f       	mov	r17, r18
	lcd_putsAtt (x, y, Str_GV, attr);
    7106:	46 ec       	ldi	r20, 0xC6	; 198
    7108:	5c e1       	ldi	r21, 0x1C	; 28
    710a:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>
	lcd_putcAtt (x + 2 * FW, y, gvar + '0', attr);
    710e:	40 e3       	ldi	r20, 0x30	; 48
    7110:	40 0f       	add	r20, r16
    7112:	21 2f       	mov	r18, r17
    7114:	6d 2f       	mov	r22, r29
    7116:	8c e0       	ldi	r24, 0x0C	; 12
    7118:	8c 0f       	add	r24, r28
}
    711a:	df 91       	pop	r29
    711c:	cf 91       	pop	r28
    711e:	1f 91       	pop	r17
    7120:	0f 91       	pop	r16

const prog_char APM Str_GV[] = STR_GV;

void dispGvar (uint8_t x, uint8_t y, uint8_t gvar, uint8_t attr) {
	lcd_putsAtt (x, y, Str_GV, attr);
	lcd_putcAtt (x + 2 * FW, y, gvar + '0', attr);
    7122:	0c 94 31 26 	jmp	0x4c62	; 0x4c62 <_Z11lcd_putcAtthhch>

00007126 <_Z12gvarMenuItemhhaaah>:
}

int8_t gvarMenuItem (uint8_t x, uint8_t y, int8_t value, int8_t min, int8_t max, uint8_t attr) {
    7126:	ef 92       	push	r14
    7128:	0f 93       	push	r16
    712a:	1f 93       	push	r17
    712c:	cf 93       	push	r28
    712e:	df 93       	push	r29
    7130:	c4 2f       	mov	r28, r20
    7132:	12 2f       	mov	r17, r18
    7134:	2e 2d       	mov	r18, r14
	uint8_t invers = attr & (INVERS | BLINK);
    7136:	de 2d       	mov	r29, r14
    7138:	d3 70       	andi	r29, 0x03	; 3

	if (value >= 126 || value <= -126) {
    713a:	9d e7       	ldi	r25, 0x7D	; 125
    713c:	94 0f       	add	r25, r20
    713e:	9b 3f       	cpi	r25, 0xFB	; 251
    7140:	80 f0       	brcs	.+32     	; 0x7162 <_Z12gvarMenuItemhhaaah+0x3c>
		dispGvar (x - 3 * FW, y, (uint8_t) value - 125, attr);
    7142:	43 e8       	ldi	r20, 0x83	; 131
    7144:	4c 0f       	add	r20, r28
    7146:	82 51       	subi	r24, 0x12	; 18
    7148:	d6 df       	rcall	.-84     	; 0x70f6 <_Z8dispGvarhhhh>
		if (invers) value = checkIncDec16 ((uint8_t) value, 126, 130, EE_MODEL);
    714a:	dd 23       	and	r29, r29
    714c:	59 f1       	breq	.+86     	; 0x71a4 <_Z12gvarMenuItemhhaaah+0x7e>
    714e:	22 e0       	ldi	r18, 0x02	; 2
    7150:	42 e8       	ldi	r20, 0x82	; 130
    7152:	50 e0       	ldi	r21, 0x00	; 0
    7154:	6e e7       	ldi	r22, 0x7E	; 126
    7156:	70 e0       	ldi	r23, 0x00	; 0
    7158:	8c 2f       	mov	r24, r28
    715a:	90 e0       	ldi	r25, 0x00	; 0
    715c:	0e 94 b7 12 	call	0x256e	; 0x256e <_Z13checkIncDec16iiih>
    7160:	0c c0       	rjmp	.+24     	; 0x717a <_Z12gvarMenuItemhhaaah+0x54>
	} else {
		lcd_outdezAtt (x, y, value, attr);
    7162:	55 27       	eor	r21, r21
    7164:	47 fd       	sbrc	r20, 7
    7166:	50 95       	com	r21
    7168:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
		if (invers)
    716c:	dd 23       	and	r29, r29
    716e:	d1 f0       	breq	.+52     	; 0x71a4 <_Z12gvarMenuItemhhaaah+0x7e>
		CHECK_INCDEC_H_MODELVAR(value, min, max);
    7170:	40 2f       	mov	r20, r16
    7172:	61 2f       	mov	r22, r17
    7174:	8c 2f       	mov	r24, r28
    7176:	0e 94 86 13 	call	0x270c	; 0x270c <_Z14checkIncDec_hmaaa>
    717a:	c8 2f       	mov	r28, r24
	}
	if (invers) {
		if (Tevent == EVT_TOGGLE_GVAR) {
    717c:	80 91 e1 01 	lds	r24, 0x01E1
    7180:	8d 3b       	cpi	r24, 0xBD	; 189
    7182:	81 f4       	brne	.+32     	; 0x71a4 <_Z12gvarMenuItemhhaaah+0x7e>
			value = (
					(value >= 126 || value <= -126) ?
    7184:	8d e7       	ldi	r24, 0x7D	; 125
    7186:	8c 0f       	add	r24, r28
							g_model.gvars[(uint8_t) value - 126].gvar : 126);
    7188:	8b 3f       	cpi	r24, 0xFB	; 251
    718a:	40 f0       	brcs	.+16     	; 0x719c <_Z12gvarMenuItemhhaaah+0x76>
    718c:	ec 2f       	mov	r30, r28
    718e:	f0 e0       	ldi	r31, 0x00	; 0
    7190:	ee 0f       	add	r30, r30
    7192:	ff 1f       	adc	r31, r31
    7194:	e4 52       	subi	r30, 0x24	; 36
    7196:	fc 4f       	sbci	r31, 0xFC	; 252
    7198:	c0 81       	ld	r28, Z
    719a:	01 c0       	rjmp	.+2      	; 0x719e <_Z12gvarMenuItemhhaaah+0x78>
    719c:	ce e7       	ldi	r28, 0x7E	; 126
			eeDirty (EE_MODEL);
    719e:	82 e0       	ldi	r24, 0x02	; 2
    71a0:	0e 94 4e 20 	call	0x409c	; 0x409c <_Z7eeDirtyh>
		}
	}
	return value;
}
    71a4:	8c 2f       	mov	r24, r28
    71a6:	df 91       	pop	r29
    71a8:	cf 91       	pop	r28
    71aa:	1f 91       	pop	r17
    71ac:	0f 91       	pop	r16
    71ae:	ef 90       	pop	r14
    71b0:	08 95       	ret

000071b2 <_Z12get_dr_stateh>:

#endif

uint8_t get_dr_state (uint8_t x) {
    71b2:	cf 93       	push	r28
    71b4:	df 93       	push	r29
	ExpoData *ped;

	ped = &g_model.expoData[x];
    71b6:	9e e0       	ldi	r25, 0x0E	; 14
    71b8:	89 9f       	mul	r24, r25
    71ba:	e0 01       	movw	r28, r0
    71bc:	11 24       	eor	r1, r1
    71be:	c5 53       	subi	r28, 0x35	; 53
    71c0:	dc 4f       	sbci	r29, 0xFC	; 252

	return (!getSwitch (ped->drSw1, 0) ? DR_HIGH : !getSwitch (ped->drSw2, 0) ? DR_MID : DR_LOW);
    71c2:	40 e0       	ldi	r20, 0x00	; 0
    71c4:	60 e0       	ldi	r22, 0x00	; 0
    71c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    71c8:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_Z9getSwitchabh>
    71cc:	88 23       	and	r24, r24
    71ce:	49 f0       	breq	.+18     	; 0x71e2 <_Z12get_dr_stateh+0x30>
    71d0:	40 e0       	ldi	r20, 0x00	; 0
    71d2:	60 e0       	ldi	r22, 0x00	; 0
    71d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    71d6:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_Z9getSwitchabh>
    71da:	81 11       	cpse	r24, r1
    71dc:	04 c0       	rjmp	.+8      	; 0x71e6 <_Z12get_dr_stateh+0x34>
    71de:	81 e0       	ldi	r24, 0x01	; 1
    71e0:	03 c0       	rjmp	.+6      	; 0x71e8 <_Z12get_dr_stateh+0x36>
    71e2:	80 e0       	ldi	r24, 0x00	; 0
    71e4:	01 c0       	rjmp	.+2      	; 0x71e8 <_Z12get_dr_stateh+0x36>
    71e6:	82 e0       	ldi	r24, 0x02	; 2
}
    71e8:	df 91       	pop	r29
    71ea:	cf 91       	pop	r28
    71ec:	08 95       	ret

000071ee <_Z9DO_SQUAREhhh>:

void DO_SQUARE (uint8_t x, uint8_t y, uint8_t w) {
    71ee:	ef 92       	push	r14
    71f0:	ff 92       	push	r15
    71f2:	0f 93       	push	r16
    71f4:	1f 93       	push	r17
    71f6:	cf 93       	push	r28
    71f8:	df 93       	push	r29
    71fa:	f8 2e       	mov	r15, r24
    71fc:	e6 2e       	mov	r14, r22
    71fe:	c4 2f       	mov	r28, r20
//	uint8_t x,y,w ; x = xx; y = yy; w = ww ;
	lcd_vline (x - w / 2, y - w / 2, w);
    7200:	d4 2f       	mov	r29, r20
    7202:	d6 95       	lsr	r29
    7204:	06 2f       	mov	r16, r22
    7206:	0d 1b       	sub	r16, r29
    7208:	18 2f       	mov	r17, r24
    720a:	1d 1b       	sub	r17, r29
    720c:	60 2f       	mov	r22, r16
    720e:	81 2f       	mov	r24, r17
    7210:	0e 94 d5 27 	call	0x4faa	; 0x4faa <_Z9lcd_vlinehha>
	lcd_hline (x - w / 2, y + w / 2, w);
    7214:	6d 2f       	mov	r22, r29
    7216:	6e 0d       	add	r22, r14
    7218:	4c 2f       	mov	r20, r28
    721a:	81 2f       	mov	r24, r17
    721c:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <_Z9lcd_hlinehha>
	lcd_vline (x + w / 2, y - w / 2, w);
    7220:	4c 2f       	mov	r20, r28
    7222:	60 2f       	mov	r22, r16
    7224:	8d 2f       	mov	r24, r29
    7226:	8f 0d       	add	r24, r15
    7228:	0e 94 d5 27 	call	0x4faa	; 0x4faa <_Z9lcd_vlinehha>
	lcd_hline (x - w / 2, y - w / 2, w);
    722c:	4c 2f       	mov	r20, r28
    722e:	60 2f       	mov	r22, r16
    7230:	81 2f       	mov	r24, r17
}
    7232:	df 91       	pop	r29
    7234:	cf 91       	pop	r28
    7236:	1f 91       	pop	r17
    7238:	0f 91       	pop	r16
    723a:	ff 90       	pop	r15
    723c:	ef 90       	pop	r14
void DO_SQUARE (uint8_t x, uint8_t y, uint8_t w) {
//	uint8_t x,y,w ; x = xx; y = yy; w = ww ;
	lcd_vline (x - w / 2, y - w / 2, w);
	lcd_hline (x - w / 2, y + w / 2, w);
	lcd_vline (x + w / 2, y - w / 2, w);
	lcd_hline (x - w / 2, y - w / 2, w);
    723e:	0c 94 d3 27 	jmp	0x4fa6	; 0x4fa6 <_Z9lcd_hlinehha>

00007242 <_Z7qRotaryv>:
#endif

int8_t qRotary () {
	int8_t diff = 0;

	if (Rotary.Rotary_diff > 0) {
    7242:	90 91 ea 01 	lds	r25, 0x01EA
		diff = 1;
    7246:	81 e0       	ldi	r24, 0x01	; 1
#endif

int8_t qRotary () {
	int8_t diff = 0;

	if (Rotary.Rotary_diff > 0) {
    7248:	19 16       	cp	r1, r25
    724a:	24 f0       	brlt	.+8      	; 0x7254 <_Z7qRotaryv+0x12>
		diff = 1;
	} else if (Rotary.Rotary_diff < 0) {
    724c:	91 11       	cpse	r25, r1
    724e:	01 c0       	rjmp	.+2      	; 0x7252 <_Z7qRotaryv+0x10>
    7250:	80 e0       	ldi	r24, 0x00	; 0
    7252:	81 95       	neg	r24
		diff = -1;
	}
	Rotary.Rotary_diff = 0;
    7254:	10 92 ea 01 	sts	0x01EA, r1
	return diff;
}
    7258:	08 95       	ret

0000725a <_Z6TITLEPPKc>:
	}
	asm("");
}

uint8_t TITLEP (const prog_char *pstr) {
	return lcd_putsAtt (0, 0, pstr, INVERS);
    725a:	21 e0       	ldi	r18, 0x01	; 1
    725c:	ac 01       	movw	r20, r24
    725e:	60 e0       	ldi	r22, 0x00	; 0
    7260:	80 e0       	ldi	r24, 0x00	; 0
    7262:	0c 94 fa 26 	jmp	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>

00007266 <_Z17menuProcStatistich>:
		jeti_keys = JETI_KEY_NOCHANGE;
	}
}
#endif

void menuProcStatistic (uint8_t event) {
    7266:	0f 93       	push	r16
    7268:	1f 93       	push	r17
    726a:	cf 93       	push	r28
    726c:	df 93       	push	r29
    726e:	18 2f       	mov	r17, r24
	static uint8_t statMenuIndex;
	TITLE(STR_STAT);
    7270:	89 ee       	ldi	r24, 0xE9	; 233
    7272:	98 e1       	ldi	r25, 0x18	; 24
    7274:	f2 df       	rcall	.-28     	; 0x725a <_Z6TITLEPPKc>
	switch (event) {
    7276:	16 36       	cpi	r17, 0x66	; 102
    7278:	28 f4       	brcc	.+10     	; 0x7284 <_Z17menuProcStatistich+0x1e>
    727a:	14 36       	cpi	r17, 0x64	; 100
    727c:	30 f4       	brcc	.+12     	; 0x728a <_Z17menuProcStatistich+0x24>
    727e:	11 36       	cpi	r17, 0x61	; 97
    7280:	59 f0       	breq	.+22     	; 0x7298 <_Z17menuProcStatistich+0x32>
    7282:	0f c0       	rjmp	.+30     	; 0x72a2 <_Z17menuProcStatistich+0x3c>
    7284:	1e 38       	cpi	r17, 0x8E	; 142
    7286:	41 f0       	breq	.+16     	; 0x7298 <_Z17menuProcStatistich+0x32>
    7288:	0c c0       	rjmp	.+24     	; 0x72a2 <_Z17menuProcStatistich+0x3c>
		case EVT_KEY_FIRST(KEY_RIGHT):
		case EVT_KEY_FIRST(KEY_LEFT):
			statMenuIndex ^= 1;
    728a:	80 91 3f 0e 	lds	r24, 0x0E3F
    728e:	91 e0       	ldi	r25, 0x01	; 1
    7290:	89 27       	eor	r24, r25
    7292:	80 93 3f 0e 	sts	0x0E3F, r24
			break;
    7296:	05 c0       	rjmp	.+10     	; 0x72a2 <_Z17menuProcStatistich+0x3c>
		case EVT_KEY_LONG(BTN_RE):
		case EVT_KEY_FIRST(KEY_EXIT):
			statMenuIndex = 0;
    7298:	10 92 3f 0e 	sts	0x0E3F, r1
			popMenu (false);
    729c:	80 e0       	ldi	r24, 0x00	; 0
    729e:	0e 94 95 18 	call	0x312a	; 0x312a <_Z7popMenub>
			break;
	}

	if (statMenuIndex) {
    72a2:	80 91 3f 0e 	lds	r24, 0x0E3F
    72a6:	88 23       	and	r24, r24
    72a8:	09 f4       	brne	.+2      	; 0x72ac <_Z17menuProcStatistich+0x46>
    72aa:	3e c0       	rjmp	.+124    	; 0x7328 <_Z17menuProcStatistich+0xc2>
		struct t_latency *ptrLat = &g_latency;
		FORCE_INDIRECT(ptrLat);
    72ac:	cc e1       	ldi	r28, 0x1C	; 28
    72ae:	d1 e0       	ldi	r29, 0x01	; 1
		if (event == EVT_KEY_FIRST(KEY_MENU)) {
    72b0:	10 36       	cpi	r17, 0x60	; 96
    72b2:	39 f4       	brne	.+14     	; 0x72c2 <_Z17menuProcStatistich+0x5c>
			ptrLat->g_tmr1Latency_min = 0xff;
    72b4:	8f ef       	ldi	r24, 0xFF	; 255
    72b6:	88 83       	st	Y, r24
			ptrLat->g_tmr1Latency_max = 0;
    72b8:	19 82       	std	Y+1, r1	; 0x01
			ptrLat->g_timeMain = 0;
    72ba:	1b 82       	std	Y+3, r1	; 0x03
    72bc:	1a 82       	std	Y+2, r1	; 0x02
			audioDefevent (AU_MENUS);
    72be:	87 e1       	ldi	r24, 0x17	; 23
    72c0:	13 db       	rcall	.-2522   	; 0x68e8 <_Z13audioDefeventh>
		}

		lcd_puts_Pleft ( FH,
				PSTR("tmr1Lat max\022us\037tmr1Lat min\022us\037tmr1 Jitter\022us\037tmain\022ms"));
    72c2:	63 eb       	ldi	r22, 0xB3	; 179
    72c4:	78 e1       	ldi	r23, 0x18	; 24
    72c6:	88 e0       	ldi	r24, 0x08	; 8
    72c8:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>

		lcd_outdez ( PARAM_OFS, FH, ptrLat->g_tmr1Latency_max / 2);
    72cc:	49 81       	ldd	r20, Y+1	; 0x01
    72ce:	46 95       	lsr	r20
    72d0:	50 e0       	ldi	r21, 0x00	; 0
    72d2:	68 e0       	ldi	r22, 0x08	; 8
    72d4:	86 e6       	ldi	r24, 0x66	; 102
    72d6:	0e 94 47 29 	call	0x528e	; 0x528e <_Z10lcd_outdezhhi>
		lcd_outdez ( PARAM_OFS, 2 * FH, ptrLat->g_tmr1Latency_min / 2);
    72da:	48 81       	ld	r20, Y
    72dc:	46 95       	lsr	r20
    72de:	50 e0       	ldi	r21, 0x00	; 0
    72e0:	60 e1       	ldi	r22, 0x10	; 16
    72e2:	86 e6       	ldi	r24, 0x66	; 102
    72e4:	0e 94 47 29 	call	0x528e	; 0x528e <_Z10lcd_outdezhhi>
		lcd_outdez ( PARAM_OFS, 3 * FH,
				(uint8_t) (ptrLat->g_tmr1Latency_max - ptrLat->g_tmr1Latency_min) / 2);
    72e8:	49 81       	ldd	r20, Y+1	; 0x01
    72ea:	88 81       	ld	r24, Y
    72ec:	48 1b       	sub	r20, r24
    72ee:	46 95       	lsr	r20
    72f0:	50 e0       	ldi	r21, 0x00	; 0
    72f2:	68 e1       	ldi	r22, 0x18	; 24
    72f4:	86 e6       	ldi	r24, 0x66	; 102
    72f6:	0e 94 47 29 	call	0x528e	; 0x528e <_Z10lcd_outdezhhi>
		lcd_outdezAtt ( PARAM_OFS, 4 * FH, (ptrLat->g_timeMain * 25) / 4, PREC2);
    72fa:	8a 81       	ldd	r24, Y+2	; 0x02
    72fc:	9b 81       	ldd	r25, Y+3	; 0x03
    72fe:	29 e1       	ldi	r18, 0x19	; 25
    7300:	28 9f       	mul	r18, r24
    7302:	a0 01       	movw	r20, r0
    7304:	29 9f       	mul	r18, r25
    7306:	50 0d       	add	r21, r0
    7308:	11 24       	eor	r1, r1
    730a:	56 95       	lsr	r21
    730c:	47 95       	ror	r20
    730e:	56 95       	lsr	r21
    7310:	47 95       	ror	r20
    7312:	20 e3       	ldi	r18, 0x30	; 48
    7314:	60 e2       	ldi	r22, 0x20	; 32
    7316:	86 e6       	ldi	r24, 0x66	; 102
    7318:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
#ifdef CPUM2561
		extern uint8_t SaveMcusr;
		lcd_outhex4( 17*FW, 6*FH, SaveMcusr );
#endif

		lcd_puts_Pleft (7 * FH, PSTR("\003[MENU] to refresh"));
    731c:	60 ea       	ldi	r22, 0xA0	; 160
    731e:	78 e1       	ldi	r23, 0x18	; 24
    7320:	88 e3       	ldi	r24, 0x38	; 56
    7322:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
    7326:	34 c0       	rjmp	.+104    	; 0x7390 <_Z17menuProcStatistich+0x12a>

//		tptr = &TimerG ;
//		FORCE_INDIRECT(tptr) ;
//#else
		struct t_timer *tptr = &s_timer[0];
		FORCE_INDIRECT(tptr);
    7328:	cc ed       	ldi	r28, 0xDC	; 220
    732a:	dd e0       	ldi	r29, 0x0D	; 13

//    lcd_puts_Pleft( FH*0, PSTR("\021TOT"));
//    putsTime(   13*FW, FH*0, tptr->s_timeCumTot, 0, 0);
//#else

		lcd_puts_Pleft ( FH * 0, PSTR("\021TOT\037\001TME\021TSW\037\001STK\021ST%"));
    732c:	69 e8       	ldi	r22, 0x89	; 137
    732e:	78 e1       	ldi	r23, 0x18	; 24
    7330:	80 e0       	ldi	r24, 0x00	; 0
    7332:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>

//    lcd_puts_Pleft(  FH*1, PSTR("\001TME\021TSW"));
		putsTime (7 * FW, FH * 1, TimeGlobals.s_timeCumAbs, 0, 0);
    7336:	40 91 73 0d 	lds	r20, 0x0D73
    733a:	50 91 74 0d 	lds	r21, 0x0D74
    733e:	00 e0       	ldi	r16, 0x00	; 0
    7340:	20 e0       	ldi	r18, 0x00	; 0
    7342:	68 e0       	ldi	r22, 0x08	; 8
    7344:	8a e2       	ldi	r24, 0x2A	; 42
    7346:	0e 94 57 29 	call	0x52ae	; 0x52ae <_Z8putsTimehhihh>
		putsTime (13 * FW, FH * 1, tptr->s_timeCumSw, 0, 0);
    734a:	4c 81       	ldd	r20, Y+4	; 0x04
    734c:	5d 81       	ldd	r21, Y+5	; 0x05
    734e:	20 e0       	ldi	r18, 0x00	; 0
    7350:	68 e0       	ldi	r22, 0x08	; 8
    7352:	8e e4       	ldi	r24, 0x4E	; 78
    7354:	0e 94 57 29 	call	0x52ae	; 0x52ae <_Z8putsTimehhihh>

//    lcd_puts_Pleft(  FH*2, PSTR("\001STK\021ST%"));
		putsTime (7 * FW, FH * 2, tptr->s_timeCumThr, 0, 0);
    7358:	48 85       	ldd	r20, Y+8	; 0x08
    735a:	59 85       	ldd	r21, Y+9	; 0x09
    735c:	20 e0       	ldi	r18, 0x00	; 0
    735e:	60 e1       	ldi	r22, 0x10	; 16
    7360:	8a e2       	ldi	r24, 0x2A	; 42
    7362:	0e 94 57 29 	call	0x52ae	; 0x52ae <_Z8putsTimehhihh>
		putsTime (13 * FW, FH * 2, tptr->s_timeCum16ThrP / 16, 0, 0);
    7366:	4a 85       	ldd	r20, Y+10	; 0x0a
    7368:	5b 85       	ldd	r21, Y+11	; 0x0b
    736a:	c4 e0       	ldi	r28, 0x04	; 4
    736c:	56 95       	lsr	r21
    736e:	47 95       	ror	r20
    7370:	ca 95       	dec	r28
    7372:	e1 f7       	brne	.-8      	; 0x736c <_Z17menuProcStatistich+0x106>
    7374:	20 e0       	ldi	r18, 0x00	; 0
    7376:	60 e1       	ldi	r22, 0x10	; 16
    7378:	8e e4       	ldi	r24, 0x4E	; 78
    737a:	0e 94 57 29 	call	0x52ae	; 0x52ae <_Z8putsTimehhihh>

//    lcd_puts_Pleft( FH*0, PSTR("\021TOT"));
		putsTime (13 * FW, FH * 0, TimeGlobals.s_timeCumTot, 0, 0);
    737e:	40 91 71 0d 	lds	r20, 0x0D71
    7382:	50 91 72 0d 	lds	r21, 0x0D72
    7386:	20 e0       	ldi	r18, 0x00	; 0
    7388:	60 e0       	ldi	r22, 0x00	; 0
    738a:	8e e4       	ldi	r24, 0x4E	; 78
    738c:	0e 94 57 29 	call	0x52ae	; 0x52ae <_Z8putsTimehhihh>
		}
#endif
	}
	asm("");

}
    7390:	df 91       	pop	r29
    7392:	cf 91       	pop	r28
    7394:	1f 91       	pop	r17
    7396:	0f 91       	pop	r16
    7398:	08 95       	ret

0000739a <_Z14menu_lcd_onoffhhhh>:
uint8_t TITLEP (const prog_char *pstr) {
	return lcd_putsAtt (0, 0, pstr, INVERS);
}

void menu_lcd_onoff (uint8_t x, uint8_t y, uint8_t value, uint8_t mode) {
	lcd_putsAtt (x, y, value ? Str_ON : Str_OFF, mode ? InverseBlink : 0);
    739a:	22 23       	and	r18, r18
    739c:	19 f0       	breq	.+6      	; 0x73a4 <_Z14menu_lcd_onoffhhhh+0xa>
    739e:	20 91 9f 0d 	lds	r18, 0x0D9F
    73a2:	01 c0       	rjmp	.+2      	; 0x73a6 <_Z14menu_lcd_onoffhhhh+0xc>
    73a4:	20 e0       	ldi	r18, 0x00	; 0
    73a6:	44 23       	and	r20, r20
    73a8:	19 f0       	breq	.+6      	; 0x73b0 <_Z14menu_lcd_onoffhhhh+0x16>
    73aa:	46 ec       	ldi	r20, 0xC6	; 198
    73ac:	52 e0       	ldi	r21, 0x02	; 2
    73ae:	02 c0       	rjmp	.+4      	; 0x73b4 <_Z14menu_lcd_onoffhhhh+0x1a>
    73b0:	4a ec       	ldi	r20, 0xCA	; 202
    73b2:	52 e0       	ldi	r21, 0x02	; 2
    73b4:	0c 94 fa 26 	jmp	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>

000073b8 <_ZL9onoffItemhhhh.constprop.7>:
//    }
	}
	asm("");
}

static uint8_t onoffItem (uint8_t value, uint8_t y, uint8_t condition, uint8_t flags) {
    73b8:	cf 93       	push	r28
    73ba:	df 93       	push	r29
    73bc:	c8 2f       	mov	r28, r24
    73be:	d4 2f       	mov	r29, r20
	menu_lcd_onoff ( PARAM_OFS, y, value, condition);
    73c0:	24 2f       	mov	r18, r20
    73c2:	48 2f       	mov	r20, r24
    73c4:	86 e6       	ldi	r24, 0x66	; 102
    73c6:	e9 df       	rcall	.-46     	; 0x739a <_Z14menu_lcd_onoffhhhh>
	if (condition) value = checkIncDec (value, 0, 1, flags);
    73c8:	dd 23       	and	r29, r29
    73ca:	41 f0       	breq	.+16     	; 0x73dc <_ZL9onoffItemhhhh.constprop.7+0x24>
    73cc:	22 e0       	ldi	r18, 0x02	; 2
    73ce:	41 e0       	ldi	r20, 0x01	; 1
    73d0:	60 e0       	ldi	r22, 0x00	; 0
    73d2:	8c 2f       	mov	r24, r28
	return value;
}
    73d4:	df 91       	pop	r29
    73d6:	cf 91       	pop	r28
	asm("");
}

static uint8_t onoffItem (uint8_t value, uint8_t y, uint8_t condition, uint8_t flags) {
	menu_lcd_onoff ( PARAM_OFS, y, value, condition);
	if (condition) value = checkIncDec (value, 0, 1, flags);
    73d8:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <_Z11checkIncDecaaah>
	return value;
}
    73dc:	8c 2f       	mov	r24, r28
    73de:	df 91       	pop	r29
    73e0:	cf 91       	pop	r28
    73e2:	08 95       	ret

000073e4 <_ZL13onoffMenuItemhhPKchh.isra.2>:

static uint8_t offonItem_m (uint8_t value, uint8_t y, uint8_t condition) {
	return 1 - onoffItem_m (1 - value, y, condition);
}

static uint8_t onoffMenuItem (uint8_t value, uint8_t y, const prog_char *s, uint8_t condition,
    73e4:	1f 93       	push	r17
    73e6:	cf 93       	push	r28
    73e8:	df 93       	push	r29
    73ea:	d8 2f       	mov	r29, r24
    73ec:	c6 2f       	mov	r28, r22
    73ee:	12 2f       	mov	r17, r18
		uint8_t flags) {
	lcd_puts_Pleft (y, s);
    73f0:	ba 01       	movw	r22, r20
    73f2:	8c 2f       	mov	r24, r28
    73f4:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
	return onoffItem (value, y, condition, EE_MODEL);
    73f8:	41 2f       	mov	r20, r17
    73fa:	6c 2f       	mov	r22, r28
    73fc:	8d 2f       	mov	r24, r29
}
    73fe:	df 91       	pop	r29
    7400:	cf 91       	pop	r28
    7402:	1f 91       	pop	r17
}

static uint8_t onoffMenuItem (uint8_t value, uint8_t y, const prog_char *s, uint8_t condition,
		uint8_t flags) {
	lcd_puts_Pleft (y, s);
	return onoffItem (value, y, condition, EE_MODEL);
    7404:	d9 cf       	rjmp	.-78     	; 0x73b8 <_ZL9onoffItemhhhh.constprop.7>

00007406 <_ZL15offonMenuItem_ghhPKch>:

static uint8_t onoffMenuItem_g (uint8_t value, uint8_t y, const prog_char *s, uint8_t condition) {
	return onoffMenuItem (value, y, s, condition, EE_GENERAL);
}

static uint8_t offonMenuItem_g (uint8_t value, uint8_t y, const prog_char *s, uint8_t condition) {
    7406:	cf 93       	push	r28
	return 1 - onoffMenuItem_g (1 - value, y, s, condition);
    7408:	c1 e0       	ldi	r28, 0x01	; 1
	lcd_puts_Pleft (y, s);
	return onoffItem (value, y, condition, EE_MODEL);
}

static uint8_t onoffMenuItem_g (uint8_t value, uint8_t y, const prog_char *s, uint8_t condition) {
	return onoffMenuItem (value, y, s, condition, EE_GENERAL);
    740a:	9c 2f       	mov	r25, r28
    740c:	98 1b       	sub	r25, r24
    740e:	89 2f       	mov	r24, r25
    7410:	e9 df       	rcall	.-46     	; 0x73e4 <_ZL13onoffMenuItemhhPKchh.isra.2>
}

static uint8_t offonMenuItem_g (uint8_t value, uint8_t y, const prog_char *s, uint8_t condition) {
	return 1 - onoffMenuItem_g (1 - value, y, s, condition);
}
    7412:	c8 1b       	sub	r28, r24
    7414:	8c 2f       	mov	r24, r28
    7416:	cf 91       	pop	r28
    7418:	08 95       	ret

0000741a <_Z16menu_lcd_HYPHINVhhhh>:

void menu_lcd_onoff (uint8_t x, uint8_t y, uint8_t value, uint8_t mode) {
	lcd_putsAtt (x, y, value ? Str_ON : Str_OFF, mode ? InverseBlink : 0);
}

void menu_lcd_HYPHINV (uint8_t x, uint8_t y, uint8_t value, uint8_t mode) {
    741a:	0f 93       	push	r16
	lcd_putsAttIdx (x, y, PSTR(STR_HYPH_INV), value, mode ? InverseBlink : 0);
    741c:	22 23       	and	r18, r18
    741e:	19 f0       	breq	.+6      	; 0x7426 <_Z16menu_lcd_HYPHINVhhhh+0xc>
    7420:	00 91 9f 0d 	lds	r16, 0x0D9F
    7424:	01 c0       	rjmp	.+2      	; 0x7428 <_Z16menu_lcd_HYPHINVhhhh+0xe>
    7426:	00 e0       	ldi	r16, 0x00	; 0
    7428:	24 2f       	mov	r18, r20
    742a:	4d e7       	ldi	r20, 0x7D	; 125
    742c:	5b e1       	ldi	r21, 0x1B	; 27
    742e:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
}
    7432:	0f 91       	pop	r16
    7434:	08 95       	ret

00007436 <_Z18lcd_xlabel_decimalhPKcjhh>:
	check (event, Columns, 0, maxrow);
}

#define PARAM_OFS   17*FW

void lcd_xlabel_decimal (uint8_t y, const prog_char * s, uint16_t value, uint8_t attr, uint8_t x) {
    7436:	0f 93       	push	r16
    7438:	1f 93       	push	r17
    743a:	cf 93       	push	r28
    743c:	df 93       	push	r29
    743e:	18 2f       	mov	r17, r24
    7440:	eb 01       	movw	r28, r22
    7442:	80 2f       	mov	r24, r16
	lcd_outdezAtt (x, y, value, attr);
    7444:	61 2f       	mov	r22, r17
    7446:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
	lcd_puts_Pleft (y, s);
    744a:	be 01       	movw	r22, r28
    744c:	81 2f       	mov	r24, r17
}
    744e:	df 91       	pop	r29
    7450:	cf 91       	pop	r28
    7452:	1f 91       	pop	r17
    7454:	0f 91       	pop	r16

#define PARAM_OFS   17*FW

void lcd_xlabel_decimal (uint8_t y, const prog_char * s, uint16_t value, uint8_t attr, uint8_t x) {
	lcd_outdezAtt (x, y, value, attr);
	lcd_puts_Pleft (y, s);
    7456:	0c 94 1f 27 	jmp	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>

0000745a <_Z6MAXCOLhPKhh>:
uint8_t M_longMenuTimer;

//#define MAXCOL(row) (horTab ? pgm_read_byte(horTab+min(row, horTabMax)) : (const uint8_t)0)

uint8_t MAXCOL (uint8_t row, const prog_uint8_t *horTab, uint8_t horTabMax) {
	return (horTab ? pgm_read_byte(horTab + min (row, horTabMax)) : (const uint8_t) 0);
    745a:	61 15       	cp	r22, r1
    745c:	71 05       	cpc	r23, r1
    745e:	41 f0       	breq	.+16     	; 0x7470 <_Z6MAXCOLhPKhh+0x16>
    7460:	48 17       	cp	r20, r24
    7462:	08 f4       	brcc	.+2      	; 0x7466 <_Z6MAXCOLhPKhh+0xc>
    7464:	84 2f       	mov	r24, r20
    7466:	fb 01       	movw	r30, r22
    7468:	e8 0f       	add	r30, r24
    746a:	f1 1d       	adc	r31, r1
    746c:	84 91       	lpm	r24, Z
    746e:	08 95       	ret
    7470:	80 e0       	ldi	r24, 0x00	; 0
}
    7472:	08 95       	ret

00007474 <_ZN7MState25checkEhPKhhh>:

#define INC(val,max) if(val<max) {val++;} else {val=0;}
#define DEC(val,max) if(val>0  ) {val--;} else {val=max;}
void MState2::check (uint8_t event, const prog_uint8_t *horTab, uint8_t horTabMax, uint8_t maxrow) {
    7474:	8f 92       	push	r8
    7476:	9f 92       	push	r9
    7478:	af 92       	push	r10
    747a:	bf 92       	push	r11
    747c:	cf 92       	push	r12
    747e:	df 92       	push	r13
    7480:	ef 92       	push	r14
    7482:	ff 92       	push	r15
    7484:	0f 93       	push	r16
    7486:	1f 93       	push	r17
    7488:	cf 93       	push	r28
    748a:	df 93       	push	r29
    748c:	ec 01       	movw	r28, r24
    748e:	96 2e       	mov	r9, r22
    7490:	7a 01       	movw	r14, r20
    7492:	82 2e       	mov	r8, r18
	uint8_t l_posHorz;
	l_posHorz = g_posHorz;
    7494:	10 91 7e 0d 	lds	r17, 0x0D7E
	//    scrollUD = 0;

	//check pot 2 - if changed -> scroll menu
	//check pot 3 if changed -> cursor down/up
	//we do this in these brackets to prevent it from happening in the main screen
	c4 = calibratedStick[4];		// Read only once
    7498:	a0 90 cf 0d 	lds	r10, 0x0DCF
    749c:	b0 90 d0 0d 	lds	r11, 0x0DD0
	c5 = calibratedStick[5];		// Read only once
    74a0:	c0 90 d1 0d 	lds	r12, 0x0DD1
    74a4:	d0 90 d2 0d 	lds	r13, 0x0DD2

	ptrp1 = &P1values;
	FORCE_INDIRECT(ptrp1);
    74a8:	ee e6       	ldi	r30, 0x6E	; 110
    74aa:	f1 e0       	ldi	r31, 0x01	; 1
	scrollLR = (ptrp1->p2valprev - c4) / SCROLL_TH;
    74ac:	a6 81       	ldd	r26, Z+6	; 0x06
    74ae:	b7 81       	ldd	r27, Z+7	; 0x07
    74b0:	aa 19       	sub	r26, r10
    74b2:	bb 09       	sbc	r27, r11
    74b4:	b7 fd       	sbrc	r27, 7
    74b6:	df 96       	adiw	r26, 0x3f	; 63
    74b8:	96 e0       	ldi	r25, 0x06	; 6
    74ba:	b5 95       	asr	r27
    74bc:	a7 95       	ror	r26
    74be:	9a 95       	dec	r25
    74c0:	e1 f7       	brne	.-8      	; 0x74ba <_ZN7MState25checkEhPKhhh+0x46>
    74c2:	9a 2f       	mov	r25, r26
    74c4:	a0 93 a2 0d 	sts	0x0DA2, r26
	scrollUD = (ptrp1->p3valprev - c5) / SCROLL_TH;
    74c8:	a0 85       	ldd	r26, Z+8	; 0x08
    74ca:	b1 85       	ldd	r27, Z+9	; 0x09
    74cc:	ac 19       	sub	r26, r12
    74ce:	bd 09       	sbc	r27, r13
    74d0:	b7 fd       	sbrc	r27, 7
    74d2:	df 96       	adiw	r26, 0x3f	; 63
    74d4:	86 e0       	ldi	r24, 0x06	; 6
    74d6:	b5 95       	asr	r27
    74d8:	a7 95       	ror	r26
    74da:	8a 95       	dec	r24
    74dc:	e1 f7       	brne	.-8      	; 0x74d6 <_ZN7MState25checkEhPKhhh+0x62>
    74de:	8a 2f       	mov	r24, r26
    74e0:	a0 93 a0 0d 	sts	0x0DA0, r26

	if (scrollLR) ptrp1->p2valprev = c4;
    74e4:	99 23       	and	r25, r25
    74e6:	11 f0       	breq	.+4      	; 0x74ec <_ZN7MState25checkEhPKhhh+0x78>
    74e8:	b7 82       	std	Z+7, r11	; 0x07
    74ea:	a6 82       	std	Z+6, r10	; 0x06
	if (scrollUD) ptrp1->p3valprev = c5;
    74ec:	88 23       	and	r24, r24
    74ee:	11 f0       	breq	.+4      	; 0x74f4 <_ZN7MState25checkEhPKhhh+0x80>
    74f0:	d1 86       	std	Z+9, r13	; 0x09
    74f2:	c0 86       	std	Z+8, r12	; 0x08

	if (scroll_disabled || g_eeGeneral.disablePotScroll) {
    74f4:	80 91 a1 0d 	lds	r24, 0x0DA1
    74f8:	81 11       	cpse	r24, r1
    74fa:	04 c0       	rjmp	.+8      	; 0x7504 <_ZN7MState25checkEhPKhhh+0x90>
    74fc:	80 91 28 06 	lds	r24, 0x0628
    7500:	85 ff       	sbrs	r24, 5
    7502:	06 c0       	rjmp	.+12     	; 0x7510 <_ZN7MState25checkEhPKhhh+0x9c>
		scrollLR = 0;
    7504:	10 92 a2 0d 	sts	0x0DA2, r1
		scrollUD = 0;
    7508:	10 92 a0 0d 	sts	0x0DA0, r1
		scroll_disabled = 0;
    750c:	10 92 a1 0d 	sts	0x0DA1, r1
	}

	if (scrollLR || scrollUD || ptrp1->p1valdiff) backlightKey (); // on keypress turn the light on
    7510:	80 91 a2 0d 	lds	r24, 0x0DA2
    7514:	81 11       	cpse	r24, r1
    7516:	08 c0       	rjmp	.+16     	; 0x7528 <_ZN7MState25checkEhPKhhh+0xb4>
    7518:	80 91 a0 0d 	lds	r24, 0x0DA0
    751c:	81 11       	cpse	r24, r1
    751e:	04 c0       	rjmp	.+8      	; 0x7528 <_ZN7MState25checkEhPKhhh+0xb4>
    7520:	82 81       	ldd	r24, Z+2	; 0x02
    7522:	93 81       	ldd	r25, Z+3	; 0x03
    7524:	89 2b       	or	r24, r25
    7526:	11 f0       	breq	.+4      	; 0x752c <_ZN7MState25checkEhPKhhh+0xb8>
    7528:	0e 94 af 13 	call	0x275e	; 0x275e <_Z12backlightKeyv>
	// *250 then <<1 is the same as *500, but uses less code space
#endif

	uint8_t maxcol = MAXCOL (m_posVert, horTab, horTabMax);
    752c:	48 2d       	mov	r20, r8
    752e:	b7 01       	movw	r22, r14
    7530:	88 81       	ld	r24, Y
    7532:	93 df       	rcall	.-218    	; 0x745a <_Z6MAXCOLhPKhh>
    7534:	d8 2e       	mov	r13, r24

	if (maxrow != 0xFF) {
    7536:	0f 3f       	cpi	r16, 0xFF	; 255
    7538:	09 f4       	brne	.+2      	; 0x753c <_ZN7MState25checkEhPKhhh+0xc8>
    753a:	53 c0       	rjmp	.+166    	; 0x75e2 <_ZN7MState25checkEhPKhhh+0x16e>
		if (RotaryState == ROTARY_MENU_UD) {
    753c:	90 91 db 0d 	lds	r25, 0x0DDB
    7540:	91 11       	cpse	r25, r1
    7542:	32 c0       	rjmp	.+100    	; 0x75a8 <_ZN7MState25checkEhPKhhh+0x134>
			static uint8_t lateUp = 0;
			if (lateUp) {
    7544:	80 91 4f 0e 	lds	r24, 0x0E4F
    7548:	88 23       	and	r24, r24
    754a:	39 f0       	breq	.+14     	; 0x755a <_ZN7MState25checkEhPKhhh+0xe6>
				lateUp = 0;
    754c:	10 92 4f 0e 	sts	0x0E4F, r1
				l_posHorz = MAXCOL (m_posVert, horTab, horTabMax);
    7550:	48 2d       	mov	r20, r8
    7552:	b7 01       	movw	r22, r14
    7554:	88 81       	ld	r24, Y
    7556:	81 df       	rcall	.-254    	; 0x745a <_Z6MAXCOLhPKhh>
    7558:	18 2f       	mov	r17, r24
			}
			int8_t diff = qRotary ();
    755a:	73 de       	rcall	.-794    	; 0x7242 <_Z7qRotaryv>
			if (diff > 0) {
    755c:	18 16       	cp	r1, r24
    755e:	6c f4       	brge	.+26     	; 0x757a <_ZN7MState25checkEhPKhhh+0x106>
				INC(l_posHorz, maxcol);
    7560:	1d 15       	cp	r17, r13
    7562:	10 f4       	brcc	.+4      	; 0x7568 <_ZN7MState25checkEhPKhhh+0xf4>
    7564:	1f 5f       	subi	r17, 0xFF	; 255
				if (l_posHorz == 0) {
    7566:	c9 f4       	brne	.+50     	; 0x759a <_ZN7MState25checkEhPKhhh+0x126>
					INC(m_posVert, maxrow);
    7568:	88 81       	ld	r24, Y
    756a:	80 17       	cp	r24, r16
    756c:	18 f4       	brcc	.+6      	; 0x7574 <_ZN7MState25checkEhPKhhh+0x100>
    756e:	8f 5f       	subi	r24, 0xFF	; 255
    7570:	88 83       	st	Y, r24
    7572:	01 c0       	rjmp	.+2      	; 0x7576 <_ZN7MState25checkEhPKhhh+0x102>
    7574:	18 82       	st	Y, r1
    7576:	10 e0       	ldi	r17, 0x00	; 0
    7578:	10 c0       	rjmp	.+32     	; 0x759a <_ZN7MState25checkEhPKhhh+0x126>
				}
			} else if (diff < 0) {
    757a:	88 23       	and	r24, r24
    757c:	71 f0       	breq	.+28     	; 0x759a <_ZN7MState25checkEhPKhhh+0x126>
				if (l_posHorz == 0) {
    757e:	11 11       	cpse	r17, r1
    7580:	0b c0       	rjmp	.+22     	; 0x7598 <_ZN7MState25checkEhPKhhh+0x124>
					DEC(m_posVert, maxrow);
    7582:	88 81       	ld	r24, Y
    7584:	88 23       	and	r24, r24
    7586:	19 f0       	breq	.+6      	; 0x758e <_ZN7MState25checkEhPKhhh+0x11a>
    7588:	81 50       	subi	r24, 0x01	; 1
    758a:	88 83       	st	Y, r24
    758c:	01 c0       	rjmp	.+2      	; 0x7590 <_ZN7MState25checkEhPKhhh+0x11c>
    758e:	08 83       	st	Y, r16
					lateUp = 1;
    7590:	81 e0       	ldi	r24, 0x01	; 1
    7592:	80 93 4f 0e 	sts	0x0E4F, r24
    7596:	01 c0       	rjmp	.+2      	; 0x759a <_ZN7MState25checkEhPKhhh+0x126>
					l_posHorz = 0;
//					l_posHorz = MAXCOL(m_posVert) ;
				} else {
					DEC(l_posHorz, maxcol);
    7598:	11 50       	subi	r17, 0x01	; 1
				}
			}
			if (event == EVT_KEY_BREAK(BTN_RE)) {
    759a:	8e e2       	ldi	r24, 0x2E	; 46
    759c:	98 12       	cpse	r9, r24
    759e:	0f c0       	rjmp	.+30     	; 0x75be <_ZN7MState25checkEhPKhhh+0x14a>
				RotaryState = ROTARY_VALUE;
    75a0:	81 e0       	ldi	r24, 0x01	; 1
    75a2:	80 93 db 0d 	sts	0x0DDB, r24
    75a6:	0b c0       	rjmp	.+22     	; 0x75be <_ZN7MState25checkEhPKhhh+0x14a>
			}
		} else if (RotaryState == ROTARY_VALUE) {
    75a8:	91 30       	cpi	r25, 0x01	; 1
    75aa:	49 f4       	brne	.+18     	; 0x75be <_ZN7MState25checkEhPKhhh+0x14a>
			if ( (event == EVT_KEY_BREAK(BTN_RE)) || (s_editMode == 0)) {
    75ac:	8e e2       	ldi	r24, 0x2E	; 46
    75ae:	98 16       	cp	r9, r24
    75b0:	21 f0       	breq	.+8      	; 0x75ba <_ZN7MState25checkEhPKhhh+0x146>
    75b2:	80 91 a5 0d 	lds	r24, 0x0DA5
    75b6:	81 11       	cpse	r24, r1
    75b8:	02 c0       	rjmp	.+4      	; 0x75be <_ZN7MState25checkEhPKhhh+0x14a>
				RotaryState = ROTARY_MENU_UD;
    75ba:	10 92 db 0d 	sts	0x0DDB, r1
			}
		}

		{
			uint8_t timer = M_longMenuTimer;
    75be:	80 91 7d 0d 	lds	r24, 0x0D7D
			if ( menuPressed()) {
    75c2:	b1 99       	sbic	0x16, 1	; 22
    75c4:	0b c0       	rjmp	.+22     	; 0x75dc <_ZN7MState25checkEhPKhhh+0x168>
				if (timer < 255) {
    75c6:	8f 3f       	cpi	r24, 0xFF	; 255
    75c8:	19 f0       	breq	.+6      	; 0x75d0 <_ZN7MState25checkEhPKhhh+0x15c>
					timer += 1;
    75ca:	8f 5f       	subi	r24, 0xFF	; 255
				}
			} else {
				timer = 0;
			}
			if (timer > 60) {
    75cc:	8d 33       	cpi	r24, 0x3D	; 61
    75ce:	38 f0       	brcs	.+14     	; 0x75de <_ZN7MState25checkEhPKhhh+0x16a>
				s_editMode = 1;
    75d0:	91 e0       	ldi	r25, 0x01	; 1
    75d2:	90 93 a5 0d 	sts	0x0DA5, r25
				RotaryState = ROTARY_VALUE;
    75d6:	90 93 db 0d 	sts	0x0DDB, r25
    75da:	01 c0       	rjmp	.+2      	; 0x75de <_ZN7MState25checkEhPKhhh+0x16a>
			if ( menuPressed()) {
				if (timer < 255) {
					timer += 1;
				}
			} else {
				timer = 0;
    75dc:	80 e0       	ldi	r24, 0x00	; 0
			}
			if (timer > 60) {
				s_editMode = 1;
				RotaryState = ROTARY_VALUE;
			}
			M_longMenuTimer = timer;
    75de:	80 93 7d 0d 	sts	0x0D7D, r24
		}
	}

	//        scrollLR = 0;

	maxcol = MAXCOL (m_posVert, horTab, horTabMax);
    75e2:	48 2d       	mov	r20, r8
    75e4:	b7 01       	movw	r22, r14
    75e6:	88 81       	ld	r24, Y
    75e8:	38 df       	rcall	.-400    	; 0x745a <_Z6MAXCOLhPKhh>
    75ea:	d8 2e       	mov	r13, r24

#ifndef NOPOTSCROLL
	if (!s_editMode) {
    75ec:	80 91 a5 0d 	lds	r24, 0x0DA5
    75f0:	81 11       	cpse	r24, r1
    75f2:	36 c0       	rjmp	.+108    	; 0x7660 <_ZN7MState25checkEhPKhhh+0x1ec>
		if (scrollUD) {
    75f4:	90 91 a0 0d 	lds	r25, 0x0DA0
    75f8:	99 23       	and	r25, r25
    75fa:	b9 f0       	breq	.+46     	; 0x762a <_ZN7MState25checkEhPKhhh+0x1b6>
			int8_t cc = m_posVert - scrollUD;
    75fc:	88 81       	ld	r24, Y
    75fe:	89 1b       	sub	r24, r25
    7600:	87 fd       	sbrc	r24, 7
    7602:	80 e0       	ldi	r24, 0x00	; 0
			if (cc < 1) cc = 0;
			if (cc >= maxrow) cc = maxrow;
    7604:	20 2f       	mov	r18, r16
    7606:	30 e0       	ldi	r19, 0x00	; 0
    7608:	48 2f       	mov	r20, r24
    760a:	55 27       	eor	r21, r21
    760c:	47 fd       	sbrc	r20, 7
    760e:	50 95       	com	r21
    7610:	42 17       	cp	r20, r18
    7612:	53 07       	cpc	r21, r19
    7614:	0c f0       	brlt	.+2      	; 0x7618 <_ZN7MState25checkEhPKhhh+0x1a4>
    7616:	80 2f       	mov	r24, r16
			m_posVert = cc;
    7618:	88 83       	st	Y, r24

			l_posHorz = min (l_posHorz, MAXCOL (m_posVert, horTab, horTabMax));
    761a:	48 2d       	mov	r20, r8
    761c:	b7 01       	movw	r22, r14
    761e:	1d df       	rcall	.-454    	; 0x745a <_Z6MAXCOLhPKhh>
    7620:	81 17       	cp	r24, r17
    7622:	08 f4       	brcc	.+2      	; 0x7626 <_ZN7MState25checkEhPKhhh+0x1b2>
    7624:	18 2f       	mov	r17, r24
//            m_posHorz = min(m_posHorz, MAXCOL(m_posVert)); // Why was this in twice?
			BLINK_SYNC;

			scrollUD = 0;
    7626:	10 92 a0 0d 	sts	0x0DA0, r1
		}

		if (m_posVert > 0 && scrollLR) {
    762a:	88 81       	ld	r24, Y
    762c:	88 23       	and	r24, r24
    762e:	c1 f0       	breq	.+48     	; 0x7660 <_ZN7MState25checkEhPKhhh+0x1ec>
    7630:	90 91 a2 0d 	lds	r25, 0x0DA2
    7634:	99 23       	and	r25, r25
    7636:	a1 f0       	breq	.+40     	; 0x7660 <_ZN7MState25checkEhPKhhh+0x1ec>
			int8_t cc = l_posHorz - scrollLR;
    7638:	19 1b       	sub	r17, r25
    763a:	17 fd       	sbrc	r17, 7
    763c:	10 e0       	ldi	r17, 0x00	; 0
			if (cc < 1) cc = 0;
			if (cc >= MAXCOL (m_posVert, horTab, horTabMax)) cc = MAXCOL (m_posVert, horTab,
    763e:	48 2d       	mov	r20, r8
    7640:	b7 01       	movw	r22, r14
    7642:	0b df       	rcall	.-490    	; 0x745a <_Z6MAXCOLhPKhh>
    7644:	28 2f       	mov	r18, r24
    7646:	30 e0       	ldi	r19, 0x00	; 0
    7648:	41 2f       	mov	r20, r17
    764a:	55 27       	eor	r21, r21
    764c:	47 fd       	sbrc	r20, 7
    764e:	50 95       	com	r21
    7650:	42 17       	cp	r20, r18
    7652:	53 07       	cpc	r21, r19
    7654:	2c f0       	brlt	.+10     	; 0x7660 <_ZN7MState25checkEhPKhhh+0x1ec>
					horTabMax);
    7656:	48 2d       	mov	r20, r8
    7658:	b7 01       	movw	r22, r14
    765a:	88 81       	ld	r24, Y
    765c:	fe de       	rcall	.-516    	; 0x745a <_Z6MAXCOLhPKhh>
    765e:	18 2f       	mov	r17, r24
			BLINK_SYNC;
			//            scrollLR = 0;
		}
	}
#endif		
	switch (event) {
    7660:	80 e6       	ldi	r24, 0x60	; 96
    7662:	98 16       	cp	r9, r24
    7664:	09 f4       	brne	.+2      	; 0x7668 <_ZN7MState25checkEhPKhhh+0x1f4>
    7666:	3e c0       	rjmp	.+124    	; 0x76e4 <_ZN7MState25checkEhPKhhh+0x270>
    7668:	89 15       	cp	r24, r9
    766a:	d0 f0       	brcs	.+52     	; 0x76a0 <_ZN7MState25checkEhPKhhh+0x22c>
    766c:	82 e4       	ldi	r24, 0x42	; 66
    766e:	98 16       	cp	r9, r24
    7670:	09 f4       	brne	.+2      	; 0x7674 <_ZN7MState25checkEhPKhhh+0x200>
    7672:	7b c0       	rjmp	.+246    	; 0x776a <_ZN7MState25checkEhPKhhh+0x2f6>
    7674:	89 15       	cp	r24, r9
    7676:	40 f0       	brcs	.+16     	; 0x7688 <_ZN7MState25checkEhPKhhh+0x214>
    7678:	81 e2       	ldi	r24, 0x21	; 33
    767a:	98 16       	cp	r9, r24
    767c:	09 f4       	brne	.+2      	; 0x7680 <_ZN7MState25checkEhPKhhh+0x20c>
    767e:	46 c0       	rjmp	.+140    	; 0x770c <_ZN7MState25checkEhPKhhh+0x298>
    7680:	8e e2       	ldi	r24, 0x2E	; 46
    7682:	98 16       	cp	r9, r24
    7684:	79 f1       	breq	.+94     	; 0x76e4 <_ZN7MState25checkEhPKhhh+0x270>
    7686:	94 c0       	rjmp	.+296    	; 0x77b0 <_ZN7MState25checkEhPKhhh+0x33c>
    7688:	84 e4       	ldi	r24, 0x44	; 68
    768a:	98 16       	cp	r9, r24
    768c:	09 f4       	brne	.+2      	; 0x7690 <_ZN7MState25checkEhPKhhh+0x21c>
    768e:	49 c0       	rjmp	.+146    	; 0x7722 <_ZN7MState25checkEhPKhhh+0x2ae>
    7690:	98 16       	cp	r9, r24
    7692:	08 f4       	brcc	.+2      	; 0x7696 <_ZN7MState25checkEhPKhhh+0x222>
    7694:	78 c0       	rjmp	.+240    	; 0x7786 <_ZN7MState25checkEhPKhhh+0x312>
    7696:	85 e4       	ldi	r24, 0x45	; 69
    7698:	98 16       	cp	r9, r24
    769a:	09 f4       	brne	.+2      	; 0x769e <_ZN7MState25checkEhPKhhh+0x22a>
    769c:	53 c0       	rjmp	.+166    	; 0x7744 <_ZN7MState25checkEhPKhhh+0x2d0>
    769e:	88 c0       	rjmp	.+272    	; 0x77b0 <_ZN7MState25checkEhPKhhh+0x33c>
    76a0:	85 e6       	ldi	r24, 0x65	; 101
    76a2:	98 16       	cp	r9, r24
    76a4:	09 f4       	brne	.+2      	; 0x76a8 <_ZN7MState25checkEhPKhhh+0x234>
    76a6:	50 c0       	rjmp	.+160    	; 0x7748 <_ZN7MState25checkEhPKhhh+0x2d4>
    76a8:	89 15       	cp	r24, r9
    76aa:	58 f0       	brcs	.+22     	; 0x76c2 <_ZN7MState25checkEhPKhhh+0x24e>
    76ac:	83 e6       	ldi	r24, 0x63	; 99
    76ae:	98 16       	cp	r9, r24
    76b0:	09 f4       	brne	.+2      	; 0x76b4 <_ZN7MState25checkEhPKhhh+0x240>
    76b2:	6c c0       	rjmp	.+216    	; 0x778c <_ZN7MState25checkEhPKhhh+0x318>
    76b4:	89 15       	cp	r24, r9
    76b6:	c0 f1       	brcs	.+112    	; 0x7728 <_ZN7MState25checkEhPKhhh+0x2b4>
    76b8:	82 e6       	ldi	r24, 0x62	; 98
    76ba:	98 16       	cp	r9, r24
    76bc:	09 f4       	brne	.+2      	; 0x76c0 <_ZN7MState25checkEhPKhhh+0x24c>
    76be:	58 c0       	rjmp	.+176    	; 0x7770 <_ZN7MState25checkEhPKhhh+0x2fc>
    76c0:	77 c0       	rjmp	.+238    	; 0x77b0 <_ZN7MState25checkEhPKhhh+0x33c>
    76c2:	8e e8       	ldi	r24, 0x8E	; 142
    76c4:	98 16       	cp	r9, r24
    76c6:	f9 f0       	breq	.+62     	; 0x7706 <_ZN7MState25checkEhPKhhh+0x292>
    76c8:	8f eb       	ldi	r24, 0xBF	; 191
    76ca:	98 16       	cp	r9, r24
    76cc:	31 f0       	breq	.+12     	; 0x76da <_ZN7MState25checkEhPKhhh+0x266>
    76ce:	81 e8       	ldi	r24, 0x81	; 129
    76d0:	98 12       	cpse	r9, r24
    76d2:	6e c0       	rjmp	.+220    	; 0x77b0 <_ZN7MState25checkEhPKhhh+0x33c>
				}
			}
		}
			break;
		case EVT_KEY_LONG(KEY_EXIT):
			s_editMode = false;
    76d4:	10 92 a5 0d 	sts	0x0DA5, r1
    76d8:	20 c0       	rjmp	.+64     	; 0x771a <_ZN7MState25checkEhPKhhh+0x2a6>
// Menus related stuff ...
struct MState2
{
  uint8_t m_posVert;
//  uint8_t m_posHorz;
  void init(){m_posVert=0;};
    76da:	18 82       	st	Y, r1
	switch (event) {
		case EVT_ENTRY:
			//if(m_posVert>maxrow)
			init ();
			l_posHorz = 0;
			s_editMode = false;
    76dc:	10 92 a5 0d 	sts	0x0DA5, r1
#endif		
	switch (event) {
		case EVT_ENTRY:
			//if(m_posVert>maxrow)
			init ();
			l_posHorz = 0;
    76e0:	10 e0       	ldi	r17, 0x00	; 0
			s_editMode = false;
			//init();BLINK_SYNC;
			break;
    76e2:	66 c0       	rjmp	.+204    	; 0x77b0 <_ZN7MState25checkEhPKhhh+0x33c>
		case EVT_KEY_BREAK(BTN_RE):
		case EVT_KEY_FIRST(KEY_MENU):
//        if ( (m_posVert > 0) || (!menuTab) )
		{
			if (maxrow != 0xFF) {
    76e4:	0f 3f       	cpi	r16, 0xFF	; 255
    76e6:	09 f4       	brne	.+2      	; 0x76ea <_ZN7MState25checkEhPKhhh+0x276>
    76e8:	63 c0       	rjmp	.+198    	; 0x77b0 <_ZN7MState25checkEhPKhhh+0x33c>
				s_editMode = !s_editMode;
    76ea:	81 e0       	ldi	r24, 0x01	; 1
    76ec:	90 91 a5 0d 	lds	r25, 0x0DA5
    76f0:	91 11       	cpse	r25, r1
    76f2:	80 e0       	ldi	r24, 0x00	; 0
    76f4:	80 93 a5 0d 	sts	0x0DA5, r24
				if (s_editMode) {
    76f8:	88 23       	and	r24, r24
    76fa:	09 f4       	brne	.+2      	; 0x76fe <_ZN7MState25checkEhPKhhh+0x28a>
    76fc:	59 c0       	rjmp	.+178    	; 0x77b0 <_ZN7MState25checkEhPKhhh+0x33c>
					RotaryState = ROTARY_VALUE;
    76fe:	81 e0       	ldi	r24, 0x01	; 1
    7700:	80 93 db 0d 	sts	0x0DDB, r24
    7704:	55 c0       	rjmp	.+170    	; 0x77b0 <_ZN7MState25checkEhPKhhh+0x33c>
			//popMenu(true); //return to uppermost, beeps itself
			popMenu (false);
			break;
			//fallthrough
		case EVT_KEY_LONG(BTN_RE):
			killEvents (event);
    7706:	8e e8       	ldi	r24, 0x8E	; 142
    7708:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
		case EVT_KEY_BREAK(KEY_EXIT):
			if (s_editMode) {
    770c:	80 91 a5 0d 	lds	r24, 0x0DA5
    7710:	88 23       	and	r24, r24
    7712:	19 f0       	breq	.+6      	; 0x771a <_ZN7MState25checkEhPKhhh+0x2a6>
				s_editMode = false;
    7714:	10 92 a5 0d 	sts	0x0DA5, r1
				break;
    7718:	4b c0       	rjmp	.+150    	; 0x77b0 <_ZN7MState25checkEhPKhhh+0x33c>
			}
//        if(m_posVert==0 || !menuTab) {
//						RotaryState = ROTARY_MENU_LR ;
			popMenu ();  //beeps itself
    771a:	80 e0       	ldi	r24, 0x00	; 0
    771c:	0e 94 95 18 	call	0x312a	; 0x312a <_Z7popMenub>
//        } else {
//            audioDefevent(AU_MENUS);
//            init();BLINK_SYNC;
//        }
			break;
    7720:	47 c0       	rjmp	.+142    	; 0x77b0 <_ZN7MState25checkEhPKhhh+0x33c>

		case EVT_KEY_REPT(KEY_RIGHT):  //inc
			if (l_posHorz == maxcol) break;
    7722:	1d 15       	cp	r17, r13
    7724:	09 f4       	brne	.+2      	; 0x7728 <_ZN7MState25checkEhPKhhh+0x2b4>
    7726:	44 c0       	rjmp	.+136    	; 0x77b0 <_ZN7MState25checkEhPKhhh+0x33c>
		case EVT_KEY_FIRST(KEY_RIGHT):  //inc
			if (!horTab || s_editMode) break;
    7728:	e1 14       	cp	r14, r1
    772a:	f1 04       	cpc	r15, r1
    772c:	09 f4       	brne	.+2      	; 0x7730 <_ZN7MState25checkEhPKhhh+0x2bc>
    772e:	40 c0       	rjmp	.+128    	; 0x77b0 <_ZN7MState25checkEhPKhhh+0x33c>
    7730:	80 91 a5 0d 	lds	r24, 0x0DA5
    7734:	81 11       	cpse	r24, r1
    7736:	3c c0       	rjmp	.+120    	; 0x77b0 <_ZN7MState25checkEhPKhhh+0x33c>
			INC(l_posHorz, maxcol)
    7738:	1d 15       	cp	r17, r13
    773a:	10 f4       	brcc	.+4      	; 0x7740 <_ZN7MState25checkEhPKhhh+0x2cc>
    773c:	1f 5f       	subi	r17, 0xFF	; 255
    773e:	10 c0       	rjmp	.+32     	; 0x7760 <_ZN7MState25checkEhPKhhh+0x2ec>
    7740:	10 e0       	ldi	r17, 0x00	; 0
    7742:	0e c0       	rjmp	.+28     	; 0x7760 <_ZN7MState25checkEhPKhhh+0x2ec>
				Tevent = 0;
			}
			break;

		case EVT_KEY_REPT(KEY_LEFT):  //dec
			if (l_posHorz == 0) break;
    7744:	11 23       	and	r17, r17
    7746:	a1 f1       	breq	.+104    	; 0x77b0 <_ZN7MState25checkEhPKhhh+0x33c>
		case EVT_KEY_FIRST(KEY_LEFT):  //dec
			if (!horTab || s_editMode) break;
    7748:	e1 14       	cp	r14, r1
    774a:	f1 04       	cpc	r15, r1
    774c:	89 f1       	breq	.+98     	; 0x77b0 <_ZN7MState25checkEhPKhhh+0x33c>
    774e:	80 91 a5 0d 	lds	r24, 0x0DA5
    7752:	81 11       	cpse	r24, r1
    7754:	2d c0       	rjmp	.+90     	; 0x77b0 <_ZN7MState25checkEhPKhhh+0x33c>
			DEC(l_posHorz, maxcol)
    7756:	11 23       	and	r17, r17
    7758:	11 f0       	breq	.+4      	; 0x775e <_ZN7MState25checkEhPKhhh+0x2ea>
    775a:	11 50       	subi	r17, 0x01	; 1
    775c:	01 c0       	rjmp	.+2      	; 0x7760 <_ZN7MState25checkEhPKhhh+0x2ec>
		}
	}

	//        scrollLR = 0;

	maxcol = MAXCOL (m_posVert, horTab, horTabMax);
    775e:	1d 2d       	mov	r17, r13
		case EVT_KEY_FIRST(KEY_LEFT):  //dec
			if (!horTab || s_editMode) break;
			DEC(l_posHorz, maxcol)
			;
			BLINK_SYNC;
			if (maxcol) {
    7760:	dd 20       	and	r13, r13
    7762:	31 f1       	breq	.+76     	; 0x77b0 <_ZN7MState25checkEhPKhhh+0x33c>
				Tevent = 0;
    7764:	10 92 e1 01 	sts	0x01E1, r1
    7768:	23 c0       	rjmp	.+70     	; 0x77b0 <_ZN7MState25checkEhPKhhh+0x33c>
			}
			break;

		case EVT_KEY_REPT(KEY_DOWN):  //inc
			if (m_posVert == maxrow) break;
    776a:	88 81       	ld	r24, Y
    776c:	80 17       	cp	r24, r16
    776e:	01 f1       	breq	.+64     	; 0x77b0 <_ZN7MState25checkEhPKhhh+0x33c>
		case EVT_KEY_FIRST(KEY_DOWN): //inc
			if (s_editMode) break;
    7770:	80 91 a5 0d 	lds	r24, 0x0DA5
    7774:	81 11       	cpse	r24, r1
    7776:	1c c0       	rjmp	.+56     	; 0x77b0 <_ZN7MState25checkEhPKhhh+0x33c>
			INC(m_posVert, maxrow)
    7778:	88 81       	ld	r24, Y
    777a:	80 17       	cp	r24, r16
    777c:	10 f4       	brcc	.+4      	; 0x7782 <_ZN7MState25checkEhPKhhh+0x30e>
    777e:	8f 5f       	subi	r24, 0xFF	; 255
    7780:	0d c0       	rjmp	.+26     	; 0x779c <_ZN7MState25checkEhPKhhh+0x328>
    7782:	18 82       	st	Y, r1
    7784:	0e c0       	rjmp	.+28     	; 0x77a2 <_ZN7MState25checkEhPKhhh+0x32e>
			l_posHorz = min (l_posHorz, MAXCOL (m_posVert, horTab, horTabMax));
			BLINK_SYNC;
			break;

		case EVT_KEY_REPT(KEY_UP):  //dec
			if (m_posVert == 0) break;
    7786:	88 81       	ld	r24, Y
    7788:	88 23       	and	r24, r24
    778a:	91 f0       	breq	.+36     	; 0x77b0 <_ZN7MState25checkEhPKhhh+0x33c>
		case EVT_KEY_FIRST(KEY_UP): //dec
			if (s_editMode) break;
    778c:	80 91 a5 0d 	lds	r24, 0x0DA5
    7790:	81 11       	cpse	r24, r1
    7792:	0e c0       	rjmp	.+28     	; 0x77b0 <_ZN7MState25checkEhPKhhh+0x33c>
			DEC(m_posVert, maxrow)
    7794:	88 81       	ld	r24, Y
    7796:	88 23       	and	r24, r24
    7798:	19 f0       	breq	.+6      	; 0x77a0 <_ZN7MState25checkEhPKhhh+0x32c>
    779a:	81 50       	subi	r24, 0x01	; 1
    779c:	88 83       	st	Y, r24
    779e:	01 c0       	rjmp	.+2      	; 0x77a2 <_ZN7MState25checkEhPKhhh+0x32e>
    77a0:	08 83       	st	Y, r16
			;
			l_posHorz = min (l_posHorz, MAXCOL (m_posVert, horTab, horTabMax));
    77a2:	48 2d       	mov	r20, r8
    77a4:	b7 01       	movw	r22, r14
    77a6:	88 81       	ld	r24, Y
    77a8:	58 de       	rcall	.-848    	; 0x745a <_Z6MAXCOLhPKhh>
    77aa:	81 17       	cp	r24, r17
    77ac:	08 f4       	brcc	.+2      	; 0x77b0 <_ZN7MState25checkEhPKhhh+0x33c>
    77ae:	18 2f       	mov	r17, r24
			BLINK_SYNC;
			break;
	}
#ifndef NOPOTSCROLL
	s_editing = s_editMode || P1values.p1valdiff;
    77b0:	20 91 a5 0d 	lds	r18, 0x0DA5
    77b4:	21 11       	cpse	r18, r1
    77b6:	0a c0       	rjmp	.+20     	; 0x77cc <_ZN7MState25checkEhPKhhh+0x358>
    77b8:	31 e0       	ldi	r19, 0x01	; 1
    77ba:	80 91 70 01 	lds	r24, 0x0170
    77be:	90 91 71 01 	lds	r25, 0x0171
    77c2:	89 2b       	or	r24, r25
    77c4:	09 f4       	brne	.+2      	; 0x77c8 <_ZN7MState25checkEhPKhhh+0x354>
    77c6:	30 e0       	ldi	r19, 0x00	; 0
    77c8:	83 2f       	mov	r24, r19
    77ca:	01 c0       	rjmp	.+2      	; 0x77ce <_ZN7MState25checkEhPKhhh+0x35a>
    77cc:	81 e0       	ldi	r24, 0x01	; 1
    77ce:	80 93 a4 0d 	sts	0x0DA4, r24
#else
	s_editing = s_editMode;
#endif	
	g_posHorz = l_posHorz;
    77d2:	10 93 7e 0d 	sts	0x0D7E, r17
	InverseBlink = (!horTab || s_editMode) ? BLINK : INVERS;
    77d6:	ef 28       	or	r14, r15
    77d8:	11 f4       	brne	.+4      	; 0x77de <_ZN7MState25checkEhPKhhh+0x36a>
    77da:	82 e0       	ldi	r24, 0x02	; 2
    77dc:	03 c0       	rjmp	.+6      	; 0x77e4 <_ZN7MState25checkEhPKhhh+0x370>
    77de:	21 11       	cpse	r18, r1
    77e0:	fc cf       	rjmp	.-8      	; 0x77da <_ZN7MState25checkEhPKhhh+0x366>
    77e2:	81 e0       	ldi	r24, 0x01	; 1
    77e4:	80 93 9f 0d 	sts	0x0D9F, r24
	Columns = &ProgColumns[COLUMNS_0];
    77e8:	83 e0       	ldi	r24, 0x03	; 3
    77ea:	9d e1       	ldi	r25, 0x1D	; 29
    77ec:	90 93 57 0e 	sts	0x0E57, r25
    77f0:	80 93 56 0e 	sts	0x0E56, r24

}
    77f4:	df 91       	pop	r29
    77f6:	cf 91       	pop	r28
    77f8:	1f 91       	pop	r17
    77fa:	0f 91       	pop	r16
    77fc:	ff 90       	pop	r15
    77fe:	ef 90       	pop	r14
    7800:	df 90       	pop	r13
    7802:	cf 90       	pop	r12
    7804:	bf 90       	pop	r11
    7806:	af 90       	pop	r10
    7808:	9f 90       	pop	r9
    780a:	8f 90       	pop	r8
    780c:	08 95       	ret

0000780e <_ZN7MState213check_columnsEhh>:

void menu_lcd_HYPHINV (uint8_t x, uint8_t y, uint8_t value, uint8_t mode) {
	lcd_putsAttIdx (x, y, PSTR(STR_HYPH_INV), value, mode ? InverseBlink : 0);
}

void MState2::check_columns (uint8_t event, uint8_t maxrow) {
    780e:	0f 93       	push	r16
    7810:	04 2f       	mov	r16, r20
	check (event, Columns, 0, maxrow);
    7812:	40 91 56 0e 	lds	r20, 0x0E56
    7816:	50 91 57 0e 	lds	r21, 0x0E57
    781a:	20 e0       	ldi	r18, 0x00	; 0
    781c:	2b de       	rcall	.-938    	; 0x7474 <_ZN7MState25checkEhPKhhh>
}
    781e:	0f 91       	pop	r16
    7820:	08 95       	ret

00007822 <_Z15menuProcGlobalsh>:
	}

}
#endif

void menuProcGlobals (uint8_t event) {
    7822:	af 92       	push	r10
    7824:	bf 92       	push	r11
    7826:	cf 92       	push	r12
    7828:	df 92       	push	r13
    782a:	ef 92       	push	r14
    782c:	ff 92       	push	r15
    782e:	0f 93       	push	r16
    7830:	1f 93       	push	r17
    7832:	cf 93       	push	r28
    7834:	df 93       	push	r29
    7836:	c8 2f       	mov	r28, r24
#ifdef MODEL_INDEX
	TITLEP (Str_Globals);
    7838:	88 e1       	ldi	r24, 0x18	; 24
    783a:	9d e1       	ldi	r25, 0x1D	; 29
    783c:	0e dd       	rcall	.-1508   	; 0x725a <_Z6TITLEPPKc>
	static const prog_uint8_t APM mstate_tab[] = {2,2,2,2,2,2,2,0};
#else
	static const prog_uint8_t APM mstate_tab[] = {
			1, 1, 1, 1, 1, 1, 1, 0 };
#endif
	mstate2.check (event, mstate_tab, DIM(mstate_tab) - 1, MAX_GVARS + 1 + NUM_SCALERS - 1 - 1);
    783e:	0a e0       	ldi	r16, 0x0A	; 10
    7840:	27 e0       	ldi	r18, 0x07	; 7
    7842:	40 e1       	ldi	r20, 0x10	; 16
    7844:	5b e1       	ldi	r21, 0x1B	; 27
    7846:	6c 2f       	mov	r22, r28
    7848:	8a e4       	ldi	r24, 0x4A	; 74
    784a:	9e e0       	ldi	r25, 0x0E	; 14
    784c:	13 de       	rcall	.-986    	; 0x7474 <_ZN7MState25checkEhPKhhh>
#else  
	MENU(STR_GLOBAL_VARS, menuTabModel, e_Globals, MAX_GVARS + 1, {0, 1});
#endif
#endif

	uint8_t subN = mstate2.m_posVert;
    784e:	c0 90 4a 0e 	lds	r12, 0x0E4A
	uint8_t subSub = g_posHorz;
    7852:	a0 90 7e 0d 	lds	r10, 0x0D7E

#ifdef SCALERS
	switch (event) {
		case EVT_KEY_FIRST(KEY_MENU):
		case EVT_KEY_BREAK(BTN_RE):
			if (subN >= 7) //&& sub <= MAX_MODES )
    7856:	86 e0       	ldi	r24, 0x06	; 6
	uint8_t subN = mstate2.m_posVert;
	uint8_t subSub = g_posHorz;
	uint8_t y = FH;

#ifdef SCALERS
	switch (event) {
    7858:	ce 32       	cpi	r28, 0x2E	; 46
    785a:	11 f0       	breq	.+4      	; 0x7860 <_Z15menuProcGlobalsh+0x3e>
    785c:	c0 36       	cpi	r28, 0x60	; 96
    785e:	91 f4       	brne	.+36     	; 0x7884 <_Z15menuProcGlobalsh+0x62>
		case EVT_KEY_FIRST(KEY_MENU):
		case EVT_KEY_BREAK(BTN_RE):
			if (subN >= 7) //&& sub <= MAX_MODES )
    7860:	8c 15       	cp	r24, r12
    7862:	20 f0       	brcs	.+8      	; 0x786c <_Z15menuProcGlobalsh+0x4a>
	}

}
#endif

void menuProcGlobals (uint8_t event) {
    7864:	e1 2c       	mov	r14, r1
    7866:	f1 2c       	mov	r15, r1
    7868:	18 e0       	ldi	r17, 0x08	; 8
    786a:	38 c0       	rjmp	.+112    	; 0x78dc <_Z15menuProcGlobalsh+0xba>
	switch (event) {
		case EVT_KEY_FIRST(KEY_MENU):
		case EVT_KEY_BREAK(BTN_RE):
			if (subN >= 7) //&& sub <= MAX_MODES )
					{
				s_currIdx = subN - 7;
    786c:	89 ef       	ldi	r24, 0xF9	; 249
    786e:	8c 0d       	add	r24, r12
    7870:	80 93 58 0e 	sts	0x0E58, r24
//				RotaryState = ROTARY_MENU_UD ;
				killEvents (event);
    7874:	8c 2f       	mov	r24, r28
    7876:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
				pushMenu (menuScaleOne);
    787a:	83 e8       	ldi	r24, 0x83	; 131
    787c:	9d e5       	ldi	r25, 0x5D	; 93
    787e:	0e 94 ab 18 	call	0x3156	; 0x3156 <_Z8pushMenuPFvhE>
    7882:	57 c0       	rjmp	.+174    	; 0x7932 <_Z15menuProcGlobalsh+0x110>
			}
			break;
	}
	if (subN < 7) {
    7884:	8c 15       	cp	r24, r12
    7886:	08 f4       	brcc	.+2      	; 0x788a <_Z15menuProcGlobalsh+0x68>
    7888:	54 c0       	rjmp	.+168    	; 0x7932 <_Z15menuProcGlobalsh+0x110>
    788a:	ec cf       	rjmp	.-40     	; 0x7864 <_Z15menuProcGlobalsh+0x42>
					lcd_outdezAtt( 18*FW, y, pgv->gvar, attr);
				}
			}
#else
			for (uint8_t j = 0; j < 2; j++) {
				uint8_t attr = ( (subN == i && subSub == j) ? InverseBlink : 0);
    788c:	cb 10       	cpse	r12, r11
    788e:	39 c0       	rjmp	.+114    	; 0x7902 <_Z15menuProcGlobalsh+0xe0>
    7890:	ad 10       	cpse	r10, r13
    7892:	37 c0       	rjmp	.+110    	; 0x7902 <_Z15menuProcGlobalsh+0xe0>
    7894:	00 91 9f 0d 	lds	r16, 0x0D9F
				uint8_t active = attr;	// (attr && s_editing) ;
				if (s_editMode == 0) {
    7898:	80 91 a5 0d 	lds	r24, 0x0DA5
    789c:	88 23       	and	r24, r24
    789e:	09 f4       	brne	.+2      	; 0x78a2 <_Z15menuProcGlobalsh+0x80>
    78a0:	94 c0       	rjmp	.+296    	; 0x79ca <_Z15menuProcGlobalsh+0x1a8>
					active = 0;
				}
				if (j == 0) {
    78a2:	d1 10       	cpse	r13, r1
    78a4:	34 c0       	rjmp	.+104    	; 0x790e <_Z15menuProcGlobalsh+0xec>
					if (active)
    78a6:	00 23       	and	r16, r16
    78a8:	29 f0       	breq	.+10     	; 0x78b4 <_Z15menuProcGlobalsh+0x92>
					CHECK_INCDEC_H_MODELVAR_0(pgv->gvsource, 28);
    78aa:	6c e1       	ldi	r22, 0x1C	; 28
    78ac:	89 81       	ldd	r24, Y+1	; 0x01
    78ae:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    78b2:	89 83       	std	Y+1, r24	; 0x01
					if (pgv->gvsource < 13) {
    78b4:	29 81       	ldd	r18, Y+1	; 0x01
    78b6:	2d 30       	cpi	r18, 0x0D	; 13
    78b8:	30 f5       	brcc	.+76     	; 0x7906 <_Z15menuProcGlobalsh+0xe4>
						lcd_putsAttIdx (10 * FW, y, PSTR(STR_GV_SOURCE), pgv->gvsource, attr);
    78ba:	47 ee       	ldi	r20, 0xE7	; 231
    78bc:	5a e1       	ldi	r21, 0x1A	; 26
					} else {
						lcd_putsAttIdx (10 * FW, y, Str_Chans_Gv, pgv->gvsource + 3, attr);
    78be:	61 2f       	mov	r22, r17
    78c0:	8c e3       	ldi	r24, 0x3C	; 60
    78c2:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
					if(active) CHECK_INCDEC_H_MODELVAR( pgv->gvar, -125, 125 );
					lcd_outdezAtt( 18*FW, y, pgv->gvar, attr);
				}
			}
#else
			for (uint8_t j = 0; j < 2; j++) {
    78c6:	d3 94       	inc	r13
    78c8:	82 e0       	ldi	r24, 0x02	; 2
    78ca:	d8 12       	cpse	r13, r24
    78cc:	df cf       	rjmp	.-66     	; 0x788c <_Z15menuProcGlobalsh+0x6a>
					CHECK_INCDEC_H_MODELVAR(pgv->gvar, -125, 125);
					lcd_outdezAtt (18 * FW, y, pgv->gvar, attr);
				}
			}
#endif
			y += FH;
    78ce:	18 5f       	subi	r17, 0xF8	; 248
    78d0:	8f ef       	ldi	r24, 0xFF	; 255
    78d2:	e8 1a       	sub	r14, r24
    78d4:	f8 0a       	sbc	r15, r24
			}
			break;
	}
	if (subN < 7) {
#endif
		for (uint8_t i = 0; i < MAX_GVARS; i++) {
    78d6:	10 34       	cpi	r17, 0x40	; 64
    78d8:	09 f4       	brne	.+2      	; 0x78dc <_Z15menuProcGlobalsh+0xba>
    78da:	6c c0       	rjmp	.+216    	; 0x79b4 <_Z15menuProcGlobalsh+0x192>
			lcd_puts_Pleft (y, Str_GV);
    78dc:	66 ec       	ldi	r22, 0xC6	; 198
    78de:	7c e1       	ldi	r23, 0x1C	; 28
    78e0:	81 2f       	mov	r24, r17
    78e2:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
    78e6:	be 2c       	mov	r11, r14
    78e8:	41 e3       	ldi	r20, 0x31	; 49
    78ea:	4e 0d       	add	r20, r14
			lcd_putc (2 * FW, y, i + '1');
    78ec:	61 2f       	mov	r22, r17
    78ee:	8c e0       	ldi	r24, 0x0C	; 12
    78f0:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <_Z8lcd_putchhc>
    78f4:	e7 01       	movw	r28, r14
    78f6:	cc 0f       	add	r28, r28
    78f8:	dd 1f       	adc	r29, r29
    78fa:	c8 52       	subi	r28, 0x28	; 40
    78fc:	db 4f       	sbci	r29, 0xFB	; 251
					if(active) CHECK_INCDEC_H_MODELVAR( pgv->gvar, -125, 125 );
					lcd_outdezAtt( 18*FW, y, pgv->gvar, attr);
				}
			}
#else
			for (uint8_t j = 0; j < 2; j++) {
    78fe:	d1 2c       	mov	r13, r1
    7900:	c5 cf       	rjmp	.-118    	; 0x788c <_Z15menuProcGlobalsh+0x6a>
				uint8_t attr = ( (subN == i && subSub == j) ? InverseBlink : 0);
    7902:	00 e0       	ldi	r16, 0x00	; 0
    7904:	c9 cf       	rjmp	.-110    	; 0x7898 <_Z15menuProcGlobalsh+0x76>
					if (active)
					CHECK_INCDEC_H_MODELVAR_0(pgv->gvsource, 28);
					if (pgv->gvsource < 13) {
						lcd_putsAttIdx (10 * FW, y, PSTR(STR_GV_SOURCE), pgv->gvsource, attr);
					} else {
						lcd_putsAttIdx (10 * FW, y, Str_Chans_Gv, pgv->gvsource + 3, attr);
    7906:	2d 5f       	subi	r18, 0xFD	; 253
    7908:	4d e5       	ldi	r20, 0x5D	; 93
    790a:	5f e1       	ldi	r21, 0x1F	; 31
    790c:	d8 cf       	rjmp	.-80     	; 0x78be <_Z15menuProcGlobalsh+0x9c>
//					put_curve( 12*FW, y, pgv->gvsource-6, attr ) ;
					}
				} else {
					if (active)
    790e:	00 23       	and	r16, r16
    7910:	31 f0       	breq	.+12     	; 0x791e <_Z15menuProcGlobalsh+0xfc>
					CHECK_INCDEC_H_MODELVAR(pgv->gvar, -125, 125);
    7912:	4d e7       	ldi	r20, 0x7D	; 125
    7914:	63 e8       	ldi	r22, 0x83	; 131
    7916:	88 81       	ld	r24, Y
    7918:	0e 94 86 13 	call	0x270c	; 0x270c <_Z14checkIncDec_hmaaa>
    791c:	88 83       	st	Y, r24
					lcd_outdezAtt (18 * FW, y, pgv->gvar, attr);
    791e:	48 81       	ld	r20, Y
    7920:	55 27       	eor	r21, r21
    7922:	47 fd       	sbrc	r20, 7
    7924:	50 95       	com	r21
    7926:	20 2f       	mov	r18, r16
    7928:	61 2f       	mov	r22, r17
    792a:	8c e6       	ldi	r24, 0x6C	; 108
    792c:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
    7930:	ca cf       	rjmp	.-108    	; 0x78c6 <_Z15menuProcGlobalsh+0xa4>
#endif
			y += FH;
		}
#ifdef SCALERS
	} else {
		uint8_t sub = subN - 7;
    7932:	89 ef       	ldi	r24, 0xF9	; 249
    7934:	c8 0e       	add	r12, r24
    7936:	04 e6       	ldi	r16, 0x64	; 100
    7938:	15 e0       	ldi	r17, 0x05	; 5
    793a:	21 e3       	ldi	r18, 0x31	; 49
    793c:	e2 2e       	mov	r14, r18
    793e:	38 e0       	ldi	r19, 0x08	; 8
    7940:	f3 2e       	mov	r15, r19
		for (uint8_t i = 0; i < NUM_SCALERS; i++) {
			lcd_puts_Pleft ( (i + 1) * FH, PSTR("SC\011+\015*\22/"));
    7942:	6e ed       	ldi	r22, 0xDE	; 222
    7944:	7a e1       	ldi	r23, 0x1A	; 26
    7946:	8f 2d       	mov	r24, r15
    7948:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
			lcd_putc (2 * FW, (i + 1) * FH, i + '1');
    794c:	4e 2d       	mov	r20, r14
    794e:	6f 2d       	mov	r22, r15
    7950:	8c e0       	ldi	r24, 0x0C	; 12
    7952:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <_Z8lcd_putchhc>
			ScaleData *pscaler;
			pscaler = &g_model.Scalers[i];
			FORCE_INDIRECT(pscaler);
    7956:	e8 01       	movw	r28, r16

			putsChnRaw (4 * FW, (i + 1) * FH, pscaler->source, 0);
    7958:	20 e0       	ldi	r18, 0x00	; 0
    795a:	48 81       	ld	r20, Y
    795c:	6f 2d       	mov	r22, r15
    795e:	88 e1       	ldi	r24, 0x18	; 24
    7960:	0e 94 95 10 	call	0x212a	; 0x212a <_Z10putsChnRawhhhh>
			lcd_outdez (12 * FW + 3, (i + 1) * FH, pscaler->offset);
    7964:	49 81       	ldd	r20, Y+1	; 0x01
    7966:	5a 81       	ldd	r21, Y+2	; 0x02
    7968:	6f 2d       	mov	r22, r15
    796a:	8b e4       	ldi	r24, 0x4B	; 75
    796c:	0e 94 47 29 	call	0x528e	; 0x528e <_Z10lcd_outdezhhi>
			lcd_outdez (16 * FW, (i + 1) * FH, pscaler->mult + 1);
    7970:	4b 81       	ldd	r20, Y+3	; 0x03
    7972:	50 e0       	ldi	r21, 0x00	; 0
    7974:	4f 5f       	subi	r20, 0xFF	; 255
    7976:	5f 4f       	sbci	r21, 0xFF	; 255
    7978:	6f 2d       	mov	r22, r15
    797a:	80 e6       	ldi	r24, 0x60	; 96
    797c:	0e 94 47 29 	call	0x528e	; 0x528e <_Z10lcd_outdezhhi>
			lcd_outdez (21 * FW, (i + 1) * FH, pscaler->div + 1);
    7980:	4c 81       	ldd	r20, Y+4	; 0x04
    7982:	50 e0       	ldi	r21, 0x00	; 0
    7984:	4f 5f       	subi	r20, 0xFF	; 255
    7986:	5f 4f       	sbci	r21, 0xFF	; 255
    7988:	6f 2d       	mov	r22, r15
    798a:	8e e7       	ldi	r24, 0x7E	; 126
    798c:	0e 94 47 29 	call	0x528e	; 0x528e <_Z10lcd_outdezhhi>
    7990:	88 e0       	ldi	r24, 0x08	; 8
    7992:	f8 0e       	add	r15, r24
    7994:	e3 94       	inc	r14
    7996:	05 5f       	subi	r16, 0xF5	; 245
    7998:	1f 4f       	sbci	r17, 0xFF	; 255
			y += FH;
		}
#ifdef SCALERS
	} else {
		uint8_t sub = subN - 7;
		for (uint8_t i = 0; i < NUM_SCALERS; i++) {
    799a:	88 e2       	ldi	r24, 0x28	; 40
    799c:	f8 12       	cpse	r15, r24
    799e:	d1 cf       	rjmp	.-94     	; 0x7942 <_Z15menuProcGlobalsh+0x120>
			putsChnRaw (4 * FW, (i + 1) * FH, pscaler->source, 0);
			lcd_outdez (12 * FW + 3, (i + 1) * FH, pscaler->offset);
			lcd_outdez (16 * FW, (i + 1) * FH, pscaler->mult + 1);
			lcd_outdez (21 * FW, (i + 1) * FH, pscaler->div + 1);
		}
		lcd_char_inverse (0, (sub + 1) * FH, 126, 0);
    79a0:	6c 2d       	mov	r22, r12
    79a2:	66 0f       	add	r22, r22
    79a4:	66 0f       	add	r22, r22
    79a6:	66 0f       	add	r22, r22
    79a8:	68 5f       	subi	r22, 0xF8	; 248
    79aa:	20 e0       	ldi	r18, 0x00	; 0
    79ac:	4e e7       	ldi	r20, 0x7E	; 126
    79ae:	80 e0       	ldi	r24, 0x00	; 0
    79b0:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <_Z16lcd_char_inversehhhh>
	}
#endif
	asm("");
}
    79b4:	df 91       	pop	r29
    79b6:	cf 91       	pop	r28
    79b8:	1f 91       	pop	r17
    79ba:	0f 91       	pop	r16
    79bc:	ff 90       	pop	r15
    79be:	ef 90       	pop	r14
    79c0:	df 90       	pop	r13
    79c2:	cf 90       	pop	r12
    79c4:	bf 90       	pop	r11
    79c6:	af 90       	pop	r10
    79c8:	08 95       	ret
				uint8_t attr = ( (subN == i && subSub == j) ? InverseBlink : 0);
				uint8_t active = attr;	// (attr && s_editing) ;
				if (s_editMode == 0) {
					active = 0;
				}
				if (j == 0) {
    79ca:	d1 10       	cpse	r13, r1
    79cc:	a8 cf       	rjmp	.-176    	; 0x791e <_Z15menuProcGlobalsh+0xfc>
    79ce:	72 cf       	rjmp	.-284    	; 0x78b4 <_Z15menuProcGlobalsh+0x92>

000079d0 <_Z8telltalehaa>:
#define LBOX_CENTERX  (  SCREEN_WIDTH/4 + 10)
#define BOX_CENTERY  (SCREEN_HEIGHT-9-BOX_WIDTH/2)
#define RBOX_CENTERX  (3*SCREEN_WIDTH/4 - 10)
//#define BOX_CENTERY  (SCREEN_HEIGHT-9-BOX_WIDTH/2)

void telltale (uint8_t centrex, int8_t xval, int8_t yval) {
    79d0:	1f 93       	push	r17
    79d2:	cf 93       	push	r28
    79d4:	df 93       	push	r29
    79d6:	c8 2f       	mov	r28, r24
    79d8:	d6 2f       	mov	r29, r22
    79da:	14 2f       	mov	r17, r20
	DO_SQUARE (centrex, BOX_CENTERY, BOX_WIDTH);
    79dc:	47 e1       	ldi	r20, 0x17	; 23
    79de:	6c e2       	ldi	r22, 0x2C	; 44
    79e0:	06 dc       	rcall	.-2036   	; 0x71ee <_Z9DO_SQUAREhhh>
	DO_CROSS(centrex, BOX_CENTERY, 3);
    79e2:	43 e0       	ldi	r20, 0x03	; 3
    79e4:	6b e2       	ldi	r22, 0x2B	; 43
    79e6:	8c 2f       	mov	r24, r28
    79e8:	0e 94 d5 27 	call	0x4faa	; 0x4faa <_Z9lcd_vlinehha>
    79ec:	43 e0       	ldi	r20, 0x03	; 3
    79ee:	6c e2       	ldi	r22, 0x2C	; 44
    79f0:	8f ef       	ldi	r24, 0xFF	; 255
    79f2:	8c 0f       	add	r24, r28
    79f4:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <_Z9lcd_hlinehha>
	DO_SQUARE (centrex + (xval / ( (2 * RESX / 16) / BOX_LIMIT)),
	BOX_CENTERY - (yval / ( (2 * RESX / 16) / BOX_LIMIT)), MARKER_WIDTH);
    79f8:	81 2f       	mov	r24, r17
    79fa:	69 ef       	ldi	r22, 0xF9	; 249
    79fc:	0e 94 c9 71 	call	0xe392	; 0xe392 <__divmodqi4>
    7a00:	28 2f       	mov	r18, r24
    7a02:	24 5d       	subi	r18, 0xD4	; 212
    7a04:	8d 2f       	mov	r24, r29
    7a06:	67 e0       	ldi	r22, 0x07	; 7
    7a08:	0e 94 c9 71 	call	0xe392	; 0xe392 <__divmodqi4>
    7a0c:	45 e0       	ldi	r20, 0x05	; 5
    7a0e:	62 2f       	mov	r22, r18
    7a10:	8c 0f       	add	r24, r28
}
    7a12:	df 91       	pop	r29
    7a14:	cf 91       	pop	r28
    7a16:	1f 91       	pop	r17

void telltale (uint8_t centrex, int8_t xval, int8_t yval) {
	DO_SQUARE (centrex, BOX_CENTERY, BOX_WIDTH);
	DO_CROSS(centrex, BOX_CENTERY, 3);
	DO_SQUARE (centrex + (xval / ( (2 * RESX / 16) / BOX_LIMIT)),
	BOX_CENTERY - (yval / ( (2 * RESX / 16) / BOX_LIMIT)), MARKER_WIDTH);
    7a18:	ea cb       	rjmp	.-2092   	; 0x71ee <_Z9DO_SQUAREhhh>

00007a1a <_Z19doMainScreenGrphicsv>:
}

void doMainScreenGrphics () {
    7a1a:	cf 92       	push	r12
    7a1c:	df 92       	push	r13
    7a1e:	ef 92       	push	r14
    7a20:	ff 92       	push	r15
    7a22:	0f 93       	push	r16
    7a24:	1f 93       	push	r17
    7a26:	cf 93       	push	r28
    7a28:	df 93       	push	r29
	{
		int8_t *cs = phyStick;
		FORCE_INDIRECT(cs);
    7a2a:	c5 ed       	ldi	r28, 0xD5	; 213
    7a2c:	dd e0       	ldi	r29, 0x0D	; 13

		telltale ( LBOX_CENTERX, cs[0], cs[1]);
    7a2e:	49 81       	ldd	r20, Y+1	; 0x01
    7a30:	68 81       	ld	r22, Y
    7a32:	8a e2       	ldi	r24, 0x2A	; 42
    7a34:	cd df       	rcall	.-102    	; 0x79d0 <_Z8telltalehaa>
		telltale ( RBOX_CENTERX, cs[3], cs[2]);
    7a36:	4a 81       	ldd	r20, Y+2	; 0x02
    7a38:	6b 81       	ldd	r22, Y+3	; 0x03
    7a3a:	86 e5       	ldi	r24, 0x56	; 86
    7a3c:	c9 df       	rcall	.-110    	; 0x79d0 <_Z8telltalehaa>
	}

	// Optimization by Mike Blandford
	int16_t *cs = calibratedStick;
	FORCE_INDIRECT(cs);
    7a3e:	c7 ec       	ldi	r28, 0xC7	; 199
    7a40:	dd e0       	ldi	r29, 0x0D	; 13
    7a42:	28 96       	adiw	r28, 0x08	; 8
    7a44:	5a e3       	ldi	r21, 0x3A	; 58
    7a46:	f5 2e       	mov	r15, r21
	{
		uint8_t x, y, len;			// declare temporary variables
		for (x = -5, y = 4; y < 7; x += 5, y += 1) {
			len = ( (cs[y] + RESX) / ( (RESX * 2) / BAR_HEIGHT)) + 1;  // calculate once per loop
    7a48:	0d e5       	ldi	r16, 0x5D	; 93
    7a4a:	10 e0       	ldi	r17, 0x00	; 0
			V_BAR(SCREEN_WIDTH/2+x, SCREEN_HEIGHT-8, len);
    7a4c:	67 e3       	ldi	r22, 0x37	; 55
    7a4e:	c6 2e       	mov	r12, r22
	int16_t *cs = calibratedStick;
	FORCE_INDIRECT(cs);
	{
		uint8_t x, y, len;			// declare temporary variables
		for (x = -5, y = 4; y < 7; x += 5, y += 1) {
			len = ( (cs[y] + RESX) / ( (RESX * 2) / BAR_HEIGHT)) + 1;  // calculate once per loop
    7a50:	89 91       	ld	r24, Y+
    7a52:	99 91       	ld	r25, Y+
    7a54:	9c 5f       	subi	r25, 0xFC	; 252
    7a56:	b8 01       	movw	r22, r16
    7a58:	0e 94 ea 71 	call	0xe3d4	; 0xe3d4 <__divmodhi4>
    7a5c:	dd 24       	eor	r13, r13
    7a5e:	d3 94       	inc	r13
    7a60:	d6 0e       	add	r13, r22
			V_BAR(SCREEN_WIDTH/2+x, SCREEN_HEIGHT-8, len);
    7a62:	ec 2c       	mov	r14, r12
    7a64:	e6 1a       	sub	r14, r22
    7a66:	4d 2d       	mov	r20, r13
    7a68:	6e 2d       	mov	r22, r14
    7a6a:	8f 2d       	mov	r24, r15
    7a6c:	0e 94 d5 27 	call	0x4faa	; 0x4faa <_Z9lcd_vlinehha>
    7a70:	4d 2d       	mov	r20, r13
    7a72:	6e 2d       	mov	r22, r14
    7a74:	81 e0       	ldi	r24, 0x01	; 1
    7a76:	8f 0d       	add	r24, r15
    7a78:	0e 94 d5 27 	call	0x4faa	; 0x4faa <_Z9lcd_vlinehha>
    7a7c:	4d 2d       	mov	r20, r13
    7a7e:	6e 2d       	mov	r22, r14
    7a80:	82 e0       	ldi	r24, 0x02	; 2
    7a82:	8f 0d       	add	r24, r15
    7a84:	0e 94 d5 27 	call	0x4faa	; 0x4faa <_Z9lcd_vlinehha>
    7a88:	85 e0       	ldi	r24, 0x05	; 5
    7a8a:	f8 0e       	add	r15, r24
	// Optimization by Mike Blandford
	int16_t *cs = calibratedStick;
	FORCE_INDIRECT(cs);
	{
		uint8_t x, y, len;			// declare temporary variables
		for (x = -5, y = 4; y < 7; x += 5, y += 1) {
    7a8c:	89 e4       	ldi	r24, 0x49	; 73
    7a8e:	f8 12       	cpse	r15, r24
    7a90:	df cf       	rjmp	.-66     	; 0x7a50 <_Z19doMainScreenGrphicsv+0x36>
			len = ( (cs[y] + RESX) / ( (RESX * 2) / BAR_HEIGHT)) + 1;  // calculate once per loop
			V_BAR(SCREEN_WIDTH/2+x, SCREEN_HEIGHT-8, len);
		}
	}
}
    7a92:	df 91       	pop	r29
    7a94:	cf 91       	pop	r28
    7a96:	1f 91       	pop	r17
    7a98:	0f 91       	pop	r16
    7a9a:	ff 90       	pop	r15
    7a9c:	ef 90       	pop	r14
    7a9e:	df 90       	pop	r13
    7aa0:	cf 90       	pop	r12
    7aa2:	08 95       	ret

00007aa4 <_Z17hyphinvMenuItem_mhhh>:

static uint8_t onoffMenuItem_m (uint8_t value, uint8_t y, const prog_char *s, uint8_t condition) {
	return onoffMenuItem (value, y, s, condition, EE_MODEL);
}

uint8_t hyphinvMenuItem_m (uint8_t value, uint8_t y, uint8_t condition) {
    7aa4:	cf 93       	push	r28
    7aa6:	df 93       	push	r29
    7aa8:	c8 2f       	mov	r28, r24
    7aaa:	d4 2f       	mov	r29, r20
	menu_lcd_HYPHINV ( PARAM_OFS, y, value, condition);
    7aac:	24 2f       	mov	r18, r20
    7aae:	48 2f       	mov	r20, r24
    7ab0:	86 e6       	ldi	r24, 0x66	; 102
    7ab2:	b3 dc       	rcall	.-1690   	; 0x741a <_Z16menu_lcd_HYPHINVhhhh>
	if (condition) value = checkIncDec (value, 0, 1, EE_MODEL);
    7ab4:	dd 23       	and	r29, r29
    7ab6:	41 f0       	breq	.+16     	; 0x7ac8 <_Z17hyphinvMenuItem_mhhh+0x24>
    7ab8:	22 e0       	ldi	r18, 0x02	; 2
    7aba:	41 e0       	ldi	r20, 0x01	; 1
    7abc:	60 e0       	ldi	r22, 0x00	; 0
    7abe:	8c 2f       	mov	r24, r28
	return value;
}
    7ac0:	df 91       	pop	r29
    7ac2:	cf 91       	pop	r28
	return onoffMenuItem (value, y, s, condition, EE_MODEL);
}

uint8_t hyphinvMenuItem_m (uint8_t value, uint8_t y, uint8_t condition) {
	menu_lcd_HYPHINV ( PARAM_OFS, y, value, condition);
	if (condition) value = checkIncDec (value, 0, 1, EE_MODEL);
    7ac4:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <_Z11checkIncDecaaah>
	return value;
}
    7ac8:	8c 2f       	mov	r24, r28
    7aca:	df 91       	pop	r29
    7acc:	cf 91       	pop	r28
    7ace:	08 95       	ret

00007ad0 <_Z11displayNextv>:

void displayNext () {
	lcd_puts_P (15 * FW, 7 * FH, PSTR("[More]"));
    7ad0:	46 e6       	ldi	r20, 0x66	; 102
    7ad2:	5b e1       	ldi	r21, 0x1B	; 27
    7ad4:	68 e3       	ldi	r22, 0x38	; 56
    7ad6:	8a e5       	ldi	r24, 0x5A	; 90
    7ad8:	0c 94 35 27 	jmp	0x4e6a	; 0x4e6a <_Z10lcd_puts_PhhPKc>

00007adc <_Z16menuProcVoiceOneh>:

#endif

#ifdef VOICE_ALARMS
// FUnctions need to include ON, OFF and BOTH possibly
void menuProcVoiceOne (uint8_t event) {
    7adc:	cf 92       	push	r12
    7ade:	df 92       	push	r13
    7ae0:	ef 92       	push	r14
    7ae2:	ff 92       	push	r15
    7ae4:	0f 93       	push	r16
    7ae6:	1f 93       	push	r17
    7ae8:	cf 93       	push	r28
    7aea:	df 93       	push	r29
    7aec:	d8 2e       	mov	r13, r24
//	static const prog_uint8_t *Columns = &ProgColumns[COLUMNS_0] ;
	TITLEP (PSTR("Voice Alarm"));
    7aee:	8c ef       	ldi	r24, 0xFC	; 252
    7af0:	95 e1       	ldi	r25, 0x15	; 21
    7af2:	b3 db       	rcall	.-2202   	; 0x725a <_Z6TITLEPPKc>
	lcd_outdez (13 * FW, 0, s_currIdx + 1);
    7af4:	40 91 58 0e 	lds	r20, 0x0E58
    7af8:	50 e0       	ldi	r21, 0x00	; 0
    7afa:	4f 5f       	subi	r20, 0xFF	; 255
    7afc:	5f 4f       	sbci	r21, 0xFF	; 255
    7afe:	60 e0       	ldi	r22, 0x00	; 0
    7b00:	8e e4       	ldi	r24, 0x4E	; 78
    7b02:	0e 94 47 29 	call	0x528e	; 0x528e <_Z10lcd_outdezhhi>
	static MState2 mstate2;
	VoiceAlarmData *pvad = &g_model.vad[s_currIdx];
    7b06:	c0 91 58 0e 	lds	r28, 0x0E58
    7b0a:	89 e0       	ldi	r24, 0x09	; 9
    7b0c:	c8 9f       	mul	r28, r24
    7b0e:	e0 01       	movw	r28, r0
    7b10:	11 24       	eor	r1, r1
    7b12:	c6 56       	subi	r28, 0x66	; 102
    7b14:	da 4f       	sbci	r29, 0xFA	; 250
	uint8_t rows = pvad->fnameType ? 11 - 1 : 10 - 1;
    7b16:	8c 81       	ldd	r24, Y+4	; 0x04
    7b18:	87 70       	andi	r24, 0x07	; 7
    7b1a:	11 f0       	breq	.+4      	; 0x7b20 <_Z16menuProcVoiceOneh+0x44>
    7b1c:	0a e0       	ldi	r16, 0x0A	; 10
    7b1e:	01 c0       	rjmp	.+2      	; 0x7b22 <_Z16menuProcVoiceOneh+0x46>
    7b20:	09 e0       	ldi	r16, 0x09	; 9
	mstate2.check (event, Columns, 0, rows);
    7b22:	40 91 56 0e 	lds	r20, 0x0E56
    7b26:	50 91 57 0e 	lds	r21, 0x0E57
    7b2a:	20 e0       	ldi	r18, 0x00	; 0
    7b2c:	6d 2d       	mov	r22, r13
    7b2e:	8a e3       	ldi	r24, 0x3A	; 58
    7b30:	9e e0       	ldi	r25, 0x0E	; 14
    7b32:	a0 dc       	rcall	.-1728   	; 0x7474 <_ZN7MState25checkEhPKhhh>
//			copyFileName( (char *)pvad->file.name, SelectedVoiceFileName ) ;
//	    eeDirty(EE_MODEL) ;		// Save it
//		}
//	}

	int8_t sub = mstate2.m_posVert;
    7b34:	10 91 3a 0e 	lds	r17, 0x0E3A
//	if ( event == EVT_ENTRY )
//	{
//		RotaryState = ROTARY_MENU_UD ;
//	}

	if (sub < 6) {
    7b38:	16 30       	cpi	r17, 0x06	; 6
    7b3a:	1c f4       	brge	.+6      	; 0x7b42 <_Z16menuProcVoiceOneh+0x66>
		lcd_puts_Pleft ( FH,
				PSTR(
						"Source" "\037" "Function" "\037" "Value" "\037" "Switch" "\037" "Rate" "\037" "Haptic"));
    7b3c:	63 ed       	ldi	r22, 0xD3	; 211
    7b3e:	75 e1       	ldi	r23, 0x15	; 21
    7b40:	02 c0       	rjmp	.+4      	; 0x7b46 <_Z16menuProcVoiceOneh+0x6a>
	} else {
		lcd_puts_Pleft ( FH, PSTR("Play Source" "\037" "On no Telemetry" "\037" "FileType"));
    7b42:	6e ea       	ldi	r22, 0xAE	; 174
    7b44:	75 e1       	ldi	r23, 0x15	; 21
    7b46:	88 e0       	ldi	r24, 0x08	; 8
    7b48:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
	}

	uint8_t y = FH;
	uint8_t attr = 0;
	uint8_t blink = InverseBlink;
    7b4c:	f0 90 9f 0d 	lds	r15, 0x0D9F

	if (sub < 6) {
    7b50:	16 30       	cpi	r17, 0x06	; 6
    7b52:	0c f0       	brlt	.+2      	; 0x7b56 <_Z16menuProcVoiceOneh+0x7a>
    7b54:	bd c0       	rjmp	.+378    	; 0x7cd0 <_Z16menuProcVoiceOneh+0x1f4>
		uint8_t subN = 0;
		displayNext ();
    7b56:	bc df       	rcall	.-136    	; 0x7ad0 <_Z11displayNextv>

		if (sub == subN) {
    7b58:	11 11       	cpse	r17, r1
    7b5a:	07 c0       	rjmp	.+14     	; 0x7b6a <_Z16menuProcVoiceOneh+0x8e>
			attr = blink;
			CHECK_INCDEC_H_MODELVAR_0(pvad->source, NUM_XCHNRAW+NUM_TELEM_ITEMS);
    7b5c:	6e e2       	ldi	r22, 0x2E	; 46
    7b5e:	88 81       	ld	r24, Y
    7b60:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    7b64:	88 83       	st	Y, r24
	if (sub < 6) {
		uint8_t subN = 0;
		displayNext ();

		if (sub == subN) {
			attr = blink;
    7b66:	2f 2d       	mov	r18, r15
    7b68:	01 c0       	rjmp	.+2      	; 0x7b6c <_Z16menuProcVoiceOneh+0x90>
	} else {
		lcd_puts_Pleft ( FH, PSTR("Play Source" "\037" "On no Telemetry" "\037" "FileType"));
	}

	uint8_t y = FH;
	uint8_t attr = 0;
    7b6a:	20 e0       	ldi	r18, 0x00	; 0

		if (sub == subN) {
			attr = blink;
			CHECK_INCDEC_H_MODELVAR_0(pvad->source, NUM_XCHNRAW+NUM_TELEM_ITEMS);
		}
		putsChnRaw (16 * FW, y, pvad->source, attr);
    7b6c:	48 81       	ld	r20, Y
    7b6e:	68 e0       	ldi	r22, 0x08	; 8
    7b70:	80 e6       	ldi	r24, 0x60	; 96
    7b72:	0e 94 95 10 	call	0x212a	; 0x212a <_Z10putsChnRawhhhh>
		if (pvad->source) {
    7b76:	88 81       	ld	r24, Y
    7b78:	88 23       	and	r24, r24
    7b7a:	d1 f0       	breq	.+52     	; 0x7bb0 <_Z16menuProcVoiceOneh+0xd4>
			int16_t value;
			value = getValue (pvad->source - 1);
    7b7c:	81 50       	subi	r24, 0x01	; 1
    7b7e:	0e 94 65 11 	call	0x22ca	; 0x22ca <_Z8getValueh>
    7b82:	6c 01       	movw	r12, r24
			lcd_puts_Pleft ( FH, PSTR("\007(\015)"));
    7b84:	69 ea       	ldi	r22, 0xA9	; 169
    7b86:	75 e1       	ldi	r23, 0x15	; 21
    7b88:	88 e0       	ldi	r24, 0x08	; 8
    7b8a:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
			if (pvad->source > CHOUT_BASE + NUM_CHNOUT) {
    7b8e:	48 81       	ld	r20, Y
    7b90:	45 32       	cpi	r20, 0x25	; 37
    7b92:	48 f0       	brcs	.+18     	; 0x7ba6 <_Z16menuProcVoiceOneh+0xca>
				putsTelemetryChannel (12 * FW, FH, pvad->source - CHOUT_BASE - NUM_CHNOUT - 1,
						value, 0, /*TELEM_NOTIME_UNIT |*/TELEM_UNIT);
    7b94:	45 52       	subi	r20, 0x25	; 37
    7b96:	a2 e0       	ldi	r26, 0x02	; 2
    7b98:	ea 2e       	mov	r14, r26
    7b9a:	00 e0       	ldi	r16, 0x00	; 0
    7b9c:	96 01       	movw	r18, r12
    7b9e:	68 e0       	ldi	r22, 0x08	; 8
    7ba0:	88 e4       	ldi	r24, 0x48	; 72
    7ba2:	ec d9       	rcall	.-3112   	; 0x6f7c <_Z20putsTelemetryChannelhhaihh>
    7ba4:	05 c0       	rjmp	.+10     	; 0x7bb0 <_Z16menuProcVoiceOneh+0xd4>
			} else {
				lcd_outdez (12 * FW, FH, value);
    7ba6:	a6 01       	movw	r20, r12
    7ba8:	68 e0       	ldi	r22, 0x08	; 8
    7baa:	88 e4       	ldi	r24, 0x48	; 72
    7bac:	0e 94 47 29 	call	0x528e	; 0x528e <_Z10lcd_outdezhhi>
		}
		y += FH;
		subN += 1;

		attr = 0;
		if (sub == subN) {
    7bb0:	11 30       	cpi	r17, 0x01	; 1
    7bb2:	39 f4       	brne	.+14     	; 0x7bc2 <_Z16menuProcVoiceOneh+0xe6>
			attr = blink;
			CHECK_INCDEC_H_MODELVAR_0(pvad->func, 6);
    7bb4:	66 e0       	ldi	r22, 0x06	; 6
    7bb6:	89 81       	ldd	r24, Y+1	; 0x01
    7bb8:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    7bbc:	89 83       	std	Y+1, r24	; 0x01
		y += FH;
		subN += 1;

		attr = 0;
		if (sub == subN) {
			attr = blink;
    7bbe:	0f 2d       	mov	r16, r15
    7bc0:	01 c0       	rjmp	.+2      	; 0x7bc4 <_Z16menuProcVoiceOneh+0xe8>
			}
		}
		y += FH;
		subN += 1;

		attr = 0;
    7bc2:	00 e0       	ldi	r16, 0x00	; 0
		if (sub == subN) {
			attr = blink;
			CHECK_INCDEC_H_MODELVAR_0(pvad->func, 6);
		}
		if (pvad->func < 5) {
    7bc4:	29 81       	ldd	r18, Y+1	; 0x01
    7bc6:	25 30       	cpi	r18, 0x05	; 5
    7bc8:	18 f4       	brcc	.+6      	; 0x7bd0 <_Z16menuProcVoiceOneh+0xf4>
			lcd_putsAttIdx (13 * FW, y, Str_Cswitch, pvad->func, attr);	// v1>v2  v1<v2
    7bca:	48 eb       	ldi	r20, 0xB8	; 184
    7bcc:	5d e1       	ldi	r21, 0x1D	; 29
    7bce:	03 c0       	rjmp	.+6      	; 0x7bd6 <_Z16menuProcVoiceOneh+0xfa>
		} else {
			lcd_putsAttIdx (13 * FW, y, PSTR("\007v\140=val v=val  "), pvad->func - 5, attr);// v1>v2  v1<v2
    7bd0:	25 50       	subi	r18, 0x05	; 5
    7bd2:	49 e9       	ldi	r20, 0x99	; 153
    7bd4:	55 e1       	ldi	r21, 0x15	; 21
    7bd6:	60 e1       	ldi	r22, 0x10	; 16
    7bd8:	8e e4       	ldi	r24, 0x4E	; 78
    7bda:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
		}
		y += FH;
		subN += 1;

		attr = 0;
		if (sub == subN) {
    7bde:	12 30       	cpi	r17, 0x02	; 2
    7be0:	81 f4       	brne	.+32     	; 0x7c02 <_Z16menuProcVoiceOneh+0x126>
			attr = blink;
			StepSize = 100;
    7be2:	84 e6       	ldi	r24, 0x64	; 100
    7be4:	80 93 6d 01 	sts	0x016D, r24
			pvad->offset = checkIncDec16 (pvad->offset, -32000, 32000, EE_MODEL);
    7be8:	22 e0       	ldi	r18, 0x02	; 2
    7bea:	40 e0       	ldi	r20, 0x00	; 0
    7bec:	5d e7       	ldi	r21, 0x7D	; 125
    7bee:	60 e0       	ldi	r22, 0x00	; 0
    7bf0:	73 e8       	ldi	r23, 0x83	; 131
    7bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    7bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    7bf6:	0e 94 b7 12 	call	0x256e	; 0x256e <_Z13checkIncDec16iiih>
    7bfa:	9e 83       	std	Y+6, r25	; 0x06
    7bfc:	8d 83       	std	Y+5, r24	; 0x05
		y += FH;
		subN += 1;

		attr = 0;
		if (sub == subN) {
			attr = blink;
    7bfe:	2f 2d       	mov	r18, r15
    7c00:	01 c0       	rjmp	.+2      	; 0x7c04 <_Z16menuProcVoiceOneh+0x128>
			lcd_putsAttIdx (13 * FW, y, PSTR("\007v\140=val v=val  "), pvad->func - 5, attr);// v1>v2  v1<v2
		}
		y += FH;
		subN += 1;

		attr = 0;
    7c02:	20 e0       	ldi	r18, 0x00	; 0
		if (sub == subN) {
			attr = blink;
			StepSize = 100;
			pvad->offset = checkIncDec16 (pvad->offset, -32000, 32000, EE_MODEL);
		}
		if (pvad->source > CHOUT_BASE + NUM_CHNOUT) {
    7c04:	48 81       	ld	r20, Y
    7c06:	8d 81       	ldd	r24, Y+5	; 0x05
    7c08:	9e 81       	ldd	r25, Y+6	; 0x06
    7c0a:	45 32       	cpi	r20, 0x25	; 37
    7c0c:	48 f0       	brcs	.+18     	; 0x7c20 <_Z16menuProcVoiceOneh+0x144>
			putsTelemetryChannel (20 * FW, y, pvad->source - CHOUT_BASE - NUM_CHNOUT - 1,
					pvad->offset, attr, /*TELEM_NOTIME_UNIT |*/TELEM_UNIT | TELEM_CONSTANT);
    7c0e:	45 52       	subi	r20, 0x25	; 37
    7c10:	f2 e8       	ldi	r31, 0x82	; 130
    7c12:	ef 2e       	mov	r14, r31
    7c14:	02 2f       	mov	r16, r18
    7c16:	9c 01       	movw	r18, r24
    7c18:	68 e1       	ldi	r22, 0x18	; 24
    7c1a:	88 e7       	ldi	r24, 0x78	; 120
    7c1c:	af d9       	rcall	.-3234   	; 0x6f7c <_Z20putsTelemetryChannelhhaihh>
    7c1e:	05 c0       	rjmp	.+10     	; 0x7c2a <_Z16menuProcVoiceOneh+0x14e>
		} else {
			lcd_outdezAtt ( FW * 20, y, pvad->offset, attr);
    7c20:	ac 01       	movw	r20, r24
    7c22:	68 e1       	ldi	r22, 0x18	; 24
    7c24:	88 e7       	ldi	r24, 0x78	; 120
    7c26:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
		}
		y += FH;
		subN += 1;

		attr = 0;
		if (sub == subN) {
    7c2a:	13 30       	cpi	r17, 0x03	; 3
    7c2c:	41 f4       	brne	.+16     	; 0x7c3e <_Z16menuProcVoiceOneh+0x162>
			attr = blink;
			CHECK_INCDEC_MODELSWITCH(pvad->swtch, -MAX_DRSWITCH, MAX_DRSWITCH);
    7c2e:	46 e1       	ldi	r20, 0x16	; 22
    7c30:	6a ee       	ldi	r22, 0xEA	; 234
    7c32:	8a 81       	ldd	r24, Y+2	; 0x02
    7c34:	0e 94 86 13 	call	0x270c	; 0x270c <_Z14checkIncDec_hmaaa>
    7c38:	8a 83       	std	Y+2, r24	; 0x02
		y += FH;
		subN += 1;

		attr = 0;
		if (sub == subN) {
			attr = blink;
    7c3a:	2f 2d       	mov	r18, r15
    7c3c:	01 c0       	rjmp	.+2      	; 0x7c40 <_Z16menuProcVoiceOneh+0x164>
			lcd_outdezAtt ( FW * 20, y, pvad->offset, attr);
		}
		y += FH;
		subN += 1;

		attr = 0;
    7c3e:	20 e0       	ldi	r18, 0x00	; 0
		if (sub == subN) {
			attr = blink;
			CHECK_INCDEC_MODELSWITCH(pvad->swtch, -MAX_DRSWITCH, MAX_DRSWITCH);
		}
		putsDrSwitches (16 * FW, y, pvad->swtch, attr);
    7c40:	4a 81       	ldd	r20, Y+2	; 0x02
    7c42:	60 e2       	ldi	r22, 0x20	; 32
    7c44:	80 e6       	ldi	r24, 0x60	; 96
    7c46:	0e 94 c9 10 	call	0x2192	; 0x2192 <_Z14putsDrSwitcheshhah>
		y += FH;
		subN += 1;

		attr = 0;
		if (sub == subN) {
    7c4a:	14 30       	cpi	r17, 0x04	; 4
    7c4c:	39 f4       	brne	.+14     	; 0x7c5c <_Z16menuProcVoiceOneh+0x180>
			attr = blink;
			CHECK_INCDEC_H_MODELVAR_0(pvad->rate, 32);
    7c4e:	60 e2       	ldi	r22, 0x20	; 32
    7c50:	8b 81       	ldd	r24, Y+3	; 0x03
    7c52:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    7c56:	8b 83       	std	Y+3, r24	; 0x03
		y += FH;
		subN += 1;

		attr = 0;
		if (sub == subN) {
			attr = blink;
    7c58:	2f 2d       	mov	r18, r15
    7c5a:	01 c0       	rjmp	.+2      	; 0x7c5e <_Z16menuProcVoiceOneh+0x182>
		}
		putsDrSwitches (16 * FW, y, pvad->swtch, attr);
		y += FH;
		subN += 1;

		attr = 0;
    7c5c:	20 e0       	ldi	r18, 0x00	; 0
		if (sub == subN) {
			attr = blink;
			CHECK_INCDEC_H_MODELVAR_0(pvad->rate, 32);
		}
		if (pvad->rate < 3) {
    7c5e:	4b 81       	ldd	r20, Y+3	; 0x03
    7c60:	43 30       	cpi	r20, 0x03	; 3
    7c62:	48 f4       	brcc	.+18     	; 0x7c76 <_Z16menuProcVoiceOneh+0x19a>
			lcd_putsAttIdx (16 * FW, y, Str_On_Off_Both, pvad->rate, attr);
    7c64:	02 2f       	mov	r16, r18
    7c66:	24 2f       	mov	r18, r20
    7c68:	4a ea       	ldi	r20, 0xAA	; 170
    7c6a:	5d e1       	ldi	r21, 0x1D	; 29
    7c6c:	68 e2       	ldi	r22, 0x28	; 40
    7c6e:	80 e6       	ldi	r24, 0x60	; 96
    7c70:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
    7c74:	07 c0       	rjmp	.+14     	; 0x7c84 <_Z16menuProcVoiceOneh+0x1a8>
		} else {
			lcd_outdezAtt (FW * 18, y, pvad->rate - 2, attr);
    7c76:	50 e0       	ldi	r21, 0x00	; 0
    7c78:	42 50       	subi	r20, 0x02	; 2
    7c7a:	51 09       	sbc	r21, r1
    7c7c:	68 e2       	ldi	r22, 0x28	; 40
    7c7e:	8c e6       	ldi	r24, 0x6C	; 108
    7c80:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
		}
		y += FH;
		subN += 1;

		uint8_t b = pvad->haptic;
    7c84:	8c 81       	ldd	r24, Y+4	; 0x04
    7c86:	86 95       	lsr	r24
    7c88:	86 95       	lsr	r24
    7c8a:	86 95       	lsr	r24
    7c8c:	83 70       	andi	r24, 0x03	; 3
		attr = 0;
		if (sub == subN) {
    7c8e:	15 30       	cpi	r17, 0x05	; 5
    7c90:	69 f4       	brne	.+26     	; 0x7cac <_Z16menuProcVoiceOneh+0x1d0>
			attr = blink;
			CHECK_INCDEC_H_MODELVAR_0(b, 3);
    7c92:	63 e0       	ldi	r22, 0x03	; 3
    7c94:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
			pvad->haptic = b;
    7c98:	28 2f       	mov	r18, r24
    7c9a:	23 70       	andi	r18, 0x03	; 3
    7c9c:	22 0f       	add	r18, r18
    7c9e:	22 0f       	add	r18, r18
    7ca0:	22 0f       	add	r18, r18
    7ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    7ca4:	97 7e       	andi	r25, 0xE7	; 231
    7ca6:	92 2b       	or	r25, r18
    7ca8:	9c 83       	std	Y+4, r25	; 0x04
    7caa:	01 c0       	rjmp	.+2      	; 0x7cae <_Z16menuProcVoiceOneh+0x1d2>
		}
		y += FH;
		subN += 1;

		uint8_t b = pvad->haptic;
		attr = 0;
    7cac:	f1 2c       	mov	r15, r1
		if (sub == subN) {
			attr = blink;
			CHECK_INCDEC_H_MODELVAR_0(b, 3);
			pvad->haptic = b;
		}
		lcd_putsAttIdx (13 * FW, y, PSTR("\007-------Haptic1Haptic2Haptic3"), b, attr);
    7cae:	0f 2d       	mov	r16, r15
    7cb0:	28 2f       	mov	r18, r24
    7cb2:	4b e7       	ldi	r20, 0x7B	; 123
    7cb4:	55 e1       	ldi	r21, 0x15	; 21
    7cb6:	60 e3       	ldi	r22, 0x30	; 48
    7cb8:	8e e4       	ldi	r24, 0x4E	; 78
    7cba:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
				}
			}
		}
		lcd_putsAtt (12 * FW, y, PSTR("MENU LONG"), attr);
	}
}
    7cbe:	df 91       	pop	r29
    7cc0:	cf 91       	pop	r28
    7cc2:	1f 91       	pop	r17
    7cc4:	0f 91       	pop	r16
    7cc6:	ff 90       	pop	r15
    7cc8:	ef 90       	pop	r14
    7cca:	df 90       	pop	r13
    7ccc:	cf 90       	pop	r12
    7cce:	08 95       	ret
			pvad->haptic = b;
		}
		lcd_putsAttIdx (13 * FW, y, PSTR("\007-------Haptic1Haptic2Haptic3"), b, attr);
	} else {
		uint8_t subN = 6;
		if (sub == subN) {
    7cd0:	16 30       	cpi	r17, 0x06	; 6
    7cd2:	91 f4       	brne	.+36     	; 0x7cf8 <_Z16menuProcVoiceOneh+0x21c>
			attr = blink;
			CHECK_INCDEC_H_MODELVAR_0(pvad->vsource, 2);
    7cd4:	8c 81       	ldd	r24, Y+4	; 0x04
    7cd6:	82 95       	swap	r24
    7cd8:	86 95       	lsr	r24
    7cda:	87 70       	andi	r24, 0x07	; 7
    7cdc:	62 e0       	ldi	r22, 0x02	; 2
    7cde:	83 70       	andi	r24, 0x03	; 3
    7ce0:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    7ce4:	83 70       	andi	r24, 0x03	; 3
    7ce6:	82 95       	swap	r24
    7ce8:	88 0f       	add	r24, r24
    7cea:	80 7e       	andi	r24, 0xE0	; 224
    7cec:	9c 81       	ldd	r25, Y+4	; 0x04
    7cee:	9f 79       	andi	r25, 0x9F	; 159
    7cf0:	98 2b       	or	r25, r24
    7cf2:	9c 83       	std	Y+4, r25	; 0x04
		}
		lcd_putsAttIdx (13 * FW, y, PSTR("\007-------Haptic1Haptic2Haptic3"), b, attr);
	} else {
		uint8_t subN = 6;
		if (sub == subN) {
			attr = blink;
    7cf4:	0f 2d       	mov	r16, r15
    7cf6:	01 c0       	rjmp	.+2      	; 0x7cfa <_Z16menuProcVoiceOneh+0x21e>
	} else {
		lcd_puts_Pleft ( FH, PSTR("Play Source" "\037" "On no Telemetry" "\037" "FileType"));
	}

	uint8_t y = FH;
	uint8_t attr = 0;
    7cf8:	00 e0       	ldi	r16, 0x00	; 0
		uint8_t subN = 6;
		if (sub == subN) {
			attr = blink;
			CHECK_INCDEC_H_MODELVAR_0(pvad->vsource, 2);
		}
		lcd_putsAttIdx (14 * FW, y, PSTR("\006No    BeforeAfter "), pvad->vsource, attr);
    7cfa:	2c 81       	ldd	r18, Y+4	; 0x04
    7cfc:	22 95       	swap	r18
    7cfe:	26 95       	lsr	r18
    7d00:	23 70       	andi	r18, 0x03	; 3
    7d02:	47 e6       	ldi	r20, 0x67	; 103
    7d04:	55 e1       	ldi	r21, 0x15	; 21
    7d06:	68 e0       	ldi	r22, 0x08	; 8
    7d08:	84 e5       	ldi	r24, 0x54	; 84
    7d0a:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
		y += FH;
		subN += 1;

		attr = 0;
		if (sub == subN) {
    7d0e:	17 30       	cpi	r17, 0x07	; 7
    7d10:	69 f4       	brne	.+26     	; 0x7d2c <_Z16menuProcVoiceOneh+0x250>
			attr = blink;
			CHECK_INCDEC_H_MODELVAR_0(pvad->mute, 1);
    7d12:	8c 81       	ldd	r24, Y+4	; 0x04
    7d14:	87 fb       	bst	r24, 7
    7d16:	88 27       	eor	r24, r24
    7d18:	80 f9       	bld	r24, 0
    7d1a:	61 e0       	ldi	r22, 0x01	; 1
    7d1c:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    7d20:	9c 81       	ldd	r25, Y+4	; 0x04
    7d22:	80 fb       	bst	r24, 0
    7d24:	97 f9       	bld	r25, 7
    7d26:	9c 83       	std	Y+4, r25	; 0x04
		y += FH;
		subN += 1;

		attr = 0;
		if (sub == subN) {
			attr = blink;
    7d28:	0f 2d       	mov	r16, r15
    7d2a:	01 c0       	rjmp	.+2      	; 0x7d2e <_Z16menuProcVoiceOneh+0x252>
		}
		lcd_putsAttIdx (14 * FW, y, PSTR("\006No    BeforeAfter "), pvad->vsource, attr);
		y += FH;
		subN += 1;

		attr = 0;
    7d2c:	00 e0       	ldi	r16, 0x00	; 0
		if (sub == subN) {
			attr = blink;
			CHECK_INCDEC_H_MODELVAR_0(pvad->mute, 1);
		}
		lcd_putsAttIdx (17 * FW, y, PSTR("\004PlayMute"), pvad->mute, attr);
    7d2e:	2c 81       	ldd	r18, Y+4	; 0x04
    7d30:	27 fb       	bst	r18, 7
    7d32:	22 27       	eor	r18, r18
    7d34:	20 f9       	bld	r18, 0
    7d36:	4d e5       	ldi	r20, 0x5D	; 93
    7d38:	55 e1       	ldi	r21, 0x15	; 21
    7d3a:	60 e1       	ldi	r22, 0x10	; 16
    7d3c:	86 e6       	ldi	r24, 0x66	; 102
    7d3e:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
		y += FH;
		subN += 1;

		uint8_t previous = pvad->fnameType;
    7d42:	cc 80       	ldd	r12, Y+4	; 0x04
    7d44:	ec 2d       	mov	r30, r12
    7d46:	e7 70       	andi	r30, 0x07	; 7
    7d48:	ce 2e       	mov	r12, r30
		attr = 0;
		if (sub == subN) {
    7d4a:	18 30       	cpi	r17, 0x08	; 8
    7d4c:	59 f4       	brne	.+22     	; 0x7d64 <_Z16menuProcVoiceOneh+0x288>
			attr = blink;
			CHECK_INCDEC_H_MODELVAR_0(pvad->fnameType, 2);
    7d4e:	62 e0       	ldi	r22, 0x02	; 2
    7d50:	8e 2f       	mov	r24, r30
    7d52:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    7d56:	87 70       	andi	r24, 0x07	; 7
    7d58:	9c 81       	ldd	r25, Y+4	; 0x04
    7d5a:	98 7f       	andi	r25, 0xF8	; 248
    7d5c:	98 2b       	or	r25, r24
    7d5e:	9c 83       	std	Y+4, r25	; 0x04
		subN += 1;

		uint8_t previous = pvad->fnameType;
		attr = 0;
		if (sub == subN) {
			attr = blink;
    7d60:	0f 2d       	mov	r16, r15
    7d62:	01 c0       	rjmp	.+2      	; 0x7d66 <_Z16menuProcVoiceOneh+0x28a>
		lcd_putsAttIdx (17 * FW, y, PSTR("\004PlayMute"), pvad->mute, attr);
		y += FH;
		subN += 1;

		uint8_t previous = pvad->fnameType;
		attr = 0;
    7d64:	00 e0       	ldi	r16, 0x00	; 0
		if (sub == subN) {
			attr = blink;
			CHECK_INCDEC_H_MODELVAR_0(pvad->fnameType, 2);
		}
		lcd_putsAttIdx (14 * FW, y, PSTR("\006------Number Audio"), pvad->fnameType, attr);
    7d66:	2c 81       	ldd	r18, Y+4	; 0x04
    7d68:	27 70       	andi	r18, 0x07	; 7
    7d6a:	49 e4       	ldi	r20, 0x49	; 73
    7d6c:	55 e1       	ldi	r21, 0x15	; 21
    7d6e:	68 e1       	ldi	r22, 0x18	; 24
    7d70:	84 e5       	ldi	r24, 0x54	; 84
    7d72:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
		if (pvad->fnameType != previous) {
    7d76:	8c 81       	ldd	r24, Y+4	; 0x04
    7d78:	98 2f       	mov	r25, r24
    7d7a:	97 70       	andi	r25, 0x07	; 7
    7d7c:	9c 15       	cp	r25, r12
    7d7e:	11 f0       	breq	.+4      	; 0x7d84 <_Z16menuProcVoiceOneh+0x2a8>
			pvad->vfile = 0;
    7d80:	18 86       	std	Y+8, r1	; 0x08
    7d82:	1f 82       	std	Y+7, r1	; 0x07
		}
		y += FH;
		subN += 1;

		if (pvad->fnameType) {
    7d84:	87 70       	andi	r24, 0x07	; 7
    7d86:	09 f4       	brne	.+2      	; 0x7d8a <_Z16menuProcVoiceOneh+0x2ae>
    7d88:	42 c0       	rjmp	.+132    	; 0x7e0e <_Z16menuProcVoiceOneh+0x332>
			attr = 0;
			lcd_puts_Pleft (y, PSTR("Voice File"));
    7d8a:	6e e3       	ldi	r22, 0x3E	; 62
    7d8c:	75 e1       	ldi	r23, 0x15	; 21
    7d8e:	80 e2       	ldi	r24, 0x20	; 32
    7d90:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
			if (pvad->fnameType == 1)	// Name
    7d94:	8c 81       	ldd	r24, Y+4	; 0x04
    7d96:	87 70       	andi	r24, 0x07	; 7
    7d98:	81 30       	cpi	r24, 0x01	; 1
    7d9a:	f1 f4       	brne	.+60     	; 0x7dd8 <_Z16menuProcVoiceOneh+0x2fc>
					{
				if (sub == subN) {
    7d9c:	19 30       	cpi	r17, 0x09	; 9
    7d9e:	69 f4       	brne	.+26     	; 0x7dba <_Z16menuProcVoiceOneh+0x2de>
					attr = blink;
					pvad->vfile = checkIncDec16 (pvad->vfile, 0, 500, EE_MODEL);
    7da0:	22 e0       	ldi	r18, 0x02	; 2
    7da2:	44 ef       	ldi	r20, 0xF4	; 244
    7da4:	51 e0       	ldi	r21, 0x01	; 1
    7da6:	60 e0       	ldi	r22, 0x00	; 0
    7da8:	70 e0       	ldi	r23, 0x00	; 0
    7daa:	8f 81       	ldd	r24, Y+7	; 0x07
    7dac:	98 85       	ldd	r25, Y+8	; 0x08
    7dae:	0e 94 b7 12 	call	0x256e	; 0x256e <_Z13checkIncDec16iiih>
    7db2:	98 87       	std	Y+8, r25	; 0x08
    7db4:	8f 83       	std	Y+7, r24	; 0x07
			attr = 0;
			lcd_puts_Pleft (y, PSTR("Voice File"));
			if (pvad->fnameType == 1)	// Name
					{
				if (sub == subN) {
					attr = blink;
    7db6:	2f 2d       	mov	r18, r15
    7db8:	01 c0       	rjmp	.+2      	; 0x7dbc <_Z16menuProcVoiceOneh+0x2e0>
		}
		y += FH;
		subN += 1;

		if (pvad->fnameType) {
			attr = 0;
    7dba:	20 e0       	ldi	r18, 0x00	; 0
					{
				if (sub == subN) {
					attr = blink;
					pvad->vfile = checkIncDec16 (pvad->vfile, 0, 500, EE_MODEL);
				}
				lcd_outdezAtt (FW * 20, y, pvad->vfile, attr);
    7dbc:	4f 81       	ldd	r20, Y+7	; 0x07
    7dbe:	58 85       	ldd	r21, Y+8	; 0x08
    7dc0:	60 e2       	ldi	r22, 0x20	; 32
    7dc2:	88 e7       	ldi	r24, 0x78	; 120
    7dc4:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
				if (event == EVT_KEY_LONG(KEY_MENU)) {
    7dc8:	f0 e8       	ldi	r31, 0x80	; 128
    7dca:	df 12       	cpse	r13, r31
    7dcc:	1c c0       	rjmp	.+56     	; 0x7e06 <_Z16menuProcVoiceOneh+0x32a>
					putVoiceQueueLong (pvad->vfile);
    7dce:	8f 81       	ldd	r24, Y+7	; 0x07
    7dd0:	98 85       	ldd	r25, Y+8	; 0x08
    7dd2:	0e 94 c3 13 	call	0x2786	; 0x2786 <_Z17putVoiceQueueLongj>
    7dd6:	17 c0       	rjmp	.+46     	; 0x7e06 <_Z16menuProcVoiceOneh+0x32a>
				}
			} else if (pvad->fnameType == 2)	// Audio
    7dd8:	82 30       	cpi	r24, 0x02	; 2
    7dda:	a9 f4       	brne	.+42     	; 0x7e06 <_Z16menuProcVoiceOneh+0x32a>
					{
				if (sub == subN) {
    7ddc:	19 30       	cpi	r17, 0x09	; 9
    7dde:	59 f4       	brne	.+22     	; 0x7df6 <_Z16menuProcVoiceOneh+0x31a>
					attr = blink;
					uint8_t b;
					b = pvad->vfile;
					CHECK_INCDEC_H_MODELVAR(b, 0, 15);
    7de0:	4f e0       	ldi	r20, 0x0F	; 15
    7de2:	60 e0       	ldi	r22, 0x00	; 0
    7de4:	8f 81       	ldd	r24, Y+7	; 0x07
    7de6:	0e 94 86 13 	call	0x270c	; 0x270c <_Z14checkIncDec_hmaaa>
					pvad->vfile = b;
    7dea:	28 2f       	mov	r18, r24
    7dec:	30 e0       	ldi	r19, 0x00	; 0
    7dee:	38 87       	std	Y+8, r19	; 0x08
    7df0:	2f 83       	std	Y+7, r18	; 0x07
					putVoiceQueueLong (pvad->vfile);
				}
			} else if (pvad->fnameType == 2)	// Audio
					{
				if (sub == subN) {
					attr = blink;
    7df2:	0f 2d       	mov	r16, r15
    7df4:	01 c0       	rjmp	.+2      	; 0x7df8 <_Z16menuProcVoiceOneh+0x31c>
		}
		y += FH;
		subN += 1;

		if (pvad->fnameType) {
			attr = 0;
    7df6:	00 e0       	ldi	r16, 0x00	; 0
					uint8_t b;
					b = pvad->vfile;
					CHECK_INCDEC_H_MODELVAR(b, 0, 15);
					pvad->vfile = b;
				}
				lcd_putsAttIdx (15 * FW, y, Str_Sounds, pvad->vfile, attr);
    7df8:	2f 81       	ldd	r18, Y+7	; 0x07
    7dfa:	4a e2       	ldi	r20, 0x2A	; 42
    7dfc:	5e e1       	ldi	r21, 0x1E	; 30
    7dfe:	60 e2       	ldi	r22, 0x20	; 32
    7e00:	8a e5       	ldi	r24, 0x5A	; 90
    7e02:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
			}
			y += FH;
			subN += 1;
    7e06:	ea e0       	ldi	r30, 0x0A	; 10
    7e08:	ce 2e       	mov	r12, r30
					CHECK_INCDEC_H_MODELVAR(b, 0, 15);
					pvad->vfile = b;
				}
				lcd_putsAttIdx (15 * FW, y, Str_Sounds, pvad->vfile, attr);
			}
			y += FH;
    7e0a:	08 e2       	ldi	r16, 0x28	; 40
    7e0c:	03 c0       	rjmp	.+6      	; 0x7e14 <_Z16menuProcVoiceOneh+0x338>
		lcd_putsAttIdx (14 * FW, y, PSTR("\006------Number Audio"), pvad->fnameType, attr);
		if (pvad->fnameType != previous) {
			pvad->vfile = 0;
		}
		y += FH;
		subN += 1;
    7e0e:	79 e0       	ldi	r23, 0x09	; 9
    7e10:	c7 2e       	mov	r12, r23
		}
		lcd_putsAttIdx (14 * FW, y, PSTR("\006------Number Audio"), pvad->fnameType, attr);
		if (pvad->fnameType != previous) {
			pvad->vfile = 0;
		}
		y += FH;
    7e12:	00 e2       	ldi	r16, 0x20	; 32
			}
			y += FH;
			subN += 1;
		}

		lcd_puts_Pleft (y, PSTR("Delete"));
    7e14:	67 e3       	ldi	r22, 0x37	; 55
    7e16:	75 e1       	ldi	r23, 0x15	; 21
    7e18:	80 2f       	mov	r24, r16
    7e1a:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
		attr = 0;
		if (sub == subN) {
    7e1e:	4c 2d       	mov	r20, r12
    7e20:	50 e0       	ldi	r21, 0x00	; 0
    7e22:	e1 2f       	mov	r30, r17
    7e24:	ff 27       	eor	r31, r31
    7e26:	e7 fd       	sbrc	r30, 7
    7e28:	f0 95       	com	r31
    7e2a:	e4 17       	cp	r30, r20
    7e2c:	f5 07       	cpc	r31, r21
    7e2e:	81 f4       	brne	.+32     	; 0x7e50 <_Z16menuProcVoiceOneh+0x374>
			attr = blink;
			if (event == EVT_KEY_LONG(KEY_MENU)) {
    7e30:	80 e8       	ldi	r24, 0x80	; 128
    7e32:	d8 12       	cpse	r13, r24
    7e34:	0e c0       	rjmp	.+28     	; 0x7e52 <_Z16menuProcVoiceOneh+0x376>
				memset (pvad, 0, sizeof(VoiceAlarmData));
    7e36:	89 e0       	ldi	r24, 0x09	; 9
    7e38:	fe 01       	movw	r30, r28
    7e3a:	11 92       	st	Z+, r1
    7e3c:	8a 95       	dec	r24
    7e3e:	e9 f7       	brne	.-6      	; 0x7e3a <_Z16menuProcVoiceOneh+0x35e>
				s_editMode = 0;
    7e40:	10 92 a5 0d 	sts	0x0DA5, r1
				if (sub == 10) {
    7e44:	1a 30       	cpi	r17, 0x0A	; 10
    7e46:	29 f4       	brne	.+10     	; 0x7e52 <_Z16menuProcVoiceOneh+0x376>
					mstate2.m_posVert = 8;
    7e48:	88 e0       	ldi	r24, 0x08	; 8
    7e4a:	80 93 3a 0e 	sts	0x0E3A, r24
    7e4e:	01 c0       	rjmp	.+2      	; 0x7e52 <_Z16menuProcVoiceOneh+0x376>
			y += FH;
			subN += 1;
		}

		lcd_puts_Pleft (y, PSTR("Delete"));
		attr = 0;
    7e50:	f1 2c       	mov	r15, r1
				if (sub == 10) {
					mstate2.m_posVert = 8;
				}
			}
		}
		lcd_putsAtt (12 * FW, y, PSTR("MENU LONG"), attr);
    7e52:	2f 2d       	mov	r18, r15
    7e54:	4d e2       	ldi	r20, 0x2D	; 45
    7e56:	55 e1       	ldi	r21, 0x15	; 21
    7e58:	60 2f       	mov	r22, r16
    7e5a:	88 e4       	ldi	r24, 0x48	; 72
	}
}
    7e5c:	df 91       	pop	r29
    7e5e:	cf 91       	pop	r28
    7e60:	1f 91       	pop	r17
    7e62:	0f 91       	pop	r16
    7e64:	ff 90       	pop	r15
    7e66:	ef 90       	pop	r14
    7e68:	df 90       	pop	r13
    7e6a:	cf 90       	pop	r12
				if (sub == 10) {
					mstate2.m_posVert = 8;
				}
			}
		}
		lcd_putsAtt (12 * FW, y, PSTR("MENU LONG"), attr);
    7e6c:	0c 94 fa 26 	jmp	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>

00007e70 <_Z9put_curvehhah>:

}

#endif

void put_curve (uint8_t x, uint8_t y, int8_t idx, uint8_t attr) {
    7e70:	0f 93       	push	r16
    7e72:	1f 93       	push	r17
    7e74:	cf 93       	push	r28
    7e76:	df 93       	push	r29
    7e78:	d8 2f       	mov	r29, r24
    7e7a:	16 2f       	mov	r17, r22
    7e7c:	c4 2f       	mov	r28, r20
    7e7e:	02 2f       	mov	r16, r18
	if (idx < 0) {
    7e80:	47 ff       	sbrs	r20, 7
    7e82:	08 c0       	rjmp	.+16     	; 0x7e94 <_Z9put_curvehhah+0x24>
		lcd_putcAtt (x - FW, y, '!', attr);
    7e84:	41 e2       	ldi	r20, 0x21	; 33
    7e86:	8a ef       	ldi	r24, 0xFA	; 250
    7e88:	8d 0f       	add	r24, r29
    7e8a:	0e 94 31 26 	call	0x4c62	; 0x4c62 <_Z11lcd_putcAtthhch>
		idx = -idx + 6;
    7e8e:	86 e0       	ldi	r24, 0x06	; 6
    7e90:	8c 1b       	sub	r24, r28
    7e92:	c8 2f       	mov	r28, r24
	}
	lcd_putsAttIdx (x, y, Curve_Str, idx, attr);
    7e94:	2c 2f       	mov	r18, r28
    7e96:	46 e1       	ldi	r20, 0x16	; 22
    7e98:	5f e1       	ldi	r21, 0x1F	; 31
    7e9a:	61 2f       	mov	r22, r17
    7e9c:	8d 2f       	mov	r24, r29
    7e9e:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
}
    7ea2:	df 91       	pop	r29
    7ea4:	cf 91       	pop	r28
    7ea6:	1f 91       	pop	r17
    7ea8:	0f 91       	pop	r16
    7eaa:	08 95       	ret

00007eac <_Z13scalerDecimalhhh>:
#if GVARS

#ifdef SCALERS

//uint8_t scalerDecimal( uint8_t y, const prog_char *s, uint8_t val, uint8_t attr )
uint8_t scalerDecimal (uint8_t y, uint8_t val, uint8_t attr) {
    7eac:	0f 93       	push	r16
    7eae:	1f 93       	push	r17
    7eb0:	cf 93       	push	r28
    7eb2:	df 93       	push	r29
    7eb4:	16 2f       	mov	r17, r22
    7eb6:	04 2f       	mov	r16, r20
//	lcd_label_decimal( y, s, val+1, attr ) ;
	lcd_outdezAtt (17 * FW, y, val + 1, attr);
    7eb8:	c6 2f       	mov	r28, r22
    7eba:	d0 e0       	ldi	r29, 0x00	; 0
    7ebc:	ae 01       	movw	r20, r28
    7ebe:	4f 5f       	subi	r20, 0xFF	; 255
    7ec0:	5f 4f       	sbci	r21, 0xFF	; 255
    7ec2:	20 2f       	mov	r18, r16
    7ec4:	68 2f       	mov	r22, r24
    7ec6:	86 e6       	ldi	r24, 0x66	; 102
    7ec8:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
//	lcd_puts_Pleft( y, s ) ;
//	lcd_outdezAtt( 14*FW, y, val+1, attr) ;
	if (attr) val = checkIncDec_hmu0 (val, 255);
    7ecc:	00 23       	and	r16, r16
    7ece:	29 f0       	breq	.+10     	; 0x7eda <_Z13scalerDecimalhhh+0x2e>
    7ed0:	6f ef       	ldi	r22, 0xFF	; 255
    7ed2:	ce 01       	movw	r24, r28
    7ed4:	0e 94 8c 13 	call	0x2718	; 0x2718 <_Z16checkIncDec_hmu0ih>
    7ed8:	18 2f       	mov	r17, r24
	return val;
}
    7eda:	81 2f       	mov	r24, r17
    7edc:	df 91       	pop	r29
    7ede:	cf 91       	pop	r28
    7ee0:	1f 91       	pop	r17
    7ee2:	0f 91       	pop	r16
    7ee4:	08 95       	ret

00007ee6 <_Z9deleteMixh>:
static uint8_t s_currMixIdx;
static uint8_t s_moveMixIdx;
static int8_t s_currDestCh;
//static bool   s_currMixInsMode;

void deleteMix (uint8_t idx) {
    7ee6:	cf 93       	push	r28
    7ee8:	48 2f       	mov	r20, r24
	MixData *md = &g_model.mixData[0];
	md += idx;
    7eea:	ca e0       	ldi	r28, 0x0A	; 10
    7eec:	2a e0       	ldi	r18, 0x0A	; 10
    7eee:	82 9f       	mul	r24, r18
    7ef0:	c0 01       	movw	r24, r0
    7ef2:	11 24       	eor	r1, r1
    7ef4:	85 5c       	subi	r24, 0xC5	; 197
    7ef6:	9d 4f       	sbci	r25, 0xFD	; 253

	memmove (md, md + 1, (MAX_MIXERS - (idx + 1)) * sizeof(MixData));
    7ef8:	2f e1       	ldi	r18, 0x1F	; 31
    7efa:	30 e0       	ldi	r19, 0x00	; 0
    7efc:	24 1b       	sub	r18, r20
    7efe:	31 09       	sbc	r19, r1
    7f00:	c2 9f       	mul	r28, r18
    7f02:	a0 01       	movw	r20, r0
    7f04:	c3 9f       	mul	r28, r19
    7f06:	50 0d       	add	r21, r0
    7f08:	11 24       	eor	r1, r1
    7f0a:	bc 01       	movw	r22, r24
    7f0c:	66 5f       	subi	r22, 0xF6	; 246
    7f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    7f10:	0e 94 95 72 	call	0xe52a	; 0xe52a <memmove>
	memset (&g_model.mixData[MAX_MIXERS - 1], 0, sizeof(MixData));
    7f14:	e1 e7       	ldi	r30, 0x71	; 113
    7f16:	f3 e0       	ldi	r31, 0x03	; 3
    7f18:	df 01       	movw	r26, r30
    7f1a:	1d 92       	st	X+, r1
    7f1c:	ca 95       	dec	r28
    7f1e:	e9 f7       	brne	.-6      	; 0x7f1a <_Z9deleteMixh+0x34>
	STORE_MODELVARS;
    7f20:	82 e0       	ldi	r24, 0x02	; 2
    7f22:	0e 94 4e 20 	call	0x409c	; 0x409c <_Z7eeDirtyh>
	eeWaitComplete ();
}
    7f26:	cf 91       	pop	r28
	md += idx;

	memmove (md, md + 1, (MAX_MIXERS - (idx + 1)) * sizeof(MixData));
	memset (&g_model.mixData[MAX_MIXERS - 1], 0, sizeof(MixData));
	STORE_MODELVARS;
	eeWaitComplete ();
    7f28:	0c 94 4c 21 	jmp	0x4298	; 0x4298 <_Z14eeWaitCompletev>

00007f2c <_Z14edit_dr_switchhhahh>:
		md->lateOffset = 1;
	}
	s_currMixIdx = idx;
}

int8_t edit_dr_switch (uint8_t x, uint8_t y, int8_t drswitch, uint8_t attr, uint8_t flags) {
    7f2c:	0f 93       	push	r16
    7f2e:	cf 93       	push	r28
    7f30:	c4 2f       	mov	r28, r20
	int8_t min = -MAX_DRSWITCH;
	int8_t max = MAX_DRSWITCH;
	if (flags & EDIT_DR_SWITCH_MOMENT) {
    7f32:	01 ff       	sbrs	r16, 1
    7f34:	05 c0       	rjmp	.+10     	; 0x7f40 <_Z14edit_dr_switchhhahh+0x14>
		putsMomentDrSwitches (x, y, drswitch, attr);
    7f36:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <_Z20putsMomentDrSwitcheshhah>
		max = 2 * MAX_DRSWITCH - 2;
    7f3a:	4a e2       	ldi	r20, 0x2A	; 42
		min = 1 - MAX_DRSWITCH;
    7f3c:	6b ee       	ldi	r22, 0xEB	; 235
    7f3e:	04 c0       	rjmp	.+8      	; 0x7f48 <_Z14edit_dr_switchhhahh+0x1c>
	} else {
		putsDrSwitches (x, y, drswitch, attr);
    7f40:	0e 94 c9 10 	call	0x2192	; 0x2192 <_Z14putsDrSwitcheshhah>
	s_currMixIdx = idx;
}

int8_t edit_dr_switch (uint8_t x, uint8_t y, int8_t drswitch, uint8_t attr, uint8_t flags) {
	int8_t min = -MAX_DRSWITCH;
	int8_t max = MAX_DRSWITCH;
    7f44:	46 e1       	ldi	r20, 0x16	; 22
	}
	s_currMixIdx = idx;
}

int8_t edit_dr_switch (uint8_t x, uint8_t y, int8_t drswitch, uint8_t attr, uint8_t flags) {
	int8_t min = -MAX_DRSWITCH;
    7f46:	6a ee       	ldi	r22, 0xEA	; 234
		max = 2 * MAX_DRSWITCH - 2;
		min = 1 - MAX_DRSWITCH;
	} else {
		putsDrSwitches (x, y, drswitch, attr);
	}
	if (flags & EDIT_DR_SWITCH_EDIT)
    7f48:	00 ff       	sbrs	r16, 0
    7f4a:	04 c0       	rjmp	.+8      	; 0x7f54 <_Z14edit_dr_switchhhahh+0x28>
	CHECK_INCDEC_MODELSWITCH(drswitch, min, max);
    7f4c:	8c 2f       	mov	r24, r28
    7f4e:	0e 94 86 13 	call	0x270c	; 0x270c <_Z14checkIncDec_hmaaa>
    7f52:	c8 2f       	mov	r28, r24
	asm("");
	return drswitch;
}
    7f54:	8c 2f       	mov	r24, r28
    7f56:	cf 91       	pop	r28
    7f58:	0f 91       	pop	r16
    7f5a:	08 95       	ret

00007f5c <_Z12putsChnOpRawhhP9t_MixDatah>:
	return value;
}

const prog_char APM SW_3_IDX[] = "\004sIDxsTHRsRUDsELEsAILsGEAsTRN";

void putsChnOpRaw (uint8_t x, uint8_t y, MixData *md2, uint8_t attr) {
    7f5c:	ff 92       	push	r15
    7f5e:	0f 93       	push	r16
    7f60:	1f 93       	push	r17
    7f62:	cf 93       	push	r28
    7f64:	df 93       	push	r29
    7f66:	18 2f       	mov	r17, r24
    7f68:	f6 2e       	mov	r15, r22
    7f6a:	ea 01       	movw	r28, r20
	if (md2->srcRaw == MIX_3POS) {
    7f6c:	49 81       	ldd	r20, Y+1	; 0x01
    7f6e:	45 32       	cpi	r20, 0x25	; 37
    7f70:	61 f4       	brne	.+24     	; 0x7f8a <_Z12putsChnOpRawhhP9t_MixDatah+0x2e>
		lcd_putsAttIdx (x, y, SW_3_IDX, md2->sw23pos, attr);
    7f72:	89 85       	ldd	r24, Y+9	; 0x09
    7f74:	82 95       	swap	r24
    7f76:	86 95       	lsr	r24
    7f78:	87 70       	andi	r24, 0x07	; 7
    7f7a:	02 2f       	mov	r16, r18
    7f7c:	28 2f       	mov	r18, r24
    7f7e:	4d e5       	ldi	r20, 0x5D	; 93
    7f80:	5c e1       	ldi	r21, 0x1C	; 28
    7f82:	81 2f       	mov	r24, r17
    7f84:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
    7f88:	10 c0       	rjmp	.+32     	; 0x7faa <_Z12putsChnOpRawhhP9t_MixDatah+0x4e>
	} else {
		putsChnRaw (x, y, md2->srcRaw, attr | MIX_SOURCE);
    7f8a:	20 61       	ori	r18, 0x10	; 16
    7f8c:	0e 94 95 10 	call	0x212a	; 0x212a <_Z10putsChnRawhhhh>
		if ( (md2->srcRaw >= CHOUT_BASE) && (md2->srcRaw < CHOUT_BASE + NUM_CHNOUT)) {
    7f90:	89 81       	ldd	r24, Y+1	; 0x01
    7f92:	84 51       	subi	r24, 0x14	; 20
    7f94:	80 31       	cpi	r24, 0x10	; 16
    7f96:	48 f4       	brcc	.+18     	; 0x7faa <_Z12putsChnOpRawhhP9t_MixDatah+0x4e>
			if (md2->disableExpoDr) {
    7f98:	8f 81       	ldd	r24, Y+7	; 0x07
    7f9a:	86 ff       	sbrs	r24, 6
    7f9c:	06 c0       	rjmp	.+12     	; 0x7faa <_Z12putsChnOpRawhhP9t_MixDatah+0x4e>
				lcd_puts_P (x, y, PSTR("OP"));
    7f9e:	4e eb       	ldi	r20, 0xBE	; 190
    7fa0:	5a e1       	ldi	r21, 0x1A	; 26
    7fa2:	6f 2d       	mov	r22, r15
    7fa4:	81 2f       	mov	r24, r17
    7fa6:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <_Z10lcd_puts_PhhPKc>
			}
		}
	}
	asm("");
}
    7faa:	df 91       	pop	r29
    7fac:	cf 91       	pop	r28
    7fae:	1f 91       	pop	r17
    7fb0:	0f 91       	pop	r16
    7fb2:	ff 90       	pop	r15
    7fb4:	08 95       	ret

00007fb6 <_Z7moveMixhh>:
		*y++ = temp;
	}
}

void moveMix (uint8_t idx, uint8_t dir) //true=inc=down false=dec=up - Issue 49
		{
    7fb6:	0f 93       	push	r16
    7fb8:	1f 93       	push	r17
    7fba:	cf 93       	push	r28
    7fbc:	df 93       	push	r29
    7fbe:	18 2f       	mov	r17, r24
    7fc0:	06 2f       	mov	r16, r22
	MixData *src = mixaddress (idx); //&g_model.mixData[idx];
    7fc2:	0e 94 87 10 	call	0x210e	; 0x210e <_Z10mixaddressh>
    7fc6:	ec 01       	movw	r28, r24
	if (idx == 0 && !dir) {
    7fc8:	11 11       	cpse	r17, r1
    7fca:	08 c0       	rjmp	.+16     	; 0x7fdc <_Z7moveMixhh+0x26>
    7fcc:	01 11       	cpse	r16, r1
    7fce:	0f c0       	rjmp	.+30     	; 0x7fee <_Z7moveMixhh+0x38>
		if (src->destCh > 1) {
    7fd0:	88 81       	ld	r24, Y
    7fd2:	82 30       	cpi	r24, 0x02	; 2
    7fd4:	78 f1       	brcs	.+94     	; 0x8034 <_Z7moveMixhh+0x7e>
			src->destCh--;
    7fd6:	81 50       	subi	r24, 0x01	; 1
    7fd8:	88 83       	st	Y, r24
    7fda:	2c c0       	rjmp	.+88     	; 0x8034 <_Z7moveMixhh+0x7e>
		}
		STORE_MODELVARS;
		return;
	}

	if (idx > MAX_MIXERS || (idx == MAX_MIXERS && dir)) return;
    7fdc:	11 32       	cpi	r17, 0x21	; 33
    7fde:	88 f5       	brcc	.+98     	; 0x8042 <_Z7moveMixhh+0x8c>
    7fe0:	10 32       	cpi	r17, 0x20	; 32
    7fe2:	19 f4       	brne	.+6      	; 0x7fea <_Z7moveMixhh+0x34>
    7fe4:	00 23       	and	r16, r16
    7fe6:	29 f0       	breq	.+10     	; 0x7ff2 <_Z7moveMixhh+0x3c>
    7fe8:	2c c0       	rjmp	.+88     	; 0x8042 <_Z7moveMixhh+0x8c>
	uint8_t tdx = dir ? idx + 1 : idx - 1;
    7fea:	00 23       	and	r16, r16
    7fec:	11 f0       	breq	.+4      	; 0x7ff2 <_Z7moveMixhh+0x3c>
    7fee:	1f 5f       	subi	r17, 0xFF	; 255
    7ff0:	01 c0       	rjmp	.+2      	; 0x7ff4 <_Z7moveMixhh+0x3e>
    7ff2:	11 50       	subi	r17, 0x01	; 1
	MixData *tgt = mixaddress (tdx); //&g_model.mixData[tdx];
    7ff4:	81 2f       	mov	r24, r17
    7ff6:	0e 94 87 10 	call	0x210e	; 0x210e <_Z10mixaddressh>
    7ffa:	fc 01       	movw	r30, r24

	if ( (src->destCh == 0) || (src->destCh > NUM_CHNOUT) || (tgt->destCh > NUM_CHNOUT)) return;
    7ffc:	98 81       	ld	r25, Y
    7ffe:	8f ef       	ldi	r24, 0xFF	; 255
    8000:	89 0f       	add	r24, r25
    8002:	80 31       	cpi	r24, 0x10	; 16
    8004:	f0 f4       	brcc	.+60     	; 0x8042 <_Z7moveMixhh+0x8c>
    8006:	20 81       	ld	r18, Z
    8008:	21 31       	cpi	r18, 0x11	; 17
    800a:	d8 f4       	brcc	.+54     	; 0x8042 <_Z7moveMixhh+0x8c>

	if (tgt->destCh != src->destCh) {
    800c:	29 13       	cpse	r18, r25
    800e:	02 c0       	rjmp	.+4      	; 0x8014 <_Z7moveMixhh+0x5e>
    8010:	8b e0       	ldi	r24, 0x0B	; 11
    8012:	07 c0       	rjmp	.+14     	; 0x8022 <_Z7moveMixhh+0x6c>
		if ( (dir) && (src->destCh < NUM_CHNOUT)) src->destCh++;
    8014:	00 23       	and	r16, r16
    8016:	01 f3       	breq	.-64     	; 0x7fd8 <_Z7moveMixhh+0x22>
    8018:	90 31       	cpi	r25, 0x10	; 16
    801a:	60 f4       	brcc	.+24     	; 0x8034 <_Z7moveMixhh+0x7e>
    801c:	9f 5f       	subi	r25, 0xFF	; 255
    801e:	98 83       	st	Y, r25
    8020:	09 c0       	rjmp	.+18     	; 0x8034 <_Z7moveMixhh+0x7e>
    8022:	81 50       	subi	r24, 0x01	; 1
	uint8_t *y;
	uint8_t temp;

	x = (unsigned char *) a;
	y = (unsigned char *) b;
	while (size--) {
    8024:	29 f0       	breq	.+10     	; 0x8030 <_Z7moveMixhh+0x7a>
		temp = *x;
    8026:	90 81       	ld	r25, Z
		*x++ = *y;
    8028:	28 81       	ld	r18, Y
    802a:	21 93       	st	Z+, r18
		*y++ = temp;
    802c:	99 93       	st	Y+, r25
    802e:	f9 cf       	rjmp	.-14     	; 0x8022 <_Z7moveMixhh+0x6c>
		return;
	}

	//flip between idx and tgt
	memswap (tgt, src, sizeof(MixData));
	s_moveMixIdx = tdx;
    8030:	10 93 52 0e 	sts	0x0E52, r17

	STORE_MODELVARS;
    8034:	82 e0       	ldi	r24, 0x02	; 2
//    eeWaitComplete() ;
}
    8036:	df 91       	pop	r29
    8038:	cf 91       	pop	r28
    803a:	1f 91       	pop	r17
    803c:	0f 91       	pop	r16

	//flip between idx and tgt
	memswap (tgt, src, sizeof(MixData));
	s_moveMixIdx = tdx;

	STORE_MODELVARS;
    803e:	0c 94 4e 20 	jmp	0x409c	; 0x409c <_Z7eeDirtyh>
//    eeWaitComplete() ;
}
    8042:	df 91       	pop	r29
    8044:	cf 91       	pop	r28
    8046:	1f 91       	pop	r17
    8048:	0f 91       	pop	r16
    804a:	08 95       	ret

0000804c <_Z20reachMixerCountLimitv>:

//    lcd_puts_Pleft(4*FH, PSTR(STR_PRESS_EXIT_AB));
}

static uint8_t getMixerCount () {
	if (g_model.mixData[MAX_MIXERS - 1].destCh) {
    804c:	80 91 71 03 	lds	r24, 0x0371
    8050:	88 23       	and	r24, r24
    8052:	29 f0       	breq	.+10     	; 0x805e <_Z20reachMixerCountLimitv+0x12>
}

bool reachMixerCountLimit () {
	// check mixers count limit
	if (getMixerCount () >= MAX_MIXERS) {
		pushMenu (menuMixersLimit);
    8054:	8e e2       	ldi	r24, 0x2E	; 46
    8056:	95 e3       	ldi	r25, 0x35	; 53
    8058:	0e 94 ab 18 	call	0x3156	; 0x3156 <_Z8pushMenuPFvhE>
		return true;
    805c:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return false;
	}
}
    805e:	08 95       	ret

00008060 <_Z13yesNoMenuExitPKc>:

uint8_t mixToDelete;

void yesNoMenuExit (const prog_char * s) {
	lcd_puts_Pleft (1 * FH, s);
    8060:	bc 01       	movw	r22, r24
    8062:	88 e0       	ldi	r24, 0x08	; 8
    8064:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
	lcd_puts_Pleft (5 * FH, PSTR(STR_YES_NO_MENU_EXIT));
    8068:	64 ea       	ldi	r22, 0xA4	; 164
    806a:	79 e1       	ldi	r23, 0x19	; 25
    806c:	88 e2       	ldi	r24, 0x28	; 40
    806e:	0c 94 1f 27 	jmp	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>

00008072 <_Z13menuDeleteMixh>:
//  lcd_puts_Pleft( 6*FH,PSTR(STR_MENU_EXIT));
}

void menuDeleteMix (uint8_t event) {
    8072:	cf 93       	push	r28
    8074:	c8 2f       	mov	r28, r24
	switch (event) {
    8076:	81 36       	cpi	r24, 0x61	; 97
    8078:	89 f0       	breq	.+34     	; 0x809c <_Z13menuDeleteMixh+0x2a>
    807a:	28 f4       	brcc	.+10     	; 0x8086 <_Z13menuDeleteMixh+0x14>
    807c:	8e 32       	cpi	r24, 0x2E	; 46
    807e:	59 f0       	breq	.+22     	; 0x8096 <_Z13menuDeleteMixh+0x24>
    8080:	80 36       	cpi	r24, 0x60	; 96
    8082:	49 f0       	breq	.+18     	; 0x8096 <_Z13menuDeleteMixh+0x24>
    8084:	15 c0       	rjmp	.+42     	; 0x80b0 <_Z13menuDeleteMixh+0x3e>
    8086:	8e 38       	cpi	r24, 0x8E	; 142
    8088:	49 f0       	breq	.+18     	; 0x809c <_Z13menuDeleteMixh+0x2a>
    808a:	8f 3b       	cpi	r24, 0xBF	; 191
    808c:	89 f4       	brne	.+34     	; 0x80b0 <_Z13menuDeleteMixh+0x3e>
		case EVT_ENTRY:
			audioDefevent (AU_WARNING1);
    808e:	80 e0       	ldi	r24, 0x00	; 0
    8090:	0e 94 74 34 	call	0x68e8	; 0x68e8 <_Z13audioDefeventh>
			break;
    8094:	0d c0       	rjmp	.+26     	; 0x80b0 <_Z13menuDeleteMixh+0x3e>
		case EVT_KEY_FIRST(KEY_MENU):
		case EVT_KEY_BREAK(BTN_RE):
			deleteMix (mixToDelete);
    8096:	80 91 7b 0d 	lds	r24, 0x0D7B
    809a:	25 df       	rcall	.-438    	; 0x7ee6 <_Z9deleteMixh>
			//fallthrough
		case EVT_KEY_LONG(BTN_RE):
		case EVT_KEY_FIRST(KEY_EXIT):
			killEvents (event);
    809c:	8c 2f       	mov	r24, r28
    809e:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
			popMenu (true);
    80a2:	81 e0       	ldi	r24, 0x01	; 1
    80a4:	0e 94 95 18 	call	0x312a	; 0x312a <_Z7popMenub>
			pushMenu (menuProcMix);
    80a8:	80 e1       	ldi	r24, 0x10	; 16
    80aa:	91 e6       	ldi	r25, 0x61	; 97
    80ac:	0e 94 ab 18 	call	0x3156	; 0x3156 <_Z8pushMenuPFvhE>
			break;
	}
//    lcd_puts_Pleft(1*FH, PSTR("DELETE MIX?"));
	yesNoMenuExit (PSTR(STR_DELETE_MIX));
    80b0:	88 e9       	ldi	r24, 0x98	; 152
    80b2:	99 e1       	ldi	r25, 0x19	; 25

}
    80b4:	cf 91       	pop	r28
			popMenu (true);
			pushMenu (menuProcMix);
			break;
	}
//    lcd_puts_Pleft(1*FH, PSTR("DELETE MIX?"));
	yesNoMenuExit (PSTR(STR_DELETE_MIX));
    80b6:	d4 cf       	rjmp	.-88     	; 0x8060 <_Z13yesNoMenuExitPKc>

000080b8 <_Z18menuDeleteDupModelh>:
}

uint8_t DupIfNonzero = 0;
int8_t DupSub;

void menuDeleteDupModel (uint8_t event) {
    80b8:	0f 93       	push	r16
    80ba:	cf 93       	push	r28
    80bc:	c8 2f       	mov	r28, r24
	eeLoadModelName (DupSub, Xmem.buf, sizeof (Xmem.buf));
    80be:	4f e0       	ldi	r20, 0x0F	; 15
    80c0:	60 e0       	ldi	r22, 0x00	; 0
    80c2:	7e e0       	ldi	r23, 0x0E	; 14
    80c4:	80 91 78 0d 	lds	r24, 0x0D78
    80c8:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <_Z15eeLoadModelNamehPch>
	lcd_putsnAtt (1, 2 * FH, Xmem.buf, sizeof (g_model.name), BSS);
    80cc:	00 e1       	ldi	r16, 0x10	; 16
    80ce:	2a e0       	ldi	r18, 0x0A	; 10
    80d0:	40 e0       	ldi	r20, 0x00	; 0
    80d2:	5e e0       	ldi	r21, 0x0E	; 14
    80d4:	60 e1       	ldi	r22, 0x10	; 16
    80d6:	81 e0       	ldi	r24, 0x01	; 1
    80d8:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <_Z12lcd_putsnAtthhPKchh>
	lcd_putc (sizeof (g_model.name) * FW + FW, 2 * FH, '?');
    80dc:	4f e3       	ldi	r20, 0x3F	; 63
    80de:	60 e1       	ldi	r22, 0x10	; 16
    80e0:	82 e4       	ldi	r24, 0x42	; 66
    80e2:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <_Z8lcd_putchhc>
	yesNoMenuExit (DupIfNonzero ? PSTR(STR_DUP_MODEL) : PSTR(STR_DELETE_MODEL));
    80e6:	80 91 79 0d 	lds	r24, 0x0D79
    80ea:	88 23       	and	r24, r24
    80ec:	19 f0       	breq	.+6      	; 0x80f4 <_Z18menuDeleteDupModelh+0x3c>
    80ee:	8e e6       	ldi	r24, 0x6E	; 110
    80f0:	99 e1       	ldi	r25, 0x19	; 25
    80f2:	02 c0       	rjmp	.+4      	; 0x80f8 <_Z18menuDeleteDupModelh+0x40>
    80f4:	81 e6       	ldi	r24, 0x61	; 97
    80f6:	99 e1       	ldi	r25, 0x19	; 25
    80f8:	b3 df       	rcall	.-154    	; 0x8060 <_Z13yesNoMenuExitPKc>

//    uint8_t i;
	switch (event) {
    80fa:	c1 36       	cpi	r28, 0x61	; 97
    80fc:	69 f1       	breq	.+90     	; 0x8158 <_Z18menuDeleteDupModelh+0xa0>
    80fe:	28 f4       	brcc	.+10     	; 0x810a <_Z18menuDeleteDupModelh+0x52>
    8100:	ce 32       	cpi	r28, 0x2E	; 46
    8102:	61 f0       	breq	.+24     	; 0x811c <_Z18menuDeleteDupModelh+0x64>
    8104:	c0 36       	cpi	r28, 0x60	; 96
    8106:	51 f0       	breq	.+20     	; 0x811c <_Z18menuDeleteDupModelh+0x64>
    8108:	33 c0       	rjmp	.+102    	; 0x8170 <_Z18menuDeleteDupModelh+0xb8>
    810a:	ce 38       	cpi	r28, 0x8E	; 142
    810c:	29 f1       	breq	.+74     	; 0x8158 <_Z18menuDeleteDupModelh+0xa0>
    810e:	cf 3b       	cpi	r28, 0xBF	; 191
    8110:	79 f5       	brne	.+94     	; 0x8170 <_Z18menuDeleteDupModelh+0xb8>
		case EVT_ENTRY:
			audioDefevent (AU_WARNING1);
    8112:	80 e0       	ldi	r24, 0x00	; 0
			killEvents (event);
			popMenu (true);
			pushMenu (menuProcModelSelect);
			break;
	}
}
    8114:	cf 91       	pop	r28
    8116:	0f 91       	pop	r16
	yesNoMenuExit (DupIfNonzero ? PSTR(STR_DUP_MODEL) : PSTR(STR_DELETE_MODEL));

//    uint8_t i;
	switch (event) {
		case EVT_ENTRY:
			audioDefevent (AU_WARNING1);
    8118:	0c 94 74 34 	jmp	0x68e8	; 0x68e8 <_Z13audioDefeventh>
			break;
		case EVT_KEY_FIRST(KEY_MENU):
		case EVT_KEY_BREAK(BTN_RE):
			if (DupIfNonzero) {
    811c:	80 91 79 0d 	lds	r24, 0x0D79
    8120:	88 23       	and	r24, r24
    8122:	a9 f0       	breq	.+42     	; 0x814e <_Z18menuDeleteDupModelh+0x96>
				message (PSTR(STR_DUPLICATING));
    8124:	8f e4       	ldi	r24, 0x4F	; 79
    8126:	99 e1       	ldi	r25, 0x19	; 25
    8128:	0e 94 2e 12 	call	0x245c	; 0x245c <_Z7messagePKc>
				if (eeDuplicateModel (DupSub)) {
    812c:	80 91 78 0d 	lds	r24, 0x0D78
    8130:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <_Z16eeDuplicateModelh>
    8134:	88 23       	and	r24, r24
    8136:	39 f0       	breq	.+14     	; 0x8146 <_Z18menuDeleteDupModelh+0x8e>
					audioDefevent (AU_MENUS);
    8138:	87 e1       	ldi	r24, 0x17	; 23
    813a:	0e 94 74 34 	call	0x68e8	; 0x68e8 <_Z13audioDefeventh>
					DupIfNonzero = 2;		// sel_editMode = false;
    813e:	82 e0       	ldi	r24, 0x02	; 2
    8140:	80 93 79 0d 	sts	0x0D79, r24
    8144:	09 c0       	rjmp	.+18     	; 0x8158 <_Z18menuDeleteDupModelh+0xa0>
				} else audioDefevent (AU_WARNING1);
    8146:	80 e0       	ldi	r24, 0x00	; 0
    8148:	0e 94 74 34 	call	0x68e8	; 0x68e8 <_Z13audioDefeventh>
    814c:	05 c0       	rjmp	.+10     	; 0x8158 <_Z18menuDeleteDupModelh+0xa0>
			} else {
				EFile::rm (FILE_MODEL(DupSub)); //delete file
    814e:	80 91 78 0d 	lds	r24, 0x0D78
    8152:	8f 5f       	subi	r24, 0xFF	; 255
    8154:	0e 94 8d 23 	call	0x471a	; 0x471a <_ZN5EFile2rmEh>
			popMenu (true);
			pushMenu (menuProcModelSelect);
			break;
		case EVT_KEY_LONG(BTN_RE):
		case EVT_KEY_FIRST(KEY_EXIT):
			killEvents (event);
    8158:	8c 2f       	mov	r24, r28
    815a:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
			popMenu (true);
    815e:	81 e0       	ldi	r24, 0x01	; 1
    8160:	0e 94 95 18 	call	0x312a	; 0x312a <_Z7popMenub>
			pushMenu (menuProcModelSelect);
    8164:	8f e5       	ldi	r24, 0x5F	; 95
    8166:	91 e4       	ldi	r25, 0x41	; 65
			break;
	}
}
    8168:	cf 91       	pop	r28
    816a:	0f 91       	pop	r16
			break;
		case EVT_KEY_LONG(BTN_RE):
		case EVT_KEY_FIRST(KEY_EXIT):
			killEvents (event);
			popMenu (true);
			pushMenu (menuProcModelSelect);
    816c:	0c 94 ab 18 	jmp	0x3156	; 0x3156 <_Z8pushMenuPFvhE>
			break;
	}
}
    8170:	cf 91       	pop	r28
    8172:	0f 91       	pop	r16
    8174:	08 95       	ret

00008176 <_Z7doPopupPKchh>:
		mask >>= 1;
	}
	return position;
}

uint8_t doPopup (const prog_char *list, uint8_t mask, uint8_t width) {
    8176:	df 92       	push	r13
    8178:	ef 92       	push	r14
    817a:	ff 92       	push	r15
    817c:	0f 93       	push	r16
    817e:	1f 93       	push	r17
    8180:	cf 93       	push	r28
    8182:	df 93       	push	r29
    8184:	ec 01       	movw	r28, r24
    8186:	06 2f       	mov	r16, r22
    8188:	f4 2e       	mov	r15, r20
    818a:	e6 2e       	mov	r14, r22

const prog_char APM MixPopList[] = STR_MIX_POPUP;

static uint8_t popupDisplay (const prog_char *list, uint8_t mask, uint8_t width) {
	uint8_t entries = 0;
	uint8_t y = FH;
    818c:	18 e0       	ldi	r17, 0x08	; 8
}

const prog_char APM MixPopList[] = STR_MIX_POPUP;

static uint8_t popupDisplay (const prog_char *list, uint8_t mask, uint8_t width) {
	uint8_t entries = 0;
    818e:	d1 2c       	mov	r13, r1
	uint8_t y = FH;

	while (mask) {
    8190:	ee 20       	and	r14, r14
    8192:	b9 f0       	breq	.+46     	; 0x81c2 <_Z7doPopupPKchh+0x4c>
		if (mask & 1) {
    8194:	e0 fe       	sbrs	r14, 0
    8196:	0e c0       	rjmp	.+28     	; 0x81b4 <_Z7doPopupPKchh+0x3e>
			lcd_putsn_P (3 * FW, y, PSTR("              "), width);
    8198:	2f 2d       	mov	r18, r15
    819a:	49 e8       	ldi	r20, 0x89	; 137
    819c:	59 e1       	ldi	r21, 0x19	; 25
    819e:	61 2f       	mov	r22, r17
    81a0:	82 e1       	ldi	r24, 0x12	; 18
    81a2:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_Z11lcd_putsn_PhhPKch>
			lcd_puts_P (4 * FW, y, (const char *) (list));
    81a6:	ae 01       	movw	r20, r28
    81a8:	61 2f       	mov	r22, r17
    81aa:	88 e1       	ldi	r24, 0x18	; 24
    81ac:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <_Z10lcd_puts_PhhPKc>
			entries += 1;
    81b0:	d3 94       	inc	r13
			y += FH;
    81b2:	18 5f       	subi	r17, 0xF8	; 248
		}
		mask >>= 1;
    81b4:	e6 94       	lsr	r14
		while (pgm_read_byte(list)) {
    81b6:	fe 01       	movw	r30, r28
    81b8:	84 91       	lpm	r24, Z
    81ba:	21 96       	adiw	r28, 0x01	; 1
    81bc:	81 11       	cpse	r24, r1
    81be:	fb cf       	rjmp	.-10     	; 0x81b6 <_Z7doPopupPKchh+0x40>
    81c0:	e7 cf       	rjmp	.-50     	; 0x8190 <_Z7doPopupPKchh+0x1a>
			list += 1;
		}
		list += 1;
	}
	lcd_rect (3 * FW, 1 * FH - 1, width * FW, y + 2 - FH);
    81c2:	2a ef       	ldi	r18, 0xFA	; 250
    81c4:	21 0f       	add	r18, r17
    81c6:	4f 2d       	mov	r20, r15
    81c8:	44 0f       	add	r20, r20
    81ca:	4f 0d       	add	r20, r15
    81cc:	44 0f       	add	r20, r20
    81ce:	67 e0       	ldi	r22, 0x07	; 7
    81d0:	82 e1       	ldi	r24, 0x12	; 18
    81d2:	0e 94 98 29 	call	0x5330	; 0x5330 <_Z8lcd_recthhhh>
	lcd_char_inverse (4 * FW, (PopupData.PopupIdx + 1) * FH, (width - 2) * FW, 0);
    81d6:	2f 2d       	mov	r18, r15
    81d8:	30 e0       	ldi	r19, 0x00	; 0
    81da:	22 50       	subi	r18, 0x02	; 2
    81dc:	31 09       	sbc	r19, r1
    81de:	42 2f       	mov	r20, r18
    81e0:	44 0f       	add	r20, r20
    81e2:	42 0f       	add	r20, r18
    81e4:	44 0f       	add	r20, r20
    81e6:	60 91 fd 0d 	lds	r22, 0x0DFD
    81ea:	66 0f       	add	r22, r22
    81ec:	66 0f       	add	r22, r22
    81ee:	66 0f       	add	r22, r22
    81f0:	68 5f       	subi	r22, 0xF8	; 248
    81f2:	20 e0       	ldi	r18, 0x00	; 0
    81f4:	88 e1       	ldi	r24, 0x18	; 24
    81f6:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <_Z16lcd_char_inversehhhh>
#define POPUP_SELECT		1
#define POPUP_EXIT			2
#define POPUP_LONG			3

static uint8_t popupProcess (uint8_t max) {
	int8_t popidxud = qRotary ();
    81fa:	23 d8       	rcall	.-4026   	; 0x7242 <_Z7qRotaryv>
    81fc:	28 2f       	mov	r18, r24
	uint8_t popidx = PopupData.PopupIdx;
    81fe:	90 91 fd 0d 	lds	r25, 0x0DFD

	if (PopupData.PopupTimer) {
    8202:	80 91 ff 0d 	lds	r24, 0x0DFF
    8206:	88 23       	and	r24, r24
    8208:	61 f0       	breq	.+24     	; 0x8222 <_Z7doPopupPKchh+0xac>
		if ( BLINK_ON_PHASE) {
    820a:	30 91 cf 0a 	lds	r19, 0x0ACF
    820e:	36 ff       	sbrs	r19, 6
    8210:	0b c0       	rjmp	.+22     	; 0x8228 <_Z7doPopupPKchh+0xb2>
			if (--PopupData.PopupTimer == 0) {
    8212:	81 50       	subi	r24, 0x01	; 1
    8214:	80 93 ff 0d 	sts	0x0DFF, r24
    8218:	81 11       	cpse	r24, r1
    821a:	06 c0       	rjmp	.+12     	; 0x8228 <_Z7doPopupPKchh+0xb2>
				// Timeout popup
				PopupData.PopupActive = 0;
    821c:	10 92 fc 0d 	sts	0x0DFC, r1
    8220:	21 c0       	rjmp	.+66     	; 0x8264 <_Z7doPopupPKchh+0xee>
				return POPUP_EXIT;
			}
		}
	} else {
		PopupData.PopupTimer = 255;
    8222:	8f ef       	ldi	r24, 0xFF	; 255
    8224:	80 93 ff 0d 	sts	0x0DFF, r24
	}

	switch (Tevent) {
    8228:	80 91 e1 01 	lds	r24, 0x01E1
    822c:	81 36       	cpi	r24, 0x61	; 97
    822e:	91 f0       	breq	.+36     	; 0x8254 <_Z7doPopupPKchh+0xde>
    8230:	28 f4       	brcc	.+10     	; 0x823c <_Z7doPopupPKchh+0xc6>
    8232:	80 32       	cpi	r24, 0x20	; 32
    8234:	49 f0       	breq	.+18     	; 0x8248 <_Z7doPopupPKchh+0xd2>
    8236:	8e 32       	cpi	r24, 0x2E	; 46
    8238:	39 f0       	breq	.+14     	; 0x8248 <_Z7doPopupPKchh+0xd2>
    823a:	16 c0       	rjmp	.+44     	; 0x8268 <_Z7doPopupPKchh+0xf2>
    823c:	83 36       	cpi	r24, 0x63	; 99
    823e:	e9 f0       	breq	.+58     	; 0x827a <_Z7doPopupPKchh+0x104>
    8240:	a8 f0       	brcs	.+42     	; 0x826c <_Z7doPopupPKchh+0xf6>
    8242:	8e 38       	cpi	r24, 0x8E	; 142
    8244:	39 f0       	breq	.+14     	; 0x8254 <_Z7doPopupPKchh+0xde>
    8246:	10 c0       	rjmp	.+32     	; 0x8268 <_Z7doPopupPKchh+0xf2>
		case EVT_KEY_BREAK(KEY_MENU):
		case EVT_KEY_BREAK(BTN_RE):
			PopupData.PopupActive = 0;
    8248:	10 92 fc 0d 	sts	0x0DFC, r1
			PopupData.PopupTimer = 0;
    824c:	10 92 ff 0d 	sts	0x0DFF, r1
			return POPUP_SELECT;
    8250:	81 e0       	ldi	r24, 0x01	; 1
    8252:	1f c0       	rjmp	.+62     	; 0x8292 <_Z7doPopupPKchh+0x11c>
			popidxud = 1;
			break;

		case EVT_KEY_FIRST(KEY_EXIT):
		case EVT_KEY_LONG(BTN_RE):
			killEvents (Tevent);
    8254:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
			Tevent = 0;
    8258:	10 92 e1 01 	sts	0x01E1, r1
			PopupData.PopupActive = 0;
    825c:	10 92 fc 0d 	sts	0x0DFC, r1
			PopupData.PopupTimer = 0;
    8260:	10 92 ff 0d 	sts	0x0DFF, r1
			return POPUP_EXIT;
    8264:	82 e0       	ldi	r24, 0x02	; 2
    8266:	15 c0       	rjmp	.+42     	; 0x8292 <_Z7doPopupPKchh+0x11c>
	}

	if (popidxud > 0) {
    8268:	12 16       	cp	r1, r18
    826a:	2c f4       	brge	.+10     	; 0x8276 <_Z7doPopupPKchh+0x100>
	return position;
}

uint8_t doPopup (const prog_char *list, uint8_t mask, uint8_t width) {
	uint8_t count = popupDisplay (list, mask, width);
	uint8_t popaction = popupProcess (count - 1);
    826c:	da 94       	dec	r13
			PopupData.PopupTimer = 0;
			return POPUP_EXIT;
	}

	if (popidxud > 0) {
		if (popidx < max) {
    826e:	9d 15       	cp	r25, r13
    8270:	30 f4       	brcc	.+12     	; 0x827e <_Z7doPopupPKchh+0x108>
			popidx += 1;
    8272:	9f 5f       	subi	r25, 0xFF	; 255
    8274:	04 c0       	rjmp	.+8      	; 0x827e <_Z7doPopupPKchh+0x108>
		}
	} else if (popidxud < 0) {
    8276:	22 23       	and	r18, r18
    8278:	49 f0       	breq	.+18     	; 0x828c <_Z7doPopupPKchh+0x116>
		if (popidx) {
    827a:	91 11       	cpse	r25, r1
			popidx -= 1;
    827c:	91 50       	subi	r25, 0x01	; 1
		}
	}

	if (popidxud) {
		if (PopupData.PopupTimer) {
    827e:	80 91 ff 0d 	lds	r24, 0x0DFF
    8282:	88 23       	and	r24, r24
    8284:	19 f0       	breq	.+6      	; 0x828c <_Z7doPopupPKchh+0x116>
			PopupData.PopupTimer = 255;
    8286:	8f ef       	ldi	r24, 0xFF	; 255
    8288:	80 93 ff 0d 	sts	0x0DFF, r24
		}
	}

	PopupData.PopupIdx = popidx;
    828c:	90 93 fd 0d 	sts	0x0DFD, r25
	return POPUP_NONE;
    8290:	80 e0       	ldi	r24, 0x00	; 0
	return entries;
}

static uint8_t popTranslate (uint8_t popidx, uint8_t mask) {
	uint8_t position;
	popidx += 1;
    8292:	90 91 fd 0d 	lds	r25, 0x0DFD
    8296:	9f 5f       	subi	r25, 0xFF	; 255
	for (position = 0; position < 8; position += 1) {
    8298:	20 e0       	ldi	r18, 0x00	; 0
		if (mask & 1) {
    829a:	00 ff       	sbrs	r16, 0
    829c:	02 c0       	rjmp	.+4      	; 0x82a2 <_Z7doPopupPKchh+0x12c>
			if (--popidx == 0) {
    829e:	91 50       	subi	r25, 0x01	; 1
    82a0:	21 f0       	breq	.+8      	; 0x82aa <_Z7doPopupPKchh+0x134>
				break;
			}
		}
		mask >>= 1;
    82a2:	06 95       	lsr	r16
}

static uint8_t popTranslate (uint8_t popidx, uint8_t mask) {
	uint8_t position;
	popidx += 1;
	for (position = 0; position < 8; position += 1) {
    82a4:	2f 5f       	subi	r18, 0xFF	; 255
    82a6:	28 30       	cpi	r18, 0x08	; 8
    82a8:	c1 f7       	brne	.-16     	; 0x829a <_Z7doPopupPKchh+0x124>

uint8_t doPopup (const prog_char *list, uint8_t mask, uint8_t width) {
	uint8_t count = popupDisplay (list, mask, width);
	uint8_t popaction = popupProcess (count - 1);
	uint8_t popidx = PopupData.PopupIdx;
	PopupData.PopupSel = popTranslate (popidx, mask);
    82aa:	20 93 fe 0d 	sts	0x0DFE, r18
	return popaction;
}
    82ae:	df 91       	pop	r29
    82b0:	cf 91       	pop	r28
    82b2:	1f 91       	pop	r17
    82b4:	0f 91       	pop	r16
    82b6:	ff 90       	pop	r15
    82b8:	ef 90       	pop	r14
    82ba:	df 90       	pop	r13
    82bc:	08 95       	ret

000082be <_Z19menuProcModelSelecth>:
// MOVE- move model to another model slot
// DELETE - This one is important.

const prog_char APM ModelPopList[] = STR_MODEL_POPUP;

void menuProcModelSelect (uint8_t event) {
    82be:	df 92       	push	r13
    82c0:	ef 92       	push	r14
    82c2:	ff 92       	push	r15
    82c4:	0f 93       	push	r16
    82c6:	1f 93       	push	r17
    82c8:	cf 93       	push	r28
    82ca:	df 93       	push	r29
    82cc:	c8 2f       	mov	r28, r24
	static MState2 mstate2;
	TITLE(STR_MODELSEL);
    82ce:	84 ef       	ldi	r24, 0xF4	; 244
    82d0:	98 e1       	ldi	r25, 0x18	; 24
    82d2:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>

	int8_t subOld = mstate2.m_posVert;
    82d6:	f0 90 43 0e 	lds	r15, 0x0E43

	if (!PopupData.PopupActive) {
    82da:	80 91 fc 0d 	lds	r24, 0x0DFC
    82de:	81 11       	cpse	r24, r1
    82e0:	05 c0       	rjmp	.+10     	; 0x82ec <_Z19menuProcModelSelecth+0x2e>
//			RotaryState = ROTARY_MENU_UD ;
		mstate2.check_columns (event, MAX_MODELS - 1);
    82e2:	4f e0       	ldi	r20, 0x0F	; 15
    82e4:	6c 2f       	mov	r22, r28
    82e6:	83 e4       	ldi	r24, 0x43	; 67
    82e8:	9e e0       	ldi	r25, 0x0E	; 14
    82ea:	91 da       	rcall	.-2782   	; 0x780e <_ZN7MState213check_columnsEhh>
//			mstate2.check_submenu_simple(event,MAX_MODELS-1) ;
	}

	lcd_puts_Pleft (0, PSTR(STR_11_FREE));
    82ec:	6e ee       	ldi	r22, 0xEE	; 238
    82ee:	78 e1       	ldi	r23, 0x18	; 24
    82f0:	80 e0       	ldi	r24, 0x00	; 0
    82f2:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
	lcd_outdez (17 * FW, 0, EeFsGetFree ());
    82f6:	0e 94 b3 22 	call	0x4566	; 0x4566 <_Z11EeFsGetFreev>
    82fa:	ac 01       	movw	r20, r24
    82fc:	60 e0       	ldi	r22, 0x00	; 0
    82fe:	86 e6       	ldi	r24, 0x66	; 102
    8300:	0e 94 47 29 	call	0x528e	; 0x528e <_Z10lcd_outdezhhi>

//    DisplayScreenIndex(e_ModelSelect, DIM(menuTabModel), INVERS);

	uint8_t sub = mstate2.m_posVert;
    8304:	10 91 43 0e 	lds	r17, 0x0E43
	static uint8_t sel_editMode;
	if (DupIfNonzero == 2) {
    8308:	80 91 79 0d 	lds	r24, 0x0D79
    830c:	82 30       	cpi	r24, 0x02	; 2
    830e:	21 f4       	brne	.+8      	; 0x8318 <_Z19menuProcModelSelecth+0x5a>
		sel_editMode = false;
    8310:	10 92 42 0e 	sts	0x0E42, r1
		DupIfNonzero = 0;
    8314:	10 92 79 0d 	sts	0x0D79, r1
	}
	uint8_t t_pgOfs = s_pgOfs;
    8318:	80 91 a6 0d 	lds	r24, 0x0DA6
	uint8_t temp = 1 + t_pgOfs;
    831c:	91 e0       	ldi	r25, 0x01	; 1
    831e:	98 0f       	add	r25, r24
	if (sub < temp) {
    8320:	19 17       	cp	r17, r25
    8322:	28 f4       	brcc	.+10     	; 0x832e <_Z19menuProcModelSelecth+0x70>
		t_pgOfs = sub > 1 ? sub - 1 : 0;
    8324:	12 30       	cpi	r17, 0x02	; 2
    8326:	68 f0       	brcs	.+26     	; 0x8342 <_Z19menuProcModelSelecth+0x84>
    8328:	8f ef       	ldi	r24, 0xFF	; 255
    832a:	81 0f       	add	r24, r17
    832c:	0b c0       	rjmp	.+22     	; 0x8344 <_Z19menuProcModelSelecth+0x86>
	} else if (sub > (temp = 4 + t_pgOfs)) {
    832e:	94 e0       	ldi	r25, 0x04	; 4
    8330:	98 0f       	add	r25, r24
    8332:	91 17       	cp	r25, r17
    8334:	38 f4       	brcc	.+14     	; 0x8344 <_Z19menuProcModelSelecth+0x86>
		t_pgOfs = sub - 4;
    8336:	8c ef       	ldi	r24, 0xFC	; 252
    8338:	81 0f       	add	r24, r17
    833a:	8b 30       	cpi	r24, 0x0B	; 11
    833c:	18 f0       	brcs	.+6      	; 0x8344 <_Z19menuProcModelSelecth+0x86>
    833e:	8a e0       	ldi	r24, 0x0A	; 10
    8340:	01 c0       	rjmp	.+2      	; 0x8344 <_Z19menuProcModelSelecth+0x86>
		DupIfNonzero = 0;
	}
	uint8_t t_pgOfs = s_pgOfs;
	uint8_t temp = 1 + t_pgOfs;
	if (sub < temp) {
		t_pgOfs = sub > 1 ? sub - 1 : 0;
    8342:	80 e0       	ldi	r24, 0x00	; 0
		t_pgOfs = sub - 4;
		if (t_pgOfs > MAX_MODELS - 6) {
			t_pgOfs = MAX_MODELS - 6;
		}
	}
	s_pgOfs = t_pgOfs;
    8344:	80 93 a6 0d 	sts	0x0DA6, r24
    8348:	08 2f       	mov	r16, r24
    834a:	d0 e1       	ldi	r29, 0x10	; 16

	for (uint8_t i = 0; i < 6; i++) {
		uint8_t y = (i + 2) * FH;
		uint8_t k = i + t_pgOfs;
//        lcd_outdezNAtt(  3*FW, y, (uint16_t)k+1, ((sub==k) ? INVERS : 0) + LEADING0,2);
		lcd_2_digits (3 * FW, y, k + 1, (sub == k) ? INVERS : 0);
    834c:	ee 24       	eor	r14, r14
    834e:	e3 94       	inc	r14
    8350:	10 13       	cpse	r17, r16
    8352:	e1 2c       	mov	r14, r1
    8354:	dd 24       	eor	r13, r13
    8356:	d3 94       	inc	r13
    8358:	d0 0e       	add	r13, r16
    835a:	2e 2d       	mov	r18, r14
    835c:	4d 2d       	mov	r20, r13
    835e:	6d 2f       	mov	r22, r29
    8360:	82 e1       	ldi	r24, 0x12	; 18
    8362:	0e 94 49 29 	call	0x5292	; 0x5292 <_Z12lcd_2_digitshhhh>
		if (k == g_eeGeneral.currModel) lcd_putc (1, y, '*');
    8366:	80 91 0f 06 	lds	r24, 0x060F
    836a:	08 13       	cpse	r16, r24
    836c:	05 c0       	rjmp	.+10     	; 0x8378 <_Z19menuProcModelSelecth+0xba>
    836e:	4a e2       	ldi	r20, 0x2A	; 42
    8370:	6d 2f       	mov	r22, r29
    8372:	81 e0       	ldi	r24, 0x01	; 1
    8374:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <_Z8lcd_putchhc>
		eeLoadModelName (k, Xmem.buf, sizeof (Xmem.buf));
    8378:	4f e0       	ldi	r20, 0x0F	; 15
    837a:	60 e0       	ldi	r22, 0x00	; 0
    837c:	7e e0       	ldi	r23, 0x0E	; 14
    837e:	80 2f       	mov	r24, r16
    8380:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <_Z15eeLoadModelNamehPch>
		lcd_putsnAtt (4 * FW, y, Xmem.buf, sizeof (Xmem.buf),
		BSS | ( (sub == k) ? (sel_editMode ? INVERS : 0) : 0));
    8384:	ee 20       	and	r14, r14
    8386:	31 f0       	breq	.+12     	; 0x8394 <_Z19menuProcModelSelecth+0xd6>
    8388:	80 91 42 0e 	lds	r24, 0x0E42
    838c:	88 23       	and	r24, r24
    838e:	11 f0       	breq	.+4      	; 0x8394 <_Z19menuProcModelSelecth+0xd6>
    8390:	01 e1       	ldi	r16, 0x11	; 17
    8392:	01 c0       	rjmp	.+2      	; 0x8396 <_Z19menuProcModelSelecth+0xd8>
    8394:	00 e1       	ldi	r16, 0x10	; 16
    8396:	2f e0       	ldi	r18, 0x0F	; 15
    8398:	40 e0       	ldi	r20, 0x00	; 0
    839a:	5e e0       	ldi	r21, 0x0E	; 14
    839c:	6d 2f       	mov	r22, r29
    839e:	88 e1       	ldi	r24, 0x18	; 24
    83a0:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <_Z12lcd_putsnAtthhPKchh>
    83a4:	d8 5f       	subi	r29, 0xF8	; 248
			t_pgOfs = MAX_MODELS - 6;
		}
	}
	s_pgOfs = t_pgOfs;

	for (uint8_t i = 0; i < 6; i++) {
    83a6:	d0 34       	cpi	r29, 0x40	; 64
    83a8:	11 f0       	breq	.+4      	; 0x83ae <_Z19menuProcModelSelecth+0xf0>
    83aa:	0d 2d       	mov	r16, r13
    83ac:	cf cf       	rjmp	.-98     	; 0x834c <_Z19menuProcModelSelecth+0x8e>
		eeLoadModelName (k, Xmem.buf, sizeof (Xmem.buf));
		lcd_putsnAtt (4 * FW, y, Xmem.buf, sizeof (Xmem.buf),
		BSS | ( (sub == k) ? (sel_editMode ? INVERS : 0) : 0));
	}

	if (PopupData.PopupActive) {
    83ae:	80 91 fc 0d 	lds	r24, 0x0DFC
    83b2:	88 23       	and	r24, r24
    83b4:	09 f4       	brne	.+2      	; 0x83b8 <_Z19menuProcModelSelecth+0xfa>
    83b6:	65 c0       	rjmp	.+202    	; 0x8482 <_Z19menuProcModelSelecth+0x1c4>
		uint8_t mask = (g_eeGeneral.currModel == mstate2.m_posVert) ? 0x19 : 0x3E;
    83b8:	80 91 43 0e 	lds	r24, 0x0E43
    83bc:	90 91 0f 06 	lds	r25, 0x060F
    83c0:	98 13       	cpse	r25, r24
    83c2:	02 c0       	rjmp	.+4      	; 0x83c8 <_Z19menuProcModelSelecth+0x10a>
    83c4:	d9 e1       	ldi	r29, 0x19	; 25
    83c6:	01 c0       	rjmp	.+2      	; 0x83ca <_Z19menuProcModelSelecth+0x10c>
    83c8:	de e3       	ldi	r29, 0x3E	; 62
		if (eeModelExists (mstate2.m_posVert) == 0) {
    83ca:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <_Z13eeModelExistsh>
    83ce:	81 11       	cpse	r24, r1
    83d0:	01 c0       	rjmp	.+2      	; 0x83d4 <_Z19menuProcModelSelecth+0x116>
			mask = 0x16;
    83d2:	d6 e1       	ldi	r29, 0x16	; 22
		}
		uint8_t popaction = doPopup (ModelPopList, mask, 10);
    83d4:	4a e0       	ldi	r20, 0x0A	; 10
    83d6:	6d 2f       	mov	r22, r29
    83d8:	8a e1       	ldi	r24, 0x1A	; 26
    83da:	9c e1       	ldi	r25, 0x1C	; 28
    83dc:	cc de       	rcall	.-616    	; 0x8176 <_Z7doPopupPKchh>

		if (popaction == POPUP_SELECT) {
    83de:	81 30       	cpi	r24, 0x01	; 1
    83e0:	09 f0       	breq	.+2      	; 0x83e4 <_Z19menuProcModelSelecth+0x126>
    83e2:	8e c0       	rjmp	.+284    	; 0x8500 <_Z19menuProcModelSelecth+0x242>
			uint8_t popidx = PopupData.PopupSel;
    83e4:	d0 91 fe 0d 	lds	r29, 0x0DFE
			if (popidx == 0)	// edit
    83e8:	d1 11       	cpse	r29, r1
    83ea:	05 c0       	rjmp	.+10     	; 0x83f6 <_Z19menuProcModelSelecth+0x138>
					{
				chainMenu (menuProcModelIndex);
    83ec:	81 e9       	ldi	r24, 0x91	; 145
    83ee:	93 e6       	ldi	r25, 0x63	; 99
    83f0:	0e 94 a2 13 	call	0x2744	; 0x2744 <_Z9chainMenuPFvhE>
    83f4:	85 c0       	rjmp	.+266    	; 0x8500 <_Z19menuProcModelSelecth+0x242>
			} else if ( (popidx == 1) || (popidx == 2))	// select or SEL/EDIT
    83f6:	9f ef       	ldi	r25, 0xFF	; 255
    83f8:	9d 0f       	add	r25, r29
    83fa:	92 30       	cpi	r25, 0x02	; 2
    83fc:	60 f5       	brcc	.+88     	; 0x8456 <_Z19menuProcModelSelecth+0x198>
					{
				g_eeGeneral.currModel = mstate2.m_posVert;
    83fe:	00 91 43 0e 	lds	r16, 0x0E43
    8402:	00 93 0f 06 	sts	0x060F, r16
				PausePulses = 1;
    8406:	80 93 0a 0b 	sts	0x0B0A, r24

// For popup
//  eeLoadModelName(k,Xmem.buf,sizeof(Xmem.buf));
//  lcd_putsnAtt( 4*FW, y, Xmem.buf,sizeof(Xmem.buf),BSS);

	killEvents (event);
    840a:	8c 2f       	mov	r24, r28
    840c:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
	eeWaitComplete ();    // Wait to load model if writing something
    8410:	0e 94 4c 21 	call	0x4298	; 0x4298 <_Z14eeWaitCompletev>
	eeLoadModel (g_eeGeneral.currModel = index);
    8414:	00 93 0f 06 	sts	0x060F, r16
    8418:	80 2f       	mov	r24, r16
    841a:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <_Z11eeLoadModelh>
	AlarmControl.VoiceCheckFlag |= 2;    // Set switch current states
    841e:	80 91 05 01 	lds	r24, 0x0105
    8422:	82 60       	ori	r24, 0x02	; 2
    8424:	80 93 05 01 	sts	0x0105, r24
	STORE_GENERALVARS;
    8428:	81 e0       	ldi	r24, 0x01	; 1
    842a:	0e 94 4e 20 	call	0x409c	; 0x409c <_Z7eeDirtyh>
	eeWaitComplete ();
    842e:	0e 94 4c 21 	call	0x4298	; 0x4298 <_Z14eeWaitCompletev>
	checkTHR ();
    8432:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <_Z8checkTHRv>
	checkSwitches ();
    8436:	0e 94 02 18 	call	0x3004	; 0x3004 <_Z13checkSwitchesv>
	putVoiceQueueUpper (g_model.modelVoice);
    843a:	80 91 2b 02 	lds	r24, 0x022B
    843e:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <_Z18putVoiceQueueUpperh>
			} else if ( (popidx == 1) || (popidx == 2))	// select or SEL/EDIT
					{
				g_eeGeneral.currModel = mstate2.m_posVert;
				PausePulses = 1;
				qloadModel (event, mstate2.m_posVert);
				startPulses ();
    8442:	0e 94 0c 32 	call	0x6418	; 0x6418 <_Z11startPulsesv>
				if ( (PopupData.PopupActive == 2) || (popidx == 2)) {
    8446:	80 91 fc 0d 	lds	r24, 0x0DFC
    844a:	82 30       	cpi	r24, 0x02	; 2
    844c:	79 f2       	breq	.-98     	; 0x83ec <_Z19menuProcModelSelecth+0x12e>
    844e:	d2 30       	cpi	r29, 0x02	; 2
    8450:	09 f0       	breq	.+2      	; 0x8454 <_Z19menuProcModelSelecth+0x196>
    8452:	47 c0       	rjmp	.+142    	; 0x84e2 <_Z19menuProcModelSelecth+0x224>
    8454:	cb cf       	rjmp	.-106    	; 0x83ec <_Z19menuProcModelSelecth+0x12e>
					chainMenu (menuProcModelIndex);
				} else {
					popMenu (true);
				}
			} else if (popidx == 5)		// Delete
    8456:	d5 30       	cpi	r29, 0x05	; 5
    8458:	31 f4       	brne	.+12     	; 0x8466 <_Z19menuProcModelSelecth+0x1a8>
					{
				killEvents (event);
    845a:	8c 2f       	mov	r24, r28
    845c:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
				DupIfNonzero = 0;
    8460:	10 92 79 0d 	sts	0x0D79, r1
    8464:	04 c0       	rjmp	.+8      	; 0x846e <_Z19menuProcModelSelecth+0x1b0>
				DupSub = sub;
				pushMenu (menuDeleteDupModel);
			} else if (popidx == 3)	// copy
    8466:	d3 30       	cpi	r29, 0x03	; 3
    8468:	49 f4       	brne	.+18     	; 0x847c <_Z19menuProcModelSelecth+0x1be>
					{
				{
					DupIfNonzero = 1;
    846a:	80 93 79 0d 	sts	0x0D79, r24
					DupSub = sub;
    846e:	10 93 78 0d 	sts	0x0D78, r17
					pushMenu (menuDeleteDupModel);	//menuProcExpoAll);
    8472:	8c e5       	ldi	r24, 0x5C	; 92
    8474:	90 e4       	ldi	r25, 0x40	; 64
    8476:	0e 94 ab 18 	call	0x3156	; 0x3156 <_Z8pushMenuPFvhE>
    847a:	42 c0       	rjmp	.+132    	; 0x8500 <_Z19menuProcModelSelecth+0x242>
				}
			} else // Move (4)
			{
				sel_editMode = true;
    847c:	80 93 42 0e 	sts	0x0E42, r24
    8480:	3f c0       	rjmp	.+126    	; 0x8500 <_Z19menuProcModelSelecth+0x242>
			}
		}
	} else {
		switch (event) {
    8482:	c6 36       	cpi	r28, 0x66	; 102
    8484:	38 f4       	brcc	.+14     	; 0x8494 <_Z19menuProcModelSelecth+0x1d6>
    8486:	c4 36       	cpi	r28, 0x64	; 100
    8488:	88 f4       	brcc	.+34     	; 0x84ac <_Z19menuProcModelSelecth+0x1ee>
    848a:	c0 36       	cpi	r28, 0x60	; 96
    848c:	c1 f0       	breq	.+48     	; 0x84be <_Z19menuProcModelSelecth+0x200>
    848e:	c1 36       	cpi	r28, 0x61	; 97
    8490:	41 f0       	breq	.+16     	; 0x84a2 <_Z19menuProcModelSelecth+0x1e4>
    8492:	36 c0       	rjmp	.+108    	; 0x8500 <_Z19menuProcModelSelecth+0x242>
    8494:	c1 38       	cpi	r28, 0x81	; 129
    8496:	29 f1       	breq	.+74     	; 0x84e2 <_Z19menuProcModelSelecth+0x224>
    8498:	cf 3b       	cpi	r28, 0xBF	; 191
    849a:	39 f1       	breq	.+78     	; 0x84ea <_Z19menuProcModelSelecth+0x22c>
    849c:	ce 36       	cpi	r28, 0x6E	; 110
    849e:	81 f5       	brne	.+96     	; 0x8500 <_Z19menuProcModelSelecth+0x242>
    84a0:	0e c0       	rjmp	.+28     	; 0x84be <_Z19menuProcModelSelecth+0x200>
			//case  EVT_KEY_FIRST(KEY_MENU):
			case EVT_KEY_FIRST(KEY_EXIT):
				if (sel_editMode) {
    84a2:	80 91 42 0e 	lds	r24, 0x0E42
    84a6:	88 23       	and	r24, r24
    84a8:	59 f1       	breq	.+86     	; 0x8500 <_Z19menuProcModelSelecth+0x242>
    84aa:	0f c0       	rjmp	.+30     	; 0x84ca <_Z19menuProcModelSelecth+0x20c>
				}
				break;

			case EVT_KEY_FIRST(KEY_LEFT):
			case EVT_KEY_FIRST(KEY_RIGHT):
				if (g_eeGeneral.currModel != mstate2.m_posVert) {
    84ac:	90 91 0f 06 	lds	r25, 0x060F
    84b0:	80 91 43 0e 	lds	r24, 0x0E43
    84b4:	98 17       	cp	r25, r24
    84b6:	09 f4       	brne	.+2      	; 0x84ba <_Z19menuProcModelSelecth+0x1fc>
    84b8:	99 cf       	rjmp	.-206    	; 0x83ec <_Z19menuProcModelSelecth+0x12e>
					PopupData.PopupActive = 2;
    84ba:	82 e0       	ldi	r24, 0x02	; 2
    84bc:	0a c0       	rjmp	.+20     	; 0x84d2 <_Z19menuProcModelSelecth+0x214>
					//      if(event==EVT_KEY_FIRST(KEY_EXIT))  chainMenu(menuProcModelSelect);
				}
				break;
			case EVT_KEY_FIRST(KEY_MENU):
			case EVT_KEY_FIRST(BTN_RE):
				s_editMode = 0;
    84be:	10 92 a5 0d 	sts	0x0DA5, r1
				if (sel_editMode) {
    84c2:	80 91 42 0e 	lds	r24, 0x0E42
    84c6:	88 23       	and	r24, r24
    84c8:	19 f0       	breq	.+6      	; 0x84d0 <_Z19menuProcModelSelecth+0x212>
					sel_editMode = false;
    84ca:	10 92 42 0e 	sts	0x0E42, r1
    84ce:	18 c0       	rjmp	.+48     	; 0x8500 <_Z19menuProcModelSelecth+0x242>
				} else {
					PopupData.PopupActive = 1;
    84d0:	81 e0       	ldi	r24, 0x01	; 1
    84d2:	80 93 fc 0d 	sts	0x0DFC, r24
					killEvents (event);
    84d6:	8c 2f       	mov	r24, r28
    84d8:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
					PopupData.PopupIdx = 0;
    84dc:	10 92 fd 0d 	sts	0x0DFD, r1
    84e0:	0f c0       	rjmp	.+30     	; 0x8500 <_Z19menuProcModelSelecth+0x242>
				}
				break;
			case EVT_KEY_LONG(KEY_EXIT):  // make sure exit long exits to main
				popMenu (true);
    84e2:	81 e0       	ldi	r24, 0x01	; 1
    84e4:	0e 94 95 18 	call	0x312a	; 0x312a <_Z7popMenub>
				break;
    84e8:	0b c0       	rjmp	.+22     	; 0x8500 <_Z19menuProcModelSelecth+0x242>

			case EVT_ENTRY:
//				MenuTimer = 2000 ;	// * 0.01 Seconds = 20 seconds
				sel_editMode = false;
    84ea:	10 92 42 0e 	sts	0x0E42, r1
				PopupData.PopupActive = 0;
    84ee:	10 92 fc 0d 	sts	0x0DFC, r1
				mstate2.m_posVert = g_eeGeneral.currModel;
    84f2:	80 91 0f 06 	lds	r24, 0x060F
    84f6:	80 93 43 0e 	sts	0x0E43, r24
				eeCheck (true); //force writing of current model data before this is changed
    84fa:	81 e0       	ldi	r24, 0x01	; 1
    84fc:	0e 94 a2 20 	call	0x4144	; 0x4144 <_Z7eeCheckb>
				break;
		}
	}
	if (sel_editMode && subOld != sub) {
    8500:	80 91 42 0e 	lds	r24, 0x0E42
    8504:	88 23       	and	r24, r24
    8506:	f9 f0       	breq	.+62     	; 0x8546 <_Z19menuProcModelSelecth+0x288>
    8508:	cf 2d       	mov	r28, r15
    850a:	dd 27       	eor	r29, r29
    850c:	c7 fd       	sbrc	r28, 7
    850e:	d0 95       	com	r29
    8510:	81 2f       	mov	r24, r17
    8512:	90 e0       	ldi	r25, 0x00	; 0
    8514:	c8 17       	cp	r28, r24
    8516:	d9 07       	cpc	r29, r25
    8518:	b1 f0       	breq	.+44     	; 0x8546 <_Z19menuProcModelSelecth+0x288>
		EFile::swap (FILE_MODEL(subOld), FILE_MODEL(sub));
    851a:	61 e0       	ldi	r22, 0x01	; 1
    851c:	61 0f       	add	r22, r17
    851e:	81 e0       	ldi	r24, 0x01	; 1
    8520:	8f 0d       	add	r24, r15
    8522:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <_ZN5EFile4swapEhh>

		if (sub == g_eeGeneral.currModel) {
    8526:	80 91 0f 06 	lds	r24, 0x060F
    852a:	18 13       	cpse	r17, r24
    852c:	03 c0       	rjmp	.+6      	; 0x8534 <_Z19menuProcModelSelecth+0x276>
			g_eeGeneral.currModel = subOld;
    852e:	f0 92 0f 06 	sts	0x060F, r15
    8532:	06 c0       	rjmp	.+12     	; 0x8540 <_Z19menuProcModelSelecth+0x282>
			STORE_GENERALVARS;     //eeWriteGeneral();
		} else if (subOld == g_eeGeneral.currModel) {
    8534:	90 e0       	ldi	r25, 0x00	; 0
    8536:	c8 17       	cp	r28, r24
    8538:	d9 07       	cpc	r29, r25
    853a:	29 f4       	brne	.+10     	; 0x8546 <_Z19menuProcModelSelecth+0x288>
			g_eeGeneral.currModel = sub;
    853c:	10 93 0f 06 	sts	0x060F, r17
			STORE_GENERALVARS;     //eeWriteGeneral();
    8540:	81 e0       	ldi	r24, 0x01	; 1
    8542:	0e 94 4e 20 	call	0x409c	; 0x409c <_Z7eeDirtyh>
		}
	}
	asm("");
	// Prevents compiler from creating 2 sets of register pops
}
    8546:	df 91       	pop	r29
    8548:	cf 91       	pop	r28
    854a:	1f 91       	pop	r17
    854c:	0f 91       	pop	r16
    854e:	ff 90       	pop	r15
    8550:	ef 90       	pop	r14
    8552:	df 90       	pop	r13
    8554:	08 95       	ret

00008556 <_Z5expoujj>:
#else
	s_mixMaxSel = current - 2;
#endif
}

uint16_t expou (uint16_t x, uint16_t k) {
    8556:	cf 92       	push	r12
    8558:	df 92       	push	r13
    855a:	ef 92       	push	r14
    855c:	ff 92       	push	r15
    855e:	cf 93       	push	r28
    8560:	df 93       	push	r29
    8562:	fc 01       	movw	r30, r24
    8564:	eb 01       	movw	r28, r22
	// previous function was this one:
	// k*x*x*x + (1-k)*x
//    return ((unsigned long)x*x*x/0x10000*k/(RESXul*RESXul/0x10000) + (RESKul-k)*x+RESKul/2)/RESKul;

	uint32_t value = (uint32_t) x * x;
    8566:	9c 01       	movw	r18, r24
    8568:	dc 01       	movw	r26, r24
    856a:	0e 94 47 72 	call	0xe48e	; 0xe48e <__umulhisi3>
    856e:	9b 01       	movw	r18, r22
    8570:	ac 01       	movw	r20, r24
	value *= (uint32_t) k;
    8572:	de 01       	movw	r26, r28
    8574:	0e 94 5c 72 	call	0xe4b8	; 0xe4b8 <__muluhisi3>
	value >>= 8;
    8578:	27 2f       	mov	r18, r23
    857a:	38 2f       	mov	r19, r24
    857c:	49 2f       	mov	r20, r25
    857e:	55 27       	eor	r21, r21
	value *= (uint32_t) x;
    8580:	df 01       	movw	r26, r30
    8582:	0e 94 5c 72 	call	0xe4b8	; 0xe4b8 <__muluhisi3>
    8586:	6b 01       	movw	r12, r22
    8588:	7c 01       	movw	r14, r24
	value >>= 12;
    858a:	8c e0       	ldi	r24, 0x0C	; 12
    858c:	f6 94       	lsr	r15
    858e:	e7 94       	ror	r14
    8590:	d7 94       	ror	r13
    8592:	c7 94       	ror	r12
    8594:	8a 95       	dec	r24
    8596:	d1 f7       	brne	.-12     	; 0x858c <_Z5expoujj+0x36>
	value += (uint32_t) (100 - k) * x + 50;
    8598:	24 e6       	ldi	r18, 0x64	; 100
    859a:	30 e0       	ldi	r19, 0x00	; 0
    859c:	2c 1b       	sub	r18, r28
    859e:	3d 0b       	sbc	r19, r29
    85a0:	0e 94 47 72 	call	0xe48e	; 0xe48e <__umulhisi3>
    85a4:	6e 5c       	subi	r22, 0xCE	; 206
    85a6:	7f 4f       	sbci	r23, 0xFF	; 255
    85a8:	8f 4f       	sbci	r24, 0xFF	; 255
    85aa:	9f 4f       	sbci	r25, 0xFF	; 255
    85ac:	6c 0d       	add	r22, r12
    85ae:	7d 1d       	adc	r23, r13
    85b0:	8e 1d       	adc	r24, r14
    85b2:	9f 1d       	adc	r25, r15

	// return divu100(value);
	return value / 100;
    85b4:	24 e6       	ldi	r18, 0x64	; 100
    85b6:	30 e0       	ldi	r19, 0x00	; 0
    85b8:	40 e0       	ldi	r20, 0x00	; 0
    85ba:	50 e0       	ldi	r21, 0x00	; 0
    85bc:	0e 94 fd 71 	call	0xe3fa	; 0xe3fa <__udivmodsi4>
}
    85c0:	c9 01       	movw	r24, r18
    85c2:	df 91       	pop	r29
    85c4:	cf 91       	pop	r28
    85c6:	ff 90       	pop	r15
    85c8:	ef 90       	pop	r14
    85ca:	df 90       	pop	r13
    85cc:	cf 90       	pop	r12
    85ce:	08 95       	ret

000085d0 <_Z4expoii>:
// f(x,k)=exp(ln(x)*k/10) ;P[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
// f(x,k)=x*x*x*k/10 + x*(1-k/10) ;P[0,1,2,3,4,5,6,7,8,9,10]
// f(x,k)=x*x*k/10 + x*(1-k/10) ;P[0,1,2,3,4,5,6,7,8,9,10]
// f(x,k)=1+(x-1)*(x-1)*(x-1)*k/10 + (x-1)*(1-k/10) ;P[0,1,2,3,4,5,6,7,8,9,10]

int16_t expo (int16_t x, int16_t k) {
    85d0:	1f 93       	push	r17
    85d2:	cf 93       	push	r28
    85d4:	df 93       	push	r29
	if (k == 0) return x;
    85d6:	61 15       	cp	r22, r1
    85d8:	71 05       	cpc	r23, r1
    85da:	19 f1       	breq	.+70     	; 0x8622 <_Z4expoii+0x52>
	int16_t y;
	bool neg = x < 0;
    85dc:	19 2f       	mov	r17, r25
    85de:	11 1f       	adc	r17, r17
    85e0:	11 27       	eor	r17, r17
    85e2:	11 1f       	adc	r17, r17
	if (neg) x = -x;
    85e4:	19 f0       	breq	.+6      	; 0x85ec <_Z4expoii+0x1c>
    85e6:	91 95       	neg	r25
    85e8:	81 95       	neg	r24
    85ea:	91 09       	sbc	r25, r1
	if (k < 0) {
    85ec:	77 ff       	sbrs	r23, 7
    85ee:	0f c0       	rjmp	.+30     	; 0x860e <_Z4expoii+0x3e>
		y = RESXu - expou (RESXu - x, -k);
    85f0:	71 95       	neg	r23
    85f2:	61 95       	neg	r22
    85f4:	71 09       	sbc	r23, r1
    85f6:	c0 e0       	ldi	r28, 0x00	; 0
    85f8:	d4 e0       	ldi	r29, 0x04	; 4
    85fa:	9e 01       	movw	r18, r28
    85fc:	28 1b       	sub	r18, r24
    85fe:	39 0b       	sbc	r19, r25
    8600:	c9 01       	movw	r24, r18
    8602:	a9 df       	rcall	.-174    	; 0x8556 <_Z5expoujj>
    8604:	9e 01       	movw	r18, r28
    8606:	28 1b       	sub	r18, r24
    8608:	39 0b       	sbc	r19, r25
    860a:	c9 01       	movw	r24, r18
    860c:	01 c0       	rjmp	.+2      	; 0x8610 <_Z4expoii+0x40>
	} else {
		y = expou (x, k);
    860e:	a3 df       	rcall	.-186    	; 0x8556 <_Z5expoujj>
	}
	return neg ? -y : y;
    8610:	11 23       	and	r17, r17
    8612:	29 f0       	breq	.+10     	; 0x861e <_Z4expoii+0x4e>
    8614:	22 27       	eor	r18, r18
    8616:	33 27       	eor	r19, r19
    8618:	28 1b       	sub	r18, r24
    861a:	39 0b       	sbc	r19, r25
    861c:	01 c0       	rjmp	.+2      	; 0x8620 <_Z4expoii+0x50>
    861e:	9c 01       	movw	r18, r24
// f(x,k)=x*x*x*k/10 + x*(1-k/10) ;P[0,1,2,3,4,5,6,7,8,9,10]
// f(x,k)=x*x*k/10 + x*(1-k/10) ;P[0,1,2,3,4,5,6,7,8,9,10]
// f(x,k)=1+(x-1)*(x-1)*(x-1)*k/10 + (x-1)*(1-k/10) ;P[0,1,2,3,4,5,6,7,8,9,10]

int16_t expo (int16_t x, int16_t k) {
	if (k == 0) return x;
    8620:	c9 01       	movw	r24, r18
		y = RESXu - expou (RESXu - x, -k);
	} else {
		y = expou (x, k);
	}
	return neg ? -y : y;
}
    8622:	df 91       	pop	r29
    8624:	cf 91       	pop	r28
    8626:	1f 91       	pop	r17
    8628:	08 95       	ret

0000862a <_Z12editExpoValshhhhhh>:
	if(x>=0) return expou(x,c,d) + drx;
	return -expou(-x,c,-d) + drx;
}
#endif

void editExpoVals (uint8_t edit, uint8_t x, uint8_t y, uint8_t which, uint8_t exWt, uint8_t stkRL) {
    862a:	ef 92       	push	r14
    862c:	0f 93       	push	r16
    862e:	cf 93       	push	r28
    8630:	df 93       	push	r29
    8632:	38 2f       	mov	r19, r24
    8634:	86 2f       	mov	r24, r22
    8636:	64 2f       	mov	r22, r20
    8638:	92 2f       	mov	r25, r18
	uint8_t invBlk = (edit) ? InverseBlink : 0;
    863a:	33 23       	and	r19, r19
    863c:	19 f0       	breq	.+6      	; 0x8644 <_Z12editExpoValshhhhhh+0x1a>
    863e:	20 91 9f 0d 	lds	r18, 0x0D9F
    8642:	01 c0       	rjmp	.+2      	; 0x8646 <_Z12editExpoValshhhhhh+0x1c>
    8644:	20 e0       	ldi	r18, 0x00	; 0
//		doedit = (edit || (P1values.p1valdiff )) ;
//#else
	doedit = (edit);
//#endif											

	eptr = &g_model.expoData[s_expoChan];
    8646:	c0 91 54 0e 	lds	r28, 0x0E54
    864a:	4e e0       	ldi	r20, 0x0E	; 14
    864c:	c4 9f       	mul	r28, r20
    864e:	e0 01       	movw	r28, r0
    8650:	11 24       	eor	r1, r1
    8652:	c5 53       	subi	r28, 0x35	; 53
    8654:	dc 4f       	sbci	r29, 0xFC	; 252
	if (which == DR_DRSW1) {
    8656:	93 36       	cpi	r25, 0x63	; 99
    8658:	29 f4       	brne	.+10     	; 0x8664 <_Z12editExpoValshhhhhh+0x3a>

		eptr->drSw1 = edit_dr_switch (x, y, eptr->drSw1, invBlk, doedit);
    865a:	03 2f       	mov	r16, r19
    865c:	4c 85       	ldd	r20, Y+12	; 0x0c
    865e:	66 dc       	rcall	.-1844   	; 0x7f2c <_Z14edit_dr_switchhhahh>
    8660:	8c 87       	std	Y+12, r24	; 0x0c
    8662:	26 c0       	rjmp	.+76     	; 0x86b0 <_Z12editExpoValshhhhhh+0x86>
	} else if (which == DR_DRSW2) {
    8664:	92 36       	cpi	r25, 0x62	; 98
    8666:	29 f4       	brne	.+10     	; 0x8672 <_Z12editExpoValshhhhhh+0x48>
		eptr->drSw2 = edit_dr_switch (x, y, eptr->drSw2, invBlk, doedit);
    8668:	03 2f       	mov	r16, r19
    866a:	4d 85       	ldd	r20, Y+13	; 0x0d
    866c:	5f dc       	rcall	.-1858   	; 0x7f2c <_Z14edit_dr_switchhhahh>
    866e:	8d 87       	std	Y+13, r24	; 0x0d
    8670:	1f c0       	rjmp	.+62     	; 0x86b0 <_Z12editExpoValshhhhhh+0x86>
	} else {
		ptr = &eptr->expo[which][exWt][stkRL];
    8672:	e0 2f       	mov	r30, r16
    8674:	f0 e0       	ldi	r31, 0x00	; 0
    8676:	e9 0f       	add	r30, r25
    8678:	f1 1d       	adc	r31, r1
    867a:	e9 0f       	add	r30, r25
    867c:	f1 1d       	adc	r31, r1
    867e:	ee 0f       	add	r30, r30
    8680:	ff 1f       	adc	r31, r31
    8682:	ee 0d       	add	r30, r14
    8684:	f1 1d       	adc	r31, r1
    8686:	ec 0f       	add	r30, r28
    8688:	fd 1f       	adc	r31, r29
		FORCE_INDIRECT(ptr);
    868a:	ef 01       	movw	r28, r30

#if GVARS
		if (exWt == DR_EXPO) {
    868c:	01 11       	cpse	r16, r1
    868e:	07 c0       	rjmp	.+14     	; 0x869e <_Z12editExpoValshhhhhh+0x74>
			*ptr = gvarMenuItem (x, y, *ptr, -100, 100, invBlk);
    8690:	e2 2e       	mov	r14, r18
    8692:	04 e6       	ldi	r16, 0x64	; 100
    8694:	2c e9       	ldi	r18, 0x9C	; 156
    8696:	48 81       	ld	r20, Y
    8698:	0e 94 93 38 	call	0x7126	; 0x7126 <_Z12gvarMenuItemhhaaah>
    869c:	08 c0       	rjmp	.+16     	; 0x86ae <_Z12editExpoValshhhhhh+0x84>
		} else {
			*ptr = gvarMenuItem (x, y, *ptr + 100, 0, 100, invBlk) - 100;
    869e:	48 81       	ld	r20, Y
    86a0:	4c 59       	subi	r20, 0x9C	; 156
    86a2:	e2 2e       	mov	r14, r18
    86a4:	04 e6       	ldi	r16, 0x64	; 100
    86a6:	20 e0       	ldi	r18, 0x00	; 0
    86a8:	0e 94 93 38 	call	0x7126	; 0x7126 <_Z12gvarMenuItemhhaaah>
    86ac:	84 56       	subi	r24, 0x64	; 100
    86ae:	88 83       	st	Y, r24
			lcd_outdezAtt(x, y, *ptr+100, invBlk);
			if(doedit) CHECK_INCDEC_H_MODELVAR(*ptr,-100, 0);
		}
#endif
	}
}
    86b0:	df 91       	pop	r29
    86b2:	cf 91       	pop	r28
    86b4:	0f 91       	pop	r16
    86b6:	ef 90       	pop	r14
    86b8:	08 95       	ret

000086ba <_Z8char2idxc>:

uint8_t char2idx (char c) {
	uint8_t ret;
	for (ret = 0;; ret++) {
    86ba:	90 e0       	ldi	r25, 0x00	; 0
		char cc = pgm_read_byte(s_charTab + ret);
    86bc:	e9 2f       	mov	r30, r25
    86be:	f0 e0       	ldi	r31, 0x00	; 0
    86c0:	e5 56       	subi	r30, 0x65	; 101
    86c2:	f1 4e       	sbci	r31, 0xE1	; 225
    86c4:	e4 91       	lpm	r30, Z
		if (cc == c) return ret;
    86c6:	e8 17       	cp	r30, r24
    86c8:	21 f0       	breq	.+8      	; 0x86d2 <_Z8char2idxc+0x18>
		if (cc == 0) return 0;
    86ca:	ee 23       	and	r30, r30
    86cc:	21 f0       	breq	.+8      	; 0x86d6 <_Z8char2idxc+0x1c>
	}
}

uint8_t char2idx (char c) {
	uint8_t ret;
	for (ret = 0;; ret++) {
    86ce:	9f 5f       	subi	r25, 0xFF	; 255
		char cc = pgm_read_byte(s_charTab + ret);
		if (cc == c) return ret;
		if (cc == 0) return 0;
	}
    86d0:	f5 cf       	rjmp	.-22     	; 0x86bc <_Z8char2idxc+0x2>
    86d2:	89 2f       	mov	r24, r25
    86d4:	08 95       	ret
uint8_t char2idx (char c) {
	uint8_t ret;
	for (ret = 0;; ret++) {
		char cc = pgm_read_byte(s_charTab + ret);
		if (cc == c) return ret;
		if (cc == 0) return 0;
    86d6:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    86d8:	08 95       	ret

000086da <_Z8idx2charh>:
char idx2char (uint8_t idx) {
	if (idx < NUMCHARS) return pgm_read_byte(s_charTab + idx);
    86da:	82 34       	cpi	r24, 0x42	; 66
    86dc:	30 f4       	brcc	.+12     	; 0x86ea <_Z8idx2charh+0x10>
    86de:	e8 2f       	mov	r30, r24
    86e0:	f0 e0       	ldi	r31, 0x00	; 0
    86e2:	e5 56       	subi	r30, 0x65	; 101
    86e4:	f1 4e       	sbci	r31, 0xE1	; 225
    86e6:	84 91       	lpm	r24, Z
    86e8:	08 95       	ret
	return ' ';
    86ea:	80 e2       	ldi	r24, 0x20	; 32
}
    86ec:	08 95       	ret

000086ee <_Z8editNamehhPhhh>:
	}
	Rotary.Rotary_diff = 0;
	return diff;
}

void editName (uint8_t x, uint8_t y, uint8_t *name, uint8_t len, uint8_t type) {
    86ee:	cf 92       	push	r12
    86f0:	df 92       	push	r13
    86f2:	ef 92       	push	r14
    86f4:	ff 92       	push	r15
    86f6:	0f 93       	push	r16
    86f8:	1f 93       	push	r17
    86fa:	cf 93       	push	r28
    86fc:	df 93       	push	r29
    86fe:	c8 2f       	mov	r28, r24
    8700:	16 2f       	mov	r17, r22
    8702:	7a 01       	movw	r14, r20
    8704:	c2 2e       	mov	r12, r18
    8706:	d0 2e       	mov	r13, r16
	lcd_puts_Pleft (y, PSTR(STR_NAME));
    8708:	65 e8       	ldi	r22, 0x85	; 133
    870a:	7b e1       	ldi	r23, 0x1B	; 27
    870c:	81 2f       	mov	r24, r17
    870e:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
	lcd_putsnAtt (11 * FW, y, (const char *) name, len, BSS);
    8712:	00 e1       	ldi	r16, 0x10	; 16
    8714:	2c 2d       	mov	r18, r12
    8716:	a7 01       	movw	r20, r14
    8718:	61 2f       	mov	r22, r17
    871a:	82 e4       	ldi	r24, 0x42	; 66
    871c:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <_Z12lcd_putsnAtthhPKchh>
	if (type) {
    8720:	dd 20       	and	r13, r13
    8722:	a9 f1       	breq	.+106    	; 0x878e <_Z8editNamehhPhhh+0xa0>
		lcd_char_inverse ( (11 + x) * FW, y, 1 * FW, s_editMode);
    8724:	d0 e0       	ldi	r29, 0x00	; 0
    8726:	ae 01       	movw	r20, r28
    8728:	45 5f       	subi	r20, 0xF5	; 245
    872a:	5f 4f       	sbci	r21, 0xFF	; 255
    872c:	84 2f       	mov	r24, r20
    872e:	88 0f       	add	r24, r24
    8730:	84 0f       	add	r24, r20
    8732:	20 91 a5 0d 	lds	r18, 0x0DA5
    8736:	46 e0       	ldi	r20, 0x06	; 6
    8738:	61 2f       	mov	r22, r17
    873a:	88 0f       	add	r24, r24
    873c:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <_Z16lcd_char_inversehhhh>
		lcd_rect (11 * FW - 2, y - 1, len * FW + 4, 9);
    8740:	4c 2d       	mov	r20, r12
    8742:	44 0f       	add	r20, r20
    8744:	4c 0d       	add	r20, r12
    8746:	44 0f       	add	r20, r20
    8748:	4c 5f       	subi	r20, 0xFC	; 252
    874a:	6f ef       	ldi	r22, 0xFF	; 255
    874c:	61 0f       	add	r22, r17
    874e:	29 e0       	ldi	r18, 0x09	; 9
    8750:	80 e4       	ldi	r24, 0x40	; 64
    8752:	0e 94 98 29 	call	0x5330	; 0x5330 <_Z8lcd_recthhhh>
		if (s_editMode) {
    8756:	80 91 a5 0d 	lds	r24, 0x0DA5
    875a:	88 23       	and	r24, r24
    875c:	c1 f0       	breq	.+48     	; 0x878e <_Z8editNamehhPhhh+0xa0>
			char v = name[x];
    875e:	ce 0d       	add	r28, r14
    8760:	df 1d       	adc	r29, r15
    8762:	88 81       	ld	r24, Y
			if (v) {
    8764:	81 11       	cpse	r24, r1
				v = char2idx (v);
    8766:	a9 df       	rcall	.-174    	; 0x86ba <_Z8char2idxc>
			}
			v = checkIncDec (v, 0, NUMCHARS - 1, type);
    8768:	2d 2d       	mov	r18, r13
    876a:	41 e4       	ldi	r20, 0x41	; 65
    876c:	60 e0       	ldi	r22, 0x00	; 0
    876e:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <_Z11checkIncDecaaah>
//	  	CHECK_INCDEC_H_MODELVAR_0( v ,NUMCHARS-1);
			v = idx2char (v);
    8772:	b3 df       	rcall	.-154    	; 0x86da <_Z8idx2charh>
			if (name[x] != v) {
    8774:	68 81       	ld	r22, Y
    8776:	70 e0       	ldi	r23, 0x00	; 0
    8778:	48 2f       	mov	r20, r24
    877a:	55 27       	eor	r21, r21
    877c:	47 fd       	sbrc	r20, 7
    877e:	50 95       	com	r21
    8780:	64 17       	cp	r22, r20
    8782:	75 07       	cpc	r23, r21
    8784:	21 f0       	breq	.+8      	; 0x878e <_Z8editNamehhPhhh+0xa0>
				name[x] = v;
    8786:	88 83       	st	Y, r24
				eeDirty (type);				// Do here or the last change is not stored in name[]
    8788:	8d 2d       	mov	r24, r13
    878a:	0e 94 4e 20 	call	0x409c	; 0x409c <_Z7eeDirtyh>
			}
		}
	}
	asm("");
}
    878e:	df 91       	pop	r29
    8790:	cf 91       	pop	r28
    8792:	1f 91       	pop	r17
    8794:	0f 91       	pop	r16
    8796:	ff 90       	pop	r15
    8798:	ef 90       	pop	r14
    879a:	df 90       	pop	r13
    879c:	cf 90       	pop	r12
    879e:	08 95       	ret

000087a0 <_Z12putsTrimModehhhhh>:

//	return y ;
}

#ifdef PHASES
void putsTrimMode (uint8_t x, uint8_t y, uint8_t phase, uint8_t idx, uint8_t att) {
    87a0:	ff 92       	push	r15
    87a2:	0f 93       	push	r16
    87a4:	1f 93       	push	r17
    87a6:	cf 93       	push	r28
    87a8:	df 93       	push	r29
    87aa:	c8 2f       	mov	r28, r24
    87ac:	d6 2f       	mov	r29, r22
    87ae:	f4 2e       	mov	r15, r20
    87b0:	12 2f       	mov	r17, r18
	int16_t v = getRawTrimValue (phase, idx);
    87b2:	62 2f       	mov	r22, r18
    87b4:	84 2f       	mov	r24, r20
    87b6:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z15getRawTrimValuehh>
    87ba:	fc 01       	movw	r30, r24

	if (v > TRIM_EXTENDED_MAX) {
    87bc:	e5 3f       	cpi	r30, 0xF5	; 245
    87be:	81 e0       	ldi	r24, 0x01	; 1
    87c0:	f8 07       	cpc	r31, r24
    87c2:	74 f0       	brlt	.+28     	; 0x87e0 <_Z12putsTrimModehhhhh+0x40>
		uint8_t p = v - TRIM_EXTENDED_MAX - 1;
    87c4:	9b e0       	ldi	r25, 0x0B	; 11
    87c6:	9e 0f       	add	r25, r30
		if (p >= phase) p += 1;
    87c8:	9f 15       	cp	r25, r15
    87ca:	10 f0       	brcs	.+4      	; 0x87d0 <_Z12putsTrimModehhhhh+0x30>
    87cc:	9c e0       	ldi	r25, 0x0C	; 12
    87ce:	9e 0f       	add	r25, r30
		lcd_putcAtt (x, y, '0' + p, att);
    87d0:	40 e3       	ldi	r20, 0x30	; 48
    87d2:	49 0f       	add	r20, r25
    87d4:	20 2f       	mov	r18, r16
    87d6:	6d 2f       	mov	r22, r29
    87d8:	8c 2f       	mov	r24, r28
    87da:	0e 94 31 26 	call	0x4c62	; 0x4c62 <_Z11lcd_putcAtthhch>
    87de:	07 c0       	rjmp	.+14     	; 0x87ee <_Z12putsTrimModehhhhh+0x4e>
	} else {
#ifdef FIX_MODE
		lcd_putsAttIdx (x, y, Str_1_RETA, idx, att);
    87e0:	21 2f       	mov	r18, r17
    87e2:	49 e0       	ldi	r20, 0x09	; 9
    87e4:	5d e1       	ldi	r21, 0x1D	; 29
    87e6:	6d 2f       	mov	r22, r29
    87e8:	8c 2f       	mov	r24, r28
    87ea:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
	}

//	lcd_outhex4( 64, 4*FH, v ) ;

	asm("");
}
    87ee:	df 91       	pop	r29
    87f0:	cf 91       	pop	r28
    87f2:	1f 91       	pop	r17
    87f4:	0f 91       	pop	r16
    87f6:	ff 90       	pop	r15
    87f8:	08 95       	ret

000087fa <_Z12menuPhaseOneh>:

void menuPhaseOne (uint8_t event) {
    87fa:	8f 92       	push	r8
    87fc:	9f 92       	push	r9
    87fe:	af 92       	push	r10
    8800:	bf 92       	push	r11
    8802:	cf 92       	push	r12
    8804:	df 92       	push	r13
    8806:	ef 92       	push	r14
    8808:	ff 92       	push	r15
    880a:	0f 93       	push	r16
    880c:	1f 93       	push	r17
    880e:	cf 93       	push	r28
    8810:	df 93       	push	r29
    8812:	18 2f       	mov	r17, r24
	PhaseData *phase = &g_model.phaseData[s_currIdx];
    8814:	c0 91 58 0e 	lds	r28, 0x0E58
    8818:	2a e0       	ldi	r18, 0x0A	; 10
    881a:	c2 9f       	mul	r28, r18
    881c:	e0 01       	movw	r28, r0
    881e:	11 24       	eor	r1, r1
    8820:	ca 51       	subi	r28, 0x1A	; 26
    8822:	db 4f       	sbci	r29, 0xFB	; 251
	SUBMENU(STR_FL_MODE, 4, { 0, 3, 0 /*, 0*/});
    8824:	8c e2       	ldi	r24, 0x2C	; 44
    8826:	99 e1       	ldi	r25, 0x19	; 25
    8828:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>
    882c:	03 e0       	ldi	r16, 0x03	; 3
    882e:	22 e0       	ldi	r18, 0x02	; 2
    8830:	49 e2       	ldi	r20, 0x29	; 41
    8832:	59 e1       	ldi	r21, 0x19	; 25
    8834:	61 2f       	mov	r22, r17
    8836:	85 e4       	ldi	r24, 0x45	; 69
    8838:	9e e0       	ldi	r25, 0x0E	; 14
    883a:	0e 94 3a 3a 	call	0x7474	; 0x7474 <_ZN7MState25checkEhPKhhh>
	lcd_putc (8 * FW, 0, '1' + s_currIdx);
    883e:	40 91 58 0e 	lds	r20, 0x0E58
    8842:	4f 5c       	subi	r20, 0xCF	; 207
    8844:	60 e0       	ldi	r22, 0x00	; 0
    8846:	80 e3       	ldi	r24, 0x30	; 48
    8848:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <_Z8lcd_putchhc>

	uint8_t sub = mstate2.m_posVert;
    884c:	b0 90 45 0e 	lds	r11, 0x0E45
    8850:	38 e0       	ldi	r19, 0x08	; 8
    8852:	c3 2e       	mov	r12, r19
//  int8_t editMode = s_editMode;

	for (uint8_t i = 0; i < 4; i += 1) {
    8854:	d1 2c       	mov	r13, r1
		uint8_t y = (i + 1) * FH;
		uint8_t attr = (sub == i ? InverseBlink : 0);
    8856:	bd 10       	cpse	r11, r13
    8858:	03 c0       	rjmp	.+6      	; 0x8860 <_Z12menuPhaseOneh+0x66>
    885a:	a0 90 9f 0d 	lds	r10, 0x0D9F
    885e:	01 c0       	rjmp	.+2      	; 0x8862 <_Z12menuPhaseOneh+0x68>
    8860:	a1 2c       	mov	r10, r1

		switch (i) {
    8862:	82 e0       	ldi	r24, 0x02	; 2
    8864:	d8 16       	cp	r13, r24
    8866:	09 f4       	brne	.+2      	; 0x886a <_Z12menuPhaseOneh+0x70>
    8868:	64 c0       	rjmp	.+200    	; 0x8932 <_Z12menuPhaseOneh+0x138>
    886a:	e3 e0       	ldi	r30, 0x03	; 3
    886c:	de 16       	cp	r13, r30
    886e:	09 f4       	brne	.+2      	; 0x8872 <_Z12menuPhaseOneh+0x78>
    8870:	75 c0       	rjmp	.+234    	; 0x895c <_Z12menuPhaseOneh+0x162>
    8872:	f1 e0       	ldi	r31, 0x01	; 1
    8874:	df 16       	cp	r13, r31
    8876:	81 f0       	breq	.+32     	; 0x8898 <_Z12menuPhaseOneh+0x9e>
			case 0: // switch
//				lcd_puts_Pleft( y, PSTR(STR_SWITCH) ) ;
				lcd_puts_Pleft (y, PSTR(STR_SWITCH_TRIMS"\037""Fade In""\037""Fade Out"));
    8878:	6b e0       	ldi	r22, 0x0B	; 11
    887a:	79 e1       	ldi	r23, 0x19	; 25
    887c:	8c 2d       	mov	r24, r12
    887e:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
				phase->swtch = edit_dr_switch (8 * FW, y, phase->swtch, attr,
						attr ? EDIT_DR_SWITCH_EDIT : 0);
    8882:	01 e0       	ldi	r16, 0x01	; 1
    8884:	a1 10       	cpse	r10, r1
    8886:	01 c0       	rjmp	.+2      	; 0x888a <_Z12menuPhaseOneh+0x90>
    8888:	00 e0       	ldi	r16, 0x00	; 0
    888a:	2a 2d       	mov	r18, r10
    888c:	48 85       	ldd	r20, Y+8	; 0x08
    888e:	6c 2d       	mov	r22, r12
    8890:	80 e3       	ldi	r24, 0x30	; 48
    8892:	4c db       	rcall	.-2408   	; 0x7f2c <_Z14edit_dr_switchhhahh>
    8894:	88 87       	std	Y+8, r24	; 0x08
				break;
    8896:	7d c0       	rjmp	.+250    	; 0x8992 <_Z12menuPhaseOneh+0x198>
    8898:	7e 01       	movw	r14, r28

	for (uint8_t i = 0; i < 4; i += 1) {
		uint8_t y = (i + 1) * FH;
		uint8_t attr = (sub == i ? InverseBlink : 0);

		switch (i) {
    889a:	2c e3       	ldi	r18, 0x3C	; 60
    889c:	82 2e       	mov	r8, r18
    889e:	91 2c       	mov	r9, r1
				break;

			case 1: // trims
//				lcd_puts_Pleft( y, PSTR(STR_TRIMS) ) ;
				for (uint8_t t = 0; t < NUM_STICKS; t += 1) {
					putsTrimMode ( (10 + t) * FW, y, s_currIdx + 1, t, (g_posHorz == t) ? attr : 0);
    88a0:	80 91 7e 0d 	lds	r24, 0x0D7E
    88a4:	89 15       	cp	r24, r9
    88a6:	11 f0       	breq	.+4      	; 0x88ac <_Z12menuPhaseOneh+0xb2>
    88a8:	00 e0       	ldi	r16, 0x00	; 0
    88aa:	01 c0       	rjmp	.+2      	; 0x88ae <_Z12menuPhaseOneh+0xb4>
    88ac:	0a 2d       	mov	r16, r10
    88ae:	40 91 58 0e 	lds	r20, 0x0E58
    88b2:	4f 5f       	subi	r20, 0xFF	; 255
    88b4:	29 2d       	mov	r18, r9
    88b6:	6c 2d       	mov	r22, r12
    88b8:	88 2d       	mov	r24, r8
    88ba:	72 df       	rcall	.-284    	; 0x87a0 <_Z12putsTrimModehhhhh>
#ifndef NOPOTSCROLL
					if (attr && g_posHorz == t && (s_editing))
    88bc:	aa 20       	and	r10, r10
    88be:	79 f1       	breq	.+94     	; 0x891e <_Z12menuPhaseOneh+0x124>
    88c0:	80 91 7e 0d 	lds	r24, 0x0D7E
    88c4:	89 11       	cpse	r24, r9
    88c6:	2b c0       	rjmp	.+86     	; 0x891e <_Z12menuPhaseOneh+0x124>
    88c8:	80 91 a4 0d 	lds	r24, 0x0DA4
    88cc:	88 23       	and	r24, r24
    88ce:	39 f1       	breq	.+78     	; 0x891e <_Z12menuPhaseOneh+0x124>
#else
							if (attr && g_posHorz==t && ( s_editMode ) )
#endif
							{
						int16_t v = phase->trim[t] + ( TRIM_EXTENDED_MAX + 1);
    88d0:	f7 01       	movw	r30, r14
    88d2:	00 81       	ld	r16, Z
    88d4:	11 81       	ldd	r17, Z+1	; 0x01
    88d6:	0b 50       	subi	r16, 0x0B	; 11
    88d8:	1e 4f       	sbci	r17, 0xFE	; 254
						lcd_outhex4 (90, 6 * FH, v);
    88da:	a8 01       	movw	r20, r16
    88dc:	60 e3       	ldi	r22, 0x30	; 48
    88de:	8a e5       	ldi	r24, 0x5A	; 90
    88e0:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <_Z11lcd_outhex4hhj>
						if (v < TRIM_EXTENDED_MAX) {
    88e4:	04 3f       	cpi	r16, 0xF4	; 244
    88e6:	f1 e0       	ldi	r31, 0x01	; 1
    88e8:	1f 07       	cpc	r17, r31
    88ea:	14 f4       	brge	.+4      	; 0x88f0 <_Z12menuPhaseOneh+0xf6>
							v = TRIM_EXTENDED_MAX;
    88ec:	04 ef       	ldi	r16, 0xF4	; 244
    88ee:	11 e0       	ldi	r17, 0x01	; 1
						}
						int16_t u = v;
						v = checkIncDec16 (u, TRIM_EXTENDED_MAX, TRIM_EXTENDED_MAX + MAX_MODES,
						EE_MODEL);
    88f0:	22 e0       	ldi	r18, 0x02	; 2
    88f2:	48 ef       	ldi	r20, 0xF8	; 248
    88f4:	51 e0       	ldi	r21, 0x01	; 1
    88f6:	64 ef       	ldi	r22, 0xF4	; 244
    88f8:	71 e0       	ldi	r23, 0x01	; 1
    88fa:	c8 01       	movw	r24, r16
    88fc:	0e 94 b7 12 	call	0x256e	; 0x256e <_Z13checkIncDec16iiih>

						if (v != u) {
    8900:	80 17       	cp	r24, r16
    8902:	91 07       	cpc	r25, r17
    8904:	61 f0       	breq	.+24     	; 0x891e <_Z12menuPhaseOneh+0x124>
							if (v == TRIM_EXTENDED_MAX) v = 0;
    8906:	84 3f       	cpi	r24, 0xF4	; 244
    8908:	21 e0       	ldi	r18, 0x01	; 1
    890a:	92 07       	cpc	r25, r18
    890c:	11 f4       	brne	.+4      	; 0x8912 <_Z12menuPhaseOneh+0x118>
    890e:	80 e0       	ldi	r24, 0x00	; 0
    8910:	90 e0       	ldi	r25, 0x00	; 0
							phase->trim[t] = v - ( TRIM_EXTENDED_MAX + 1);
    8912:	ac 01       	movw	r20, r24
    8914:	45 5f       	subi	r20, 0xF5	; 245
    8916:	51 40       	sbci	r21, 0x01	; 1
    8918:	f7 01       	movw	r30, r14
    891a:	51 83       	std	Z+1, r21	; 0x01
    891c:	40 83       	st	Z, r20
						attr ? EDIT_DR_SWITCH_EDIT : 0);
				break;

			case 1: // trims
//				lcd_puts_Pleft( y, PSTR(STR_TRIMS) ) ;
				for (uint8_t t = 0; t < NUM_STICKS; t += 1) {
    891e:	93 94       	inc	r9
    8920:	f2 e0       	ldi	r31, 0x02	; 2
    8922:	ef 0e       	add	r14, r31
    8924:	f1 1c       	adc	r15, r1
    8926:	26 e0       	ldi	r18, 0x06	; 6
    8928:	82 0e       	add	r8, r18
    892a:	84 e0       	ldi	r24, 0x04	; 4
    892c:	98 12       	cpse	r9, r24
    892e:	b8 cf       	rjmp	.-144    	; 0x88a0 <_Z12menuPhaseOneh+0xa6>
    8930:	30 c0       	rjmp	.+96     	; 0x8992 <_Z12menuPhaseOneh+0x198>
					}
				}
				break;

			case 2: // fadeIn
				if (attr)
    8932:	aa 20       	and	r10, r10
    8934:	51 f0       	breq	.+20     	; 0x894a <_Z12menuPhaseOneh+0x150>
				CHECK_INCDEC_H_MODELVAR_0(phase->fadeIn, 15);
    8936:	89 85       	ldd	r24, Y+9	; 0x09
    8938:	6f e0       	ldi	r22, 0x0F	; 15
    893a:	8f 70       	andi	r24, 0x0F	; 15
    893c:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    8940:	8f 70       	andi	r24, 0x0F	; 15
    8942:	99 85       	ldd	r25, Y+9	; 0x09
    8944:	90 7f       	andi	r25, 0xF0	; 240
    8946:	98 2b       	or	r25, r24
    8948:	99 87       	std	Y+9, r25	; 0x09
//				lcd_label_decimal( y, PSTR("Fade In"), phase->fadeIn * 5, attr | PREC1 ) ;
				lcd_outdezAtt (17 * FW, y, phase->fadeIn * 5, attr | PREC1);
    894a:	49 85       	ldd	r20, Y+9	; 0x09
    894c:	4f 70       	andi	r20, 0x0F	; 15
    894e:	2a 2d       	mov	r18, r10
    8950:	20 62       	ori	r18, 0x20	; 32
    8952:	e5 e0       	ldi	r30, 0x05	; 5
    8954:	4e 9f       	mul	r20, r30
    8956:	a0 01       	movw	r20, r0
    8958:	11 24       	eor	r1, r1
    895a:	17 c0       	rjmp	.+46     	; 0x898a <_Z12menuPhaseOneh+0x190>

				break;

			case 3: // fadeOut
				if (attr)
    895c:	aa 20       	and	r10, r10
    895e:	61 f0       	breq	.+24     	; 0x8978 <_Z12menuPhaseOneh+0x17e>
				CHECK_INCDEC_H_MODELVAR_0(phase->fadeOut, 15);
    8960:	89 85       	ldd	r24, Y+9	; 0x09
    8962:	6f e0       	ldi	r22, 0x0F	; 15
    8964:	82 95       	swap	r24
    8966:	8f 70       	andi	r24, 0x0F	; 15
    8968:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    896c:	82 95       	swap	r24
    896e:	80 7f       	andi	r24, 0xF0	; 240
    8970:	99 85       	ldd	r25, Y+9	; 0x09
    8972:	9f 70       	andi	r25, 0x0F	; 15
    8974:	98 2b       	or	r25, r24
    8976:	99 87       	std	Y+9, r25	; 0x09
//				lcd_label_decimal( y, PSTR("Fade Out"), phase->fadeOut * 5, attr | PREC1 ) ;
				lcd_outdezAtt (17 * FW, y, phase->fadeOut * 5, attr | PREC1);
    8978:	49 85       	ldd	r20, Y+9	; 0x09
    897a:	42 95       	swap	r20
    897c:	4f 70       	andi	r20, 0x0F	; 15
    897e:	2a 2d       	mov	r18, r10
    8980:	20 62       	ori	r18, 0x20	; 32
    8982:	f5 e0       	ldi	r31, 0x05	; 5
    8984:	4f 9f       	mul	r20, r31
    8986:	a0 01       	movw	r20, r0
    8988:	11 24       	eor	r1, r1
    898a:	6c 2d       	mov	r22, r12
    898c:	86 e6       	ldi	r24, 0x66	; 102
    898e:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
	lcd_putc (8 * FW, 0, '1' + s_currIdx);

	uint8_t sub = mstate2.m_posVert;
//  int8_t editMode = s_editMode;

	for (uint8_t i = 0; i < 4; i += 1) {
    8992:	d3 94       	inc	r13
    8994:	28 e0       	ldi	r18, 0x08	; 8
    8996:	c2 0e       	add	r12, r18
    8998:	84 e0       	ldi	r24, 0x04	; 4
    899a:	d8 12       	cpse	r13, r24
    899c:	5c cf       	rjmp	.-328    	; 0x8856 <_Z12menuPhaseOneh+0x5c>
//				lcd_label_decimal( y, PSTR("Fade Out"), phase->fadeOut * 5, attr | PREC1 ) ;
				lcd_outdezAtt (17 * FW, y, phase->fadeOut * 5, attr | PREC1);
				break;
		}
	}
}
    899e:	df 91       	pop	r29
    89a0:	cf 91       	pop	r28
    89a2:	1f 91       	pop	r17
    89a4:	0f 91       	pop	r16
    89a6:	ff 90       	pop	r15
    89a8:	ef 90       	pop	r14
    89aa:	df 90       	pop	r13
    89ac:	cf 90       	pop	r12
    89ae:	bf 90       	pop	r11
    89b0:	af 90       	pop	r10
    89b2:	9f 90       	pop	r9
    89b4:	8f 90       	pop	r8
    89b6:	08 95       	ret

000089b8 <_Z18dispFlightModenamehhh>:

void dispFlightModename (uint8_t x, uint8_t y, uint8_t mode) {
    89b8:	1f 93       	push	r17
    89ba:	cf 93       	push	r28
    89bc:	df 93       	push	r29
    89be:	c8 2f       	mov	r28, r24
    89c0:	d6 2f       	mov	r29, r22
    89c2:	14 2f       	mov	r17, r20
	lcd_puts_P (x, y, PSTR(STR_SP_FM) + 1);
    89c4:	48 e0       	ldi	r20, 0x08	; 8
    89c6:	59 e1       	ldi	r21, 0x19	; 25
    89c8:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <_Z10lcd_puts_PhhPKc>
	lcd_putc (x + 2 * FW, y, '0' + mode);
    89cc:	40 e3       	ldi	r20, 0x30	; 48
    89ce:	41 0f       	add	r20, r17
    89d0:	6d 2f       	mov	r22, r29
    89d2:	8c e0       	ldi	r24, 0x0C	; 12
    89d4:	8c 0f       	add	r24, r28
}
    89d6:	df 91       	pop	r29
    89d8:	cf 91       	pop	r28
    89da:	1f 91       	pop	r17
	}
}

void dispFlightModename (uint8_t x, uint8_t y, uint8_t mode) {
	lcd_puts_P (x, y, PSTR(STR_SP_FM) + 1);
	lcd_putc (x + 2 * FW, y, '0' + mode);
    89dc:	0c 94 c2 26 	jmp	0x4d84	; 0x4d84 <_Z8lcd_putchhc>

000089e0 <_Z15menuModelPhasesh>:
}

void menuModelPhases (uint8_t event) {
    89e0:	bf 92       	push	r11
    89e2:	cf 92       	push	r12
    89e4:	df 92       	push	r13
    89e6:	ef 92       	push	r14
    89e8:	ff 92       	push	r15
    89ea:	0f 93       	push	r16
    89ec:	1f 93       	push	r17
    89ee:	cf 93       	push	r28
    89f0:	df 93       	push	r29
    89f2:	c8 2f       	mov	r28, r24
	uint8_t i;
	uint8_t attr;

	TITLEP (Str_Modes);
    89f4:	85 e3       	ldi	r24, 0x35	; 53
    89f6:	9d e1       	ldi	r25, 0x1D	; 29
    89f8:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>
	static MState2 mstate2;
//	if (SubMenuFromIndex)
//	{
	mstate2.check_columns (event, 5 - 1 - 1);
    89fc:	43 e0       	ldi	r20, 0x03	; 3
    89fe:	6c 2f       	mov	r22, r28
    8a00:	84 e4       	ldi	r24, 0x44	; 68
    8a02:	9e e0       	ldi	r25, 0x0E	; 14
    8a04:	0e 94 07 3c 	call	0x780e	; 0x780e <_ZN7MState213check_columnsEhh>
//	{
//		mstate2.check_simple(event,e_Phases,menuTabModel,DIM(menuTabModel),5-1) ;
//	}
////	SIMPLE_MENU(Str_Modes, menuTabModel, e_Phases, 5 ) ;

	uint8_t sub = mstate2.m_posVert;
    8a08:	b0 90 44 0e 	lds	r11, 0x0E44
//	evalOffset(sub, 6) ;

	switch (event) {
    8a0c:	c0 36       	cpi	r28, 0x60	; 96
    8a0e:	11 f0       	breq	.+4      	; 0x8a14 <_Z15menuModelPhasesh+0x34>
    8a10:	ce 36       	cpi	r28, 0x6E	; 110
    8a12:	49 f4       	brne	.+18     	; 0x8a26 <_Z15menuModelPhasesh+0x46>
		case EVT_KEY_FIRST(KEY_MENU):
		case EVT_KEY_FIRST(BTN_RE):
//			if ( sub > 0 ) //&& sub <= MAX_MODES )
//			{
//        s_currIdx = sub - 1 ;
			s_currIdx = sub;
    8a14:	b0 92 58 0e 	sts	0x0E58, r11
//				RotaryState = ROTARY_MENU_UD ;
			killEvents (event);
    8a18:	8c 2f       	mov	r24, r28
    8a1a:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
			pushMenu (menuPhaseOne);
    8a1e:	8d ef       	ldi	r24, 0xFD	; 253
    8a20:	93 e4       	ldi	r25, 0x43	; 67
    8a22:	0e 94 ab 18 	call	0x3156	; 0x3156 <_Z8pushMenuPFvhE>
//    	}
			break;
	}

#ifdef FIX_MODE
	lcd_puts_Pleft (2 * FH, PSTR(STR_SP_FM0"\012RETA"));
    8a26:	6d ef       	ldi	r22, 0xFD	; 253
    8a28:	78 e1       	ldi	r23, 0x18	; 24
    8a2a:	80 e1       	ldi	r24, 0x10	; 16
    8a2c:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
    8a30:	46 ee       	ldi	r20, 0xE6	; 230
    8a32:	e4 2e       	mov	r14, r20
    8a34:	44 e0       	ldi	r20, 0x04	; 4
    8a36:	f4 2e       	mov	r15, r20
    8a38:	58 e1       	ldi	r21, 0x18	; 24
    8a3a:	d5 2e       	mov	r13, r21
			lcd_putsAttIdx( (9+i)*FW, 2*FH, Str_1_RETA, pgm_read_byte(modn12x3+g_eeGeneral.stickMode*4+(i-1))-1, 0 );
		}
	}
#endif

	for (i = 0; i < MAX_MODES; i += 1) {
    8a3c:	10 e0       	ldi	r17, 0x00	; 0
		uint8_t y = (i + 3) * FH;
		attr = (i == sub) ? INVERS : 0;
    8a3e:	cc 24       	eor	r12, r12
    8a40:	c3 94       	inc	r12
    8a42:	1b 11       	cpse	r17, r11
    8a44:	c1 2c       	mov	r12, r1
		PhaseData *p = &g_model.phaseData[i];
		FORCE_INDIRECT(p);
    8a46:	e7 01       	movw	r28, r14
		if (p->fadeIn || p->fadeOut) {
    8a48:	89 85       	ldd	r24, Y+9	; 0x09
    8a4a:	88 23       	and	r24, r24
    8a4c:	31 f0       	breq	.+12     	; 0x8a5a <_Z15menuModelPhasesh+0x7a>
			lcd_putcAtt (20 * FW + 1, y, '*', attr);
    8a4e:	2c 2d       	mov	r18, r12
    8a50:	4a e2       	ldi	r20, 0x2A	; 42
    8a52:	6d 2d       	mov	r22, r13
    8a54:	89 e7       	ldi	r24, 0x79	; 121
    8a56:	0e 94 31 26 	call	0x4c62	; 0x4c62 <_Z11lcd_putcAtthhch>
		}
		dispFlightModename ( FW, y, i + 1);
    8a5a:	1f 5f       	subi	r17, 0xFF	; 255
    8a5c:	41 2f       	mov	r20, r17
    8a5e:	6d 2d       	mov	r22, r13
    8a60:	86 e0       	ldi	r24, 0x06	; 6
    8a62:	aa df       	rcall	.-172    	; 0x89b8 <_Z18dispFlightModenamehhh>
		putsDrSwitches (4 * FW, y, p->swtch, attr);
    8a64:	2c 2d       	mov	r18, r12
    8a66:	48 85       	ldd	r20, Y+8	; 0x08
    8a68:	6d 2d       	mov	r22, r13
    8a6a:	88 e1       	ldi	r24, 0x18	; 24
    8a6c:	0e 94 c9 10 	call	0x2192	; 0x2192 <_Z14putsDrSwitcheshhah>
    8a70:	dc e3       	ldi	r29, 0x3C	; 60
		for (uint8_t t = 0; t < NUM_STICKS; t += 1) {
    8a72:	c0 e0       	ldi	r28, 0x00	; 0
			putsTrimMode ( (10 + t) * FW, y, i + 1, t, attr);
    8a74:	0c 2d       	mov	r16, r12
    8a76:	2c 2f       	mov	r18, r28
    8a78:	41 2f       	mov	r20, r17
    8a7a:	6d 2d       	mov	r22, r13
    8a7c:	8d 2f       	mov	r24, r29
    8a7e:	90 de       	rcall	.-736    	; 0x87a0 <_Z12putsTrimModehhhhh>
		if (p->fadeIn || p->fadeOut) {
			lcd_putcAtt (20 * FW + 1, y, '*', attr);
		}
		dispFlightModename ( FW, y, i + 1);
		putsDrSwitches (4 * FW, y, p->swtch, attr);
		for (uint8_t t = 0; t < NUM_STICKS; t += 1) {
    8a80:	cf 5f       	subi	r28, 0xFF	; 255
    8a82:	da 5f       	subi	r29, 0xFA	; 250
    8a84:	c4 30       	cpi	r28, 0x04	; 4
    8a86:	b1 f7       	brne	.-20     	; 0x8a74 <_Z15menuModelPhasesh+0x94>
    8a88:	8a e0       	ldi	r24, 0x0A	; 10
    8a8a:	e8 0e       	add	r14, r24
    8a8c:	f1 1c       	adc	r15, r1
    8a8e:	88 e0       	ldi	r24, 0x08	; 8
    8a90:	d8 0e       	add	r13, r24
			lcd_putsAttIdx( (9+i)*FW, 2*FH, Str_1_RETA, pgm_read_byte(modn12x3+g_eeGeneral.stickMode*4+(i-1))-1, 0 );
		}
	}
#endif

	for (i = 0; i < MAX_MODES; i += 1) {
    8a92:	14 30       	cpi	r17, 0x04	; 4
    8a94:	a1 f6       	brne	.-88     	; 0x8a3e <_Z15menuModelPhasesh+0x5e>
		}
//    lcd_outdezAtt(17*FW, y, p->fadeIn * 5, attr | PREC1 ) ;
//    lcd_outdezAtt(21*FW, y, p->fadeOut * 5, attr | PREC1 ) ;
	}

	i = getFlightPhase ();
    8a96:	0e 94 a1 1b 	call	0x3742	; 0x3742 <_Z14getFlightPhasev>
	lcd_rect (0, (i + 2) * FH - 1, 4 * FW + 2, 9);
    8a9a:	68 2f       	mov	r22, r24
    8a9c:	66 0f       	add	r22, r22
    8a9e:	66 0f       	add	r22, r22
    8aa0:	66 0f       	add	r22, r22
    8aa2:	61 5f       	subi	r22, 0xF1	; 241
    8aa4:	29 e0       	ldi	r18, 0x09	; 9
    8aa6:	4a e1       	ldi	r20, 0x1A	; 26
    8aa8:	80 e0       	ldi	r24, 0x00	; 0
}
    8aaa:	df 91       	pop	r29
    8aac:	cf 91       	pop	r28
    8aae:	1f 91       	pop	r17
    8ab0:	0f 91       	pop	r16
    8ab2:	ff 90       	pop	r15
    8ab4:	ef 90       	pop	r14
    8ab6:	df 90       	pop	r13
    8ab8:	cf 90       	pop	r12
    8aba:	bf 90       	pop	r11
//    lcd_outdezAtt(17*FW, y, p->fadeIn * 5, attr | PREC1 ) ;
//    lcd_outdezAtt(21*FW, y, p->fadeOut * 5, attr | PREC1 ) ;
	}

	i = getFlightPhase ();
	lcd_rect (0, (i + 2) * FH - 1, 4 * FW + 2, 9);
    8abc:	0c 94 98 29 	jmp	0x5330	; 0x5330 <_Z8lcd_recthhhh>

00008ac0 <_Z8putc_0_1hhh>:
}

const prog_char APM menuWhenDone[] = STR_MENU_DONE;

void putc_0_1 (uint8_t x, uint8_t y, uint8_t value) {
	lcd_putcAtt (x, y, value + '0', value ? INVERS : 0);
    8ac0:	21 e0       	ldi	r18, 0x01	; 1
    8ac2:	41 11       	cpse	r20, r1
    8ac4:	01 c0       	rjmp	.+2      	; 0x8ac8 <_Z8putc_0_1hhh+0x8>
    8ac6:	20 e0       	ldi	r18, 0x00	; 0
    8ac8:	40 5d       	subi	r20, 0xD0	; 208
    8aca:	0c 94 31 26 	jmp	0x4c62	; 0x4c62 <_Z11lcd_putcAtthhch>

00008ace <_Z13menuProcIndexh>:
			lcd_char_inverse (0, highlight * FH, 66, 0);
		}
	}
}

void menuProcIndex (uint8_t event) {
    8ace:	5f 92       	push	r5
    8ad0:	6f 92       	push	r6
    8ad2:	7f 92       	push	r7
    8ad4:	8f 92       	push	r8
    8ad6:	9f 92       	push	r9
    8ad8:	af 92       	push	r10
    8ada:	bf 92       	push	r11
    8adc:	cf 92       	push	r12
    8ade:	df 92       	push	r13
    8ae0:	ef 92       	push	r14
    8ae2:	ff 92       	push	r15
    8ae4:	0f 93       	push	r16
    8ae6:	1f 93       	push	r17
    8ae8:	cf 93       	push	r28
    8aea:	df 93       	push	r29
	static MState2 mstate;

//	uint8_t saveEvent = event ;

	event = indexProcess (event, &mstate, 4);
    8aec:	44 e0       	ldi	r20, 0x04	; 4
    8aee:	6b e3       	ldi	r22, 0x3B	; 59
    8af0:	7e e0       	ldi	r23, 0x0E	; 14
    8af2:	0e 94 5e 35 	call	0x6abc	; 0x6abc <_ZL12indexProcesshP7MState2h>
    8af6:	f8 2e       	mov	r15, r24
	mstate.check (event, Columns, 0, IlinesCount - 1);
    8af8:	00 91 5b 0e 	lds	r16, 0x0E5B
    8afc:	01 50       	subi	r16, 0x01	; 1
    8afe:	40 91 56 0e 	lds	r20, 0x0E56
    8b02:	50 91 57 0e 	lds	r21, 0x0E57
    8b06:	20 e0       	ldi	r18, 0x00	; 0
    8b08:	68 2f       	mov	r22, r24
    8b0a:	8b e3       	ldi	r24, 0x3B	; 59
    8b0c:	9e e0       	ldi	r25, 0x0E	; 14
    8b0e:	0e 94 3a 3a 	call	0x7474	; 0x7474 <_ZN7MState25checkEhPKhhh>
//	Tevent = event = saveEvent ;

	uint8_t sub = mstate.m_posVert;
    8b12:	10 91 3b 0e 	lds	r17, 0x0E3B
	uint8_t y = 1 * FH;
	uint8_t subN = 0;
//	Columns = &ProgColumns[COLUMNS_0] ;
//	IlinesCount = 0 ;
	uint8_t blink = InverseBlink;
    8b16:	b0 90 9f 0d 	lds	r11, 0x0D9F
	switch (SubmenuIndex) {
    8b1a:	40 91 5c 0e 	lds	r20, 0x0E5C
    8b1e:	50 e0       	ldi	r21, 0x00	; 0
    8b20:	4c 30       	cpi	r20, 0x0C	; 12
    8b22:	51 05       	cpc	r21, r1
    8b24:	08 f0       	brcs	.+2      	; 0x8b28 <_Z13menuProcIndexh+0x5a>
    8b26:	0b c6       	rjmp	.+3094   	; 0x973e <_Z13menuProcIndexh+0xc70>
    8b28:	fa 01       	movw	r30, r20
    8b2a:	e1 57       	subi	r30, 0x71	; 113
    8b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    8b2e:	0c 94 3b 72 	jmp	0xe476	; 0xe476 <__tablejump2__>
		case M_INDEX:
			TITLEP (Str_Radio_Setup);
    8b32:	88 e7       	ldi	r24, 0x78	; 120
    8b34:	9d e1       	ldi	r25, 0x1D	; 29
    8b36:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>
			IlinesCount = 11;
    8b3a:	8b e0       	ldi	r24, 0x0B	; 11
    8b3c:	80 93 5b 0e 	sts	0x0E5B, r24
			sub += 1;
    8b40:	41 e0       	ldi	r20, 0x01	; 1
    8b42:	41 0f       	add	r20, r17
			static const prog_char * const n_Strings[11] PROGMEM = {
					Str_Display, Str_AudioHaptic, Str_Alarms, Str_General, Str_Controls,
					Str_Hardware, Str_Calibration, Str_Trainer, Str_Version, Str_DiagSwtch,
					Str_DiagAna };

			displayIndex (n_Strings, 4, 7, sub);
    8b44:	64 e0       	ldi	r22, 0x04	; 4
    8b46:	8a e5       	ldi	r24, 0x5A	; 90
    8b48:	98 e1       	ldi	r25, 0x18	; 24
    8b4a:	0e 94 1a 36 	call	0x6c34	; 0x6c34 <_ZL12displayIndexPKPKchhh.constprop.5>
			break;
    8b4e:	f7 c5       	rjmp	.+3054   	; 0x973e <_Z13menuProcIndexh+0xc70>

		case M_DISPLAY: {
			TITLEP (Str_Display);
    8b50:	81 e0       	ldi	r24, 0x01	; 1
    8b52:	9c e1       	ldi	r25, 0x1C	; 28
    8b54:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>
			IlinesCount = 6;
    8b58:	86 e0       	ldi	r24, 0x06	; 6
    8b5a:	80 93 5b 0e 	sts	0x0E5B, r24
			uint8_t attr;
//			y = FH ;
			attr = (sub == subN) ? blink : 0;
    8b5e:	11 23       	and	r17, r17
    8b60:	11 f0       	breq	.+4      	; 0x8b66 <_Z13menuProcIndexh+0x98>
    8b62:	c0 e0       	ldi	r28, 0x00	; 0
    8b64:	01 c0       	rjmp	.+2      	; 0x8b68 <_Z13menuProcIndexh+0x9a>
    8b66:	cb 2d       	mov	r28, r11
			lcd_xlabel_decimal (y, PSTR(STR_CONTRAST), g_eeGeneral.contrast, attr, PARAM_OFS);
    8b68:	40 91 10 06 	lds	r20, 0x0610
    8b6c:	50 e0       	ldi	r21, 0x00	; 0
    8b6e:	06 e6       	ldi	r16, 0x66	; 102
    8b70:	2c 2f       	mov	r18, r28
    8b72:	61 e5       	ldi	r22, 0x51	; 81
    8b74:	78 e1       	ldi	r23, 0x18	; 24
    8b76:	88 e0       	ldi	r24, 0x08	; 8
    8b78:	0e 94 1b 3a 	call	0x7436	; 0x7436 <_Z18lcd_xlabel_decimalhPKcjhh>
//      lcd_puts_Pleft( y, PSTR(STR_CONTRAST) ) ;
//      lcd_outdezAtt( PARAM_OFS, y, g_eeGeneral.contrast, attr ) ;
			if (attr) {
    8b7c:	cc 23       	and	r28, r28
    8b7e:	51 f0       	breq	.+20     	; 0x8b94 <_Z13menuProcIndexh+0xc6>
				CHECK_INCDEC_H_GENVAR(g_eeGeneral.contrast, LCD_MINCONTRAST, LCD_MAXCONTRAST);
    8b80:	4d e2       	ldi	r20, 0x2D	; 45
    8b82:	6a e0       	ldi	r22, 0x0A	; 10
    8b84:	80 91 10 06 	lds	r24, 0x0610
    8b88:	0e 94 92 13 	call	0x2724	; 0x2724 <_Z14checkIncDec_hgaaa>
    8b8c:	80 93 10 06 	sts	0x0610, r24
				lcdSetContrast ();
    8b90:	0e 94 09 2a 	call	0x5412	; 0x5412 <_Z14lcdSetContrastv>
			y += FH;
			subN += 1;

			attr = 0;
			lcd_puts_Pleft (y,
					PSTR(STR_LIGHT_SWITCH"\037""\037"STR_LIGHT_AFTER"\037"STR_LIGHT_STICK));
    8b94:	6f e1       	ldi	r22, 0x1F	; 31
    8b96:	78 e1       	ldi	r23, 0x18	; 24
    8b98:	80 e1       	ldi	r24, 0x10	; 16
    8b9a:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
//      lcd_puts_Pleft( y,PSTR(STR_LIGHT_SWITCH));
			if (sub == subN) {
    8b9e:	11 30       	cpi	r17, 0x01	; 1
    8ba0:	51 f4       	brne	.+20     	; 0x8bb6 <_Z13menuProcIndexh+0xe8>
				attr = blink;
				CHECK_INCDEC_GENERALSWITCH(g_eeGeneral.lightSw, -MAX_DRSWITCH, MAX_DRSWITCH);
    8ba2:	46 e1       	ldi	r20, 0x16	; 22
    8ba4:	6a ee       	ldi	r22, 0xEA	; 234
    8ba6:	80 91 13 06 	lds	r24, 0x0613
    8baa:	0e 94 92 13 	call	0x2724	; 0x2724 <_Z14checkIncDec_hgaaa>
    8bae:	80 93 13 06 	sts	0x0613, r24
			attr = 0;
			lcd_puts_Pleft (y,
					PSTR(STR_LIGHT_SWITCH"\037""\037"STR_LIGHT_AFTER"\037"STR_LIGHT_STICK));
//      lcd_puts_Pleft( y,PSTR(STR_LIGHT_SWITCH));
			if (sub == subN) {
				attr = blink;
    8bb2:	2b 2d       	mov	r18, r11
    8bb4:	01 c0       	rjmp	.+2      	; 0x8bb8 <_Z13menuProcIndexh+0xea>
				lcdSetContrast ();
			}
			y += FH;
			subN += 1;

			attr = 0;
    8bb6:	20 e0       	ldi	r18, 0x00	; 0
//      lcd_puts_Pleft( y,PSTR(STR_LIGHT_SWITCH));
			if (sub == subN) {
				attr = blink;
				CHECK_INCDEC_GENERALSWITCH(g_eeGeneral.lightSw, -MAX_DRSWITCH, MAX_DRSWITCH);
			}
			putsDrSwitches (PARAM_OFS - FW, y, g_eeGeneral.lightSw, attr);
    8bb8:	40 91 13 06 	lds	r20, 0x0613
    8bbc:	60 e1       	ldi	r22, 0x10	; 16
    8bbe:	80 e6       	ldi	r24, 0x60	; 96
    8bc0:	0e 94 c9 10 	call	0x2192	; 0x2192 <_Z14putsDrSwitcheshhah>
			y += FH;
			subN += 1;

			g_eeGeneral.blightinv = onoffMenuItem_g (g_eeGeneral.blightinv, y,
					PSTR(STR_LIGHT_INVERT), sub == subN);
    8bc4:	21 e0       	ldi	r18, 0x01	; 1
    8bc6:	12 30       	cpi	r17, 0x02	; 2
    8bc8:	09 f0       	breq	.+2      	; 0x8bcc <_Z13menuProcIndexh+0xfe>
    8bca:	20 e0       	ldi	r18, 0x00	; 0
    8bcc:	80 91 2e 06 	lds	r24, 0x062E
	lcd_puts_Pleft (y, s);
	return onoffItem (value, y, condition, EE_MODEL);
}

static uint8_t onoffMenuItem_g (uint8_t value, uint8_t y, const prog_char *s, uint8_t condition) {
	return onoffMenuItem (value, y, s, condition, EE_GENERAL);
    8bd0:	4e e0       	ldi	r20, 0x0E	; 14
    8bd2:	58 e1       	ldi	r21, 0x18	; 24
    8bd4:	68 e1       	ldi	r22, 0x18	; 24
    8bd6:	86 fb       	bst	r24, 6
    8bd8:	88 27       	eor	r24, r24
    8bda:	80 f9       	bld	r24, 0
    8bdc:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <_ZL13onoffMenuItemhhPKchh.isra.2>
			putsDrSwitches (PARAM_OFS - FW, y, g_eeGeneral.lightSw, attr);
			y += FH;
			subN += 1;

			g_eeGeneral.blightinv = onoffMenuItem_g (g_eeGeneral.blightinv, y,
					PSTR(STR_LIGHT_INVERT), sub == subN);
    8be0:	90 91 2e 06 	lds	r25, 0x062E
    8be4:	80 fb       	bst	r24, 0
    8be6:	96 f9       	bld	r25, 6
    8be8:	90 93 2e 06 	sts	0x062E, r25
			subN += 1;

			for (uint8_t i = 0; i < 2; i += 1) {
				uint8_t b;
//        lcd_puts_Pleft( y,( i == 0) ? PSTR(STR_LIGHT_AFTER) : PSTR(STR_LIGHT_STICK) );
				b = (i == 0) ? g_eeGeneral.lightAutoOff : g_eeGeneral.lightOnStickMove;
    8bec:	c0 91 2a 06 	lds	r28, 0x062A

				uint8_t attr = 0;
				if (sub == subN) {
    8bf0:	13 30       	cpi	r17, 0x03	; 3
    8bf2:	39 f4       	brne	.+14     	; 0x8c02 <_Z13menuProcIndexh+0x134>
					attr = blink;
					CHECK_INCDEC_H_GENVAR_0(b, 600 / 5);
    8bf4:	68 e7       	ldi	r22, 0x78	; 120
    8bf6:	8c 2f       	mov	r24, r28
    8bf8:	0e 94 94 13 	call	0x2728	; 0x2728 <_Z15checkIncDec_hg0aa>
    8bfc:	c8 2f       	mov	r28, r24
//        lcd_puts_Pleft( y,( i == 0) ? PSTR(STR_LIGHT_AFTER) : PSTR(STR_LIGHT_STICK) );
				b = (i == 0) ? g_eeGeneral.lightAutoOff : g_eeGeneral.lightOnStickMove;

				uint8_t attr = 0;
				if (sub == subN) {
					attr = blink;
    8bfe:	2b 2d       	mov	r18, r11
    8c00:	01 c0       	rjmp	.+2      	; 0x8c04 <_Z13menuProcIndexh+0x136>
			for (uint8_t i = 0; i < 2; i += 1) {
				uint8_t b;
//        lcd_puts_Pleft( y,( i == 0) ? PSTR(STR_LIGHT_AFTER) : PSTR(STR_LIGHT_STICK) );
				b = (i == 0) ? g_eeGeneral.lightAutoOff : g_eeGeneral.lightOnStickMove;

				uint8_t attr = 0;
    8c02:	20 e0       	ldi	r18, 0x00	; 0
				if (sub == subN) {
					attr = blink;
					CHECK_INCDEC_H_GENVAR_0(b, 600 / 5);
				}
				if (b) {
    8c04:	c1 11       	cpse	r28, r1
    8c06:	07 c0       	rjmp	.+14     	; 0x8c16 <_Z13menuProcIndexh+0x148>
					lcd_outdezAtt (PARAM_OFS + 2 * FW, y, b * 5, attr);
					lcd_putc (PARAM_OFS + 2 * FW, y, 's');
				} else lcd_putsAtt (PARAM_OFS, y, Str_OFF, attr);
    8c08:	4a ec       	ldi	r20, 0xCA	; 202
    8c0a:	52 e0       	ldi	r21, 0x02	; 2
    8c0c:	60 e2       	ldi	r22, 0x20	; 32
    8c0e:	86 e6       	ldi	r24, 0x66	; 102
    8c10:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>
    8c14:	0d c0       	rjmp	.+26     	; 0x8c30 <_Z13menuProcIndexh+0x162>
				if (sub == subN) {
					attr = blink;
					CHECK_INCDEC_H_GENVAR_0(b, 600 / 5);
				}
				if (b) {
					lcd_outdezAtt (PARAM_OFS + 2 * FW, y, b * 5, attr);
    8c16:	85 e0       	ldi	r24, 0x05	; 5
    8c18:	c8 9f       	mul	r28, r24
    8c1a:	a0 01       	movw	r20, r0
    8c1c:	11 24       	eor	r1, r1
    8c1e:	60 e2       	ldi	r22, 0x20	; 32
    8c20:	82 e7       	ldi	r24, 0x72	; 114
    8c22:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
					lcd_putc (PARAM_OFS + 2 * FW, y, 's');
    8c26:	43 e7       	ldi	r20, 0x73	; 115
    8c28:	60 e2       	ldi	r22, 0x20	; 32
    8c2a:	82 e7       	ldi	r24, 0x72	; 114
    8c2c:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <_Z8lcd_putchhc>
				} else lcd_putsAtt (PARAM_OFS, y, Str_OFF, attr);
				if (i == 0) {
					g_eeGeneral.lightAutoOff = b;
    8c30:	c0 93 2a 06 	sts	0x062A, r28
			subN += 1;

			for (uint8_t i = 0; i < 2; i += 1) {
				uint8_t b;
//        lcd_puts_Pleft( y,( i == 0) ? PSTR(STR_LIGHT_AFTER) : PSTR(STR_LIGHT_STICK) );
				b = (i == 0) ? g_eeGeneral.lightAutoOff : g_eeGeneral.lightOnStickMove;
    8c34:	c0 91 32 06 	lds	r28, 0x0632

				uint8_t attr = 0;
				if (sub == subN) {
    8c38:	14 30       	cpi	r17, 0x04	; 4
    8c3a:	31 f4       	brne	.+12     	; 0x8c48 <_Z13menuProcIndexh+0x17a>
					attr = blink;
					CHECK_INCDEC_H_GENVAR_0(b, 600 / 5);
    8c3c:	68 e7       	ldi	r22, 0x78	; 120
    8c3e:	8c 2f       	mov	r24, r28
    8c40:	0e 94 94 13 	call	0x2728	; 0x2728 <_Z15checkIncDec_hg0aa>
    8c44:	c8 2f       	mov	r28, r24
    8c46:	01 c0       	rjmp	.+2      	; 0x8c4a <_Z13menuProcIndexh+0x17c>
			for (uint8_t i = 0; i < 2; i += 1) {
				uint8_t b;
//        lcd_puts_Pleft( y,( i == 0) ? PSTR(STR_LIGHT_AFTER) : PSTR(STR_LIGHT_STICK) );
				b = (i == 0) ? g_eeGeneral.lightAutoOff : g_eeGeneral.lightOnStickMove;

				uint8_t attr = 0;
    8c48:	b1 2c       	mov	r11, r1
				if (sub == subN) {
					attr = blink;
					CHECK_INCDEC_H_GENVAR_0(b, 600 / 5);
				}
				if (b) {
    8c4a:	cc 23       	and	r28, r28
    8c4c:	79 f0       	breq	.+30     	; 0x8c6c <_Z13menuProcIndexh+0x19e>
					lcd_outdezAtt (PARAM_OFS + 2 * FW, y, b * 5, attr);
    8c4e:	95 e0       	ldi	r25, 0x05	; 5
    8c50:	c9 9f       	mul	r28, r25
    8c52:	a0 01       	movw	r20, r0
    8c54:	11 24       	eor	r1, r1
    8c56:	2b 2d       	mov	r18, r11
    8c58:	68 e2       	ldi	r22, 0x28	; 40
    8c5a:	82 e7       	ldi	r24, 0x72	; 114
    8c5c:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
					lcd_putc (PARAM_OFS + 2 * FW, y, 's');
    8c60:	43 e7       	ldi	r20, 0x73	; 115
    8c62:	68 e2       	ldi	r22, 0x28	; 40
    8c64:	82 e7       	ldi	r24, 0x72	; 114
    8c66:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <_Z8lcd_putchhc>
    8c6a:	07 c0       	rjmp	.+14     	; 0x8c7a <_Z13menuProcIndexh+0x1ac>
				} else lcd_putsAtt (PARAM_OFS, y, Str_OFF, attr);
    8c6c:	2b 2d       	mov	r18, r11
    8c6e:	4a ec       	ldi	r20, 0xCA	; 202
    8c70:	52 e0       	ldi	r21, 0x02	; 2
    8c72:	68 e2       	ldi	r22, 0x28	; 40
    8c74:	86 e6       	ldi	r24, 0x66	; 102
    8c76:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>
				if (i == 0) {
					g_eeGeneral.lightAutoOff = b;
				} else {
					g_eeGeneral.lightOnStickMove = b;
    8c7a:	c0 93 32 06 	sts	0x0632, r28
				y += FH;
				subN += 1;
			}

			g_eeGeneral.flashBeep = onoffMenuItem_g (g_eeGeneral.flashBeep, y,
					PSTR(STR_FLASH_ON_BEEP), sub == subN);
    8c7e:	21 e0       	ldi	r18, 0x01	; 1
    8c80:	15 30       	cpi	r17, 0x05	; 5
    8c82:	09 f0       	breq	.+2      	; 0x8c86 <_Z13menuProcIndexh+0x1b8>
    8c84:	20 e0       	ldi	r18, 0x00	; 0
    8c86:	80 91 28 06 	lds	r24, 0x0628
	lcd_puts_Pleft (y, s);
	return onoffItem (value, y, condition, EE_MODEL);
}

static uint8_t onoffMenuItem_g (uint8_t value, uint8_t y, const prog_char *s, uint8_t condition) {
	return onoffMenuItem (value, y, s, condition, EE_GENERAL);
    8c8a:	40 e0       	ldi	r20, 0x00	; 0
    8c8c:	58 e1       	ldi	r21, 0x18	; 24
    8c8e:	60 e3       	ldi	r22, 0x30	; 48
    8c90:	83 fb       	bst	r24, 3
    8c92:	88 27       	eor	r24, r24
    8c94:	80 f9       	bld	r24, 0
    8c96:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <_ZL13onoffMenuItemhhPKchh.isra.2>
				y += FH;
				subN += 1;
			}

			g_eeGeneral.flashBeep = onoffMenuItem_g (g_eeGeneral.flashBeep, y,
					PSTR(STR_FLASH_ON_BEEP), sub == subN);
    8c9a:	90 91 28 06 	lds	r25, 0x0628
    8c9e:	80 fb       	bst	r24, 0
    8ca0:	93 f9       	bld	r25, 3
    8ca2:	99 c0       	rjmp	.+306    	; 0x8dd6 <_Z13menuProcIndexh+0x308>

		}
			break;

		case M_AUDIO: {
			TITLEP (Str_AudioHaptic);
    8ca4:	88 eb       	ldi	r24, 0xB8	; 184
    8ca6:	9b e1       	ldi	r25, 0x1B	; 27
    8ca8:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>
#ifdef GLOBAL_COUNTDOWN
			IlinesCount = 6;
    8cac:	86 e0       	ldi	r24, 0x06	; 6
    8cae:	80 93 5b 0e 	sts	0x0E5B, r24
#endif

			uint8_t b;
			uint8_t attr = LEFT;
			lcd_puts_Pleft (y,
					PSTR(STR_VOLUME"\037"STR_BEEPER"\037"STR_SOUND_MODE"\037"STR_SPEAKER_PITCH));
    8cb2:	68 ed       	ldi	r22, 0xD8	; 216
    8cb4:	77 e1       	ldi	r23, 0x17	; 23
    8cb6:	88 e0       	ldi	r24, 0x08	; 8
    8cb8:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
			b = g_eeGeneral.volume + (NUM_VOL_LEVELS - 1);
    8cbc:	c0 91 3e 06 	lds	r28, 0x063E
    8cc0:	c9 5f       	subi	r28, 0xF9	; 249
			if (sub == subN) {
    8cc2:	11 11       	cpse	r17, r1
    8cc4:	08 c0       	rjmp	.+16     	; 0x8cd6 <_Z13menuProcIndexh+0x208>
				attr = blink | LEFT;
    8cc6:	db 2d       	mov	r29, r11
    8cc8:	d0 64       	ori	r29, 0x40	; 64
				CHECK_INCDEC_H_GENVAR_0(b, NUM_VOL_LEVELS-1);
    8cca:	67 e0       	ldi	r22, 0x07	; 7
    8ccc:	8c 2f       	mov	r24, r28
    8cce:	0e 94 94 13 	call	0x2728	; 0x2728 <_Z15checkIncDec_hg0aa>
    8cd2:	c8 2f       	mov	r28, r24
    8cd4:	01 c0       	rjmp	.+2      	; 0x8cd8 <_Z13menuProcIndexh+0x20a>
#else
			IlinesCount = 5;
#endif

			uint8_t b;
			uint8_t attr = LEFT;
    8cd6:	d0 e4       	ldi	r29, 0x40	; 64
				attr = blink | LEFT;
				CHECK_INCDEC_H_GENVAR_0(b, NUM_VOL_LEVELS-1);
			}
//			lcd_xlabel_decimal( y, PSTR(STR_VOLUME), b, attr, PARAM_OFS ) ;
//      lcd_puts_Pleft( y,PSTR(STR_VOLUME));
			lcd_outdezAtt (PARAM_OFS, y, b, attr);
    8cd8:	4c 2f       	mov	r20, r28
    8cda:	50 e0       	ldi	r21, 0x00	; 0
    8cdc:	2d 2f       	mov	r18, r29
    8cde:	68 e0       	ldi	r22, 0x08	; 8
    8ce0:	86 e6       	ldi	r24, 0x66	; 102
    8ce2:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
			g_eeGeneral.volume = (int8_t) b - (NUM_VOL_LEVELS - 1);
    8ce6:	c7 50       	subi	r28, 0x07	; 7
    8ce8:	c0 93 3e 06 	sts	0x063E, r28
			y += FH;
			subN += 1;

			attr = 0;
			b = g_eeGeneral.beeperVal;
    8cec:	80 91 25 06 	lds	r24, 0x0625
    8cf0:	86 95       	lsr	r24
    8cf2:	86 95       	lsr	r24
    8cf4:	86 95       	lsr	r24
    8cf6:	87 70       	andi	r24, 0x07	; 7
//      lcd_puts_Pleft( y,PSTR(STR_BEEPER));
			if (sub == subN) {
    8cf8:	11 30       	cpi	r17, 0x01	; 1
    8cfa:	81 f4       	brne	.+32     	; 0x8d1c <_Z13menuProcIndexh+0x24e>
				attr = blink;
				CHECK_INCDEC_H_GENVAR_0(b, 6);
    8cfc:	66 e0       	ldi	r22, 0x06	; 6
    8cfe:	0e 94 94 13 	call	0x2728	; 0x2728 <_Z15checkIncDec_hg0aa>
				g_eeGeneral.beeperVal = b;
    8d02:	28 2f       	mov	r18, r24
    8d04:	27 70       	andi	r18, 0x07	; 7
    8d06:	22 0f       	add	r18, r18
    8d08:	22 0f       	add	r18, r18
    8d0a:	22 0f       	add	r18, r18
    8d0c:	90 91 25 06 	lds	r25, 0x0625
    8d10:	97 7c       	andi	r25, 0xC7	; 199
    8d12:	92 2b       	or	r25, r18
    8d14:	90 93 25 06 	sts	0x0625, r25

			attr = 0;
			b = g_eeGeneral.beeperVal;
//      lcd_puts_Pleft( y,PSTR(STR_BEEPER));
			if (sub == subN) {
				attr = blink;
    8d18:	0b 2d       	mov	r16, r11
    8d1a:	01 c0       	rjmp	.+2      	; 0x8d1e <_Z13menuProcIndexh+0x250>
			lcd_outdezAtt (PARAM_OFS, y, b, attr);
			g_eeGeneral.volume = (int8_t) b - (NUM_VOL_LEVELS - 1);
			y += FH;
			subN += 1;

			attr = 0;
    8d1c:	00 e0       	ldi	r16, 0x00	; 0
			if (sub == subN) {
				attr = blink;
				CHECK_INCDEC_H_GENVAR_0(b, 6);
				g_eeGeneral.beeperVal = b;
			}
			lcd_putsAttIdx (PARAM_OFS - FW - 4, y, PSTR(STR_BEEP_MODES), b, attr);
    8d1e:	28 2f       	mov	r18, r24
    8d20:	4c ea       	ldi	r20, 0xAC	; 172
    8d22:	57 e1       	ldi	r21, 0x17	; 23
    8d24:	60 e1       	ldi	r22, 0x10	; 16
    8d26:	8c e5       	ldi	r24, 0x5C	; 92
    8d28:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
			y += FH;
			subN += 1;

			attr = 0;
			b = g_eeGeneral.speakerMode;
    8d2c:	80 91 31 06 	lds	r24, 0x0631
			if (b > 3) {
    8d30:	84 30       	cpi	r24, 0x04	; 4
    8d32:	08 f0       	brcs	.+2      	; 0x8d36 <_Z13menuProcIndexh+0x268>
				b = 4;
    8d34:	84 e0       	ldi	r24, 0x04	; 4
			}
//      lcd_puts_Pleft( y,PSTR(STR_SOUND_MODE));
			if (sub == subN) {
    8d36:	12 30       	cpi	r17, 0x02	; 2
    8d38:	59 f4       	brne	.+22     	; 0x8d50 <_Z13menuProcIndexh+0x282>
				attr = blink;
				CHECK_INCDEC_H_GENVAR_0(b, 4);
    8d3a:	64 e0       	ldi	r22, 0x04	; 4
    8d3c:	0e 94 94 13 	call	0x2728	; 0x2728 <_Z15checkIncDec_hg0aa>
				g_eeGeneral.speakerMode = (b == 4) ? 7 : b;
    8d40:	84 30       	cpi	r24, 0x04	; 4
    8d42:	11 f4       	brne	.+4      	; 0x8d48 <_Z13menuProcIndexh+0x27a>
    8d44:	97 e0       	ldi	r25, 0x07	; 7
    8d46:	01 c0       	rjmp	.+2      	; 0x8d4a <_Z13menuProcIndexh+0x27c>
    8d48:	98 2f       	mov	r25, r24
    8d4a:	90 93 31 06 	sts	0x0631, r25
    8d4e:	01 c0       	rjmp	.+2      	; 0x8d52 <_Z13menuProcIndexh+0x284>
			}
			lcd_putsAttIdx (PARAM_OFS - FW - 4, y, PSTR(STR_BEEP_MODES), b, attr);
			y += FH;
			subN += 1;

			attr = 0;
    8d50:	b1 2c       	mov	r11, r1
			if (sub == subN) {
				attr = blink;
				CHECK_INCDEC_H_GENVAR_0(b, 4);
				g_eeGeneral.speakerMode = (b == 4) ? 7 : b;
			}
			lcd_putsAttIdx (11 * FW, y, PSTR(STR_SPEAKER_OPTS), b, attr);
    8d52:	0b 2d       	mov	r16, r11
    8d54:	28 2f       	mov	r18, r24
    8d56:	48 e7       	ldi	r20, 0x78	; 120
    8d58:	57 e1       	ldi	r21, 0x17	; 23
    8d5a:	68 e1       	ldi	r22, 0x18	; 24
    8d5c:	82 e4       	ldi	r24, 0x42	; 66
    8d5e:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
			y += FH;
			subN += 1;

			attr = LEFT;
			if (sub == subN) {
    8d62:	13 30       	cpi	r17, 0x03	; 3
    8d64:	51 f4       	brne	.+20     	; 0x8d7a <_Z13menuProcIndexh+0x2ac>
				attr = INVERS | LEFT;
				CHECK_INCDEC_H_GENVAR(g_eeGeneral.speakerPitch, 1, 100);
    8d66:	44 e6       	ldi	r20, 0x64	; 100
    8d68:	61 e0       	ldi	r22, 0x01	; 1
    8d6a:	80 91 2f 06 	lds	r24, 0x062F
    8d6e:	0e 94 92 13 	call	0x2724	; 0x2724 <_Z14checkIncDec_hgaaa>
    8d72:	80 93 2f 06 	sts	0x062F, r24
			y += FH;
			subN += 1;

			attr = LEFT;
			if (sub == subN) {
				attr = INVERS | LEFT;
    8d76:	21 e4       	ldi	r18, 0x41	; 65
    8d78:	01 c0       	rjmp	.+2      	; 0x8d7c <_Z13menuProcIndexh+0x2ae>
			}
			lcd_putsAttIdx (11 * FW, y, PSTR(STR_SPEAKER_OPTS), b, attr);
			y += FH;
			subN += 1;

			attr = LEFT;
    8d7a:	20 e4       	ldi	r18, 0x40	; 64
				attr = INVERS | LEFT;
				CHECK_INCDEC_H_GENVAR(g_eeGeneral.speakerPitch, 1, 100);
			}
//			lcd_xlabel_decimal( y, PSTR(STR_SPEAKER_PITCH), g_eeGeneral.speakerPitch, attr, PARAM_OFS ) ;
//      lcd_puts_Pleft( y,PSTR(STR_SPEAKER_PITCH));
			lcd_outdezAtt (PARAM_OFS, y, g_eeGeneral.speakerPitch, attr);
    8d7c:	40 91 2f 06 	lds	r20, 0x062F
    8d80:	50 e0       	ldi	r21, 0x00	; 0
    8d82:	60 e2       	ldi	r22, 0x20	; 32
    8d84:	86 e6       	ldi	r24, 0x66	; 102
    8d86:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
			y += FH;
			subN += 1;

			attr = LEFT;
			if (sub == subN) {
    8d8a:	14 30       	cpi	r17, 0x04	; 4
    8d8c:	49 f4       	brne	.+18     	; 0x8da0 <_Z13menuProcIndexh+0x2d2>
				attr = INVERS | LEFT;
				CHECK_INCDEC_H_GENVAR_0(g_eeGeneral.hapticStrength, 5);
    8d8e:	65 e0       	ldi	r22, 0x05	; 5
    8d90:	80 91 30 06 	lds	r24, 0x0630
    8d94:	0e 94 94 13 	call	0x2728	; 0x2728 <_Z15checkIncDec_hg0aa>
    8d98:	80 93 30 06 	sts	0x0630, r24
			y += FH;
			subN += 1;

			attr = LEFT;
			if (sub == subN) {
				attr = INVERS | LEFT;
    8d9c:	21 e4       	ldi	r18, 0x41	; 65
    8d9e:	01 c0       	rjmp	.+2      	; 0x8da2 <_Z13menuProcIndexh+0x2d4>
//      lcd_puts_Pleft( y,PSTR(STR_SPEAKER_PITCH));
			lcd_outdezAtt (PARAM_OFS, y, g_eeGeneral.speakerPitch, attr);
			y += FH;
			subN += 1;

			attr = LEFT;
    8da0:	20 e4       	ldi	r18, 0x40	; 64
			if (sub == subN) {
				attr = INVERS | LEFT;
				CHECK_INCDEC_H_GENVAR_0(g_eeGeneral.hapticStrength, 5);
			}
			lcd_xlabel_decimal (y, PSTR(STR_HAPTICSTRENGTH), g_eeGeneral.hapticStrength, attr,
			PARAM_OFS);
    8da2:	40 91 30 06 	lds	r20, 0x0630
    8da6:	50 e0       	ldi	r21, 0x00	; 0
    8da8:	06 e6       	ldi	r16, 0x66	; 102
    8daa:	67 e6       	ldi	r22, 0x67	; 103
    8dac:	77 e1       	ldi	r23, 0x17	; 23
    8dae:	88 e2       	ldi	r24, 0x28	; 40
    8db0:	0e 94 1b 3a 	call	0x7436	; 0x7436 <_Z18lcd_xlabel_decimalhPKcjhh>
			y += FH;
			subN += 1;

#ifdef GLOBAL_COUNTDOWN
			g_eeGeneral.minuteBeep = onoffMenuItem_g (g_eeGeneral.minuteBeep, y, Str_minute_Beep,
					sub == subN);
    8db4:	21 e0       	ldi	r18, 0x01	; 1
    8db6:	15 30       	cpi	r17, 0x05	; 5
    8db8:	09 f0       	breq	.+2      	; 0x8dbc <_Z13menuProcIndexh+0x2ee>
    8dba:	20 e0       	ldi	r18, 0x00	; 0
    8dbc:	80 91 28 06 	lds	r24, 0x0628
	lcd_puts_Pleft (y, s);
	return onoffItem (value, y, condition, EE_MODEL);
}

static uint8_t onoffMenuItem_g (uint8_t value, uint8_t y, const prog_char *s, uint8_t condition) {
	return onoffMenuItem (value, y, s, condition, EE_GENERAL);
    8dc0:	4e e9       	ldi	r20, 0x9E	; 158
    8dc2:	5d e1       	ldi	r21, 0x1D	; 29
    8dc4:	60 e3       	ldi	r22, 0x30	; 48
    8dc6:	86 95       	lsr	r24
    8dc8:	81 70       	andi	r24, 0x01	; 1
    8dca:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <_ZL13onoffMenuItemhhPKchh.isra.2>
			y += FH;
			subN += 1;

#ifdef GLOBAL_COUNTDOWN
			g_eeGeneral.minuteBeep = onoffMenuItem_g (g_eeGeneral.minuteBeep, y, Str_minute_Beep,
					sub == subN);
    8dce:	90 91 28 06 	lds	r25, 0x0628
    8dd2:	80 fb       	bst	r24, 0
    8dd4:	91 f9       	bld	r25, 1
    8dd6:	90 93 28 06 	sts	0x0628, r25
			y += FH;
			subN += 1;
#endif

		}
			break;
    8dda:	b1 c4       	rjmp	.+2402   	; 0x973e <_Z13menuProcIndexh+0xc70>

		case M_CONTROLS: {
			TITLEP (Str_Controls);
    8ddc:	80 ed       	ldi	r24, 0xD0	; 208
    8dde:	9b e1       	ldi	r25, 0x1B	; 27
    8de0:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>
			IlinesCount = 10;
    8de4:	8a e0       	ldi	r24, 0x0A	; 10
    8de6:	80 93 5b 0e 	sts	0x0E5B, r24

			if (sub < 6) {
    8dea:	16 30       	cpi	r17, 0x06	; 6
    8dec:	08 f0       	brcs	.+2      	; 0x8df0 <_Z13menuProcIndexh+0x322>
    8dee:	c1 c0       	rjmp	.+386    	; 0x8f72 <_Z13menuProcIndexh+0x4a4>
				displayNext ();
    8df0:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <_Z11displayNextv>
				g_eeGeneral.crosstrim = onoffMenuItem_g (g_eeGeneral.crosstrim, y,
						PSTR(STR_CROSSTRIM), sub == subN);
    8df4:	21 e0       	ldi	r18, 0x01	; 1
    8df6:	11 11       	cpse	r17, r1
    8df8:	20 e0       	ldi	r18, 0x00	; 0
    8dfa:	80 91 42 06 	lds	r24, 0x0642
	lcd_puts_Pleft (y, s);
	return onoffItem (value, y, condition, EE_MODEL);
}

static uint8_t onoffMenuItem_g (uint8_t value, uint8_t y, const prog_char *s, uint8_t condition) {
	return onoffMenuItem (value, y, s, condition, EE_GENERAL);
    8dfe:	4d e5       	ldi	r20, 0x5D	; 93
    8e00:	57 e1       	ldi	r21, 0x17	; 23
    8e02:	68 e0       	ldi	r22, 0x08	; 8
    8e04:	81 70       	andi	r24, 0x01	; 1
    8e06:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <_ZL13onoffMenuItemhhPKchh.isra.2>
			IlinesCount = 10;

			if (sub < 6) {
				displayNext ();
				g_eeGeneral.crosstrim = onoffMenuItem_g (g_eeGeneral.crosstrim, y,
						PSTR(STR_CROSSTRIM), sub == subN);
    8e0a:	90 91 42 06 	lds	r25, 0x0642
    8e0e:	80 fb       	bst	r24, 0
    8e10:	90 f9       	bld	r25, 0
    8e12:	90 93 42 06 	sts	0x0642, r25
				y += FH;
				subN += 1;

				g_eeGeneral.throttleReversed = onoffMenuItem_g (g_eeGeneral.throttleReversed, y,
						PSTR(STR_THR_REVERSE), sub == subN);
    8e16:	21 e0       	ldi	r18, 0x01	; 1
    8e18:	11 30       	cpi	r17, 0x01	; 1
    8e1a:	09 f0       	breq	.+2      	; 0x8e1e <_Z13menuProcIndexh+0x350>
    8e1c:	20 e0       	ldi	r18, 0x00	; 0
    8e1e:	80 91 28 06 	lds	r24, 0x0628
	lcd_puts_Pleft (y, s);
	return onoffItem (value, y, condition, EE_MODEL);
}

static uint8_t onoffMenuItem_g (uint8_t value, uint8_t y, const prog_char *s, uint8_t condition) {
	return onoffMenuItem (value, y, s, condition, EE_GENERAL);
    8e22:	4c e4       	ldi	r20, 0x4C	; 76
    8e24:	57 e1       	ldi	r21, 0x17	; 23
    8e26:	60 e1       	ldi	r22, 0x10	; 16
    8e28:	81 70       	andi	r24, 0x01	; 1
    8e2a:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <_ZL13onoffMenuItemhhPKchh.isra.2>
						PSTR(STR_CROSSTRIM), sub == subN);
				y += FH;
				subN += 1;

				g_eeGeneral.throttleReversed = onoffMenuItem_g (g_eeGeneral.throttleReversed, y,
						PSTR(STR_THR_REVERSE), sub == subN);
    8e2e:	90 91 28 06 	lds	r25, 0x0628
    8e32:	80 fb       	bst	r24, 0
    8e34:	90 f9       	bld	r25, 0
    8e36:	90 93 28 06 	sts	0x0628, r25
				y += FH;
				subN += 1;

				g_eeGeneral.enablePpmsim = onoffMenuItem_g (g_eeGeneral.enablePpmsim, y,
						PSTR(STR_ENABLE_PPMSIM), sub == subN);
    8e3a:	21 e0       	ldi	r18, 0x01	; 1
    8e3c:	12 30       	cpi	r17, 0x02	; 2
    8e3e:	09 f0       	breq	.+2      	; 0x8e42 <_Z13menuProcIndexh+0x374>
    8e40:	20 e0       	ldi	r18, 0x00	; 0
    8e42:	80 91 2e 06 	lds	r24, 0x062E
	lcd_puts_Pleft (y, s);
	return onoffItem (value, y, condition, EE_MODEL);
}

static uint8_t onoffMenuItem_g (uint8_t value, uint8_t y, const prog_char *s, uint8_t condition) {
	return onoffMenuItem (value, y, s, condition, EE_GENERAL);
    8e46:	4e e3       	ldi	r20, 0x3E	; 62
    8e48:	57 e1       	ldi	r21, 0x17	; 23
    8e4a:	68 e1       	ldi	r22, 0x18	; 24
    8e4c:	85 fb       	bst	r24, 5
    8e4e:	88 27       	eor	r24, r24
    8e50:	80 f9       	bld	r24, 0
    8e52:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <_ZL13onoffMenuItemhhPKchh.isra.2>
						PSTR(STR_THR_REVERSE), sub == subN);
				y += FH;
				subN += 1;

				g_eeGeneral.enablePpmsim = onoffMenuItem_g (g_eeGeneral.enablePpmsim, y,
						PSTR(STR_ENABLE_PPMSIM), sub == subN);
    8e56:	90 91 2e 06 	lds	r25, 0x062E
    8e5a:	80 fb       	bst	r24, 0
    8e5c:	95 f9       	bld	r25, 5
    8e5e:	90 93 2e 06 	sts	0x062E, r25
				y += FH;
				subN += 1;

				uint8_t attr = sub == subN ? blink : 0;
    8e62:	13 30       	cpi	r17, 0x03	; 3
    8e64:	09 f0       	breq	.+2      	; 0x8e68 <_Z13menuProcIndexh+0x39a>
    8e66:	b1 2c       	mov	r11, r1
				lcd_puts_Pleft (y, PSTR(STR_CHAN_ORDER"\037"STR_MODE)); //   RAET->AETR
    8e68:	6a e2       	ldi	r22, 0x2A	; 42
    8e6a:	77 e1       	ldi	r23, 0x17	; 23
    8e6c:	80 e2       	ldi	r24, 0x20	; 32
    8e6e:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
				uint8_t bch = pgm_read_byte(bchout_ar + g_eeGeneral.templateSetup);
    8e72:	e0 91 2b 06 	lds	r30, 0x062B
    8e76:	f0 e0       	ldi	r31, 0x00	; 0
    8e78:	e1 5f       	subi	r30, 0xF1	; 241
    8e7a:	fc 4f       	sbci	r31, 0xFC	; 252
    8e7c:	d4 91       	lpm	r29, Z
    8e7e:	cc e6       	ldi	r28, 0x6C	; 108
				for (uint8_t i = 4; i > 0; i -= 1) {
					uint8_t letter;
					letter = pgm_read_byte(Str_1_RETA + (bch & 3) + 1);
    8e80:	ed 2f       	mov	r30, r29
    8e82:	e3 70       	andi	r30, 0x03	; 3
    8e84:	f0 e0       	ldi	r31, 0x00	; 0
    8e86:	e6 5f       	subi	r30, 0xF6	; 246
    8e88:	f2 4e       	sbci	r31, 0xE2	; 226
    8e8a:	44 91       	lpm	r20, Z
					lcd_putcAtt ( (14 + i) * FW, y, letter, attr);
    8e8c:	2b 2d       	mov	r18, r11
    8e8e:	60 e2       	ldi	r22, 0x20	; 32
    8e90:	8c 2f       	mov	r24, r28
    8e92:	0e 94 31 26 	call	0x4c62	; 0x4c62 <_Z11lcd_putcAtthhch>
					bch >>= 2;
    8e96:	d6 95       	lsr	r29
    8e98:	d6 95       	lsr	r29
    8e9a:	c6 50       	subi	r28, 0x06	; 6
				subN += 1;

				uint8_t attr = sub == subN ? blink : 0;
				lcd_puts_Pleft (y, PSTR(STR_CHAN_ORDER"\037"STR_MODE)); //   RAET->AETR
				uint8_t bch = pgm_read_byte(bchout_ar + g_eeGeneral.templateSetup);
				for (uint8_t i = 4; i > 0; i -= 1) {
    8e9c:	c4 35       	cpi	r28, 0x54	; 84
    8e9e:	81 f7       	brne	.-32     	; 0x8e80 <_Z13menuProcIndexh+0x3b2>
					uint8_t letter;
					letter = pgm_read_byte(Str_1_RETA + (bch & 3) + 1);
					lcd_putcAtt ( (14 + i) * FW, y, letter, attr);
					bch >>= 2;
				}
				if (attr)
    8ea0:	bb 20       	and	r11, r11
    8ea2:	39 f0       	breq	.+14     	; 0x8eb2 <_Z13menuProcIndexh+0x3e4>
				CHECK_INCDEC_H_GENVAR_0(g_eeGeneral.templateSetup, 23);
    8ea4:	67 e1       	ldi	r22, 0x17	; 23
    8ea6:	80 91 2b 06 	lds	r24, 0x062B
    8eaa:	0e 94 94 13 	call	0x2728	; 0x2728 <_Z15checkIncDec_hg0aa>
    8eae:	80 93 2b 06 	sts	0x062B, r24
				y += FH;
				subN += 1;

				uint8_t attr = sub == subN ? blink : 0;
				lcd_puts_Pleft (y, PSTR(STR_CHAN_ORDER"\037"STR_MODE)); //   RAET->AETR
				uint8_t bch = pgm_read_byte(bchout_ar + g_eeGeneral.templateSetup);
    8eb2:	04 e2       	ldi	r16, 0x24	; 36
    8eb4:	c0 e0       	ldi	r28, 0x00	; 0
    8eb6:	d0 e0       	ldi	r29, 0x00	; 0
				y += FH;
				subN += 1;

//	      lcd_puts_Pleft( y, PSTR(STR_MODE) );
				for (uint8_t i = 0; i < 4; i += 1) {
					lcd_img ( (6 + 4 * i) * FW, y, sticks, i);
    8eb8:	2c 2f       	mov	r18, r28
    8eba:	4b e7       	ldi	r20, 0x7B	; 123
    8ebc:	5c e1       	ldi	r21, 0x1C	; 28
    8ebe:	68 e2       	ldi	r22, 0x28	; 40
    8ec0:	80 2f       	mov	r24, r16
    8ec2:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <_Z7lcd_imghhPKhh>
					if (g_eeGeneral.stickReverse & (1 << i)) lcd_char_inverse ( (6 + 4 * i) * FW, y,
    8ec6:	20 91 43 06 	lds	r18, 0x0643
    8eca:	30 e0       	ldi	r19, 0x00	; 0
    8ecc:	0c 2e       	mov	r0, r28
    8ece:	02 c0       	rjmp	.+4      	; 0x8ed4 <_Z13menuProcIndexh+0x406>
    8ed0:	35 95       	asr	r19
    8ed2:	27 95       	ror	r18
    8ed4:	0a 94       	dec	r0
    8ed6:	e2 f7       	brpl	.-8      	; 0x8ed0 <_Z13menuProcIndexh+0x402>
    8ed8:	20 ff       	sbrs	r18, 0
    8eda:	06 c0       	rjmp	.+12     	; 0x8ee8 <_Z13menuProcIndexh+0x41a>
							3 * FW, 0);
    8edc:	20 e0       	ldi	r18, 0x00	; 0
    8ede:	42 e1       	ldi	r20, 0x12	; 18
    8ee0:	68 e2       	ldi	r22, 0x28	; 40
    8ee2:	80 2f       	mov	r24, r16
    8ee4:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <_Z16lcd_char_inversehhhh>
    8ee8:	21 96       	adiw	r28, 0x01	; 1
    8eea:	08 5e       	subi	r16, 0xE8	; 232
				CHECK_INCDEC_H_GENVAR_0(g_eeGeneral.templateSetup, 23);
				y += FH;
				subN += 1;

//	      lcd_puts_Pleft( y, PSTR(STR_MODE) );
				for (uint8_t i = 0; i < 4; i += 1) {
    8eec:	04 38       	cpi	r16, 0x84	; 132
    8eee:	21 f7       	brne	.-56     	; 0x8eb8 <_Z13menuProcIndexh+0x3ea>
					lcd_img ( (6 + 4 * i) * FW, y, sticks, i);
					if (g_eeGeneral.stickReverse & (1 << i)) lcd_char_inverse ( (6 + 4 * i) * FW, y,
							3 * FW, 0);
				}
				if (sub == subN) {
    8ef0:	14 30       	cpi	r17, 0x04	; 4
    8ef2:	69 f4       	brne	.+26     	; 0x8f0e <_Z13menuProcIndexh+0x440>
					CHECK_INCDEC_H_GENVAR_0(g_eeGeneral.stickReverse, 15);
    8ef4:	6f e0       	ldi	r22, 0x0F	; 15
    8ef6:	80 91 43 06 	lds	r24, 0x0643
    8efa:	0e 94 94 13 	call	0x2728	; 0x2728 <_Z15checkIncDec_hg0aa>
    8efe:	80 93 43 06 	sts	0x0643, r24
//				plotType = PLOT_BLACK ;
					lcd_rect (6 * FW - 1, y - 1, 15 * FW + 2, 9);
    8f02:	29 e0       	ldi	r18, 0x09	; 9
    8f04:	4c e5       	ldi	r20, 0x5C	; 92
    8f06:	67 e2       	ldi	r22, 0x27	; 39
    8f08:	83 e2       	ldi	r24, 0x23	; 35
    8f0a:	0e 94 98 29 	call	0x5330	; 0x5330 <_Z8lcd_recthhhh>
				}
				y += FH;
				subN += 1;

				attr = 0;
				uint8_t mode = g_eeGeneral.stickMode;
    8f0e:	80 91 26 06 	lds	r24, 0x0626
				if (sub == subN) {
    8f12:	15 30       	cpi	r17, 0x05	; 5
    8f14:	99 f4       	brne	.+38     	; 0x8f3c <_Z13menuProcIndexh+0x46e>
					attr = INVERS;
					if (s_editMode) {
    8f16:	90 91 a5 0d 	lds	r25, 0x0DA5
    8f1a:	99 23       	and	r25, r25
    8f1c:	89 f0       	breq	.+34     	; 0x8f40 <_Z13menuProcIndexh+0x472>
						attr = BLINK;

						CHECK_INCDEC_H_GENVAR_0(mode, 3);
    8f1e:	63 e0       	ldi	r22, 0x03	; 3
    8f20:	0e 94 94 13 	call	0x2728	; 0x2728 <_Z15checkIncDec_hg0aa>
						if (mode != g_eeGeneral.stickMode) {
    8f24:	90 91 26 06 	lds	r25, 0x0626
    8f28:	89 17       	cp	r24, r25
    8f2a:	61 f0       	breq	.+24     	; 0x8f44 <_Z13menuProcIndexh+0x476>
							g_eeGeneral.stickScroll = 0;
    8f2c:	90 91 2e 06 	lds	r25, 0x062E
    8f30:	9f 77       	andi	r25, 0x7F	; 127
    8f32:	90 93 2e 06 	sts	0x062E, r25
							g_eeGeneral.stickMode = mode;
    8f36:	80 93 26 06 	sts	0x0626, r24
    8f3a:	04 c0       	rjmp	.+8      	; 0x8f44 <_Z13menuProcIndexh+0x476>
//				plotType = PLOT_XOR ;
				}
				y += FH;
				subN += 1;

				attr = 0;
    8f3c:	20 e0       	ldi	r18, 0x00	; 0
    8f3e:	03 c0       	rjmp	.+6      	; 0x8f46 <_Z13menuProcIndexh+0x478>
				uint8_t mode = g_eeGeneral.stickMode;
				if (sub == subN) {
					attr = INVERS;
    8f40:	21 e0       	ldi	r18, 0x01	; 1
    8f42:	01 c0       	rjmp	.+2      	; 0x8f46 <_Z13menuProcIndexh+0x478>
					if (s_editMode) {
						attr = BLINK;
    8f44:	22 e0       	ldi	r18, 0x02	; 2
							g_eeGeneral.stickScroll = 0;
							g_eeGeneral.stickMode = mode;
						}
					}
				}
				lcd_putcAtt (3 * FW, y, '1' + mode, attr);
    8f46:	41 e3       	ldi	r20, 0x31	; 49
    8f48:	48 0f       	add	r20, r24
    8f4a:	60 e3       	ldi	r22, 0x30	; 48
    8f4c:	82 e1       	ldi	r24, 0x12	; 18
    8f4e:	0e 94 31 26 	call	0x4c62	; 0x4c62 <_Z11lcd_putcAtthhch>
    8f52:	d4 e2       	ldi	r29, 0x24	; 36
#ifdef FIX_MODE
				for (uint8_t i = 0; i < 4; i++)
    8f54:	c0 e0       	ldi	r28, 0x00	; 0
					putsChnRaw ( (6 + 4 * i) * FW, y, modeFixValue (i), 0); //sub==3?INVERS:0);
    8f56:	8c 2f       	mov	r24, r28
    8f58:	0e 94 6d 10 	call	0x20da	; 0x20da <_Z12modeFixValueh>
    8f5c:	20 e0       	ldi	r18, 0x00	; 0
    8f5e:	48 2f       	mov	r20, r24
    8f60:	60 e3       	ldi	r22, 0x30	; 48
    8f62:	8d 2f       	mov	r24, r29
    8f64:	0e 94 95 10 	call	0x212a	; 0x212a <_Z10putsChnRawhhhh>
						}
					}
				}
				lcd_putcAtt (3 * FW, y, '1' + mode, attr);
#ifdef FIX_MODE
				for (uint8_t i = 0; i < 4; i++)
    8f68:	cf 5f       	subi	r28, 0xFF	; 255
    8f6a:	d8 5e       	subi	r29, 0xE8	; 232
    8f6c:	c4 30       	cpi	r28, 0x04	; 4
    8f6e:	99 f7       	brne	.-26     	; 0x8f56 <_Z13menuProcIndexh+0x488>
    8f70:	e6 c3       	rjmp	.+1996   	; 0x973e <_Z13menuProcIndexh+0xc70>
#endif
				y += FH;
				subN += 1;
			} else {
				subN = 6;
				if (sub >= IlinesCount) {
    8f72:	1a 30       	cpi	r17, 0x0A	; 10
    8f74:	20 f0       	brcs	.+8      	; 0x8f7e <_Z13menuProcIndexh+0x4b0>
					sub = mstate.m_posVert = IlinesCount - 1;
    8f76:	89 e0       	ldi	r24, 0x09	; 9
    8f78:	80 93 3b 0e 	sts	0x0E3B, r24
    8f7c:	19 e0       	ldi	r17, 0x09	; 9
				}
				// Edit custom stick names
				Columns = &ProgColumns[COLUMNS_3];
    8f7e:	85 e0       	ldi	r24, 0x05	; 5
    8f80:	9d e1       	ldi	r25, 0x1D	; 29
    8f82:	90 93 57 0e 	sts	0x0E57, r25
    8f86:	80 93 56 0e 	sts	0x0E56, r24
    8f8a:	c4 e4       	ldi	r28, 0x44	; 68
    8f8c:	d6 e0       	ldi	r29, 0x06	; 6
				for (uint8_t i = 0; i < 4; i++) {
    8f8e:	f1 2c       	mov	r15, r1
	event = indexProcess (event, &mstate, 4);
	mstate.check (event, Columns, 0, IlinesCount - 1);
//	Tevent = event = saveEvent ;

	uint8_t sub = mstate.m_posVert;
	uint8_t y = 1 * FH;
    8f90:	e8 e0       	ldi	r30, 0x08	; 8
    8f92:	ee 2e       	mov	r14, r30
					sub = mstate.m_posVert = IlinesCount - 1;
				}
				// Edit custom stick names
				Columns = &ProgColumns[COLUMNS_3];
				for (uint8_t i = 0; i < 4; i++) {
					lcd_putsAttIdx ( FW * 5, y, modi12x3, i, 0);
    8f94:	00 e0       	ldi	r16, 0x00	; 0
    8f96:	2f 2d       	mov	r18, r15
    8f98:	44 eb       	ldi	r20, 0xB4	; 180
    8f9a:	52 e0       	ldi	r21, 0x02	; 2
    8f9c:	6e 2d       	mov	r22, r14
    8f9e:	8e e1       	ldi	r24, 0x1E	; 30
    8fa0:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
					editName (g_posHorz, y, &g_eeGeneral.customStickNames[i * 4], 4,
							sub == subN ? EE_GENERAL : 0);
    8fa4:	01 e0       	ldi	r16, 0x01	; 1
    8fa6:	86 e0       	ldi	r24, 0x06	; 6
    8fa8:	8f 0d       	add	r24, r15
    8faa:	18 13       	cpse	r17, r24
    8fac:	00 e0       	ldi	r16, 0x00	; 0
    8fae:	24 e0       	ldi	r18, 0x04	; 4
    8fb0:	ae 01       	movw	r20, r28
    8fb2:	6e 2d       	mov	r22, r14
    8fb4:	80 91 7e 0d 	lds	r24, 0x0D7E
    8fb8:	9a db       	rcall	.-2252   	; 0x86ee <_Z8editNamehhPhhh>
					y += FH;
    8fba:	f8 e0       	ldi	r31, 0x08	; 8
    8fbc:	ef 0e       	add	r14, r31
				if (sub >= IlinesCount) {
					sub = mstate.m_posVert = IlinesCount - 1;
				}
				// Edit custom stick names
				Columns = &ProgColumns[COLUMNS_3];
				for (uint8_t i = 0; i < 4; i++) {
    8fbe:	f3 94       	inc	r15
    8fc0:	24 96       	adiw	r28, 0x04	; 4
    8fc2:	84 e0       	ldi	r24, 0x04	; 4
    8fc4:	f8 12       	cpse	r15, r24
    8fc6:	e6 cf       	rjmp	.-52     	; 0x8f94 <_Z13menuProcIndexh+0x4c6>
    8fc8:	ba c3       	rjmp	.+1908   	; 0x973e <_Z13menuProcIndexh+0xc70>

		}
			break;

		case M_ALARMS: {
			TITLEP (Str_Alarms);
    8fca:	89 ed       	ldi	r24, 0xD9	; 217
    8fcc:	9b e1       	ldi	r25, 0x1B	; 27
    8fce:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>
			IlinesCount = 7;
#else
			IlinesCount = 6;
#endif
#else
			IlinesCount = 6;
    8fd2:	86 e0       	ldi	r24, 0x06	; 6
    8fd4:	80 93 5b 0e 	sts	0x0E5B, r24
#endif
			uint8_t attr = LEFT;
			lcd_puts_Pleft (y, PSTR(STR_BATT_WARN"\037"STR_INACT_ALARM));
    8fd8:	67 e0       	ldi	r22, 0x07	; 7
    8fda:	77 e1       	ldi	r23, 0x17	; 23
    8fdc:	88 e0       	ldi	r24, 0x08	; 8
    8fde:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
			if (sub == subN) {
    8fe2:	11 11       	cpse	r17, r1
    8fe4:	0b c0       	rjmp	.+22     	; 0x8ffc <_Z13menuProcIndexh+0x52e>
				attr = blink | LEFT;
    8fe6:	cb 2d       	mov	r28, r11
    8fe8:	c0 64       	ori	r28, 0x40	; 64
				CHECK_INCDEC_H_GENVAR(g_eeGeneral.vBatWarn, 40, 120);
    8fea:	48 e7       	ldi	r20, 0x78	; 120
    8fec:	68 e2       	ldi	r22, 0x28	; 40
    8fee:	80 91 11 06 	lds	r24, 0x0611
    8ff2:	0e 94 92 13 	call	0x2724	; 0x2724 <_Z14checkIncDec_hgaaa>
    8ff6:	80 93 11 06 	sts	0x0611, r24
    8ffa:	01 c0       	rjmp	.+2      	; 0x8ffe <_Z13menuProcIndexh+0x530>
			IlinesCount = 6;
#endif
#else
			IlinesCount = 6;
#endif
			uint8_t attr = LEFT;
    8ffc:	c0 e4       	ldi	r28, 0x40	; 64
			lcd_puts_Pleft (y, PSTR(STR_BATT_WARN"\037"STR_INACT_ALARM));
			if (sub == subN) {
				attr = blink | LEFT;
				CHECK_INCDEC_H_GENVAR(g_eeGeneral.vBatWarn, 40, 120);
			} //5-10V
			putsVolts (PARAM_OFS, y, g_eeGeneral.vBatWarn, attr);
    8ffe:	2c 2f       	mov	r18, r28
    9000:	40 91 11 06 	lds	r20, 0x0611
    9004:	68 e0       	ldi	r22, 0x08	; 8
    9006:	86 e6       	ldi	r24, 0x66	; 102
    9008:	0e 94 2f 29 	call	0x525e	; 0x525e <_Z9putsVoltshhhh>
			y += FH;
			subN += 1;

			attr = 0; //LEFT ;
			if (sub == subN) {
    900c:	11 30       	cpi	r17, 0x01	; 1
    900e:	49 f4       	brne	.+18     	; 0x9022 <_Z13menuProcIndexh+0x554>
				attr = blink;
				CHECK_INCDEC_H_GENVAR(g_eeGeneral.inactivityTimer, -10, 110);
    9010:	4e e6       	ldi	r20, 0x6E	; 110
    9012:	66 ef       	ldi	r22, 0xF6	; 246
    9014:	80 91 27 06 	lds	r24, 0x0627
    9018:	0e 94 92 13 	call	0x2724	; 0x2724 <_Z14checkIncDec_hgaaa>
    901c:	80 93 27 06 	sts	0x0627, r24
    9020:	01 c0       	rjmp	.+2      	; 0x9024 <_Z13menuProcIndexh+0x556>
			} //5-10V
			putsVolts (PARAM_OFS, y, g_eeGeneral.vBatWarn, attr);
			y += FH;
			subN += 1;

			attr = 0; //LEFT ;
    9022:	b1 2c       	mov	r11, r1
				attr = blink;
				CHECK_INCDEC_H_GENVAR(g_eeGeneral.inactivityTimer, -10, 110);
			} //0..120minutes
//			lcd_xlabel_decimal( y, PSTR(STR_INACT_ALARM), g_eeGeneral.inactivityTimer+10, attr, PARAM_OFS+2*FW-2 ) ;
//      lcd_puts_Pleft( y,PSTR(STR_INACT_ALARM));
			lcd_outdezAtt (PARAM_OFS + 2 * FW - 2, y, g_eeGeneral.inactivityTimer + 10, attr);
    9024:	40 91 27 06 	lds	r20, 0x0627
    9028:	55 27       	eor	r21, r21
    902a:	47 fd       	sbrc	r20, 7
    902c:	50 95       	com	r21
    902e:	46 5f       	subi	r20, 0xF6	; 246
    9030:	5f 4f       	sbci	r21, 0xFF	; 255
    9032:	2b 2d       	mov	r18, r11
    9034:	60 e1       	ldi	r22, 0x10	; 16
    9036:	80 e7       	ldi	r24, 0x70	; 112
    9038:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
			y += FH;
			subN += 1;

			uint8_t b = g_eeGeneral.disableThrottleWarning;
			g_eeGeneral.disableThrottleWarning = offonMenuItem_g (b, y, PSTR(STR_THR_WARNING),
					sub == subN);
    903c:	21 e0       	ldi	r18, 0x01	; 1
    903e:	12 30       	cpi	r17, 0x02	; 2
    9040:	09 f0       	breq	.+2      	; 0x9044 <_Z13menuProcIndexh+0x576>
    9042:	20 e0       	ldi	r18, 0x00	; 0
//      lcd_puts_Pleft( y,PSTR(STR_INACT_ALARM));
			lcd_outdezAtt (PARAM_OFS + 2 * FW - 2, y, g_eeGeneral.inactivityTimer + 10, attr);
			y += FH;
			subN += 1;

			uint8_t b = g_eeGeneral.disableThrottleWarning;
    9044:	80 91 25 06 	lds	r24, 0x0625
			g_eeGeneral.disableThrottleWarning = offonMenuItem_g (b, y, PSTR(STR_THR_WARNING),
					sub == subN);
    9048:	46 ef       	ldi	r20, 0xF6	; 246
    904a:	56 e1       	ldi	r21, 0x16	; 22
    904c:	68 e1       	ldi	r22, 0x18	; 24
    904e:	81 70       	andi	r24, 0x01	; 1
    9050:	0e 94 03 3a 	call	0x7406	; 0x7406 <_ZL15offonMenuItem_ghhPKch>
    9054:	90 91 25 06 	lds	r25, 0x0625
    9058:	80 fb       	bst	r24, 0
    905a:	90 f9       	bld	r25, 0
    905c:	90 93 25 06 	sts	0x0625, r25
			y += FH;
			subN += 1;

			b = g_eeGeneral.disableSwitchWarning;
			g_eeGeneral.disableSwitchWarning = offonMenuItem_g (b, y, Str_Switch_warn, sub == subN);
    9060:	21 e0       	ldi	r18, 0x01	; 1
    9062:	13 30       	cpi	r17, 0x03	; 3
    9064:	09 f0       	breq	.+2      	; 0x9068 <_Z13menuProcIndexh+0x59a>
    9066:	20 e0       	ldi	r18, 0x00	; 0
			g_eeGeneral.disableThrottleWarning = offonMenuItem_g (b, y, PSTR(STR_THR_WARNING),
					sub == subN);
			y += FH;
			subN += 1;

			b = g_eeGeneral.disableSwitchWarning;
    9068:	80 91 25 06 	lds	r24, 0x0625
			g_eeGeneral.disableSwitchWarning = offonMenuItem_g (b, y, Str_Switch_warn, sub == subN);
    906c:	43 e0       	ldi	r20, 0x03	; 3
    906e:	50 e2       	ldi	r21, 0x20	; 32
    9070:	60 e2       	ldi	r22, 0x20	; 32
    9072:	86 95       	lsr	r24
    9074:	81 70       	andi	r24, 0x01	; 1
    9076:	0e 94 03 3a 	call	0x7406	; 0x7406 <_ZL15offonMenuItem_ghhPKch>
    907a:	90 91 25 06 	lds	r25, 0x0625
    907e:	80 fb       	bst	r24, 0
    9080:	91 f9       	bld	r25, 1
    9082:	90 93 25 06 	sts	0x0625, r25
			y += FH;
			subN += 1;

			b = g_eeGeneral.disableMemoryWarning;
			g_eeGeneral.disableMemoryWarning = offonMenuItem_g (b, y, PSTR(STR_MEM_WARN),
					sub == subN);
    9086:	21 e0       	ldi	r18, 0x01	; 1
    9088:	14 30       	cpi	r17, 0x04	; 4
    908a:	09 f0       	breq	.+2      	; 0x908e <_Z13menuProcIndexh+0x5c0>
    908c:	20 e0       	ldi	r18, 0x00	; 0
			b = g_eeGeneral.disableSwitchWarning;
			g_eeGeneral.disableSwitchWarning = offonMenuItem_g (b, y, Str_Switch_warn, sub == subN);
			y += FH;
			subN += 1;

			b = g_eeGeneral.disableMemoryWarning;
    908e:	80 91 25 06 	lds	r24, 0x0625
			g_eeGeneral.disableMemoryWarning = offonMenuItem_g (b, y, PSTR(STR_MEM_WARN),
					sub == subN);
    9092:	47 ee       	ldi	r20, 0xE7	; 231
    9094:	56 e1       	ldi	r21, 0x16	; 22
    9096:	68 e2       	ldi	r22, 0x28	; 40
    9098:	82 fb       	bst	r24, 2
    909a:	88 27       	eor	r24, r24
    909c:	80 f9       	bld	r24, 0
    909e:	0e 94 03 3a 	call	0x7406	; 0x7406 <_ZL15offonMenuItem_ghhPKch>
    90a2:	90 91 25 06 	lds	r25, 0x0625
    90a6:	80 fb       	bst	r24, 0
    90a8:	92 f9       	bld	r25, 2
    90aa:	90 93 25 06 	sts	0x0625, r25
			y += FH;
			subN += 1;

			b = g_eeGeneral.disableAlarmWarning;
			g_eeGeneral.disableAlarmWarning = offonMenuItem_g (b, y, PSTR(STR_ALARM_WARN),
					sub == subN);
    90ae:	21 e0       	ldi	r18, 0x01	; 1
    90b0:	15 30       	cpi	r17, 0x05	; 5
    90b2:	09 f0       	breq	.+2      	; 0x90b6 <_Z13menuProcIndexh+0x5e8>
    90b4:	20 e0       	ldi	r18, 0x00	; 0
			g_eeGeneral.disableMemoryWarning = offonMenuItem_g (b, y, PSTR(STR_MEM_WARN),
					sub == subN);
			y += FH;
			subN += 1;

			b = g_eeGeneral.disableAlarmWarning;
    90b6:	80 91 25 06 	lds	r24, 0x0625
    90ba:	87 fb       	bst	r24, 7
    90bc:	88 27       	eor	r24, r24
    90be:	80 f9       	bld	r24, 0
			g_eeGeneral.disableAlarmWarning = offonMenuItem_g (b, y, PSTR(STR_ALARM_WARN),
					sub == subN);
    90c0:	49 ed       	ldi	r20, 0xD9	; 217
    90c2:	56 e1       	ldi	r21, 0x16	; 22
    90c4:	60 e3       	ldi	r22, 0x30	; 48
    90c6:	0e 94 03 3a 	call	0x7406	; 0x7406 <_ZL15offonMenuItem_ghhPKch>
    90ca:	90 91 25 06 	lds	r25, 0x0625
    90ce:	80 fb       	bst	r24, 0
    90d0:	97 f9       	bld	r25, 7
    90d2:	90 93 25 06 	sts	0x0625, r25
			subN += 1;
#endif
#endif

		}
			break;
    90d6:	33 c3       	rjmp	.+1638   	; 0x973e <_Z13menuProcIndexh+0xc70>

		case M_GENERAL: {
			TITLEP (Str_General);
    90d8:	89 ee       	ldi	r24, 0xE9	; 233
    90da:	9b e1       	ldi	r25, 0x1B	; 27
    90dc:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>
#ifndef NOPOTSCROLL
#ifdef GLOBAL_COUNTDOWN
			IlinesCount = 6;
    90e0:	86 e0       	ldi	r24, 0x06	; 6
    90e2:	80 93 5b 0e 	sts	0x0E5B, r24
			IlinesCount = 5;
#else
			IlinesCount = 4;
#endif
#endif
			if (sub == 0) {
    90e6:	11 11       	cpse	r17, r1
    90e8:	08 c0       	rjmp	.+16     	; 0x90fa <_Z13menuProcIndexh+0x62c>
				Columns = &ProgColumns[COLUMNS_9];
    90ea:	88 e0       	ldi	r24, 0x08	; 8
    90ec:	9d e1       	ldi	r25, 0x1D	; 29
    90ee:	90 93 57 0e 	sts	0x0E57, r25
    90f2:	80 93 56 0e 	sts	0x0E56, r24
			}
			editName (g_posHorz, y, (uint8_t *) g_eeGeneral.ownerName,
					sizeof (g_eeGeneral.ownerName), (sub == subN) ? EE_GENERAL : 0);
    90f6:	01 e0       	ldi	r16, 0x01	; 1
    90f8:	01 c0       	rjmp	.+2      	; 0x90fc <_Z13menuProcIndexh+0x62e>
    90fa:	00 e0       	ldi	r16, 0x00	; 0
    90fc:	2a e0       	ldi	r18, 0x0A	; 10
    90fe:	43 e3       	ldi	r20, 0x33	; 51
    9100:	56 e0       	ldi	r21, 0x06	; 6
    9102:	68 e0       	ldi	r22, 0x08	; 8
    9104:	80 91 7e 0d 	lds	r24, 0x0D7E
    9108:	f2 da       	rcall	.-2588   	; 0x86ee <_Z8editNamehhPhhh>
			y += FH;
			subN += 1;

#ifdef GLOBAL_COUNTDOWN
			g_eeGeneral.preBeep = onoffMenuItem_g (g_eeGeneral.preBeep, y, Str_Beep_Countdown,
					sub == subN);
    910a:	21 e0       	ldi	r18, 0x01	; 1
    910c:	11 30       	cpi	r17, 0x01	; 1
    910e:	09 f0       	breq	.+2      	; 0x9112 <_Z13menuProcIndexh+0x644>
    9110:	20 e0       	ldi	r18, 0x00	; 0
    9112:	80 91 28 06 	lds	r24, 0x0628
	lcd_puts_Pleft (y, s);
	return onoffItem (value, y, condition, EE_MODEL);
}

static uint8_t onoffMenuItem_g (uint8_t value, uint8_t y, const prog_char *s, uint8_t condition) {
	return onoffMenuItem (value, y, s, condition, EE_GENERAL);
    9116:	4f e8       	ldi	r20, 0x8F	; 143
    9118:	5d e1       	ldi	r21, 0x1D	; 29
    911a:	60 e1       	ldi	r22, 0x10	; 16
    911c:	82 fb       	bst	r24, 2
    911e:	88 27       	eor	r24, r24
    9120:	80 f9       	bld	r24, 0
    9122:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <_ZL13onoffMenuItemhhPKchh.isra.2>
			y += FH;
			subN += 1;

#ifdef GLOBAL_COUNTDOWN
			g_eeGeneral.preBeep = onoffMenuItem_g (g_eeGeneral.preBeep, y, Str_Beep_Countdown,
					sub == subN);
    9126:	90 91 28 06 	lds	r25, 0x0628
    912a:	80 fb       	bst	r24, 0
    912c:	92 f9       	bld	r25, 2
    912e:	90 93 28 06 	sts	0x0628, r25
			subN += 1;
#endif

			uint8_t b = g_eeGeneral.disableSplashScreen;
			g_eeGeneral.disableSplashScreen = offonMenuItem_g (b, y, PSTR(STR_SPLASH_SCREEN),
					sub == subN);
    9132:	21 e0       	ldi	r18, 0x01	; 1
    9134:	12 30       	cpi	r17, 0x02	; 2
    9136:	09 f0       	breq	.+2      	; 0x913a <_Z13menuProcIndexh+0x66c>
    9138:	20 e0       	ldi	r18, 0x00	; 0
					sub == subN);
			y += FH;
			subN += 1;
#endif

			uint8_t b = g_eeGeneral.disableSplashScreen;
    913a:	80 91 28 06 	lds	r24, 0x0628
			g_eeGeneral.disableSplashScreen = offonMenuItem_g (b, y, PSTR(STR_SPLASH_SCREEN),
					sub == subN);
    913e:	4b ec       	ldi	r20, 0xCB	; 203
    9140:	56 e1       	ldi	r21, 0x16	; 22
    9142:	68 e1       	ldi	r22, 0x18	; 24
    9144:	82 95       	swap	r24
    9146:	81 70       	andi	r24, 0x01	; 1
    9148:	0e 94 03 3a 	call	0x7406	; 0x7406 <_ZL15offonMenuItem_ghhPKch>
    914c:	90 91 28 06 	lds	r25, 0x0628
    9150:	80 fb       	bst	r24, 0
    9152:	94 f9       	bld	r25, 4
    9154:	90 93 28 06 	sts	0x0628, r25
			y += FH;
			subN += 1;

			b = g_eeGeneral.hideNameOnSplash;
			g_eeGeneral.hideNameOnSplash = offonMenuItem_g (b, y, PSTR(STR_SPLASH_NAME),
					sub == subN);
    9158:	21 e0       	ldi	r18, 0x01	; 1
    915a:	13 30       	cpi	r17, 0x03	; 3
    915c:	09 f0       	breq	.+2      	; 0x9160 <_Z13menuProcIndexh+0x692>
    915e:	20 e0       	ldi	r18, 0x00	; 0
			g_eeGeneral.disableSplashScreen = offonMenuItem_g (b, y, PSTR(STR_SPLASH_SCREEN),
					sub == subN);
			y += FH;
			subN += 1;

			b = g_eeGeneral.hideNameOnSplash;
    9160:	80 91 2e 06 	lds	r24, 0x062E
			g_eeGeneral.hideNameOnSplash = offonMenuItem_g (b, y, PSTR(STR_SPLASH_NAME),
					sub == subN);
    9164:	4f eb       	ldi	r20, 0xBF	; 191
    9166:	56 e1       	ldi	r21, 0x16	; 22
    9168:	60 e2       	ldi	r22, 0x20	; 32
    916a:	82 95       	swap	r24
    916c:	81 70       	andi	r24, 0x01	; 1
    916e:	0e 94 03 3a 	call	0x7406	; 0x7406 <_ZL15offonMenuItem_ghhPKch>
    9172:	90 91 2e 06 	lds	r25, 0x062E
    9176:	80 fb       	bst	r24, 0
    9178:	94 f9       	bld	r25, 4
    917a:	90 93 2e 06 	sts	0x062E, r25
			y += FH;
			subN += 1;

#ifndef NOPOTSCROLL
			b = g_eeGeneral.disablePotScroll;
			g_eeGeneral.disablePotScroll = offonMenuItem_g (b, y, PSTR(STR_POTSCROLL), sub == subN);
    917e:	21 e0       	ldi	r18, 0x01	; 1
    9180:	14 30       	cpi	r17, 0x04	; 4
    9182:	09 f0       	breq	.+2      	; 0x9186 <_Z13menuProcIndexh+0x6b8>
    9184:	20 e0       	ldi	r18, 0x00	; 0
					sub == subN);
			y += FH;
			subN += 1;

#ifndef NOPOTSCROLL
			b = g_eeGeneral.disablePotScroll;
    9186:	80 91 28 06 	lds	r24, 0x0628
			g_eeGeneral.disablePotScroll = offonMenuItem_g (b, y, PSTR(STR_POTSCROLL), sub == subN);
    918a:	45 eb       	ldi	r20, 0xB5	; 181
    918c:	56 e1       	ldi	r21, 0x16	; 22
    918e:	68 e2       	ldi	r22, 0x28	; 40
    9190:	85 fb       	bst	r24, 5
    9192:	88 27       	eor	r24, r24
    9194:	80 f9       	bld	r24, 0
    9196:	0e 94 03 3a 	call	0x7406	; 0x7406 <_ZL15offonMenuItem_ghhPKch>
    919a:	90 91 28 06 	lds	r25, 0x0628
    919e:	80 fb       	bst	r24, 0
    91a0:	95 f9       	bld	r25, 5
    91a2:	90 93 28 06 	sts	0x0628, r25
			y += FH;
			subN += 1;
#endif

			g_eeGeneral.stickScroll = onoffMenuItem_g (g_eeGeneral.stickScroll, y,
					PSTR(STR_STICKSCROLL), sub == subN);
    91a6:	21 e0       	ldi	r18, 0x01	; 1
    91a8:	15 30       	cpi	r17, 0x05	; 5
    91aa:	09 f0       	breq	.+2      	; 0x91ae <_Z13menuProcIndexh+0x6e0>
    91ac:	20 e0       	ldi	r18, 0x00	; 0
    91ae:	80 91 2e 06 	lds	r24, 0x062E
    91b2:	87 fb       	bst	r24, 7
    91b4:	88 27       	eor	r24, r24
    91b6:	80 f9       	bld	r24, 0
	lcd_puts_Pleft (y, s);
	return onoffItem (value, y, condition, EE_MODEL);
}

static uint8_t onoffMenuItem_g (uint8_t value, uint8_t y, const prog_char *s, uint8_t condition) {
	return onoffMenuItem (value, y, s, condition, EE_GENERAL);
    91b8:	49 ea       	ldi	r20, 0xA9	; 169
    91ba:	56 e1       	ldi	r21, 0x16	; 22
    91bc:	60 e3       	ldi	r22, 0x30	; 48
    91be:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <_ZL13onoffMenuItemhhPKchh.isra.2>
			y += FH;
			subN += 1;
#endif

			g_eeGeneral.stickScroll = onoffMenuItem_g (g_eeGeneral.stickScroll, y,
					PSTR(STR_STICKSCROLL), sub == subN);
    91c2:	90 91 2e 06 	lds	r25, 0x062E
    91c6:	80 fb       	bst	r24, 0
    91c8:	97 f9       	bld	r25, 7
    91ca:	90 93 2e 06 	sts	0x062E, r25
			y += FH;
			subN += 1;

		}
			break;
    91ce:	b7 c2       	rjmp	.+1390   	; 0x973e <_Z13menuProcIndexh+0xc70>

		case M_VERSION: {
			TITLEP (Str_Version);
    91d0:	81 ef       	ldi	r24, 0xF1	; 241
    91d2:	9b e1       	ldi	r25, 0x1B	; 27
    91d4:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>
			lcd_puts_Pleft (2 * FH, Stamps);
    91d8:	61 e3       	ldi	r22, 0x31	; 49
    91da:	77 e0       	ldi	r23, 0x07	; 7
    91dc:	80 e1       	ldi	r24, 0x10	; 16
    91de:	d2 c0       	rjmp	.+420    	; 0x9384 <_Z13menuProcIndexh+0x8b6>

		}
			break;

		case M_DIAGKEYS: {
			TITLEP (PSTR(STR_DIAG));
    91e0:	84 ea       	ldi	r24, 0xA4	; 164
    91e2:	96 e1       	ldi	r25, 0x16	; 22
    91e4:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>
    91e8:	d0 e0       	ldi	r29, 0x00	; 0
//			IlinesCount = 0 ;

			uint8_t x = 7 * FW;
			for (uint8_t i = 0; i < 9; i++) {
    91ea:	c0 e0       	ldi	r28, 0x00	; 0
				uint8_t y = i * FH; //+FH;
				if (i > (SW_ID0 - SW_BASE_DIAG)) y -= FH; //overwrite ID0
    91ec:	c4 30       	cpi	r28, 0x04	; 4
    91ee:	18 f0       	brcs	.+6      	; 0x91f6 <_Z13menuProcIndexh+0x728>
    91f0:	18 ef       	ldi	r17, 0xF8	; 248
    91f2:	1d 0f       	add	r17, r29
    91f4:	01 c0       	rjmp	.+2      	; 0x91f8 <_Z13menuProcIndexh+0x72a>
			TITLEP (PSTR(STR_DIAG));
//			IlinesCount = 0 ;

			uint8_t x = 7 * FW;
			for (uint8_t i = 0; i < 9; i++) {
				uint8_t y = i * FH; //+FH;
    91f6:	1d 2f       	mov	r17, r29
				if (i > (SW_ID0 - SW_BASE_DIAG)) y -= FH; //overwrite ID0
				bool t = keyState ((EnumKeys) (SW_BASE_DIAG + i));
    91f8:	8f e0       	ldi	r24, 0x0F	; 15
    91fa:	8c 0f       	add	r24, r28
    91fc:	0e 94 14 2b 	call	0x5628	; 0x5628 <_Z8keyState8EnumKeys>
    9200:	08 2f       	mov	r16, r24
				putsDrSwitches (x, y, i + 1, 0); //ohne ofF,on
    9202:	cf 5f       	subi	r28, 0xFF	; 255
    9204:	20 e0       	ldi	r18, 0x00	; 0
    9206:	4c 2f       	mov	r20, r28
    9208:	61 2f       	mov	r22, r17
    920a:	8a e2       	ldi	r24, 0x2A	; 42
    920c:	0e 94 c9 10 	call	0x2192	; 0x2192 <_Z14putsDrSwitcheshhah>
				putc_0_1 (x + FW * 4 + 2, y, t);
    9210:	40 2f       	mov	r20, r16
    9212:	61 2f       	mov	r22, r17
    9214:	84 e4       	ldi	r24, 0x44	; 68
    9216:	54 dc       	rcall	.-1880   	; 0x8ac0 <_Z8putc_0_1hhh>
    9218:	d8 5f       	subi	r29, 0xF8	; 248
		case M_DIAGKEYS: {
			TITLEP (PSTR(STR_DIAG));
//			IlinesCount = 0 ;

			uint8_t x = 7 * FW;
			for (uint8_t i = 0; i < 9; i++) {
    921a:	c9 30       	cpi	r28, 0x09	; 9
    921c:	39 f7       	brne	.-50     	; 0x91ec <_Z13menuProcIndexh+0x71e>
				putsDrSwitches (x, y, i + 1, 0); //ohne ofF,on
				putc_0_1 (x + FW * 4 + 2, y, t);
			}

			x = 0;
			lcd_puts_Pleft (2 * FH, PSTR(STR_KEYNAMES));
    921e:	62 e8       	ldi	r22, 0x82	; 130
    9220:	76 e1       	ldi	r23, 0x16	; 22
    9222:	80 e1       	ldi	r24, 0x10	; 16
    9224:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
    9228:	d8 e3       	ldi	r29, 0x38	; 56
			for (uint8_t i = 0; i < 6; i++) {
    922a:	c0 e0       	ldi	r28, 0x00	; 0
				uint8_t y = (5 - i) * FH + 2 * FH;
				bool t = keyState ((EnumKeys) (KEY_MENU + i));
    922c:	8c 2f       	mov	r24, r28
    922e:	0e 94 14 2b 	call	0x5628	; 0x5628 <_Z8keyState8EnumKeys>
//      	lcd_putsAttIdx(  x, y, PSTR(STR_KEYNAMES),i,0);
				putc_0_1 (x + FW * 5 + 2, y, t);
    9232:	48 2f       	mov	r20, r24
    9234:	6d 2f       	mov	r22, r29
    9236:	80 e2       	ldi	r24, 0x20	; 32
    9238:	43 dc       	rcall	.-1914   	; 0x8ac0 <_Z8putc_0_1hhh>
				putc_0_1 (x + FW * 4 + 2, y, t);
			}

			x = 0;
			lcd_puts_Pleft (2 * FH, PSTR(STR_KEYNAMES));
			for (uint8_t i = 0; i < 6; i++) {
    923a:	cf 5f       	subi	r28, 0xFF	; 255
    923c:	d8 50       	subi	r29, 0x08	; 8
    923e:	c6 30       	cpi	r28, 0x06	; 6
    9240:	a9 f7       	brne	.-22     	; 0x922c <_Z13menuProcIndexh+0x75e>
//      	lcd_putsAttIdx(  x, y, PSTR(STR_KEYNAMES),i,0);
				putc_0_1 (x + FW * 5 + 2, y, t);
			}

			x = 14 * FW;
			lcd_puts_P (x, 3 * FH, PSTR(STR_TRIM_M_P));
    9242:	4a e7       	ldi	r20, 0x7A	; 122
    9244:	56 e1       	ldi	r21, 0x16	; 22
    9246:	68 e1       	ldi	r22, 0x18	; 24
    9248:	84 e5       	ldi	r24, 0x54	; 84
    924a:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <_Z10lcd_puts_PhhPKc>
    924e:	16 e0       	ldi	r17, 0x06	; 6
    9250:	c0 e2       	ldi	r28, 0x20	; 32
			for (uint8_t i = 0; i < 4; i++) {
    9252:	d0 e0       	ldi	r29, 0x00	; 0
				uint8_t y = i * FH + FH * 4;
				lcd_img (x, y, sticks, i);
    9254:	2d 2f       	mov	r18, r29
    9256:	4b e7       	ldi	r20, 0x7B	; 123
    9258:	5c e1       	ldi	r21, 0x1C	; 28
    925a:	6c 2f       	mov	r22, r28
    925c:	84 e5       	ldi	r24, 0x54	; 84
    925e:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <_Z7lcd_imghhPKhh>
				bool tm = keyState ((EnumKeys) (TRM_BASE + 2 * i));
    9262:	81 2f       	mov	r24, r17
    9264:	0e 94 14 2b 	call	0x5628	; 0x5628 <_Z8keyState8EnumKeys>
				putc_0_1 (x + FW * 4, y, tm);
    9268:	48 2f       	mov	r20, r24
    926a:	6c 2f       	mov	r22, r28
    926c:	8c e6       	ldi	r24, 0x6C	; 108
    926e:	28 dc       	rcall	.-1968   	; 0x8ac0 <_Z8putc_0_1hhh>
				bool tp = keyState ((EnumKeys) (TRM_BASE + 2 * i + 1));
    9270:	81 e0       	ldi	r24, 0x01	; 1
    9272:	81 0f       	add	r24, r17
    9274:	0e 94 14 2b 	call	0x5628	; 0x5628 <_Z8keyState8EnumKeys>
				putc_0_1 (x + FW * 6, y, tp);
    9278:	48 2f       	mov	r20, r24
    927a:	6c 2f       	mov	r22, r28
    927c:	88 e7       	ldi	r24, 0x78	; 120
    927e:	20 dc       	rcall	.-1984   	; 0x8ac0 <_Z8putc_0_1hhh>
				putc_0_1 (x + FW * 5 + 2, y, t);
			}

			x = 14 * FW;
			lcd_puts_P (x, 3 * FH, PSTR(STR_TRIM_M_P));
			for (uint8_t i = 0; i < 4; i++) {
    9280:	df 5f       	subi	r29, 0xFF	; 255
    9282:	c8 5f       	subi	r28, 0xF8	; 248
    9284:	1e 5f       	subi	r17, 0xFE	; 254
    9286:	d4 30       	cpi	r29, 0x04	; 4
    9288:	29 f7       	brne	.-54     	; 0x9254 <_Z13menuProcIndexh+0x786>
    928a:	59 c2       	rjmp	.+1202   	; 0x973e <_Z13menuProcIndexh+0xc70>
			}
		}
			break;

		case M_DIAGANA: {
			TITLEP (PSTR(STR_ANA));
    928c:	86 e7       	ldi	r24, 0x76	; 118
    928e:	96 e1       	ldi	r25, 0x16	; 22
    9290:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>
			IlinesCount = 1;
    9294:	81 e0       	ldi	r24, 0x01	; 1
    9296:	80 93 5b 0e 	sts	0x0E5B, r24

			StickScrollAllowed = 0;
    929a:	10 92 85 01 	sts	0x0185, r1
    929e:	d0 e0       	ldi	r29, 0x00	; 0
			for (uint8_t i = 0; i < 8; i++) {
    92a0:	c0 e0       	ldi	r28, 0x00	; 0
#ifdef FIX_MODE
				if (i < 4) {
					index = modeFixValue (i) - 1;
				}
#endif
				if (i < 7) lcd_outdez (15 * FW, y, (int32_t) calibratedStick[index] * 100 / 1024);
    92a2:	c1 2c       	mov	r12, r1
    92a4:	74 e0       	ldi	r23, 0x04	; 4
    92a6:	d7 2e       	mov	r13, r23
    92a8:	e1 2c       	mov	r14, r1
    92aa:	f1 2c       	mov	r15, r1
				else putsVBat (15 * FW, y, blink | PREC1);
    92ac:	1b 2d       	mov	r17, r11
    92ae:	10 62       	ori	r17, 0x20	; 32
			IlinesCount = 1;

			StickScrollAllowed = 0;
			for (uint8_t i = 0; i < 8; i++) {
				uint8_t y = i * FH;
				lcd_putc (4 * FW, y, 'A');
    92b0:	41 e4       	ldi	r20, 0x41	; 65
    92b2:	6d 2f       	mov	r22, r29
    92b4:	88 e1       	ldi	r24, 0x18	; 24
    92b6:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <_Z8lcd_putchhc>
    92ba:	41 e3       	ldi	r20, 0x31	; 49
    92bc:	4c 0f       	add	r20, r28
				lcd_putc (5 * FW, y, '1' + i);
    92be:	6d 2f       	mov	r22, r29
    92c0:	8e e1       	ldi	r24, 0x1E	; 30
    92c2:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <_Z8lcd_putchhc>
				lcd_outhex4 (7 * FW, y, anaIn (i));
    92c6:	8c 2f       	mov	r24, r28
    92c8:	0e 94 b8 14 	call	0x2970	; 0x2970 <_Z5anaInh>
    92cc:	ac 01       	movw	r20, r24
    92ce:	6d 2f       	mov	r22, r29
    92d0:	8a e2       	ldi	r24, 0x2A	; 42
    92d2:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <_Z11lcd_outhex4hhj>
				uint8_t index = i;
#ifdef FIX_MODE
				if (i < 4) {
    92d6:	c4 30       	cpi	r28, 0x04	; 4
    92d8:	28 f4       	brcc	.+10     	; 0x92e4 <_Z13menuProcIndexh+0x816>
					index = modeFixValue (i) - 1;
    92da:	8c 2f       	mov	r24, r28
    92dc:	0e 94 6d 10 	call	0x20da	; 0x20da <_Z12modeFixValueh>
    92e0:	81 50       	subi	r24, 0x01	; 1
    92e2:	03 c0       	rjmp	.+6      	; 0x92ea <_Z13menuProcIndexh+0x81c>
				}
#endif
				if (i < 7) lcd_outdez (15 * FW, y, (int32_t) calibratedStick[index] * 100 / 1024);
    92e4:	c7 30       	cpi	r28, 0x07	; 7
    92e6:	b9 f0       	breq	.+46     	; 0x9316 <_Z13menuProcIndexh+0x848>
    92e8:	8c 2f       	mov	r24, r28
    92ea:	e8 2f       	mov	r30, r24
    92ec:	f0 e0       	ldi	r31, 0x00	; 0
    92ee:	ee 0f       	add	r30, r30
    92f0:	ff 1f       	adc	r31, r31
    92f2:	e9 53       	subi	r30, 0x39	; 57
    92f4:	f2 4f       	sbci	r31, 0xF2	; 242
    92f6:	a0 81       	ld	r26, Z
    92f8:	b1 81       	ldd	r27, Z+1	; 0x01
    92fa:	24 e6       	ldi	r18, 0x64	; 100
    92fc:	30 e0       	ldi	r19, 0x00	; 0
    92fe:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__usmulhisi3>
    9302:	a7 01       	movw	r20, r14
    9304:	96 01       	movw	r18, r12
    9306:	0e 94 1f 72 	call	0xe43e	; 0xe43e <__divmodsi4>
    930a:	a9 01       	movw	r20, r18
    930c:	6d 2f       	mov	r22, r29
    930e:	8a e5       	ldi	r24, 0x5A	; 90
    9310:	0e 94 47 29 	call	0x528e	; 0x528e <_Z10lcd_outdezhhi>
    9314:	05 c0       	rjmp	.+10     	; 0x9320 <_Z13menuProcIndexh+0x852>
				else putsVBat (15 * FW, y, blink | PREC1);
    9316:	41 2f       	mov	r20, r17
    9318:	6d 2f       	mov	r22, r29
    931a:	8a e5       	ldi	r24, 0x5A	; 90
    931c:	0e 94 43 29 	call	0x5286	; 0x5286 <_Z8putsVBathhh>
		case M_DIAGANA: {
			TITLEP (PSTR(STR_ANA));
			IlinesCount = 1;

			StickScrollAllowed = 0;
			for (uint8_t i = 0; i < 8; i++) {
    9320:	cf 5f       	subi	r28, 0xFF	; 255
    9322:	d8 5f       	subi	r29, 0xF8	; 248
    9324:	c8 30       	cpi	r28, 0x08	; 8
    9326:	21 f6       	brne	.-120    	; 0x92b0 <_Z13menuProcIndexh+0x7e2>
				}
#endif
				if (i < 7) lcd_outdez (15 * FW, y, (int32_t) calibratedStick[index] * 100 / 1024);
				else putsVBat (15 * FW, y, blink | PREC1);
			}
			lcd_puts_Pleft (5 * FH, PSTR("\022BG"));
    9328:	62 e7       	ldi	r22, 0x72	; 114
    932a:	76 e1       	ldi	r23, 0x16	; 22
    932c:	88 e2       	ldi	r24, 0x28	; 40
    932e:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
			lcd_outdez (20 * FW, 6 * FH, BandGap);
    9332:	40 91 00 01 	lds	r20, 0x0100
    9336:	50 91 01 01 	lds	r21, 0x0101
    933a:	60 e3       	ldi	r22, 0x30	; 48
    933c:	88 e7       	ldi	r24, 0x78	; 120
    933e:	0e 94 47 29 	call	0x528e	; 0x528e <_Z10lcd_outdezhhi>
//	    if(sub==0)
//  	  {
#ifndef NOPOTSCROLL
			scroll_disabled = 1;
    9342:	81 e0       	ldi	r24, 0x01	; 1
    9344:	80 93 a1 0d 	sts	0x0DA1, r24
#endif
			if (s_editMode) {
    9348:	80 91 a5 0d 	lds	r24, 0x0DA5
    934c:	88 23       	and	r24, r24
    934e:	09 f4       	brne	.+2      	; 0x9352 <_Z13menuProcIndexh+0x884>
    9350:	f6 c1       	rjmp	.+1004   	; 0x973e <_Z13menuProcIndexh+0xc70>
				CHECK_INCDEC_H_GENVAR(g_eeGeneral.vBatCalib, -127, 127);
    9352:	4f e7       	ldi	r20, 0x7F	; 127
    9354:	61 e8       	ldi	r22, 0x81	; 129
    9356:	80 91 12 06 	lds	r24, 0x0612
    935a:	0e 94 92 13 	call	0x2724	; 0x2724 <_Z14checkIncDec_hgaaa>
    935e:	80 93 12 06 	sts	0x0612, r24
    9362:	ed c1       	rjmp	.+986    	; 0x973e <_Z13menuProcIndexh+0xc70>
//    	}
		}
			break;

		case M_TRAINER: {
			TITLEP (Str_Trainer);
    9364:	89 ef       	ldi	r24, 0xF9	; 249
    9366:	9b e1       	ldi	r25, 0x1B	; 27
    9368:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>
			IlinesCount = 6;
    936c:	86 e0       	ldi	r24, 0x06	; 6
    936e:	80 93 5b 0e 	sts	0x0E5B, r24

//    MENU(STR_TRAINER, menuTabDiag, e_Trainer, 7, {0, 3, 3, 3, 3, 0/*, 0*/});

			uint8_t subSub = g_posHorz;
    9372:	60 90 7e 0d 	lds	r6, 0x0D7E

			if (SLAVE_MODE) { // i am the slave
    9376:	80 91 63 00 	lds	r24, 0x0063
    937a:	81 ff       	sbrs	r24, 1
    937c:	06 c0       	rjmp	.+12     	; 0x938a <_Z13menuProcIndexh+0x8bc>
				lcd_puts_Pleft (3 * FH, PSTR(STR_SLAVE));
    937e:	6b e6       	ldi	r22, 0x6B	; 107
    9380:	76 e1       	ldi	r23, 0x16	; 22
    9382:	88 e1       	ldi	r24, 0x18	; 24
    9384:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
    9388:	da c1       	rjmp	.+948    	; 0x973e <_Z13menuProcIndexh+0xc70>
			} else {
				y = 2 * FH;
				uint8_t attr;
				lcd_puts_Pleft (1 * FH, PSTR(STR_MODE_SRC_SW));
    938a:	6b e5       	ldi	r22, 0x5B	; 91
    938c:	76 e1       	ldi	r23, 0x16	; 22
    938e:	88 e0       	ldi	r24, 0x08	; 8
    9390:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
    9394:	cc e1       	ldi	r28, 0x1C	; 28
    9396:	d6 e0       	ldi	r29, 0x06	; 6

				for (uint8_t i = 0; i < 4; i++) {
    9398:	81 2c       	mov	r8, r1
			uint8_t subSub = g_posHorz;

			if (SLAVE_MODE) { // i am the slave
				lcd_puts_Pleft (3 * FH, PSTR(STR_SLAVE));
			} else {
				y = 2 * FH;
    939a:	40 e1       	ldi	r20, 0x10	; 16
    939c:	e4 2e       	mov	r14, r20
					int8_t x;
					putsChnRaw (0, y, i + 1, 0);

					for (uint8_t j = 0; j < 4; j++) {
						if (sub == i) {
							Columns = &ProgColumns[COLUMNS_3];
    939e:	55 e0       	ldi	r21, 0x05	; 5
    93a0:	c5 2e       	mov	r12, r21
    93a2:	5d e1       	ldi	r21, 0x1D	; 29
    93a4:	d5 2e       	mov	r13, r21
				lcd_puts_Pleft (1 * FH, PSTR(STR_MODE_SRC_SW));

				for (uint8_t i = 0; i < 4; i++) {
					volatile TrainerMix *td = &g_eeGeneral.trainer.mix[i];
					int8_t x;
					putsChnRaw (0, y, i + 1, 0);
    93a6:	77 24       	eor	r7, r7
    93a8:	73 94       	inc	r7
    93aa:	78 0c       	add	r7, r8
    93ac:	20 e0       	ldi	r18, 0x00	; 0
    93ae:	47 2d       	mov	r20, r7
    93b0:	6e 2d       	mov	r22, r14
    93b2:	80 e0       	ldi	r24, 0x00	; 0
    93b4:	0e 94 95 10 	call	0x212a	; 0x212a <_Z10putsChnRawhhhh>

					for (uint8_t j = 0; j < 4; j++) {
    93b8:	a1 2c       	mov	r10, r1
						if (sub == i) {
    93ba:	18 11       	cpse	r17, r8
    93bc:	06 c0       	rjmp	.+12     	; 0x93ca <_Z13menuProcIndexh+0x8fc>
							Columns = &ProgColumns[COLUMNS_3];
    93be:	d0 92 57 0e 	sts	0x0E57, r13
    93c2:	c0 92 56 0e 	sts	0x0E56, r12
						}
						attr = ( (sub == i && subSub == j) ? blink : 0);
    93c6:	6a 14       	cp	r6, r10
    93c8:	11 f0       	breq	.+4      	; 0x93ce <_Z13menuProcIndexh+0x900>
    93ca:	00 e0       	ldi	r16, 0x00	; 0
    93cc:	01 c0       	rjmp	.+2      	; 0x93d0 <_Z13menuProcIndexh+0x902>
    93ce:	0b 2d       	mov	r16, r11
    93d0:	90 2f       	mov	r25, r16
    93d2:	92 70       	andi	r25, 0x02	; 2
    93d4:	99 2e       	mov	r9, r25

						switch (j) {
    93d6:	e2 e0       	ldi	r30, 0x02	; 2
    93d8:	ae 16       	cp	r10, r30
    93da:	09 f4       	brne	.+2      	; 0x93de <_Z13menuProcIndexh+0x910>
    93dc:	44 c0       	rjmp	.+136    	; 0x9466 <_Z13menuProcIndexh+0x998>
    93de:	f3 e0       	ldi	r31, 0x03	; 3
    93e0:	af 16       	cp	r10, r31
    93e2:	09 f4       	brne	.+2      	; 0x93e6 <_Z13menuProcIndexh+0x918>
    93e4:	56 c0       	rjmp	.+172    	; 0x9492 <_Z13menuProcIndexh+0x9c4>
    93e6:	81 e0       	ldi	r24, 0x01	; 1
									td->mode = x;
								} //!! bitfield
								break;

							case 1:
								x = td->studWeight;
    93e8:	59 80       	ldd	r5, Y+1	; 0x01
						if (sub == i) {
							Columns = &ProgColumns[COLUMNS_3];
						}
						attr = ( (sub == i && subSub == j) ? blink : 0);

						switch (j) {
    93ea:	a8 16       	cp	r10, r24
    93ec:	d1 f0       	breq	.+52     	; 0x9422 <_Z13menuProcIndexh+0x954>
							case 0:
								x = td->mode;
    93ee:	52 94       	swap	r5
    93f0:	56 94       	lsr	r5
    93f2:	56 94       	lsr	r5
    93f4:	33 e0       	ldi	r19, 0x03	; 3
    93f6:	53 22       	and	r5, r19
								lcd_putsAttIdx (4 * FW, y, PSTR(STR_OFF_PLUS_EQ), x, attr);
    93f8:	25 2d       	mov	r18, r5
    93fa:	40 e5       	ldi	r20, 0x50	; 80
    93fc:	56 e1       	ldi	r21, 0x16	; 22
    93fe:	6e 2d       	mov	r22, r14
    9400:	88 e1       	ldi	r24, 0x18	; 24
    9402:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
								if (attr & BLINK) {
    9406:	99 20       	and	r9, r9
    9408:	09 f4       	brne	.+2      	; 0x940c <_Z13menuProcIndexh+0x93e>
    940a:	5b c0       	rjmp	.+182    	; 0x94c2 <_Z13menuProcIndexh+0x9f4>
									CHECK_INCDEC_H_GENVAR_0(x, 2);
    940c:	62 e0       	ldi	r22, 0x02	; 2
    940e:	85 2d       	mov	r24, r5
    9410:	0e 94 94 13 	call	0x2728	; 0x2728 <_Z15checkIncDec_hg0aa>
									td->mode = x;
    9414:	82 95       	swap	r24
    9416:	88 0f       	add	r24, r24
    9418:	88 0f       	add	r24, r24
    941a:	80 7c       	andi	r24, 0xC0	; 192
    941c:	99 81       	ldd	r25, Y+1	; 0x01
    941e:	9f 73       	andi	r25, 0x3F	; 63
    9420:	1f c0       	rjmp	.+62     	; 0x9460 <_Z13menuProcIndexh+0x992>
								} //!! bitfield
								break;

							case 1:
								x = td->studWeight;
    9422:	55 0c       	add	r5, r5
    9424:	55 0c       	add	r5, r5
    9426:	55 94       	asr	r5
    9428:	55 94       	asr	r5
								lcd_outdezAtt (11 * FW, y, x * 13 / 4, attr);
    942a:	95 2d       	mov	r25, r5
    942c:	8d e0       	ldi	r24, 0x0D	; 13
    942e:	98 02       	muls	r25, r24
    9430:	f0 01       	movw	r30, r0
    9432:	11 24       	eor	r1, r1
    9434:	f7 fd       	sbrc	r31, 7
    9436:	33 96       	adiw	r30, 0x03	; 3
    9438:	af 01       	movw	r20, r30
    943a:	55 95       	asr	r21
    943c:	47 95       	ror	r20
    943e:	55 95       	asr	r21
    9440:	47 95       	ror	r20
    9442:	20 2f       	mov	r18, r16
    9444:	6e 2d       	mov	r22, r14
    9446:	82 e4       	ldi	r24, 0x42	; 66
    9448:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
								if (attr & BLINK) {
    944c:	99 20       	and	r9, r9
    944e:	c9 f1       	breq	.+114    	; 0x94c2 <_Z13menuProcIndexh+0x9f4>
									CHECK_INCDEC_H_GENVAR(x, -31, 31);
    9450:	4f e1       	ldi	r20, 0x1F	; 31
    9452:	61 ee       	ldi	r22, 0xE1	; 225
    9454:	85 2d       	mov	r24, r5
    9456:	0e 94 92 13 	call	0x2724	; 0x2724 <_Z14checkIncDec_hgaaa>
									td->studWeight = x;
    945a:	8f 73       	andi	r24, 0x3F	; 63
    945c:	99 81       	ldd	r25, Y+1	; 0x01
    945e:	90 7c       	andi	r25, 0xC0	; 192
    9460:	98 2b       	or	r25, r24
    9462:	99 83       	std	Y+1, r25	; 0x01
    9464:	2e c0       	rjmp	.+92     	; 0x94c2 <_Z13menuProcIndexh+0x9f4>
								} //!! bitfield
								break;

							case 2:
								x = td->srcChn;
    9466:	58 80       	ld	r5, Y
    9468:	95 2d       	mov	r25, r5
    946a:	97 70       	andi	r25, 0x07	; 7
    946c:	59 2e       	mov	r5, r25
								lcd_putsAttIdx (12 * FW, y, Str_Chans_Gv, x + 16, attr);
    946e:	20 e1       	ldi	r18, 0x10	; 16
    9470:	29 0f       	add	r18, r25
    9472:	4d e5       	ldi	r20, 0x5D	; 93
    9474:	5f e1       	ldi	r21, 0x1F	; 31
    9476:	6e 2d       	mov	r22, r14
    9478:	88 e4       	ldi	r24, 0x48	; 72
    947a:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
								if (attr & BLINK) {
    947e:	99 20       	and	r9, r9
    9480:	01 f1       	breq	.+64     	; 0x94c2 <_Z13menuProcIndexh+0x9f4>
									CHECK_INCDEC_H_GENVAR_0(x, 3);
    9482:	63 e0       	ldi	r22, 0x03	; 3
    9484:	85 2d       	mov	r24, r5
    9486:	0e 94 94 13 	call	0x2728	; 0x2728 <_Z15checkIncDec_hg0aa>
									td->srcChn = x;
    948a:	87 70       	andi	r24, 0x07	; 7
    948c:	98 81       	ld	r25, Y
    948e:	98 7f       	andi	r25, 0xF8	; 248
    9490:	16 c0       	rjmp	.+44     	; 0x94be <_Z13menuProcIndexh+0x9f0>
								} //!! bitfield
								break;

							case 3:
								x = td->swtch;
    9492:	58 80       	ld	r5, Y
    9494:	55 94       	asr	r5
    9496:	55 94       	asr	r5
    9498:	55 94       	asr	r5
								putsDrSwitches (15 * FW, y, x, attr);
    949a:	20 2f       	mov	r18, r16
    949c:	45 2d       	mov	r20, r5
    949e:	6e 2d       	mov	r22, r14
    94a0:	8a e5       	ldi	r24, 0x5A	; 90
    94a2:	0e 94 c9 10 	call	0x2192	; 0x2192 <_Z14putsDrSwitcheshhah>
								if (attr & BLINK) {
    94a6:	99 20       	and	r9, r9
    94a8:	61 f0       	breq	.+24     	; 0x94c2 <_Z13menuProcIndexh+0x9f4>
									CHECK_INCDEC_GENERALSWITCH(x, -15, 15);
    94aa:	4f e0       	ldi	r20, 0x0F	; 15
    94ac:	61 ef       	ldi	r22, 0xF1	; 241
    94ae:	85 2d       	mov	r24, r5
    94b0:	0e 94 92 13 	call	0x2724	; 0x2724 <_Z14checkIncDec_hgaaa>
									td->swtch = x;
    94b4:	88 0f       	add	r24, r24
    94b6:	88 0f       	add	r24, r24
    94b8:	88 0f       	add	r24, r24
    94ba:	98 81       	ld	r25, Y
    94bc:	97 70       	andi	r25, 0x07	; 7
    94be:	98 2b       	or	r25, r24
    94c0:	98 83       	st	Y, r25
				for (uint8_t i = 0; i < 4; i++) {
					volatile TrainerMix *td = &g_eeGeneral.trainer.mix[i];
					int8_t x;
					putsChnRaw (0, y, i + 1, 0);

					for (uint8_t j = 0; j < 4; j++) {
    94c2:	a3 94       	inc	r10
    94c4:	e4 e0       	ldi	r30, 0x04	; 4
    94c6:	ae 12       	cpse	r10, r30
    94c8:	78 cf       	rjmp	.-272    	; 0x93ba <_Z13menuProcIndexh+0x8ec>
									td->swtch = x;
								}
								break;
						}
					}
					y += FH;
    94ca:	f8 e0       	ldi	r31, 0x08	; 8
    94cc:	ef 0e       	add	r14, r31
    94ce:	22 96       	adiw	r28, 0x02	; 2
			} else {
				y = 2 * FH;
				uint8_t attr;
				lcd_puts_Pleft (1 * FH, PSTR(STR_MODE_SRC_SW));

				for (uint8_t i = 0; i < 4; i++) {
    94d0:	80 e3       	ldi	r24, 0x30	; 48
    94d2:	e8 16       	cp	r14, r24
    94d4:	11 f0       	breq	.+4      	; 0x94da <_Z13menuProcIndexh+0xa0c>
    94d6:	87 2c       	mov	r8, r7
    94d8:	66 cf       	rjmp	.-308    	; 0x93a6 <_Z13menuProcIndexh+0x8d8>
					}
					y += FH;
				}

				attr = PREC1;
				if (sub == 4) {
    94da:	14 30       	cpi	r17, 0x04	; 4
    94dc:	59 f4       	brne	.+22     	; 0x94f4 <_Z13menuProcIndexh+0xa26>
					attr = PREC1 | blink;
    94de:	cb 2d       	mov	r28, r11
    94e0:	c0 62       	ori	r28, 0x20	; 32
					CHECK_INCDEC_H_GENVAR(g_eeGeneral.PPM_Multiplier, -10, 40);
    94e2:	48 e2       	ldi	r20, 0x28	; 40
    94e4:	66 ef       	ldi	r22, 0xF6	; 246
    94e6:	80 91 2c 06 	lds	r24, 0x062C
    94ea:	0e 94 92 13 	call	0x2724	; 0x2724 <_Z14checkIncDec_hgaaa>
    94ee:	80 93 2c 06 	sts	0x062C, r24
    94f2:	01 c0       	rjmp	.+2      	; 0x94f6 <_Z13menuProcIndexh+0xa28>
						}
					}
					y += FH;
				}

				attr = PREC1;
    94f4:	c0 e2       	ldi	r28, 0x20	; 32
				if (sub == 4) {
					attr = PREC1 | blink;
					CHECK_INCDEC_H_GENVAR(g_eeGeneral.PPM_Multiplier, -10, 40);
				}
				lcd_xlabel_decimal (6 * FH, PSTR(STR_MULTIPLIER), g_eeGeneral.PPM_Multiplier + 10,
    94f6:	40 91 2c 06 	lds	r20, 0x062C
    94fa:	55 27       	eor	r21, r21
    94fc:	47 fd       	sbrc	r20, 7
    94fe:	50 95       	com	r21
    9500:	46 5f       	subi	r20, 0xF6	; 246
    9502:	5f 4f       	sbci	r21, 0xFF	; 255
						attr, 13 * FW);
    9504:	0e e4       	ldi	r16, 0x4E	; 78
    9506:	2c 2f       	mov	r18, r28
    9508:	65 e4       	ldi	r22, 0x45	; 69
    950a:	76 e1       	ldi	r23, 0x16	; 22
    950c:	80 e3       	ldi	r24, 0x30	; 48
    950e:	0e 94 1b 3a 	call	0x7436	; 0x7436 <_Z18lcd_xlabel_decimalhPKcjhh>
    9512:	98 e5       	ldi	r25, 0x58	; 88
    9514:	c9 2e       	mov	r12, r25
    9516:	91 e0       	ldi	r25, 0x01	; 1
    9518:	d9 2e       	mov	r13, r25
    951a:	c4 e1       	ldi	r28, 0x14	; 20
    951c:	d6 e0       	ldi	r29, 0x06	; 6
    951e:	00 e3       	ldi	r16, 0x30	; 48
//				lcd_puts_Pleft( y, PSTR(STR_MULTIPLIER));
//				lcd_outdezAtt(13*FW, 6*FH, g_eeGeneral.PPM_Multiplier+10, attr);

				for (uint8_t i = 0; i < 4; i++) {
					uint8_t x = (i * 8 + 16) * FW / 2;
					lcd_outdezAtt (x, 7 * FH, (g_ppmIns[i] - g_eeGeneral.trainer.calib[i]) * 2,
    9520:	f6 01       	movw	r30, r12
    9522:	41 91       	ld	r20, Z+
    9524:	51 91       	ld	r21, Z+
    9526:	6f 01       	movw	r12, r30
    9528:	29 91       	ld	r18, Y+
    952a:	39 91       	ld	r19, Y+
    952c:	42 1b       	sub	r20, r18
    952e:	53 0b       	sbc	r21, r19
					PREC1);
    9530:	44 0f       	add	r20, r20
    9532:	55 1f       	adc	r21, r21
    9534:	20 e2       	ldi	r18, 0x20	; 32
    9536:	68 e3       	ldi	r22, 0x38	; 56
    9538:	80 2f       	mov	r24, r16
    953a:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
    953e:	08 5e       	subi	r16, 0xE8	; 232
				lcd_xlabel_decimal (6 * FH, PSTR(STR_MULTIPLIER), g_eeGeneral.PPM_Multiplier + 10,
						attr, 13 * FW);
//				lcd_puts_Pleft( y, PSTR(STR_MULTIPLIER));
//				lcd_outdezAtt(13*FW, 6*FH, g_eeGeneral.PPM_Multiplier+10, attr);

				for (uint8_t i = 0; i < 4; i++) {
    9540:	00 39       	cpi	r16, 0x90	; 144
    9542:	71 f7       	brne	.-36     	; 0x9520 <_Z13menuProcIndexh+0xa52>
					uint8_t x = (i * 8 + 16) * FW / 2;
					lcd_outdezAtt (x, 7 * FH, (g_ppmIns[i] - g_eeGeneral.trainer.calib[i]) * 2,
					PREC1);
				}
				attr = 0;
				if (sub == 5) {
    9544:	15 30       	cpi	r17, 0x05	; 5
    9546:	99 f4       	brne	.+38     	; 0x956e <_Z13menuProcIndexh+0xaa0>
					if (event == EVT_KEY_FIRST(KEY_MENU)) {
    9548:	f0 e6       	ldi	r31, 0x60	; 96
    954a:	ff 12       	cpse	r15, r31
    954c:	12 c0       	rjmp	.+36     	; 0x9572 <_Z13menuProcIndexh+0xaa4>
						memcpy (g_eeGeneral.trainer.calib, g_ppmIns,
								sizeof (g_eeGeneral.trainer.calib));
    954e:	88 e0       	ldi	r24, 0x08	; 8
    9550:	e8 e5       	ldi	r30, 0x58	; 88
    9552:	f1 e0       	ldi	r31, 0x01	; 1
    9554:	a4 e1       	ldi	r26, 0x14	; 20
    9556:	b6 e0       	ldi	r27, 0x06	; 6
    9558:	01 90       	ld	r0, Z+
    955a:	0d 92       	st	X+, r0
    955c:	8a 95       	dec	r24
    955e:	e1 f7       	brne	.-8      	; 0x9558 <_Z13menuProcIndexh+0xa8a>
						STORE_GENERALVARS;     //eeWriteGeneral();
    9560:	81 e0       	ldi	r24, 0x01	; 1
    9562:	0e 94 4e 20 	call	0x409c	; 0x409c <_Z7eeDirtyh>
						audioDefevent (AU_MENUS);
    9566:	87 e1       	ldi	r24, 0x17	; 23
    9568:	0e 94 74 34 	call	0x68e8	; 0x68e8 <_Z13audioDefeventh>
    956c:	02 c0       	rjmp	.+4      	; 0x9572 <_Z13menuProcIndexh+0xaa4>
				for (uint8_t i = 0; i < 4; i++) {
					uint8_t x = (i * 8 + 16) * FW / 2;
					lcd_outdezAtt (x, 7 * FH, (g_ppmIns[i] - g_eeGeneral.trainer.calib[i]) * 2,
					PREC1);
				}
				attr = 0;
    956e:	20 e0       	ldi	r18, 0x00	; 0
    9570:	01 c0       	rjmp	.+2      	; 0x9574 <_Z13menuProcIndexh+0xaa6>
						memcpy (g_eeGeneral.trainer.calib, g_ppmIns,
								sizeof (g_eeGeneral.trainer.calib));
						STORE_GENERALVARS;     //eeWriteGeneral();
						audioDefevent (AU_MENUS);
					}
					attr = INVERS;
    9572:	21 e0       	ldi	r18, 0x01	; 1
				}
				lcd_putsAtt (0 * FW, 7 * FH, PSTR(STR_CAL), attr);
    9574:	41 e4       	ldi	r20, 0x41	; 65
    9576:	56 e1       	ldi	r21, 0x16	; 22
    9578:	68 e3       	ldi	r22, 0x38	; 56
    957a:	80 e0       	ldi	r24, 0x00	; 0
    957c:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>
    9580:	de c0       	rjmp	.+444    	; 0x973e <_Z13menuProcIndexh+0xc70>
			}
		}
			break;

		case M_HARDWARE:
			TITLEP (Str_Hardware);
    9582:	80 ee       	ldi	r24, 0xE0	; 224
    9584:	9b e1       	ldi	r25, 0x1B	; 27
    9586:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>
			IlinesCount = 3;
#else
#ifdef FRSKY
			IlinesCount = 2;
#else
			IlinesCount = 1;
    958a:	81 e0       	ldi	r24, 0x01	; 1
    958c:	80 93 5b 0e 	sts	0x0E5B, r24
#endif
#endif
			uint8_t b;
			b = g_eeGeneral.disableBG;
			g_eeGeneral.disableBG = offonMenuItem_g (b, y, PSTR(STR_BANDGAP), sub == subN);
    9590:	21 e0       	ldi	r18, 0x01	; 1
    9592:	11 11       	cpse	r17, r1
    9594:	20 e0       	ldi	r18, 0x00	; 0
#else
			IlinesCount = 1;
#endif
#endif
			uint8_t b;
			b = g_eeGeneral.disableBG;
    9596:	80 91 28 06 	lds	r24, 0x0628
			g_eeGeneral.disableBG = offonMenuItem_g (b, y, PSTR(STR_BANDGAP), sub == subN);
    959a:	49 e3       	ldi	r20, 0x39	; 57
    959c:	56 e1       	ldi	r21, 0x16	; 22
    959e:	68 e0       	ldi	r22, 0x08	; 8
    95a0:	86 fb       	bst	r24, 6
    95a2:	88 27       	eor	r24, r24
    95a4:	80 f9       	bld	r24, 0
    95a6:	0e 94 03 3a 	call	0x7406	; 0x7406 <_ZL15offonMenuItem_ghhPKch>
    95aa:	90 91 28 06 	lds	r25, 0x0628
    95ae:	80 fb       	bst	r24, 0
    95b0:	96 f9       	bld	r25, 6
    95b2:	11 cc       	rjmp	.-2014   	; 0x8dd6 <_Z13menuProcIndexh+0x308>
			subN += 1;
#endif
			break;

		case M_CALIB: {
			TITLEP (Str_Calibration);
    95b4:	84 ec       	ldi	r24, 0xC4	; 196
    95b6:	9b e1       	ldi	r25, 0x1B	; 27
    95b8:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>
//    SIMPLE_MENU(STR_CALIBRATIO, menuTabDiag, e_Calib, 2);
			IlinesCount = 1;
    95bc:	81 e0       	ldi	r24, 0x01	; 1
    95be:	80 93 5b 0e 	sts	0x0E5B, r24

			mstate.m_posVert = 0; // make sure we don't scroll or move cursor here
    95c2:	10 92 3b 0e 	sts	0x0E3B, r1
    95c6:	c0 e0       	ldi	r28, 0x00	; 0
    95c8:	de e0       	ldi	r29, 0x0E	; 14

			for (uint8_t i = 0; i < 7; i++) { //get low and high vals for sticks and trims
    95ca:	00 e0       	ldi	r16, 0x00	; 0
				int16_t vt = anaIn (i);
    95cc:	80 2f       	mov	r24, r16
    95ce:	0e 94 b8 14 	call	0x2970	; 0x2970 <_Z5anaInh>
    95d2:	4e 85       	ldd	r20, Y+14	; 0x0e
    95d4:	5f 85       	ldd	r21, Y+15	; 0x0f
    95d6:	84 17       	cp	r24, r20
    95d8:	95 07       	cpc	r25, r21
    95da:	0c f4       	brge	.+2      	; 0x95de <_Z13menuProcIndexh+0xb10>
    95dc:	ac 01       	movw	r20, r24
				Xmem.Cal_data.loVals[i] = min (vt, Xmem.Cal_data.loVals[i]);
    95de:	5f 87       	std	Y+15, r21	; 0x0f
    95e0:	4e 87       	std	Y+14, r20	; 0x0e
    95e2:	4c 8d       	ldd	r20, Y+28	; 0x1c
    95e4:	5d 8d       	ldd	r21, Y+29	; 0x1d
    95e6:	48 17       	cp	r20, r24
    95e8:	59 07       	cpc	r21, r25
    95ea:	0c f4       	brge	.+2      	; 0x95ee <_Z13menuProcIndexh+0xb20>
    95ec:	ac 01       	movw	r20, r24
				Xmem.Cal_data.hiVals[i] = max (vt, Xmem.Cal_data.hiVals[i]);
    95ee:	5d 8f       	std	Y+29, r21	; 0x1d
    95f0:	4c 8f       	std	Y+28, r20	; 0x1c
				if (i >= 4) Xmem.Cal_data.midVals[i] = (Xmem.Cal_data.loVals[i]
    95f2:	04 30       	cpi	r16, 0x04	; 4
    95f4:	60 f0       	brcs	.+24     	; 0x960e <_Z13menuProcIndexh+0xb40>
						+ Xmem.Cal_data.hiVals[i]) / 2;
    95f6:	2e 85       	ldd	r18, Y+14	; 0x0e
    95f8:	3f 85       	ldd	r19, Y+15	; 0x0f
    95fa:	24 0f       	add	r18, r20
    95fc:	35 1f       	adc	r19, r21
    95fe:	37 ff       	sbrs	r19, 7
    9600:	02 c0       	rjmp	.+4      	; 0x9606 <_Z13menuProcIndexh+0xb38>
    9602:	2f 5f       	subi	r18, 0xFF	; 255
    9604:	3f 4f       	sbci	r19, 0xFF	; 255
    9606:	35 95       	asr	r19
    9608:	27 95       	ror	r18
    960a:	39 83       	std	Y+1, r19	; 0x01
    960c:	28 83       	st	Y, r18
//    SIMPLE_MENU(STR_CALIBRATIO, menuTabDiag, e_Calib, 2);
			IlinesCount = 1;

			mstate.m_posVert = 0; // make sure we don't scroll or move cursor here

			for (uint8_t i = 0; i < 7; i++) { //get low and high vals for sticks and trims
    960e:	0f 5f       	subi	r16, 0xFF	; 255
    9610:	22 96       	adiw	r28, 0x02	; 2
    9612:	07 30       	cpi	r16, 0x07	; 7
    9614:	d9 f6       	brne	.-74     	; 0x95cc <_Z13menuProcIndexh+0xafe>
				if (i >= 4) Xmem.Cal_data.midVals[i] = (Xmem.Cal_data.loVals[i]
						+ Xmem.Cal_data.hiVals[i]) / 2;
			}

#ifndef NOPOTSCROLL
			scroll_disabled = Xmem.Cal_data.idxState; // make sure we don't scroll while calibrating
    9616:	80 91 2a 0e 	lds	r24, 0x0E2A
    961a:	80 93 a1 0d 	sts	0x0DA1, r24
#endif

			switch (event) {
    961e:	90 e2       	ldi	r25, 0x20	; 32
    9620:	f9 16       	cp	r15, r25
    9622:	21 f0       	breq	.+8      	; 0x962c <_Z13menuProcIndexh+0xb5e>
    9624:	ef eb       	ldi	r30, 0xBF	; 191
    9626:	fe 12       	cpse	r15, r30
    9628:	0e c0       	rjmp	.+28     	; 0x9646 <_Z13menuProcIndexh+0xb78>
    962a:	0b c0       	rjmp	.+22     	; 0x9642 <_Z13menuProcIndexh+0xb74>
				case EVT_ENTRY:
					Xmem.Cal_data.idxState = 0;
					break;

				case EVT_KEY_BREAK(KEY_MENU):
					Xmem.Cal_data.idxState++;
    962c:	8f 5f       	subi	r24, 0xFF	; 255
    962e:	80 93 2a 0e 	sts	0x0E2A, r24
					if (Xmem.Cal_data.idxState == 3) {
    9632:	83 30       	cpi	r24, 0x03	; 3
    9634:	41 f4       	brne	.+16     	; 0x9646 <_Z13menuProcIndexh+0xb78>
						audioDefevent (AU_MENUS);
    9636:	87 e1       	ldi	r24, 0x17	; 23
    9638:	0e 94 74 34 	call	0x68e8	; 0x68e8 <_Z13audioDefeventh>
						STORE_GENERALVARS;     //eeWriteGeneral();
    963c:	81 e0       	ldi	r24, 0x01	; 1
    963e:	0e 94 4e 20 	call	0x409c	; 0x409c <_Z7eeDirtyh>
						Xmem.Cal_data.idxState = 0;
    9642:	10 92 2a 0e 	sts	0x0E2A, r1
					}
					break;
			}

			switch (Xmem.Cal_data.idxState) {
    9646:	80 91 2a 0e 	lds	r24, 0x0E2A
    964a:	81 30       	cpi	r24, 0x01	; 1
    964c:	89 f0       	breq	.+34     	; 0x9670 <_Z13menuProcIndexh+0xba2>
    964e:	50 f0       	brcs	.+20     	; 0x9664 <_Z13menuProcIndexh+0xb96>
    9650:	82 30       	cpi	r24, 0x02	; 2
    9652:	09 f0       	breq	.+2      	; 0x9656 <_Z13menuProcIndexh+0xb88>
    9654:	72 c0       	rjmp	.+228    	; 0x973a <_Z13menuProcIndexh+0xc6c>
					break;

				case 2:
					//MOVE STICKS/POTS
					//[MENU]
					StickScrollAllowed = 0;
    9656:	10 92 85 01 	sts	0x0185, r1
    965a:	ee e0       	ldi	r30, 0x0E	; 14
    965c:	fe e0       	ldi	r31, 0x0E	; 14
    965e:	c3 ee       	ldi	r28, 0xE3	; 227
    9660:	d5 e0       	ldi	r29, 0x05	; 5
    9662:	1f c0       	rjmp	.+62     	; 0x96a2 <_Z13menuProcIndexh+0xbd4>
			switch (Xmem.Cal_data.idxState) {
				case 0:
					//START CALIBRATION
					//[MENU]
//        lcd_puts_Pleft( 2*FH, PSTR("\002START CALIBRATION") ) ;//, 17, sub>0 ? INVERS : 0);
					lcd_puts_Pleft (3 * FH, PSTR(STR_MENU_TO_START));   //, 15, sub>0 ? INVERS : 0);
    9664:	68 e2       	ldi	r22, 0x28	; 40
    9666:	76 e1       	ldi	r23, 0x16	; 22
    9668:	88 e1       	ldi	r24, 0x18	; 24
    966a:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
					break;
    966e:	65 c0       	rjmp	.+202    	; 0x973a <_Z13menuProcIndexh+0xc6c>
    9670:	c0 e0       	ldi	r28, 0x00	; 0
    9672:	de e0       	ldi	r29, 0x0E	; 14
						Xmem.Cal_data.idxState = 0;
					}
					break;
			}

			switch (Xmem.Cal_data.idxState) {
    9674:	d1 2c       	mov	r13, r1
				case 1: //get mid
					//SET MIDPOINT
					//[MENU]

					for (uint8_t i = 0; i < 7; i++) {
						Xmem.Cal_data.loVals[i] = 15000;
    9676:	b8 e9       	ldi	r27, 0x98	; 152
    9678:	eb 2e       	mov	r14, r27
    967a:	ba e3       	ldi	r27, 0x3A	; 58
    967c:	fb 2e       	mov	r15, r27
						Xmem.Cal_data.hiVals[i] = -15000;
    967e:	08 e6       	ldi	r16, 0x68	; 104
    9680:	15 ec       	ldi	r17, 0xC5	; 197
				case 1: //get mid
					//SET MIDPOINT
					//[MENU]

					for (uint8_t i = 0; i < 7; i++) {
						Xmem.Cal_data.loVals[i] = 15000;
    9682:	ff 86       	std	Y+15, r15	; 0x0f
    9684:	ee 86       	std	Y+14, r14	; 0x0e
						Xmem.Cal_data.hiVals[i] = -15000;
    9686:	1d 8f       	std	Y+29, r17	; 0x1d
    9688:	0c 8f       	std	Y+28, r16	; 0x1c
						Xmem.Cal_data.midVals[i] = anaIn (i);
    968a:	8d 2d       	mov	r24, r13
    968c:	0e 94 b8 14 	call	0x2970	; 0x2970 <_Z5anaInh>
    9690:	89 93       	st	Y+, r24
    9692:	99 93       	st	Y+, r25

				case 1: //get mid
					//SET MIDPOINT
					//[MENU]

					for (uint8_t i = 0; i < 7; i++) {
    9694:	d3 94       	inc	r13
    9696:	f7 e0       	ldi	r31, 0x07	; 7
    9698:	df 12       	cpse	r13, r31
    969a:	f3 cf       	rjmp	.-26     	; 0x9682 <_Z13menuProcIndexh+0xbb4>
						Xmem.Cal_data.loVals[i] = 15000;
						Xmem.Cal_data.hiVals[i] = -15000;
						Xmem.Cal_data.midVals[i] = anaIn (i);
					}
					lcd_puts_Pleft (2 * FH, PSTR(STR_SET_MIDPOINT));    //, 12, sub>0 ? INVERS : 0);
    969c:	6a e1       	ldi	r22, 0x1A	; 26
    969e:	76 e1       	ldi	r23, 0x16	; 22
    96a0:	43 c0       	rjmp	.+134    	; 0x9728 <_Z13menuProcIndexh+0xc5a>
					//MOVE STICKS/POTS
					//[MENU]
					StickScrollAllowed = 0;

					for (uint8_t i = 0; i < 7; i++) {
						if (abs(Xmem.Cal_data.loVals[i]-Xmem.Cal_data.hiVals[i]) > 50) {
    96a2:	61 91       	ld	r22, Z+
    96a4:	71 91       	ld	r23, Z+
    96a6:	84 85       	ldd	r24, Z+12	; 0x0c
    96a8:	95 85       	ldd	r25, Z+13	; 0x0d
    96aa:	9b 01       	movw	r18, r22
    96ac:	28 1b       	sub	r18, r24
    96ae:	39 0b       	sbc	r19, r25
    96b0:	37 ff       	sbrs	r19, 7
    96b2:	03 c0       	rjmp	.+6      	; 0x96ba <_Z13menuProcIndexh+0xbec>
    96b4:	31 95       	neg	r19
    96b6:	21 95       	neg	r18
    96b8:	31 09       	sbc	r19, r1
    96ba:	23 33       	cpi	r18, 0x33	; 51
    96bc:	31 05       	cpc	r19, r1
    96be:	3c f1       	brlt	.+78     	; 0x970e <_Z13menuProcIndexh+0xc40>
    96c0:	df 01       	movw	r26, r30
    96c2:	50 97       	sbiw	r26, 0x10	; 16
							g_eeGeneral.calibMid[i] = Xmem.Cal_data.midVals[i];
    96c4:	4d 91       	ld	r20, X+
    96c6:	5c 91       	ld	r21, X
    96c8:	59 83       	std	Y+1, r21	; 0x01
    96ca:	48 83       	st	Y, r20
							int16_t v = Xmem.Cal_data.midVals[i] - Xmem.Cal_data.loVals[i];
    96cc:	9a 01       	movw	r18, r20
    96ce:	26 1b       	sub	r18, r22
    96d0:	37 0b       	sbc	r19, r23
							g_eeGeneral.calibSpanNeg[i] = v - v / 64;
    96d2:	b9 01       	movw	r22, r18
    96d4:	37 ff       	sbrs	r19, 7
    96d6:	02 c0       	rjmp	.+4      	; 0x96dc <_Z13menuProcIndexh+0xc0e>
    96d8:	61 5c       	subi	r22, 0xC1	; 193
    96da:	7f 4f       	sbci	r23, 0xFF	; 255
    96dc:	a6 e0       	ldi	r26, 0x06	; 6
    96de:	75 95       	asr	r23
    96e0:	67 95       	ror	r22
    96e2:	aa 95       	dec	r26
    96e4:	e1 f7       	brne	.-8      	; 0x96de <_Z13menuProcIndexh+0xc10>
    96e6:	26 1b       	sub	r18, r22
    96e8:	37 0b       	sbc	r19, r23
    96ea:	3f 87       	std	Y+15, r19	; 0x0f
    96ec:	2e 87       	std	Y+14, r18	; 0x0e
							v = Xmem.Cal_data.hiVals[i] - Xmem.Cal_data.midVals[i];
    96ee:	84 1b       	sub	r24, r20
    96f0:	95 0b       	sbc	r25, r21
							g_eeGeneral.calibSpanPos[i] = v - v / 64;
    96f2:	9c 01       	movw	r18, r24
    96f4:	97 ff       	sbrs	r25, 7
    96f6:	02 c0       	rjmp	.+4      	; 0x96fc <_Z13menuProcIndexh+0xc2e>
    96f8:	21 5c       	subi	r18, 0xC1	; 193
    96fa:	3f 4f       	sbci	r19, 0xFF	; 255
    96fc:	66 e0       	ldi	r22, 0x06	; 6
    96fe:	35 95       	asr	r19
    9700:	27 95       	ror	r18
    9702:	6a 95       	dec	r22
    9704:	e1 f7       	brne	.-8      	; 0x96fe <_Z13menuProcIndexh+0xc30>
    9706:	82 1b       	sub	r24, r18
    9708:	93 0b       	sbc	r25, r19
    970a:	9d 8f       	std	Y+29, r25	; 0x1d
    970c:	8c 8f       	std	Y+28, r24	; 0x1c
    970e:	22 96       	adiw	r28, 0x02	; 2
				case 2:
					//MOVE STICKS/POTS
					//[MENU]
					StickScrollAllowed = 0;

					for (uint8_t i = 0; i < 7; i++) {
    9710:	8e e0       	ldi	r24, 0x0E	; 14
    9712:	ec 31       	cpi	r30, 0x1C	; 28
    9714:	f8 07       	cpc	r31, r24
    9716:	29 f6       	brne	.-118    	; 0x96a2 <_Z13menuProcIndexh+0xbd4>
							g_eeGeneral.calibSpanNeg[i] = v - v / 64;
							v = Xmem.Cal_data.hiVals[i] - Xmem.Cal_data.midVals[i];
							g_eeGeneral.calibSpanPos[i] = v - v / 64;
						}
					}
					g_eeGeneral.chkSum = evalChkSum ();
    9718:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <_Z10evalChkSumv>
    971c:	90 93 0e 06 	sts	0x060E, r25
    9720:	80 93 0d 06 	sts	0x060D, r24
					lcd_puts_Pleft (2 * FH, PSTR(STR_MOVE_STICKS)); //, 16, sub>0 ? INVERS : 0);
    9724:	68 e0       	ldi	r22, 0x08	; 8
    9726:	76 e1       	ldi	r23, 0x16	; 22
    9728:	80 e1       	ldi	r24, 0x10	; 16
    972a:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
					lcd_puts_P (3 * FW, 3 * FH, menuWhenDone); //, 16, sub>0 ? BLINK : 0);
    972e:	49 e0       	ldi	r20, 0x09	; 9
    9730:	5c e1       	ldi	r21, 0x1C	; 28
    9732:	68 e1       	ldi	r22, 0x18	; 24
    9734:	82 e1       	ldi	r24, 0x12	; 18
    9736:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <_Z10lcd_puts_PhhPKc>
					break;
			}

			doMainScreenGrphics ();
    973a:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <_Z19doMainScreenGrphicsv>
			break;

	}
	asm("");
	// Forces execution to here, prevents compiler filling in 'pops'
}
    973e:	df 91       	pop	r29
    9740:	cf 91       	pop	r28
    9742:	1f 91       	pop	r17
    9744:	0f 91       	pop	r16
    9746:	ff 90       	pop	r15
    9748:	ef 90       	pop	r14
    974a:	df 90       	pop	r13
    974c:	cf 90       	pop	r12
    974e:	bf 90       	pop	r11
    9750:	af 90       	pop	r10
    9752:	9f 90       	pop	r9
    9754:	8f 90       	pop	r8
    9756:	7f 90       	pop	r7
    9758:	6f 90       	pop	r6
    975a:	5f 90       	pop	r5
    975c:	08 95       	ret

0000975e <_Z11resetTimernh>:
	}
	asm("");

}

void resetTimern (uint8_t timer) {
    975e:	cf 93       	push	r28
    9760:	df 93       	push	r29
	uint16_t time;
	uint8_t dir;
	TimerMode *ptConfig = &TimerConfig[timer];
    9762:	e8 2f       	mov	r30, r24
    9764:	f0 e0       	ldi	r31, 0x00	; 0
    9766:	95 e0       	ldi	r25, 0x05	; 5
    9768:	89 9f       	mul	r24, r25
    976a:	e0 01       	movw	r28, r0
    976c:	11 24       	eor	r1, r1
    976e:	c9 52       	subi	r28, 0x29	; 41
    9770:	de 4f       	sbci	r29, 0xFE	; 254
	FORCE_INDIRECT(ptConfig);

	time = ptConfig->tmrVal;
	dir = ptConfig->tmrDir;
    9772:	2c 81       	ldd	r18, Y+4	; 0x04

	struct t_timer *tptr = &s_timer[timer];
    9774:	a4 e0       	ldi	r26, 0x04	; 4
    9776:	ee 0f       	add	r30, r30
    9778:	ff 1f       	adc	r31, r31
    977a:	aa 95       	dec	r26
    977c:	e1 f7       	brne	.-8      	; 0x9776 <_Z11resetTimernh+0x18>
    977e:	e4 52       	subi	r30, 0x24	; 36
    9780:	f2 4f       	sbci	r31, 0xF2	; 242
	FORCE_INDIRECT(tptr);

	tptr->last_tmr = time;
    9782:	98 81       	ld	r25, Y
    9784:	89 81       	ldd	r24, Y+1	; 0x01
    9786:	96 87       	std	Z+14, r25	; 0x0e
    9788:	87 87       	std	Z+15, r24	; 0x0f
	tptr->s_timerVal = (dir) ? 0 : time;
    978a:	22 23       	and	r18, r18
    978c:	11 f0       	breq	.+4      	; 0x9792 <_Z11resetTimernh+0x34>
    978e:	90 e0       	ldi	r25, 0x00	; 0
    9790:	80 e0       	ldi	r24, 0x00	; 0
    9792:	94 87       	std	Z+12, r25	; 0x0c
    9794:	85 87       	std	Z+13, r24	; 0x0d
	tptr->s_timerState = TMR_OFF; //is changed to RUNNING dep from mode
    9796:	16 82       	std	Z+6, r1	; 0x06
	tptr->s_timeCumThr = 0;
    9798:	11 86       	std	Z+9, r1	; 0x09
    979a:	10 86       	std	Z+8, r1	; 0x08
	tptr->s_timeCumSw = 0;
    979c:	15 82       	std	Z+5, r1	; 0x05
    979e:	14 82       	std	Z+4, r1	; 0x04
	tptr->s_timeCum16ThrP = 0;
    97a0:	13 86       	std	Z+11, r1	; 0x0b
    97a2:	12 86       	std	Z+10, r1	; 0x0a
	tptr->s_sum = 0;
    97a4:	11 82       	std	Z+1, r1	; 0x01
    97a6:	10 82       	st	Z, r1

}
    97a8:	df 91       	pop	r29
    97aa:	cf 91       	pop	r28
    97ac:	08 95       	ret

000097ae <_Z11resetTimer1v>:

NOINLINE void resetTimer1 (void) {
	TimeGlobals.s_timeCumAbs = 0;
    97ae:	10 92 74 0d 	sts	0x0D74, r1
    97b2:	10 92 73 0d 	sts	0x0D73, r1
	resetTimern (0);
    97b6:	80 e0       	ldi	r24, 0x00	; 0
    97b8:	d2 cf       	rjmp	.-92     	; 0x975e <_Z11resetTimernh>

000097ba <_Z11resetTimer2v>:
}

void resetTimer2 () {
	resetTimern (1);
    97ba:	81 e0       	ldi	r24, 0x01	; 1
    97bc:	d0 cf       	rjmp	.-96     	; 0x975e <_Z11resetTimernh>

000097be <_Z5timerv>:
		}
	}
}
//#endif	// TWO_TIMERS

void timer () {
    97be:	3f 92       	push	r3
    97c0:	4f 92       	push	r4
    97c2:	5f 92       	push	r5
    97c4:	6f 92       	push	r6
    97c6:	7f 92       	push	r7
    97c8:	8f 92       	push	r8
    97ca:	9f 92       	push	r9
    97cc:	af 92       	push	r10
    97ce:	bf 92       	push	r11
    97d0:	cf 92       	push	r12
    97d2:	df 92       	push	r13
    97d4:	ef 92       	push	r14
    97d6:	ff 92       	push	r15
    97d8:	0f 93       	push	r16
    97da:	1f 93       	push	r17
    97dc:	cf 93       	push	r28
    97de:	df 93       	push	r29
	uint8_t timer;
	uint8_t val;
	int16_t v;

	struct t_timeGlobals *tgptr = &TimeGlobals;
	FORCE_INDIRECT(tgptr);
    97e0:	01 e7       	ldi	r16, 0x71	; 113
    97e2:	1d e0       	ldi	r17, 0x0D	; 13
    97e4:	f8 01       	movw	r30, r16
    97e6:	8f 01       	movw	r16, r30
	tgptr->s_cnt++;
    97e8:	86 81       	ldd	r24, Z+6	; 0x06
    97ea:	8f 5f       	subi	r24, 0xFF	; 255
    97ec:	86 83       	std	Z+6, r24	; 0x06
    97ee:	4c ed       	ldi	r20, 0xDC	; 220
    97f0:	a4 2e       	mov	r10, r20
    97f2:	4d e0       	ldi	r20, 0x0D	; 13
    97f4:	b4 2e       	mov	r11, r20
    97f6:	5b ed       	ldi	r21, 0xDB	; 219
    97f8:	e5 2e       	mov	r14, r21
    97fa:	51 e0       	ldi	r21, 0x01	; 1
    97fc:	f5 2e       	mov	r15, r21

	for (timer = 0; timer < 2; timer += 1) {
    97fe:	81 2c       	mov	r8, r1
		}
		if (resetting) {
			if (timer == 0) {
				resetTimer1 ();
			} else {
				resetTimer2 ();
    9800:	55 24       	eor	r5, r5
    9802:	53 94       	inc	r5
		switch (ptimer->s_timerState) {
			case TMR_OFF:
				if (tma != TMRMODE_NONE) ptimer->s_timerState = TMR_RUNNING;
				break;
			case TMR_RUNNING:
				if (ptimer->s_timerVal < 0 && tv) ptimer->s_timerState = TMR_BEEPING;
    9804:	62 e0       	ldi	r22, 0x02	; 2
    9806:	36 2e       	mov	r3, r22
				break;
			case TMR_BEEPING:
				if (ptimer->s_timerVal <= -MAX_ALERT_TIME) ptimer->s_timerState = TMR_STOPPED;
    9808:	73 e0       	ldi	r23, 0x03	; 3
    980a:	47 2e       	mov	r4, r23
	FORCE_INDIRECT(tgptr);
	tgptr->s_cnt++;

	for (timer = 0; timer < 2; timer += 1) {
		struct t_timer *ptimer = &s_timer[timer];
		FORCE_INDIRECT(ptimer);
    980c:	e5 01       	movw	r28, r10

		uint8_t resetting = 0;
		if (timer == 0) {
    980e:	81 10       	cpse	r8, r1
    9810:	03 c0       	rjmp	.+6      	; 0x9818 <_Z5timerv+0x5a>
			tmb = g_model.timer1RstSw;
    9812:	80 91 90 05 	lds	r24, 0x0590
    9816:	02 c0       	rjmp	.+4      	; 0x981c <_Z5timerv+0x5e>
		} else {
			tmb = g_model.timer2RstSw;
    9818:	80 91 91 05 	lds	r24, 0x0591
		}
		if (tmb) {
    981c:	88 23       	and	r24, r24
    981e:	09 f4       	brne	.+2      	; 0x9822 <_Z5timerv+0x64>
    9820:	9f c1       	rjmp	.+830    	; 0x9b60 <_Z5timerv+0x3a2>
			if (tmb >= (MAX_DRSWITCH - 1))	 // toggeled switch
					{
				uint8_t swPos = getSwitch (tmb - (MAX_DRSWITCH - 1), 0, 0);
    9822:	40 e0       	ldi	r20, 0x00	; 0
    9824:	60 e0       	ldi	r22, 0x00	; 0
			tmb = g_model.timer1RstSw;
		} else {
			tmb = g_model.timer2RstSw;
		}
		if (tmb) {
			if (tmb >= (MAX_DRSWITCH - 1))	 // toggeled switch
    9826:	85 31       	cpi	r24, 0x15	; 21
    9828:	4c f0       	brlt	.+18     	; 0x983c <_Z5timerv+0x7e>
					{
				uint8_t swPos = getSwitch (tmb - (MAX_DRSWITCH - 1), 0, 0);
    982a:	85 51       	subi	r24, 0x15	; 21
    982c:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_Z9getSwitchabh>
				if (swPos != ptimer->lastResetSwPos) {
    9830:	9f 81       	ldd	r25, Y+7	; 0x07
    9832:	89 17       	cp	r24, r25
    9834:	09 f4       	brne	.+2      	; 0x9838 <_Z5timerv+0x7a>
    9836:	94 c1       	rjmp	.+808    	; 0x9b60 <_Z5timerv+0x3a2>
					ptimer->lastResetSwPos = swPos;
    9838:	8f 83       	std	Y+7, r24	; 0x07
    983a:	02 c0       	rjmp	.+4      	; 0x9840 <_Z5timerv+0x82>
					{
						resetting = 1;
					}
				}
			} else {
				if (getSwitch (tmb, 0, 0)) {
    983c:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_Z9getSwitchabh>
    9840:	88 23       	and	r24, r24
    9842:	09 f4       	brne	.+2      	; 0x9846 <_Z5timerv+0x88>
    9844:	8d c1       	rjmp	.+794    	; 0x9b60 <_Z5timerv+0x3a2>
					resetting = 1;
				}
			}
		}
		if (resetting) {
			if (timer == 0) {
    9846:	81 10       	cpse	r8, r1
    9848:	02 c0       	rjmp	.+4      	; 0x984e <_Z5timerv+0x90>
				resetTimer1 ();
    984a:	b1 df       	rcall	.-158    	; 0x97ae <_Z11resetTimer1v>
    984c:	01 c0       	rjmp	.+2      	; 0x9850 <_Z5timerv+0x92>
			} else {
				resetTimer2 ();
    984e:	b5 df       	rcall	.-150    	; 0x97ba <_Z11resetTimer2v>
    9850:	66 24       	eor	r6, r6
    9852:	63 94       	inc	r6
    9854:	f7 01       	movw	r30, r14
    9856:	32 97       	sbiw	r30, 0x02	; 2
			}
		}
		TimerMode *ptConfig = &TimerConfig[timer];
//		FORCE_INDIRECT(ptConfig) ;

		tma = ptConfig->tmrModeA;
    9858:	90 80       	ld	r9, Z
    985a:	31 96       	adiw	r30, 0x01	; 1
		tmb = ptConfig->tmrModeB;
    985c:	70 80       	ld	r7, Z
//		int8_t tmode = tma ;
//		if ( tmode < 0 )
//		{
//			tmode = -tmode ;
//		}
		if ( (tma > 1) && (tma < TMR_VAROFS)) {
    985e:	8e ef       	ldi	r24, 0xFE	; 254
    9860:	89 0d       	add	r24, r9
    9862:	82 30       	cpi	r24, 0x02	; 2
    9864:	28 f4       	brcc	.+10     	; 0x9870 <_Z5timerv+0xb2>
#ifdef FIX_MODE
			v = calibratedStick[3 - 1];
    9866:	c0 90 cb 0d 	lds	r12, 0x0DCB
    986a:	d0 90 cc 0d 	lds	r13, 0x0DCC
    986e:	02 c0       	rjmp	.+4      	; 0x9874 <_Z5timerv+0xb6>
		tma = ptConfig->tmrModeA;
		tmb = ptConfig->tmrModeB;

		//value for time described in g_model.tmrMode
		//OFFABSRUsRU%ELsEL%THsTH%ALsAL%P1P1%P2P2%P3P3%
		v = 0;
    9870:	c1 2c       	mov	r12, r1
    9872:	d1 2c       	mov	r13, r1
			v = calibratedStick[3 - 1];
#else
			v = calibratedStick[CONVERT_MODE(3)-1];
#endif
		}
		if (ThrottleStickyOn) {
    9874:	80 91 d9 0d 	lds	r24, 0x0DD9
    9878:	88 23       	and	r24, r24
    987a:	19 f0       	breq	.+6      	; 0x9882 <_Z5timerv+0xc4>
			v = -RESX;
    987c:	c1 2c       	mov	r12, r1
    987e:	3c ef       	ldi	r19, 0xFC	; 252
    9880:	d3 2e       	mov	r13, r19
		}
		if (tma >= TMR_VAROFS) // Cxx%
    9882:	f3 e0       	ldi	r31, 0x03	; 3
    9884:	f9 15       	cp	r31, r9
    9886:	48 f4       	brcc	.+18     	; 0x989a <_Z5timerv+0xdc>
		{
			v = g_chans512[tma - TMR_VAROFS];
    9888:	e9 2d       	mov	r30, r9
    988a:	f0 e0       	ldi	r31, 0x00	; 0
    988c:	ee 0f       	add	r30, r30
    988e:	ff 1f       	adc	r31, r31
    9890:	e9 58       	subi	r30, 0x89	; 137
    9892:	f2 4f       	sbci	r31, 0xF2	; 242
    9894:	c0 80       	ld	r12, Z
    9896:	d1 80       	ldd	r13, Z+1	; 0x01
    9898:	02 c0       	rjmp	.+4      	; 0x989e <_Z5timerv+0xe0>
		}
		val = (v + RESX) / (RESX / 16);

		if (tma != TMRMODE_NONE)		// Timer is not off
    989a:	99 20       	and	r9, r9
    989c:	79 f1       	breq	.+94     	; 0x98fc <_Z5timerv+0x13e>
		{ // We have a triggerA so timer is running
			if (tmb >= MAX_DRSWITCH - 1) {
    989e:	24 e1       	ldi	r18, 0x14	; 20
    98a0:	27 15       	cp	r18, r7
    98a2:	14 f5       	brge	.+68     	; 0x98e8 <_Z5timerv+0x12a>
				if (! (ptimer->sw_toggled | ptimer->s_sum | tgptr->s_cnt | tgptr->s_time
    98a4:	f8 01       	movw	r30, r16
    98a6:	84 81       	ldd	r24, Z+4	; 0x04
    98a8:	95 81       	ldd	r25, Z+5	; 0x05
    98aa:	28 81       	ld	r18, Y
    98ac:	39 81       	ldd	r19, Y+1	; 0x01
    98ae:	82 2b       	or	r24, r18
    98b0:	93 2b       	or	r25, r19
    98b2:	2b 81       	ldd	r18, Y+3	; 0x03
    98b4:	82 2b       	or	r24, r18
    98b6:	26 81       	ldd	r18, Z+6	; 0x06
    98b8:	82 2b       	or	r24, r18
						| ptimer->lastSwPos)) ptimer->lastSwPos = 0; // if initializing then init the lastSwPos
    98ba:	2a 81       	ldd	r18, Y+2	; 0x02
    98bc:	82 2b       	or	r24, r18
		val = (v + RESX) / (RESX / 16);

		if (tma != TMRMODE_NONE)		// Timer is not off
		{ // We have a triggerA so timer is running
			if (tmb >= MAX_DRSWITCH - 1) {
				if (! (ptimer->sw_toggled | ptimer->s_sum | tgptr->s_cnt | tgptr->s_time
    98be:	89 2b       	or	r24, r25
    98c0:	09 f4       	brne	.+2      	; 0x98c4 <_Z5timerv+0x106>
						| ptimer->lastSwPos)) ptimer->lastSwPos = 0; // if initializing then init the lastSwPos
    98c2:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t swPos = getSwitch (tmb - (MAX_DRSWITCH - 1), 0);
    98c4:	40 e0       	ldi	r20, 0x00	; 0
    98c6:	60 e0       	ldi	r22, 0x00	; 0
    98c8:	8b ee       	ldi	r24, 0xEB	; 235
    98ca:	87 0d       	add	r24, r7
    98cc:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_Z9getSwitchabh>
				if (swPos && !ptimer->lastSwPos) {
    98d0:	88 23       	and	r24, r24
    98d2:	41 f0       	breq	.+16     	; 0x98e4 <_Z5timerv+0x126>
    98d4:	9a 81       	ldd	r25, Y+2	; 0x02
    98d6:	91 11       	cpse	r25, r1
    98d8:	05 c0       	rjmp	.+10     	; 0x98e4 <_Z5timerv+0x126>
					ptimer->sw_toggled = !ptimer->sw_toggled; //if switch is flipped first time -> change counter state
    98da:	91 e0       	ldi	r25, 0x01	; 1
    98dc:	2b 81       	ldd	r18, Y+3	; 0x03
    98de:	21 11       	cpse	r18, r1
    98e0:	90 e0       	ldi	r25, 0x00	; 0
    98e2:	9b 83       	std	Y+3, r25	; 0x03
				}
				ptimer->lastSwPos = swPos;
    98e4:	8a 83       	std	Y+2, r24	; 0x02
    98e6:	0a c0       	rjmp	.+20     	; 0x98fc <_Z5timerv+0x13e>
			} else {
				if (tmb) {
    98e8:	77 20       	and	r7, r7
    98ea:	39 f0       	breq	.+14     	; 0x98fa <_Z5timerv+0x13c>
					ptimer->sw_toggled = getSwitch (tmb, 0); //normal switch
    98ec:	40 e0       	ldi	r20, 0x00	; 0
    98ee:	60 e0       	ldi	r22, 0x00	; 0
    98f0:	87 2d       	mov	r24, r7
    98f2:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_Z9getSwitchabh>
    98f6:	8b 83       	std	Y+3, r24	; 0x03
    98f8:	01 c0       	rjmp	.+2      	; 0x98fc <_Z5timerv+0x13e>
				} else {
					ptimer->sw_toggled = 1;	// No trigger B so use as active
    98fa:	5b 82       	std	Y+3, r5	; 0x03
				}
			}
		}

		if ( (ptimer->sw_toggled == 0) || resetting) {
    98fc:	8b 81       	ldd	r24, Y+3	; 0x03
    98fe:	88 23       	and	r24, r24
    9900:	79 f0       	breq	.+30     	; 0x9920 <_Z5timerv+0x162>
    9902:	61 10       	cpse	r6, r1
    9904:	0d c0       	rjmp	.+26     	; 0x9920 <_Z5timerv+0x162>
		}
		if (tma >= TMR_VAROFS) // Cxx%
		{
			v = g_chans512[tma - TMR_VAROFS];
		}
		val = (v + RESX) / (RESX / 16);
    9906:	fc ef       	ldi	r31, 0xFC	; 252
    9908:	df 1a       	sub	r13, r31
    990a:	d7 fe       	sbrs	r13, 7
    990c:	03 c0       	rjmp	.+6      	; 0x9914 <_Z5timerv+0x156>
    990e:	2f e3       	ldi	r18, 0x3F	; 63
    9910:	c2 0e       	add	r12, r18
    9912:	d1 1c       	adc	r13, r1
    9914:	96 e0       	ldi	r25, 0x06	; 6
    9916:	d5 94       	asr	r13
    9918:	c7 94       	ror	r12
    991a:	9a 95       	dec	r25
    991c:	e1 f7       	brne	.-8      	; 0x9916 <_Z5timerv+0x158>
    991e:	01 c0       	rjmp	.+2      	; 0x9922 <_Z5timerv+0x164>
				}
			}
		}

		if ( (ptimer->sw_toggled == 0) || resetting) {
			val = 0;
    9920:	c1 2c       	mov	r12, r1
		}

		ptimer->s_sum += val;
    9922:	88 81       	ld	r24, Y
    9924:	99 81       	ldd	r25, Y+1	; 0x01
    9926:	8c 0d       	add	r24, r12
    9928:	91 1d       	adc	r25, r1
    992a:	99 83       	std	Y+1, r25	; 0x01
    992c:	88 83       	st	Y, r24
		if ( (get_tmr10ms () - tgptr->s_time) < 100) continue; //1 sec
    992e:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_Z11get_tmr10msv>
    9932:	f8 01       	movw	r30, r16
    9934:	c4 80       	ldd	r12, Z+4	; 0x04
    9936:	d5 80       	ldd	r13, Z+5	; 0x05
    9938:	8c 19       	sub	r24, r12
    993a:	9d 09       	sbc	r25, r13
    993c:	84 36       	cpi	r24, 0x64	; 100
    993e:	91 05       	cpc	r25, r1
    9940:	08 f4       	brcc	.+2      	; 0x9944 <_Z5timerv+0x186>
    9942:	87 c0       	rjmp	.+270    	; 0x9a52 <_Z5timerv+0x294>
//		uint8_t ls_cnt = tgptr->s_cnt ;
//		val     = ptimer->s_sum/ls_cnt;
//    ptimer->s_sum  -= val*ls_cnt; //rest

		div_t qr;
		qr = div (ptimer->s_sum, tgptr->s_cnt);
    9944:	66 81       	ldd	r22, Z+6	; 0x06
    9946:	70 e0       	ldi	r23, 0x00	; 0
    9948:	88 81       	ld	r24, Y
    994a:	99 81       	ldd	r25, Y+1	; 0x01
    994c:	0e 94 ea 71 	call	0xe3d4	; 0xe3d4 <__divmodhi4>
		val = qr.quot;
    9950:	46 2f       	mov	r20, r22
		ptimer->s_sum = qr.rem;
    9952:	99 83       	std	Y+1, r25	; 0x01
    9954:	88 83       	st	Y, r24

		if (timer == 0) {
			tgptr->s_timeCumTot += 1;
    9956:	f8 01       	movw	r30, r16
		div_t qr;
		qr = div (ptimer->s_sum, tgptr->s_cnt);
		val = qr.quot;
		ptimer->s_sum = qr.rem;

		if (timer == 0) {
    9958:	81 10       	cpse	r8, r1
    995a:	0d c0       	rjmp	.+26     	; 0x9976 <_Z5timerv+0x1b8>
			tgptr->s_timeCumTot += 1;
    995c:	20 81       	ld	r18, Z
    995e:	31 81       	ldd	r19, Z+1	; 0x01
    9960:	2f 5f       	subi	r18, 0xFF	; 255
    9962:	3f 4f       	sbci	r19, 0xFF	; 255
    9964:	31 83       	std	Z+1, r19	; 0x01
    9966:	20 83       	st	Z, r18
			tgptr->s_timeCumAbs += 1;
    9968:	22 81       	ldd	r18, Z+2	; 0x02
    996a:	33 81       	ldd	r19, Z+3	; 0x03
    996c:	2f 5f       	subi	r18, 0xFF	; 255
    996e:	3f 4f       	sbci	r19, 0xFF	; 255
    9970:	33 83       	std	Z+3, r19	; 0x03
    9972:	22 83       	std	Z+2, r18	; 0x02
    9974:	07 c0       	rjmp	.+14     	; 0x9984 <_Z5timerv+0x1c6>
//			g_eeGeneral.totalElapsedTime += 1 ;
		} else {
			tgptr->s_cnt = 0;    // ready for next 100mS
    9976:	16 82       	std	Z+6, r1	; 0x06
			tgptr->s_time += 100;  // 100*10mS passed
    9978:	f4 e6       	ldi	r31, 0x64	; 100
    997a:	cf 0e       	add	r12, r31
    997c:	d1 1c       	adc	r13, r1
    997e:	f8 01       	movw	r30, r16
    9980:	d5 82       	std	Z+5, r13	; 0x05
    9982:	c4 82       	std	Z+4, r12	; 0x04
		}

		if (val) ptimer->s_timeCumThr += 1;
    9984:	44 23       	and	r20, r20
    9986:	31 f0       	breq	.+12     	; 0x9994 <_Z5timerv+0x1d6>
    9988:	28 85       	ldd	r18, Y+8	; 0x08
    998a:	39 85       	ldd	r19, Y+9	; 0x09
    998c:	2f 5f       	subi	r18, 0xFF	; 255
    998e:	3f 4f       	sbci	r19, 0xFF	; 255
    9990:	39 87       	std	Y+9, r19	; 0x09
    9992:	28 87       	std	Y+8, r18	; 0x08
		if (!resetting) {
    9994:	61 10       	cpse	r6, r1
    9996:	09 c0       	rjmp	.+18     	; 0x99aa <_Z5timerv+0x1ec>
			if (ptimer->sw_toggled) ptimer->s_timeCumSw += 1;
    9998:	2b 81       	ldd	r18, Y+3	; 0x03
    999a:	22 23       	and	r18, r18
    999c:	31 f0       	breq	.+12     	; 0x99aa <_Z5timerv+0x1ec>
    999e:	2c 81       	ldd	r18, Y+4	; 0x04
    99a0:	3d 81       	ldd	r19, Y+5	; 0x05
    99a2:	2f 5f       	subi	r18, 0xFF	; 255
    99a4:	3f 4f       	sbci	r19, 0xFF	; 255
    99a6:	3d 83       	std	Y+5, r19	; 0x05
    99a8:	2c 83       	std	Y+4, r18	; 0x04
		}
		ptimer->s_timeCum16ThrP += val >> 1; // val/2 ;
    99aa:	77 27       	eor	r23, r23
    99ac:	75 95       	asr	r23
    99ae:	67 95       	ror	r22
    99b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    99b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    99b4:	68 0f       	add	r22, r24
    99b6:	79 1f       	adc	r23, r25
    99b8:	7b 87       	std	Y+11, r23	; 0x0b
    99ba:	6a 87       	std	Y+10, r22	; 0x0a
    99bc:	f7 01       	movw	r30, r14
    99be:	34 97       	sbiw	r30, 0x04	; 4

		uint16_t tv;
		tv = ptimer->s_timerVal = TimerConfig[timer].tmrVal;
    99c0:	80 81       	ld	r24, Z
    99c2:	91 81       	ldd	r25, Z+1	; 0x01
    99c4:	9d 87       	std	Y+13, r25	; 0x0d
    99c6:	8c 87       	std	Y+12, r24	; 0x0c
		if (tma == TMRMODE_NONE) {
    99c8:	91 10       	cpse	r9, r1
    99ca:	02 c0       	rjmp	.+4      	; 0x99d0 <_Z5timerv+0x212>
			ptimer->s_timerState = TMR_OFF;
    99cc:	1e 82       	std	Y+6, r1	; 0x06
    99ce:	1c c0       	rjmp	.+56     	; 0x9a08 <_Z5timerv+0x24a>
		} else {
			uint16_t subtrahend;
			if (tma == TMRMODE_ABS) {
    99d0:	f1 e0       	ldi	r31, 0x01	; 1
    99d2:	9f 12       	cpse	r9, r31
    99d4:	09 c0       	rjmp	.+18     	; 0x99e8 <_Z5timerv+0x22a>
				if (tmb == 0) subtrahend = tgptr->s_timeCumAbs;
    99d6:	71 10       	cpse	r7, r1
    99d8:	04 c0       	rjmp	.+8      	; 0x99e2 <_Z5timerv+0x224>
    99da:	f8 01       	movw	r30, r16
    99dc:	62 81       	ldd	r22, Z+2	; 0x02
    99de:	73 81       	ldd	r23, Z+3	; 0x03
    99e0:	0e c0       	rjmp	.+28     	; 0x99fe <_Z5timerv+0x240>
				else subtrahend = ptimer->s_timeCumSw; //switch
    99e2:	6c 81       	ldd	r22, Y+4	; 0x04
    99e4:	7d 81       	ldd	r23, Y+5	; 0x05
    99e6:	0b c0       	rjmp	.+22     	; 0x99fe <_Z5timerv+0x240>
			} else if (tma < TMR_VAROFS - 1) subtrahend = ptimer->s_timeCumThr; // stick
    99e8:	f2 e0       	ldi	r31, 0x02	; 2
    99ea:	9f 12       	cpse	r9, r31
    99ec:	03 c0       	rjmp	.+6      	; 0x99f4 <_Z5timerv+0x236>
    99ee:	68 85       	ldd	r22, Y+8	; 0x08
    99f0:	79 85       	ldd	r23, Y+9	; 0x09
    99f2:	05 c0       	rjmp	.+10     	; 0x99fe <_Z5timerv+0x240>
			else subtrahend = ptimer->s_timeCum16ThrP / 16; // stick% or Cx%
    99f4:	b4 e0       	ldi	r27, 0x04	; 4
    99f6:	76 95       	lsr	r23
    99f8:	67 95       	ror	r22
    99fa:	ba 95       	dec	r27
    99fc:	e1 f7       	brne	.-8      	; 0x99f6 <_Z5timerv+0x238>
			ptimer->s_timerVal -= subtrahend;
    99fe:	9c 01       	movw	r18, r24
    9a00:	26 1b       	sub	r18, r22
    9a02:	37 0b       	sbc	r19, r23
    9a04:	3d 87       	std	Y+13, r19	; 0x0d
    9a06:	2c 87       	std	Y+12, r18	; 0x0c
		}

		switch (ptimer->s_timerState) {
    9a08:	2e 81       	ldd	r18, Y+6	; 0x06
    9a0a:	21 30       	cpi	r18, 0x01	; 1
    9a0c:	39 f0       	breq	.+14     	; 0x9a1c <_Z5timerv+0x25e>
    9a0e:	18 f0       	brcs	.+6      	; 0x9a16 <_Z5timerv+0x258>
    9a10:	22 30       	cpi	r18, 0x02	; 2
    9a12:	61 f0       	breq	.+24     	; 0x9a2c <_Z5timerv+0x26e>
    9a14:	14 c0       	rjmp	.+40     	; 0x9a3e <_Z5timerv+0x280>
			case TMR_OFF:
				if (tma != TMRMODE_NONE) ptimer->s_timerState = TMR_RUNNING;
    9a16:	99 20       	and	r9, r9
    9a18:	91 f0       	breq	.+36     	; 0x9a3e <_Z5timerv+0x280>
    9a1a:	10 c0       	rjmp	.+32     	; 0x9a3c <_Z5timerv+0x27e>
				break;
			case TMR_RUNNING:
				if (ptimer->s_timerVal < 0 && tv) ptimer->s_timerState = TMR_BEEPING;
    9a1c:	2c 85       	ldd	r18, Y+12	; 0x0c
    9a1e:	3d 85       	ldd	r19, Y+13	; 0x0d
    9a20:	37 ff       	sbrs	r19, 7
    9a22:	0d c0       	rjmp	.+26     	; 0x9a3e <_Z5timerv+0x280>
    9a24:	00 97       	sbiw	r24, 0x00	; 0
    9a26:	59 f0       	breq	.+22     	; 0x9a3e <_Z5timerv+0x280>
    9a28:	3e 82       	std	Y+6, r3	; 0x06
    9a2a:	09 c0       	rjmp	.+18     	; 0x9a3e <_Z5timerv+0x280>
				break;
			case TMR_BEEPING:
				if (ptimer->s_timerVal <= -MAX_ALERT_TIME) ptimer->s_timerState = TMR_STOPPED;
    9a2c:	2c 85       	ldd	r18, Y+12	; 0x0c
    9a2e:	3d 85       	ldd	r19, Y+13	; 0x0d
    9a30:	25 3c       	cpi	r18, 0xC5	; 197
    9a32:	3f 4f       	sbci	r19, 0xFF	; 255
    9a34:	0c f4       	brge	.+2      	; 0x9a38 <_Z5timerv+0x27a>
    9a36:	4e 82       	std	Y+6, r4	; 0x06
				if (tv == 0) ptimer->s_timerState = TMR_RUNNING;
    9a38:	00 97       	sbiw	r24, 0x00	; 0
    9a3a:	09 f4       	brne	.+2      	; 0x9a3e <_Z5timerv+0x280>
    9a3c:	5e 82       	std	Y+6, r5	; 0x06
				break;
			case TMR_STOPPED:
				break;
		}

		if (TimerConfig[timer].tmrDir) ptimer->s_timerVal = tv - ptimer->s_timerVal; //if counting backwards - display backwards
    9a3e:	f7 01       	movw	r30, r14
    9a40:	20 81       	ld	r18, Z
    9a42:	22 23       	and	r18, r18
    9a44:	31 f0       	breq	.+12     	; 0x9a52 <_Z5timerv+0x294>
    9a46:	2c 85       	ldd	r18, Y+12	; 0x0c
    9a48:	3d 85       	ldd	r19, Y+13	; 0x0d
    9a4a:	82 1b       	sub	r24, r18
    9a4c:	93 0b       	sbc	r25, r19
    9a4e:	9d 87       	std	Y+13, r25	; 0x0d
    9a50:	8c 87       	std	Y+12, r24	; 0x0c

	struct t_timeGlobals *tgptr = &TimeGlobals;
	FORCE_INDIRECT(tgptr);
	tgptr->s_cnt++;

	for (timer = 0; timer < 2; timer += 1) {
    9a52:	83 94       	inc	r8
    9a54:	f0 e1       	ldi	r31, 0x10	; 16
    9a56:	af 0e       	add	r10, r31
    9a58:	b1 1c       	adc	r11, r1
    9a5a:	25 e0       	ldi	r18, 0x05	; 5
    9a5c:	e2 0e       	add	r14, r18
    9a5e:	f1 1c       	adc	r15, r1
    9a60:	42 e0       	ldi	r20, 0x02	; 2
    9a62:	84 12       	cpse	r8, r20
    9a64:	d3 ce       	rjmp	.-602    	; 0x980c <_Z5timerv+0x4e>

//#ifdef TWO_TIMERS

static void timerBeeps () {
	struct t_timer *tptr = &s_timer[0];
	FORCE_INDIRECT(tptr);
    9a66:	ec ed       	ldi	r30, 0xDC	; 220
    9a68:	fd e0       	ldi	r31, 0x0D	; 13
	if (tptr->last_tmr != tptr->s_timerVal)  //beep only if seconds advance
    9a6a:	c4 85       	ldd	r28, Z+12	; 0x0c
    9a6c:	d5 85       	ldd	r29, Z+13	; 0x0d
    9a6e:	86 85       	ldd	r24, Z+14	; 0x0e
    9a70:	97 85       	ldd	r25, Z+15	; 0x0f
    9a72:	8c 17       	cp	r24, r28
    9a74:	9d 07       	cpc	r25, r29
    9a76:	09 f4       	brne	.+2      	; 0x9a7a <_Z5timerv+0x2bc>
    9a78:	75 c0       	rjmp	.+234    	; 0x9b64 <_Z5timerv+0x3a6>
			{
		tptr->last_tmr = tptr->s_timerVal;
    9a7a:	d7 87       	std	Z+15, r29	; 0x0f
    9a7c:	c6 87       	std	Z+14, r28	; 0x0e
		if (tptr->s_timerState == TMR_RUNNING) {
    9a7e:	86 81       	ldd	r24, Z+6	; 0x06
    9a80:	81 30       	cpi	r24, 0x01	; 1
    9a82:	09 f0       	breq	.+2      	; 0x9a86 <_Z5timerv+0x2c8>
    9a84:	5d c0       	rjmp	.+186    	; 0x9b40 <_Z5timerv+0x382>
			int16_t tval = tptr->s_timerVal;
#ifdef GLOBAL_COUNTDOWN
			if (g_eeGeneral.preBeep && TimerConfig[0].tmrVal) // beep when 30, 15, 10, 5,4,3,2,1 seconds remaining
    9a86:	80 91 28 06 	lds	r24, 0x0628
    9a8a:	82 ff       	sbrs	r24, 2
    9a8c:	34 c0       	rjmp	.+104    	; 0x9af6 <_Z5timerv+0x338>
    9a8e:	80 91 d7 01 	lds	r24, 0x01D7
    9a92:	90 91 d8 01 	lds	r25, 0x01D8
    9a96:	89 2b       	or	r24, r25
    9a98:	71 f1       	breq	.+92     	; 0x9af6 <_Z5timerv+0x338>
#else
					if(g_model.timer1Cdown && TimerConfig[0].tmrVal) // beep when 30, 15, 10, 5,4,3,2,1 seconds remaining
#endif
					{
				uint8_t flasht = 0;
				if (tval == 30) {
    9a9a:	ce 31       	cpi	r28, 0x1E	; 30
    9a9c:	d1 05       	cpc	r29, r1
    9a9e:	19 f4       	brne	.+6      	; 0x9aa6 <_Z5timerv+0x2e8>
					audioVoiceDefevent (AU_TIMER_30, V_30SECS);
    9aa0:	69 e2       	ldi	r22, 0x29	; 41
    9aa2:	89 e1       	ldi	r24, 0x19	; 25
    9aa4:	0b c0       	rjmp	.+22     	; 0x9abc <_Z5timerv+0x2fe>
					flasht = 1;
				}
				if (tval == 20) {
    9aa6:	c4 31       	cpi	r28, 0x14	; 20
    9aa8:	d1 05       	cpc	r29, r1
    9aaa:	19 f4       	brne	.+6      	; 0x9ab2 <_Z5timerv+0x2f4>
					audioVoiceDefevent (AU_TIMER_20, V_20SECS);
    9aac:	6a e2       	ldi	r22, 0x2A	; 42
    9aae:	8a e1       	ldi	r24, 0x1A	; 26
    9ab0:	05 c0       	rjmp	.+10     	; 0x9abc <_Z5timerv+0x2fe>
					flasht = 1;
				}
				if (tval == 10) {
    9ab2:	ca 30       	cpi	r28, 0x0A	; 10
    9ab4:	d1 05       	cpc	r29, r1
    9ab6:	31 f4       	brne	.+12     	; 0x9ac4 <_Z5timerv+0x306>
					audioVoiceDefevent (AU_TIMER_10, V_10SECS);
    9ab8:	6b e2       	ldi	r22, 0x2B	; 43
    9aba:	8b e1       	ldi	r24, 0x1B	; 27
    9abc:	0e 94 7e 34 	call	0x68fc	; 0x68fc <_Z18audioVoiceDefeventhh>
					flasht = 1;
    9ac0:	81 e0       	ldi	r24, 0x01	; 1
    9ac2:	0d c0       	rjmp	.+26     	; 0x9ade <_Z5timerv+0x320>
				}
				if (tval <= 5) {
    9ac4:	c6 30       	cpi	r28, 0x06	; 6
    9ac6:	d1 05       	cpc	r29, r1
    9ac8:	4c f4       	brge	.+18     	; 0x9adc <_Z5timerv+0x31e>
					flasht = 1;
					if (tval >= 0) {
    9aca:	d7 fd       	sbrc	r29, 7
    9acc:	03 c0       	rjmp	.+6      	; 0x9ad4 <_Z5timerv+0x316>
						audioVoiceDefevent (AU_TIMER_LT3, tval);
    9ace:	6c 2f       	mov	r22, r28
    9ad0:	8c e1       	ldi	r24, 0x1C	; 28
    9ad2:	f4 cf       	rjmp	.-24     	; 0x9abc <_Z5timerv+0x2fe>
					} else audioDefevent (AU_TIMER_LT3);
    9ad4:	8c e1       	ldi	r24, 0x1C	; 28
    9ad6:	0e 94 74 34 	call	0x68e8	; 0x68e8 <_Z13audioDefeventh>
    9ada:	f2 cf       	rjmp	.-28     	; 0x9ac0 <_Z5timerv+0x302>
			if (g_eeGeneral.preBeep && TimerConfig[0].tmrVal) // beep when 30, 15, 10, 5,4,3,2,1 seconds remaining
#else
					if(g_model.timer1Cdown && TimerConfig[0].tmrVal) // beep when 30, 15, 10, 5,4,3,2,1 seconds remaining
#endif
					{
				uint8_t flasht = 0;
    9adc:	80 e0       	ldi	r24, 0x00	; 0
					if (tval >= 0) {
						audioVoiceDefevent (AU_TIMER_LT3, tval);
					} else audioDefevent (AU_TIMER_LT3);
				}

				if (g_eeGeneral.flashBeep && flasht) g_LightOffCounter = FLASH_DURATION;
    9ade:	90 91 28 06 	lds	r25, 0x0628
    9ae2:	93 ff       	sbrs	r25, 3
    9ae4:	08 c0       	rjmp	.+16     	; 0x9af6 <_Z5timerv+0x338>
    9ae6:	88 23       	and	r24, r24
    9ae8:	31 f0       	breq	.+12     	; 0x9af6 <_Z5timerv+0x338>
    9aea:	82 e3       	ldi	r24, 0x32	; 50
    9aec:	90 e0       	ldi	r25, 0x00	; 0
    9aee:	90 93 6a 01 	sts	0x016A, r25
    9af2:	80 93 69 01 	sts	0x0169, r24
			}

			div_t mins;
			mins = div (TimerConfig[0].tmrDir ? TimerConfig[0].tmrVal - tval : tval, 60);
    9af6:	80 91 db 01 	lds	r24, 0x01DB
    9afa:	88 23       	and	r24, r24
    9afc:	39 f0       	breq	.+14     	; 0x9b0c <_Z5timerv+0x34e>
    9afe:	80 91 d7 01 	lds	r24, 0x01D7
    9b02:	90 91 d8 01 	lds	r25, 0x01D8
    9b06:	8c 1b       	sub	r24, r28
    9b08:	9d 0b       	sbc	r25, r29
    9b0a:	01 c0       	rjmp	.+2      	; 0x9b0e <_Z5timerv+0x350>
    9b0c:	ce 01       	movw	r24, r28
    9b0e:	6c e3       	ldi	r22, 0x3C	; 60
    9b10:	70 e0       	ldi	r23, 0x00	; 0
    9b12:	0e 94 ea 71 	call	0xe3d4	; 0xe3d4 <__divmodhi4>
    9b16:	dc 01       	movw	r26, r24
    9b18:	cb 01       	movw	r24, r22

#ifdef GLOBAL_COUNTDOWN
			if (g_eeGeneral.minuteBeep && ( (mins.rem) == 0)) //short beep every minute
    9b1a:	40 91 28 06 	lds	r20, 0x0628
    9b1e:	41 ff       	sbrs	r20, 1
    9b20:	21 c0       	rjmp	.+66     	; 0x9b64 <_Z5timerv+0x3a6>
    9b22:	ab 2b       	or	r26, r27
    9b24:	f9 f4       	brne	.+62     	; 0x9b64 <_Z5timerv+0x3a6>
#else
					if(g_model.timer1Mbeep && ((mins.rem)==0)) //short beep every minute
#endif
					{
				if (g_eeGeneral.speakerMode & 2) {
    9b26:	40 91 31 06 	lds	r20, 0x0631
    9b2a:	41 ff       	sbrs	r20, 1
    9b2c:	07 c0       	rjmp	.+14     	; 0x9b3c <_Z5timerv+0x37e>
					if (mins.quot) {
    9b2e:	00 97       	sbiw	r24, 0x00	; 0
    9b30:	61 f0       	breq	.+24     	; 0x9b4a <_Z5timerv+0x38c>
						voice_numeric (mins.quot, 0, V_MINUTES);
    9b32:	46 e2       	ldi	r20, 0x26	; 38
    9b34:	60 e0       	ldi	r22, 0x00	; 0
    9b36:	0e 94 86 34 	call	0x690c	; 0x690c <_Z13voice_numericihh>
    9b3a:	07 c0       	rjmp	.+14     	; 0x9b4a <_Z5timerv+0x38c>
					}
				} else {
					audioDefevent (AU_WARNING1);
    9b3c:	80 e0       	ldi	r24, 0x00	; 0
    9b3e:	03 c0       	rjmp	.+6      	; 0x9b46 <_Z5timerv+0x388>
				}
				if (g_eeGeneral.flashBeep) g_LightOffCounter = FLASH_DURATION;
			}
		} else if (tptr->s_timerState == TMR_BEEPING) {
    9b40:	82 30       	cpi	r24, 0x02	; 2
    9b42:	81 f4       	brne	.+32     	; 0x9b64 <_Z5timerv+0x3a6>
			audioDefevent (AU_TIMER_LT3);
    9b44:	8c e1       	ldi	r24, 0x1C	; 28
    9b46:	0e 94 74 34 	call	0x68e8	; 0x68e8 <_Z13audioDefeventh>
			if (g_eeGeneral.flashBeep) g_LightOffCounter = FLASH_DURATION;
    9b4a:	80 91 28 06 	lds	r24, 0x0628
    9b4e:	83 ff       	sbrs	r24, 3
    9b50:	09 c0       	rjmp	.+18     	; 0x9b64 <_Z5timerv+0x3a6>
    9b52:	82 e3       	ldi	r24, 0x32	; 50
    9b54:	90 e0       	ldi	r25, 0x00	; 0
    9b56:	90 93 6a 01 	sts	0x016A, r25
    9b5a:	80 93 69 01 	sts	0x0169, r24
    9b5e:	02 c0       	rjmp	.+4      	; 0x9b64 <_Z5timerv+0x3a6>

	struct t_timeGlobals *tgptr = &TimeGlobals;
	FORCE_INDIRECT(tgptr);
	tgptr->s_cnt++;

	for (timer = 0; timer < 2; timer += 1) {
    9b60:	61 2c       	mov	r6, r1
    9b62:	78 ce       	rjmp	.-784    	; 0x9854 <_Z5timerv+0x96>

		if (TimerConfig[timer].tmrDir) ptimer->s_timerVal = tv - ptimer->s_timerVal; //if counting backwards - display backwards
	}
	timerBeeps ();

}
    9b64:	df 91       	pop	r29
    9b66:	cf 91       	pop	r28
    9b68:	1f 91       	pop	r17
    9b6a:	0f 91       	pop	r16
    9b6c:	ff 90       	pop	r15
    9b6e:	ef 90       	pop	r14
    9b70:	df 90       	pop	r13
    9b72:	cf 90       	pop	r12
    9b74:	bf 90       	pop	r11
    9b76:	af 90       	pop	r10
    9b78:	9f 90       	pop	r9
    9b7a:	8f 90       	pop	r8
    9b7c:	7f 90       	pop	r7
    9b7e:	6f 90       	pop	r6
    9b80:	5f 90       	pop	r5
    9b82:	4f 90       	pop	r4
    9b84:	3f 90       	pop	r3
    9b86:	08 95       	ret

00009b88 <_Z5tracev>:
uint8_t s_traceWr;
uint8_t s_traceCnt;
#endif // THROTTLE_TRACE
void trace ()   // called in perOut - once envery 0.01sec
{
	timer ();
    9b88:	1a de       	rcall	.-972    	; 0x97be <_Z5timerv>
#else
	static uint16_t s_time;
#endif // THROTTLE_TRACE

	uint16_t t10ms;
	t10ms = get_tmr10ms ();
    9b8a:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_Z11get_tmr10msv>

#if THROTTLE_TRACE
	if(( t10ms-tracePtr->s_time)<1000) //10 sec
#else
	if ( (t10ms - s_time) < 1000) //10 sec
    9b8e:	20 91 40 0e 	lds	r18, 0x0E40
    9b92:	30 91 41 0e 	lds	r19, 0x0E41
    9b96:	ac 01       	movw	r20, r24
    9b98:	42 1b       	sub	r20, r18
    9b9a:	53 0b       	sbc	r21, r19
    9b9c:	9a 01       	movw	r18, r20
    9b9e:	28 3e       	cpi	r18, 0xE8	; 232
    9ba0:	33 40       	sbci	r19, 0x03	; 3
    9ba2:	98 f0       	brcs	.+38     	; 0x9bca <_Z5tracev+0x42>
	return;

#if THROTTLE_TRACE
	tracePtr->s_time= t10ms;
#else
	s_time = t10ms;
    9ba4:	90 93 41 0e 	sts	0x0E41, r25
    9ba8:	80 93 40 0e 	sts	0x0E40, r24
#endif // THROTTLE_TRACE

	if ( (g_model.protocol == PROTO_DSM2) && getSwitch (MAX_DRSWITCH - 1, 0, 0)) audioDefevent (
    9bac:	80 91 30 02 	lds	r24, 0x0230
    9bb0:	8f 70       	andi	r24, 0x0F	; 15
    9bb2:	82 30       	cpi	r24, 0x02	; 2
    9bb4:	51 f4       	brne	.+20     	; 0x9bca <_Z5tracev+0x42>
    9bb6:	40 e0       	ldi	r20, 0x00	; 0
    9bb8:	60 e0       	ldi	r22, 0x00	; 0
    9bba:	85 e1       	ldi	r24, 0x15	; 21
    9bbc:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_Z9getSwitchabh>
    9bc0:	88 23       	and	r24, r24
    9bc2:	19 f0       	breq	.+6      	; 0x9bca <_Z5tracev+0x42>
			AU_TADA);   //DSM2 bind mode warning
    9bc4:	87 e0       	ldi	r24, 0x07	; 7
    9bc6:	0c 94 74 34 	jmp	0x68e8	; 0x68e8 <_Z13audioDefeventh>
    9bca:	08 95       	ret

00009bcc <_Z13switchDisplayhh>:
int8_t longpress = 0;
int8_t unit;
#endif
#endif

void switchDisplay (uint8_t j, uint8_t a) {
    9bcc:	ef 92       	push	r14
    9bce:	ff 92       	push	r15
    9bd0:	0f 93       	push	r16
    9bd2:	1f 93       	push	r17
    9bd4:	cf 93       	push	r28
    9bd6:	df 93       	push	r29
    9bd8:	c6 2f       	mov	r28, r22
	uint8_t b = a + 3;
    9bda:	e3 e0       	ldi	r30, 0x03	; 3
    9bdc:	ee 2e       	mov	r14, r30
    9bde:	e6 0e       	add	r14, r22
	uint8_t y = 4 * FH;
	for (uint8_t i = a; i < b; y += FH, i += 1)
		lcd_putsAttIdx ( (2 + j * 15) * FW - 2, y, Str_Switches, i,
				getSwitch (i + 1, 0) ? INVERS : 0);
    9be0:	1a e5       	ldi	r17, 0x5A	; 90
    9be2:	81 9f       	mul	r24, r17
    9be4:	10 2d       	mov	r17, r0
    9be6:	11 24       	eor	r1, r1
    9be8:	16 5f       	subi	r17, 0xF6	; 246
#endif
#endif

void switchDisplay (uint8_t j, uint8_t a) {
	uint8_t b = a + 3;
	uint8_t y = 4 * FH;
    9bea:	d0 e2       	ldi	r29, 0x20	; 32
	for (uint8_t i = a; i < b; y += FH, i += 1)
    9bec:	ce 15       	cp	r28, r14
    9bee:	98 f4       	brcc	.+38     	; 0x9c16 <_Z13switchDisplayhh+0x4a>
		lcd_putsAttIdx ( (2 + j * 15) * FW - 2, y, Str_Switches, i,
				getSwitch (i + 1, 0) ? INVERS : 0);
    9bf0:	ff 24       	eor	r15, r15
    9bf2:	f3 94       	inc	r15
    9bf4:	fc 0e       	add	r15, r28
    9bf6:	40 e0       	ldi	r20, 0x00	; 0
    9bf8:	60 e0       	ldi	r22, 0x00	; 0
    9bfa:	8f 2d       	mov	r24, r15
    9bfc:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_Z9getSwitchabh>
    9c00:	08 2f       	mov	r16, r24
    9c02:	2c 2f       	mov	r18, r28
    9c04:	4e ec       	ldi	r20, 0xCE	; 206
    9c06:	52 e0       	ldi	r21, 0x02	; 2
    9c08:	6d 2f       	mov	r22, r29
    9c0a:	81 2f       	mov	r24, r17
    9c0c:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
#endif

void switchDisplay (uint8_t j, uint8_t a) {
	uint8_t b = a + 3;
	uint8_t y = 4 * FH;
	for (uint8_t i = a; i < b; y += FH, i += 1)
    9c10:	d8 5f       	subi	r29, 0xF8	; 248
    9c12:	cf 2d       	mov	r28, r15
    9c14:	eb cf       	rjmp	.-42     	; 0x9bec <_Z13switchDisplayhh+0x20>
		lcd_putsAttIdx ( (2 + j * 15) * FW - 2, y, Str_Switches, i,
				getSwitch (i + 1, 0) ? INVERS : 0);
}
    9c16:	df 91       	pop	r29
    9c18:	cf 91       	pop	r28
    9c1a:	1f 91       	pop	r17
    9c1c:	0f 91       	pop	r16
    9c1e:	ff 90       	pop	r15
    9c20:	ef 90       	pop	r14
    9c22:	08 95       	ret

00009c24 <_Z7isqrt32m>:
#endif

	asm("");
}

uint16_t isqrt32 (uint32_t n) {
    9c24:	cf 92       	push	r12
    9c26:	df 92       	push	r13
    9c28:	ef 92       	push	r14
    9c2a:	ff 92       	push	r15
    9c2c:	cf 93       	push	r28
    9c2e:	df 93       	push	r29
    9c30:	6b 01       	movw	r12, r22
    9c32:	7c 01       	movw	r14, r24
    9c34:	c0 e1       	ldi	r28, 0x10	; 16
    9c36:	d0 e0       	ldi	r29, 0x00	; 0
	uint16_t c = 0x8000;
	uint16_t g = 0x8000;
    9c38:	40 e0       	ldi	r20, 0x00	; 0
    9c3a:	50 e8       	ldi	r21, 0x80	; 128

	asm("");
}

uint16_t isqrt32 (uint32_t n) {
	uint16_t c = 0x8000;
    9c3c:	e0 e0       	ldi	r30, 0x00	; 0
    9c3e:	f0 e8       	ldi	r31, 0x80	; 128
	uint16_t g = 0x8000;

	for (;;) {
		if ((uint32_t) g * g > n) g ^= c;
    9c40:	9a 01       	movw	r18, r20
    9c42:	da 01       	movw	r26, r20
    9c44:	0e 94 47 72 	call	0xe48e	; 0xe48e <__umulhisi3>
    9c48:	c6 16       	cp	r12, r22
    9c4a:	d7 06       	cpc	r13, r23
    9c4c:	e8 06       	cpc	r14, r24
    9c4e:	f9 06       	cpc	r15, r25
    9c50:	10 f4       	brcc	.+4      	; 0x9c56 <_Z7isqrt32m+0x32>
    9c52:	4e 27       	eor	r20, r30
    9c54:	5f 27       	eor	r21, r31
		c >>= 1;
    9c56:	f6 95       	lsr	r31
    9c58:	e7 95       	ror	r30
    9c5a:	21 97       	sbiw	r28, 0x01	; 1
		if (c == 0) return g;
    9c5c:	20 97       	sbiw	r28, 0x00	; 0
    9c5e:	19 f0       	breq	.+6      	; 0x9c66 <_Z7isqrt32m+0x42>
		g |= c;
    9c60:	4e 2b       	or	r20, r30
    9c62:	5f 2b       	or	r21, r31
	}
    9c64:	ed cf       	rjmp	.-38     	; 0x9c40 <_Z7isqrt32m+0x1c>
}
    9c66:	ca 01       	movw	r24, r20
    9c68:	df 91       	pop	r29
    9c6a:	cf 91       	pop	r28
    9c6c:	ff 90       	pop	r15
    9c6e:	ef 90       	pop	r14
    9c70:	df 90       	pop	r13
    9c72:	cf 90       	pop	r12
    9c74:	08 95       	ret

00009c76 <_Z6intpolih>:

int16_t intpol (int16_t x, uint8_t idx) // -100, -75, -50, -25, 0 ,25 ,50, 75, 100
		{
    9c76:	1f 93       	push	r17
    9c78:	cf 93       	push	r28
    9c7a:	df 93       	push	r29
    9c7c:	ec 01       	movw	r28, r24
    9c7e:	86 2f       	mov	r24, r22
#define D9 (RESX * 2 / 8)
#define D5 (RESX * 2 / 4)
	bool cv9 = idx >= MAX_CURVE5;
    9c80:	11 e0       	ldi	r17, 0x01	; 1
    9c82:	68 30       	cpi	r22, 0x08	; 8
    9c84:	08 f4       	brcc	.+2      	; 0x9c88 <_Z6intpolih+0x12>
    9c86:	10 e0       	ldi	r17, 0x00	; 0
	int8_t *crv = curveAddress (idx);
    9c88:	0e 94 16 35 	call	0x6a2c	; 0x6a2c <_ZL12curveAddressh>
    9c8c:	fc 01       	movw	r30, r24
	int16_t erg;

	x += RESXu;
    9c8e:	9e 01       	movw	r18, r28
    9c90:	3c 5f       	subi	r19, 0xFC	; 252
	if (x < 0) {
    9c92:	37 fd       	sbrc	r19, 7
    9c94:	0d c0       	rjmp	.+26     	; 0x9cb0 <_Z6intpolih+0x3a>
		erg = (int16_t) crv[0] * (RESX / 4);
	} else if (x >= (RESX * 2)) {
    9c96:	21 15       	cp	r18, r1
    9c98:	88 e0       	ldi	r24, 0x08	; 8
    9c9a:	38 07       	cpc	r19, r24
    9c9c:	84 f0       	brlt	.+32     	; 0x9cbe <_Z6intpolih+0x48>
		erg = (int16_t) crv[ (cv9 ? 8 : 4)] * (RESX / 4);
    9c9e:	11 23       	and	r17, r17
    9ca0:	19 f0       	breq	.+6      	; 0x9ca8 <_Z6intpolih+0x32>
    9ca2:	48 e0       	ldi	r20, 0x08	; 8
    9ca4:	50 e0       	ldi	r21, 0x00	; 0
    9ca6:	02 c0       	rjmp	.+4      	; 0x9cac <_Z6intpolih+0x36>
    9ca8:	44 e0       	ldi	r20, 0x04	; 4
    9caa:	50 e0       	ldi	r21, 0x00	; 0
    9cac:	e4 0f       	add	r30, r20
    9cae:	f5 1f       	adc	r31, r21
    9cb0:	80 81       	ld	r24, Z
    9cb2:	99 27       	eor	r25, r25
    9cb4:	87 fd       	sbrc	r24, 7
    9cb6:	90 95       	com	r25
    9cb8:	98 2f       	mov	r25, r24
    9cba:	88 27       	eor	r24, r24
    9cbc:	23 c0       	rjmp	.+70     	; 0x9d04 <_Z6intpolih+0x8e>
	} else {
		int16_t a, dx;
		if (cv9) {
			a = (uint16_t) x / D9;
    9cbe:	83 2f       	mov	r24, r19
		erg = (int16_t) crv[0] * (RESX / 4);
	} else if (x >= (RESX * 2)) {
		erg = (int16_t) crv[ (cv9 ? 8 : 4)] * (RESX / 4);
	} else {
		int16_t a, dx;
		if (cv9) {
    9cc0:	11 23       	and	r17, r17
    9cc2:	21 f0       	breq	.+8      	; 0x9ccc <_Z6intpolih+0x56>
			a = (uint16_t) x / D9;
			dx = ((uint16_t) x % D9) * 2;
    9cc4:	33 27       	eor	r19, r19
    9cc6:	22 0f       	add	r18, r18
    9cc8:	33 1f       	adc	r19, r19
    9cca:	02 c0       	rjmp	.+4      	; 0x9cd0 <_Z6intpolih+0x5a>
		} else {
			a = (uint16_t) x / D5;
    9ccc:	86 95       	lsr	r24
			dx = (uint16_t) x % D5;
    9cce:	31 70       	andi	r19, 0x01	; 1
		}
		erg = (int16_t) crv[a] * ( (D5 - dx) / 2) + (int16_t) crv[a + 1] * (dx / 2);
    9cd0:	48 2f       	mov	r20, r24
    9cd2:	50 e0       	ldi	r21, 0x00	; 0
    9cd4:	e4 0f       	add	r30, r20
    9cd6:	f5 1f       	adc	r31, r21
    9cd8:	60 81       	ld	r22, Z
    9cda:	40 e0       	ldi	r20, 0x00	; 0
    9cdc:	52 e0       	ldi	r21, 0x02	; 2
    9cde:	42 1b       	sub	r20, r18
    9ce0:	53 0b       	sbc	r21, r19
    9ce2:	55 95       	asr	r21
    9ce4:	47 95       	ror	r20
    9ce6:	64 03       	mulsu	r22, r20
    9ce8:	c0 01       	movw	r24, r0
    9cea:	65 9f       	mul	r22, r21
    9cec:	90 0d       	add	r25, r0
    9cee:	11 24       	eor	r1, r1
    9cf0:	61 81       	ldd	r22, Z+1	; 0x01
    9cf2:	35 95       	asr	r19
    9cf4:	27 95       	ror	r18
    9cf6:	62 03       	mulsu	r22, r18
    9cf8:	a0 01       	movw	r20, r0
    9cfa:	63 9f       	mul	r22, r19
    9cfc:	50 0d       	add	r21, r0
    9cfe:	11 24       	eor	r1, r1
    9d00:	84 0f       	add	r24, r20
    9d02:	95 1f       	adc	r25, r21
	}
	return erg / 25; // 100*D5/RESX;
    9d04:	69 e1       	ldi	r22, 0x19	; 25
    9d06:	70 e0       	ldi	r23, 0x00	; 0
    9d08:	0e 94 ea 71 	call	0xe3d4	; 0xe3d4 <__divmodhi4>
    9d0c:	cb 01       	movw	r24, r22
}
    9d0e:	df 91       	pop	r29
    9d10:	cf 91       	pop	r28
    9d12:	1f 91       	pop	r17
    9d14:	08 95       	ret

00009d16 <_Z8calcExpohi>:

int16_t calcExpo (uint8_t channel, int16_t value) {
    9d16:	bf 92       	push	r11
    9d18:	cf 92       	push	r12
    9d1a:	df 92       	push	r13
    9d1c:	ef 92       	push	r14
    9d1e:	ff 92       	push	r15
    9d20:	0f 93       	push	r16
    9d22:	1f 93       	push	r17
    9d24:	cf 93       	push	r28
    9d26:	df 93       	push	r29
    9d28:	18 2f       	mov	r17, r24
    9d2a:	7b 01       	movw	r14, r22
	uint8_t expoDrOn = get_dr_state (channel);
    9d2c:	0e 94 d9 38 	call	0x71b2	; 0x71b2 <_Z12get_dr_stateh>
    9d30:	c8 2e       	mov	r12, r24
	uint8_t stkDir = value > 0 ? DR_RIGHT : DR_LEFT;
	if (IS_EXPO_THROTTLE (channel)) stkDir = DR_RIGHT;
    9d32:	81 2f       	mov	r24, r17
    9d34:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <_Z16IS_EXPO_THROTTLEh>
    9d38:	81 11       	cpse	r24, r1
    9d3a:	04 c0       	rjmp	.+8      	; 0x9d44 <_Z8calcExpohi+0x2e>
	return erg / 25; // 100*D5/RESX;
}

int16_t calcExpo (uint8_t channel, int16_t value) {
	uint8_t expoDrOn = get_dr_state (channel);
	uint8_t stkDir = value > 0 ? DR_RIGHT : DR_LEFT;
    9d3c:	01 e0       	ldi	r16, 0x01	; 1
    9d3e:	1e 14       	cp	r1, r14
    9d40:	1f 04       	cpc	r1, r15
    9d42:	0c f4       	brge	.+2      	; 0x9d46 <_Z8calcExpohi+0x30>
	if (IS_EXPO_THROTTLE (channel)) stkDir = DR_RIGHT;
    9d44:	00 e0       	ldi	r16, 0x00	; 0
	ExpoData *peData = &g_model.expoData[channel];
    9d46:	8e e0       	ldi	r24, 0x0E	; 14
    9d48:	18 9f       	mul	r17, r24
    9d4a:	e0 01       	movw	r28, r0
    9d4c:	11 24       	eor	r1, r1
    9d4e:	c5 53       	subi	r28, 0x35	; 53
    9d50:	dc 4f       	sbci	r29, 0xFC	; 252

	int8_t expoval = peData->expo[expoDrOn][DR_EXPO][stkDir];
    9d52:	84 e0       	ldi	r24, 0x04	; 4
    9d54:	c8 9e       	mul	r12, r24
    9d56:	60 01       	movw	r12, r0
    9d58:	11 24       	eor	r1, r1
    9d5a:	f6 01       	movw	r30, r12
    9d5c:	e0 0f       	add	r30, r16
    9d5e:	f1 1d       	adc	r31, r1
    9d60:	ec 0f       	add	r30, r28
    9d62:	fd 1f       	adc	r31, r29
    9d64:	b0 80       	ld	r11, Z

	if (IS_EXPO_THROTTLE (channel)) {
    9d66:	81 2f       	mov	r24, r17
    9d68:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <_Z16IS_EXPO_THROTTLEh>
    9d6c:	88 23       	and	r24, r24
    9d6e:	a1 f0       	breq	.+40     	; 0x9d98 <_Z8calcExpohi+0x82>
#if GVARS
		value = 2 * expo ( (value + RESX) / 2, REG100_100 (expoval));
    9d70:	8b 2d       	mov	r24, r11
    9d72:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <_Z10REG100_100a>
    9d76:	68 2f       	mov	r22, r24
    9d78:	77 27       	eor	r23, r23
    9d7a:	67 fd       	sbrc	r22, 7
    9d7c:	70 95       	com	r23
    9d7e:	c7 01       	movw	r24, r14
    9d80:	9c 5f       	subi	r25, 0xFC	; 252
    9d82:	97 fd       	sbrc	r25, 7
    9d84:	01 96       	adiw	r24, 0x01	; 1
    9d86:	95 95       	asr	r25
    9d88:	87 95       	ror	r24
    9d8a:	0e 94 e8 42 	call	0x85d0	; 0x85d0 <_Z4expoii>
    9d8e:	7c 01       	movw	r14, r24
    9d90:	ee 0c       	add	r14, r14
    9d92:	ff 1c       	adc	r15, r15
#else
		value = 2*expo((value+RESX)/2,expoval);
#endif
		stkDir = DR_RIGHT;
    9d94:	00 e0       	ldi	r16, 0x00	; 0
    9d96:	0b c0       	rjmp	.+22     	; 0x9dae <_Z8calcExpohi+0x98>
	} else
#if GVARS
	value = expo (value, REG100_100 (expoval));
    9d98:	8b 2d       	mov	r24, r11
    9d9a:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <_Z10REG100_100a>
    9d9e:	68 2f       	mov	r22, r24
    9da0:	77 27       	eor	r23, r23
    9da2:	67 fd       	sbrc	r22, 7
    9da4:	70 95       	com	r23
    9da6:	c7 01       	movw	r24, r14
    9da8:	0e 94 e8 42 	call	0x85d0	; 0x85d0 <_Z4expoii>
    9dac:	7c 01       	movw	r14, r24
#else
	value = expo(value,expoval);
#endif

#if GVARS
	int32_t x = (int32_t) value * (REG (peData->expo[expoDrOn][DR_WEIGHT][stkDir] + 100, 0, 100))
    9dae:	cc 0d       	add	r28, r12
    9db0:	dd 1d       	adc	r29, r13
    9db2:	c0 0f       	add	r28, r16
    9db4:	d1 1d       	adc	r29, r1
    9db6:	8a 81       	ldd	r24, Y+2	; 0x02
    9db8:	44 e6       	ldi	r20, 0x64	; 100
    9dba:	60 e0       	ldi	r22, 0x00	; 0
    9dbc:	8c 59       	subi	r24, 0x9C	; 156
    9dbe:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <_Z3REGaaa>
    9dc2:	97 01       	movw	r18, r14
    9dc4:	a8 2f       	mov	r26, r24
    9dc6:	bb 27       	eor	r27, r27
    9dc8:	a7 fd       	sbrc	r26, 7
    9dca:	b0 95       	com	r27
    9dcc:	0e 94 41 72 	call	0xe482	; 0xe482 <__mulhisi3>
			/ 100;
    9dd0:	24 e6       	ldi	r18, 0x64	; 100
    9dd2:	30 e0       	ldi	r19, 0x00	; 0
    9dd4:	40 e0       	ldi	r20, 0x00	; 0
    9dd6:	50 e0       	ldi	r21, 0x00	; 0
    9dd8:	0e 94 1f 72 	call	0xe43e	; 0xe43e <__divmodsi4>
#else
	int32_t x = (int32_t)value * (peData->expo[expoDrOn][DR_WEIGHT][stkDir]+100)/100;
#endif
	value = (int16_t) x;
    9ddc:	e9 01       	movw	r28, r18
	if (IS_EXPO_THROTTLE (channel)) value -= RESX;
    9dde:	81 2f       	mov	r24, r17
    9de0:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <_Z16IS_EXPO_THROTTLEh>
    9de4:	81 11       	cpse	r24, r1
    9de6:	d4 50       	subi	r29, 0x04	; 4
	return value;
}
    9de8:	ce 01       	movw	r24, r28
    9dea:	df 91       	pop	r29
    9dec:	cf 91       	pop	r28
    9dee:	1f 91       	pop	r17
    9df0:	0f 91       	pop	r16
    9df2:	ff 90       	pop	r15
    9df4:	ef 90       	pop	r14
    9df6:	df 90       	pop	r13
    9df8:	cf 90       	pop	r12
    9dfa:	bf 90       	pop	r11
    9dfc:	08 95       	ret

00009dfe <_Z12drawFunctionhh>:
#define XD (X0-2)

#define GRAPH_FUNCTION_CURVE		0
#define GRAPH_FUNCTION_EXPO			1

void drawFunction (uint8_t xpos, uint8_t function) {
    9dfe:	df 92       	push	r13
    9e00:	ef 92       	push	r14
    9e02:	ff 92       	push	r15
    9e04:	0f 93       	push	r16
    9e06:	1f 93       	push	r17
    9e08:	cf 93       	push	r28
    9e0a:	df 93       	push	r29
    9e0c:	d6 2e       	mov	r13, r22
    9e0e:	20 ee       	ldi	r18, 0xE0	; 224
    9e10:	f2 2e       	mov	r15, r18
    9e12:	f8 0e       	add	r15, r24
	int8_t yv;
	int8_t prev_yv = 127;
	for (int8_t xv = -WCHART; xv <= WCHART; xv++) {
    9e14:	c0 e0       	ldi	r28, 0x00	; 0
    9e16:	dc ef       	ldi	r29, 0xFC	; 252
#define GRAPH_FUNCTION_CURVE		0
#define GRAPH_FUNCTION_EXPO			1

void drawFunction (uint8_t xpos, uint8_t function) {
	int8_t yv;
	int8_t prev_yv = 127;
    9e18:	0f e7       	ldi	r16, 0x7F	; 127
		uint8_t len = abs(yv - prev_yv);
		if (len <= 1) {
			lcd_plot (xpos + xv, Y0 - yv);
		} else {
			uint8_t tmp = (prev_yv < yv ? 0 : len - 1);
			lcd_vline (xpos + xv, Y0 - yv - tmp, len);
    9e1a:	30 e2       	ldi	r19, 0x20	; 32
    9e1c:	e3 2e       	mov	r14, r19

void drawFunction (uint8_t xpos, uint8_t function) {
	int8_t yv;
	int8_t prev_yv = 127;
	for (int8_t xv = -WCHART; xv <= WCHART; xv++) {
		if (function == GRAPH_FUNCTION_CURVE) {
    9e1e:	d1 10       	cpse	r13, r1
    9e20:	05 c0       	rjmp	.+10     	; 0x9e2c <_Z12drawFunctionhh+0x2e>
			yv = intpol (xv * RESX / WCHART, s_curveChan) * WCHART / RESX;
    9e22:	60 91 55 0e 	lds	r22, 0x0E55
    9e26:	ce 01       	movw	r24, r28
    9e28:	26 df       	rcall	.-436    	; 0x9c76 <_Z6intpolih>
    9e2a:	04 c0       	rjmp	.+8      	; 0x9e34 <_Z12drawFunctionhh+0x36>
		} else {
			yv = calcExpo (s_expoChan, xv * RESX / WCHART) * WCHART / RESX;
    9e2c:	be 01       	movw	r22, r28
    9e2e:	80 91 54 0e 	lds	r24, 0x0E54
    9e32:	71 df       	rcall	.-286    	; 0x9d16 <_Z8calcExpohi>
    9e34:	97 fd       	sbrc	r25, 7
    9e36:	4f 96       	adiw	r24, 0x1f	; 31
    9e38:	9c 01       	movw	r18, r24
    9e3a:	95 e0       	ldi	r25, 0x05	; 5
    9e3c:	35 95       	asr	r19
    9e3e:	27 95       	ror	r18
    9e40:	9a 95       	dec	r25
    9e42:	e1 f7       	brne	.-8      	; 0x9e3c <_Z12drawFunctionhh+0x3e>
    9e44:	12 2f       	mov	r17, r18
		}
		if (prev_yv == 127) {
    9e46:	0f 37       	cpi	r16, 0x7F	; 127
    9e48:	09 f4       	brne	.+2      	; 0x9e4c <_Z12drawFunctionhh+0x4e>
    9e4a:	02 2f       	mov	r16, r18
			prev_yv = yv;
		}
		uint8_t len = abs(yv - prev_yv);
    9e4c:	41 2f       	mov	r20, r17
    9e4e:	55 27       	eor	r21, r21
    9e50:	47 fd       	sbrc	r20, 7
    9e52:	50 95       	com	r21
    9e54:	40 1b       	sub	r20, r16
    9e56:	51 09       	sbc	r21, r1
    9e58:	07 fd       	sbrc	r16, 7
    9e5a:	53 95       	inc	r21
    9e5c:	57 ff       	sbrs	r21, 7
    9e5e:	03 c0       	rjmp	.+6      	; 0x9e66 <_Z12drawFunctionhh+0x68>
    9e60:	51 95       	neg	r21
    9e62:	41 95       	neg	r20
    9e64:	51 09       	sbc	r21, r1
		if (len <= 1) {
    9e66:	42 30       	cpi	r20, 0x02	; 2
    9e68:	30 f4       	brcc	.+12     	; 0x9e76 <_Z12drawFunctionhh+0x78>
			lcd_plot (xpos + xv, Y0 - yv);
    9e6a:	6e 2d       	mov	r22, r14
    9e6c:	61 1b       	sub	r22, r17
    9e6e:	8f 2d       	mov	r24, r15
    9e70:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <_Z8lcd_plothh>
    9e74:	0c c0       	rjmp	.+24     	; 0x9e8e <_Z12drawFunctionhh+0x90>
		} else {
			uint8_t tmp = (prev_yv < yv ? 0 : len - 1);
    9e76:	01 17       	cp	r16, r17
    9e78:	1c f0       	brlt	.+6      	; 0x9e80 <_Z12drawFunctionhh+0x82>
    9e7a:	9f ef       	ldi	r25, 0xFF	; 255
    9e7c:	94 0f       	add	r25, r20
    9e7e:	01 c0       	rjmp	.+2      	; 0x9e82 <_Z12drawFunctionhh+0x84>
    9e80:	90 e0       	ldi	r25, 0x00	; 0
			lcd_vline (xpos + xv, Y0 - yv - tmp, len);
    9e82:	6e 2d       	mov	r22, r14
    9e84:	61 1b       	sub	r22, r17
    9e86:	69 1b       	sub	r22, r25
    9e88:	8f 2d       	mov	r24, r15
    9e8a:	0e 94 d5 27 	call	0x4faa	; 0x4faa <_Z9lcd_vlinehha>
		}
		if (yv) {
    9e8e:	11 23       	and	r17, r17
    9e90:	21 f0       	breq	.+8      	; 0x9e9a <_Z12drawFunctionhh+0x9c>
			lcd_plot (xpos + xv, Y0);
    9e92:	60 e2       	ldi	r22, 0x20	; 32
    9e94:	8f 2d       	mov	r24, r15
    9e96:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <_Z8lcd_plothh>
    9e9a:	f3 94       	inc	r15
    9e9c:	a0 96       	adiw	r28, 0x20	; 32
#define GRAPH_FUNCTION_EXPO			1

void drawFunction (uint8_t xpos, uint8_t function) {
	int8_t yv;
	int8_t prev_yv = 127;
	for (int8_t xv = -WCHART; xv <= WCHART; xv++) {
    9e9e:	c0 32       	cpi	r28, 0x20	; 32
    9ea0:	84 e0       	ldi	r24, 0x04	; 4
    9ea2:	d8 07       	cpc	r29, r24
    9ea4:	11 f0       	breq	.+4      	; 0x9eaa <_Z12drawFunctionhh+0xac>
    9ea6:	01 2f       	mov	r16, r17
    9ea8:	ba cf       	rjmp	.-140    	; 0x9e1e <_Z12drawFunctionhh+0x20>
			lcd_plot (xpos + xv, Y0);
		}
		prev_yv = yv;
	}

}
    9eaa:	df 91       	pop	r29
    9eac:	cf 91       	pop	r28
    9eae:	1f 91       	pop	r17
    9eb0:	0f 91       	pop	r16
    9eb2:	ff 90       	pop	r15
    9eb4:	ef 90       	pop	r14
    9eb6:	df 90       	pop	r13
    9eb8:	08 95       	ret

00009eba <_Z9drawCurveh>:
NOINLINE static int8_t *curveAddress (uint8_t idx) {
	uint8_t cv9 = idx >= MAX_CURVE5;
	return cv9 ? g_model.curves9[idx - MAX_CURVE5] : g_model.curves5[idx];
}

void drawCurve (uint8_t offset) {
    9eba:	df 92       	push	r13
    9ebc:	ef 92       	push	r14
    9ebe:	ff 92       	push	r15
    9ec0:	0f 93       	push	r16
    9ec2:	1f 93       	push	r17
    9ec4:	cf 93       	push	r28
    9ec6:	df 93       	push	r29
    9ec8:	d8 2e       	mov	r13, r24
	uint8_t cv9 = s_curveChan >= MAX_CURVE5;
    9eca:	80 91 55 0e 	lds	r24, 0x0E55
    9ece:	ee 24       	eor	r14, r14
    9ed0:	e3 94       	inc	r14
    9ed2:	88 30       	cpi	r24, 0x08	; 8
    9ed4:	08 f4       	brcc	.+2      	; 0x9ed8 <_Z9drawCurveh+0x1e>
    9ed6:	e1 2c       	mov	r14, r1
	int8_t *crv = curveAddress (s_curveChan);
    9ed8:	0e 94 16 35 	call	0x6a2c	; 0x6a2c <_ZL12curveAddressh>
    9edc:	ec 01       	movw	r28, r24

	lcd_vline (XD, Y0 - WCHART, WCHART * 2);
    9ede:	40 e4       	ldi	r20, 0x40	; 64
    9ee0:	60 e0       	ldi	r22, 0x00	; 0
    9ee2:	8c e5       	ldi	r24, 0x5C	; 92
    9ee4:	0e 94 d5 27 	call	0x4faa	; 0x4faa <_Z9lcd_vlinehha>

//	plotType = PLOT_BLACK ;
	for (uint8_t i = 0; i < (cv9 ? 9 : 5); i++) {
    9ee8:	f1 2c       	mov	r15, r1
		uint8_t xx = XD - 1 - WCHART + i * WCHART / (cv9 ? 4 : 2);
		uint8_t yy = Y0 - crv[i] * WCHART / 100;
    9eea:	0c e9       	ldi	r16, 0x9C	; 156
    9eec:	1f ef       	ldi	r17, 0xFF	; 255
	int8_t *crv = curveAddress (s_curveChan);

	lcd_vline (XD, Y0 - WCHART, WCHART * 2);

//	plotType = PLOT_BLACK ;
	for (uint8_t i = 0; i < (cv9 ? 9 : 5); i++) {
    9eee:	2f 2d       	mov	r18, r15
    9ef0:	30 e0       	ldi	r19, 0x00	; 0
    9ef2:	ee 20       	and	r14, r14
    9ef4:	19 f0       	breq	.+6      	; 0x9efc <_Z9drawCurveh+0x42>
    9ef6:	49 e0       	ldi	r20, 0x09	; 9
    9ef8:	50 e0       	ldi	r21, 0x00	; 0
    9efa:	02 c0       	rjmp	.+4      	; 0x9f00 <_Z9drawCurveh+0x46>
    9efc:	45 e0       	ldi	r20, 0x05	; 5
    9efe:	50 e0       	ldi	r21, 0x00	; 0
    9f00:	24 17       	cp	r18, r20
    9f02:	35 07       	cpc	r19, r21
    9f04:	5c f5       	brge	.+86     	; 0x9f5c <_Z9drawCurveh+0xa2>
		uint8_t xx = XD - 1 - WCHART + i * WCHART / (cv9 ? 4 : 2);
    9f06:	c9 01       	movw	r24, r18
    9f08:	45 e0       	ldi	r20, 0x05	; 5
    9f0a:	88 0f       	add	r24, r24
    9f0c:	99 1f       	adc	r25, r25
    9f0e:	4a 95       	dec	r20
    9f10:	e1 f7       	brne	.-8      	; 0x9f0a <_Z9drawCurveh+0x50>
    9f12:	ee 20       	and	r14, r14
    9f14:	19 f0       	breq	.+6      	; 0x9f1c <_Z9drawCurveh+0x62>
    9f16:	64 e0       	ldi	r22, 0x04	; 4
    9f18:	70 e0       	ldi	r23, 0x00	; 0
    9f1a:	02 c0       	rjmp	.+4      	; 0x9f20 <_Z9drawCurveh+0x66>
    9f1c:	62 e0       	ldi	r22, 0x02	; 2
    9f1e:	70 e0       	ldi	r23, 0x00	; 0
    9f20:	0e 94 ea 71 	call	0xe3d4	; 0xe3d4 <__divmodhi4>
    9f24:	e6 2f       	mov	r30, r22
		uint8_t yy = Y0 - crv[i] * WCHART / 100;
    9f26:	de 01       	movw	r26, r28
    9f28:	a2 0f       	add	r26, r18
    9f2a:	b3 1f       	adc	r27, r19
    9f2c:	2c 91       	ld	r18, X
    9f2e:	30 e2       	ldi	r19, 0x20	; 32
    9f30:	23 02       	muls	r18, r19
    9f32:	c0 01       	movw	r24, r0
    9f34:	11 24       	eor	r1, r1
    9f36:	b8 01       	movw	r22, r16
    9f38:	0e 94 ea 71 	call	0xe3d4	; 0xe3d4 <__divmodhi4>

		if (offset == i) {
    9f3c:	df 10       	cpse	r13, r15
    9f3e:	05 c0       	rjmp	.+10     	; 0x9f4a <_Z9drawCurveh+0x90>
			lcd_rect (xx - 1, yy - 2, 5, 5);
    9f40:	62 5e       	subi	r22, 0xE2	; 226
    9f42:	25 e0       	ldi	r18, 0x05	; 5
    9f44:	45 e0       	ldi	r20, 0x05	; 5
    9f46:	8a e3       	ldi	r24, 0x3A	; 58
    9f48:	04 c0       	rjmp	.+8      	; 0x9f52 <_Z9drawCurveh+0x98>
		} else {
			lcd_rect (xx, yy - 1, 3, 3);
    9f4a:	61 5e       	subi	r22, 0xE1	; 225
    9f4c:	23 e0       	ldi	r18, 0x03	; 3
    9f4e:	43 e0       	ldi	r20, 0x03	; 3
    9f50:	8b e3       	ldi	r24, 0x3B	; 59
    9f52:	8e 0f       	add	r24, r30
    9f54:	0e 94 98 29 	call	0x5330	; 0x5330 <_Z8lcd_recthhhh>
	int8_t *crv = curveAddress (s_curveChan);

	lcd_vline (XD, Y0 - WCHART, WCHART * 2);

//	plotType = PLOT_BLACK ;
	for (uint8_t i = 0; i < (cv9 ? 9 : 5); i++) {
    9f58:	f3 94       	inc	r15
    9f5a:	c9 cf       	rjmp	.-110    	; 0x9eee <_Z9drawCurveh+0x34>
		} else {
			lcd_rect (xx, yy - 1, 3, 3);
		}
	}

	drawFunction ( XD, GRAPH_FUNCTION_CURVE);
    9f5c:	60 e0       	ldi	r22, 0x00	; 0
    9f5e:	8c e5       	ldi	r24, 0x5C	; 92

//	plotType = PLOT_XOR ;
}
    9f60:	df 91       	pop	r29
    9f62:	cf 91       	pop	r28
    9f64:	1f 91       	pop	r17
    9f66:	0f 91       	pop	r16
    9f68:	ff 90       	pop	r15
    9f6a:	ef 90       	pop	r14
    9f6c:	df 90       	pop	r13
		} else {
			lcd_rect (xx, yy - 1, 3, 3);
		}
	}

	drawFunction ( XD, GRAPH_FUNCTION_CURVE);
    9f6e:	47 cf       	rjmp	.-370    	; 0x9dfe <_Z12drawFunctionhh>

00009f70 <_Z16menuProcCurveOneh>:

//	plotType = PLOT_XOR ;
}

void menuProcCurveOne (uint8_t event) {
    9f70:	5f 92       	push	r5
    9f72:	6f 92       	push	r6
    9f74:	7f 92       	push	r7
    9f76:	8f 92       	push	r8
    9f78:	9f 92       	push	r9
    9f7a:	af 92       	push	r10
    9f7c:	bf 92       	push	r11
    9f7e:	cf 92       	push	r12
    9f80:	df 92       	push	r13
    9f82:	ef 92       	push	r14
    9f84:	ff 92       	push	r15
    9f86:	0f 93       	push	r16
    9f88:	1f 93       	push	r17
    9f8a:	cf 93       	push	r28
    9f8c:	df 93       	push	r29
    9f8e:	88 2e       	mov	r8, r24
	bool cv9 = s_curveChan >= MAX_CURVE5;
    9f90:	aa 24       	eor	r10, r10
    9f92:	a3 94       	inc	r10
    9f94:	80 91 55 0e 	lds	r24, 0x0E55
    9f98:	88 30       	cpi	r24, 0x08	; 8
    9f9a:	08 f4       	brcc	.+2      	; 0x9f9e <_Z16menuProcCurveOneh+0x2e>
    9f9c:	a1 2c       	mov	r10, r1
	static int8_t dfltCrv;

//    SUBMENU(STR_CURVE, 1+(cv9 ? 9 : 5), { 0/*repeated...*/});

	TITLE(STR_CURVE);
    9f9e:	87 e7       	ldi	r24, 0x77	; 119
    9fa0:	9b e1       	ldi	r25, 0x1B	; 27
    9fa2:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>
	static MState2 mstate2;
	mstate2.check_columns (event, (cv9 ? 9 : 5));
    9fa6:	aa 20       	and	r10, r10
    9fa8:	11 f0       	breq	.+4      	; 0x9fae <_Z16menuProcCurveOneh+0x3e>
    9faa:	49 e0       	ldi	r20, 0x09	; 9
    9fac:	01 c0       	rjmp	.+2      	; 0x9fb0 <_Z16menuProcCurveOneh+0x40>
    9fae:	45 e0       	ldi	r20, 0x05	; 5
    9fb0:	68 2d       	mov	r22, r8
    9fb2:	8e e4       	ldi	r24, 0x4E	; 78
    9fb4:	9e e0       	ldi	r25, 0x0E	; 14
    9fb6:	0e 94 07 3c 	call	0x780e	; 0x780e <_ZN7MState213check_columnsEhh>

	if (event == EVT_ENTRY) {
    9fba:	8f eb       	ldi	r24, 0xBF	; 191
    9fbc:	88 12       	cpse	r8, r24
    9fbe:	02 c0       	rjmp	.+4      	; 0x9fc4 <_Z16menuProcCurveOneh+0x54>
		dfltCrv = 0;
    9fc0:	10 92 4d 0e 	sts	0x0E4D, r1
	}
	lcd_outdezAtt (7 * FW, 0, s_curveChan + 1, INVERS);
    9fc4:	40 91 55 0e 	lds	r20, 0x0E55
    9fc8:	50 e0       	ldi	r21, 0x00	; 0
    9fca:	4f 5f       	subi	r20, 0xFF	; 255
    9fcc:	5f 4f       	sbci	r21, 0xFF	; 255
    9fce:	21 e0       	ldi	r18, 0x01	; 1
    9fd0:	60 e0       	ldi	r22, 0x00	; 0
    9fd2:	8a e2       	ldi	r24, 0x2A	; 42
    9fd4:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>

	int8_t *crv = curveAddress (s_curveChan);
    9fd8:	80 91 55 0e 	lds	r24, 0x0E55
    9fdc:	0e 94 16 35 	call	0x6a2c	; 0x6a2c <_ZL12curveAddressh>
    9fe0:	ec 01       	movw	r28, r24

	uint8_t sub = mstate2.m_posVert;
    9fe2:	b0 90 4e 0e 	lds	r11, 0x0E4E
	uint8_t blink = InverseBlink;
    9fe6:	60 90 9f 0d 	lds	r6, 0x0D9F
	uint8_t preset = cv9 ? 9 : 5;
    9fea:	aa 20       	and	r10, r10
    9fec:	19 f0       	breq	.+6      	; 0x9ff4 <_Z16menuProcCurveOneh+0x84>
    9fee:	f9 e0       	ldi	r31, 0x09	; 9
    9ff0:	7f 2e       	mov	r7, r31
    9ff2:	02 c0       	rjmp	.+4      	; 0x9ff8 <_Z16menuProcCurveOneh+0x88>
    9ff4:	e5 e0       	ldi	r30, 0x05	; 5
    9ff6:	7e 2e       	mov	r7, r30
    9ff8:	5c 2e       	mov	r5, r28
    9ffa:	0c 2f       	mov	r16, r28
    9ffc:	1d 2f       	mov	r17, r29
    9ffe:	65 e0       	ldi	r22, 0x05	; 5
    a000:	e6 2e       	mov	r14, r22
    a002:	f1 2c       	mov	r15, r1
    a004:	70 e1       	ldi	r23, 0x10	; 16
    a006:	97 2e       	mov	r9, r23
		uint8_t y = i * FH + 16;
		uint8_t attr = sub == (i) ? blink : 0;
		lcd_outdezAtt (4 * FW, y, crv[i], attr);
		if (cv9) {
			if (i < 4) {
				attr = sub == i + 5 ? blink : 0;
    a008:	cb 2c       	mov	r12, r11
    a00a:	d1 2c       	mov	r13, r1
    a00c:	80 2f       	mov	r24, r16
    a00e:	85 19       	sub	r24, r5
	uint8_t blink = InverseBlink;
	uint8_t preset = cv9 ? 9 : 5;

	for (uint8_t i = 0; i < 5; i++) {
		uint8_t y = i * FH + 16;
		uint8_t attr = sub == (i) ? blink : 0;
    a010:	b8 16       	cp	r11, r24
    a012:	11 f0       	breq	.+4      	; 0xa018 <_Z16menuProcCurveOneh+0xa8>
    a014:	20 e0       	ldi	r18, 0x00	; 0
    a016:	01 c0       	rjmp	.+2      	; 0xa01a <_Z16menuProcCurveOneh+0xaa>
    a018:	26 2d       	mov	r18, r6
		lcd_outdezAtt (4 * FW, y, crv[i], attr);
    a01a:	f8 01       	movw	r30, r16
    a01c:	41 91       	ld	r20, Z+
    a01e:	8f 01       	movw	r16, r30
    a020:	55 27       	eor	r21, r21
    a022:	47 fd       	sbrc	r20, 7
    a024:	50 95       	com	r21
    a026:	69 2d       	mov	r22, r9
    a028:	88 e1       	ldi	r24, 0x18	; 24
    a02a:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
		if (cv9) {
    a02e:	aa 20       	and	r10, r10
    a030:	a1 f0       	breq	.+40     	; 0xa05a <_Z16menuProcCurveOneh+0xea>
			if (i < 4) {
    a032:	f9 e0       	ldi	r31, 0x09	; 9
    a034:	ef 16       	cp	r14, r31
    a036:	89 f0       	breq	.+34     	; 0xa05a <_Z16menuProcCurveOneh+0xea>
				attr = sub == i + 5 ? blink : 0;
    a038:	ce 14       	cp	r12, r14
    a03a:	df 04       	cpc	r13, r15
    a03c:	11 f0       	breq	.+4      	; 0xa042 <_Z16menuProcCurveOneh+0xd2>
    a03e:	20 e0       	ldi	r18, 0x00	; 0
    a040:	01 c0       	rjmp	.+2      	; 0xa044 <_Z16menuProcCurveOneh+0xd4>
    a042:	26 2d       	mov	r18, r6
    a044:	fe 01       	movw	r30, r28
    a046:	ee 0d       	add	r30, r14
    a048:	ff 1d       	adc	r31, r15
				lcd_outdezAtt (8 * FW, y, crv[i + 5], attr);
    a04a:	40 81       	ld	r20, Z
    a04c:	55 27       	eor	r21, r21
    a04e:	47 fd       	sbrc	r20, 7
    a050:	50 95       	com	r21
    a052:	69 2d       	mov	r22, r9
    a054:	80 e3       	ldi	r24, 0x30	; 48
    a056:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
    a05a:	88 e0       	ldi	r24, 0x08	; 8
    a05c:	98 0e       	add	r9, r24
    a05e:	ef ef       	ldi	r30, 0xFF	; 255
    a060:	ee 1a       	sub	r14, r30
    a062:	fe 0a       	sbc	r15, r30

	uint8_t sub = mstate2.m_posVert;
	uint8_t blink = InverseBlink;
	uint8_t preset = cv9 ? 9 : 5;

	for (uint8_t i = 0; i < 5; i++) {
    a064:	f8 e3       	ldi	r31, 0x38	; 56
    a066:	9f 12       	cpse	r9, r31
    a068:	d1 cf       	rjmp	.-94     	; 0xa00c <_Z16menuProcCurveOneh+0x9c>
				attr = sub == i + 5 ? blink : 0;
				lcd_outdezAtt (8 * FW, y, crv[i + 5], attr);
			}
		}
	}
	lcd_putsAtt (2 * FW, 7 * FH, PSTR(STR_PRESET), (sub == preset) ? blink : 0);
    a06a:	b7 14       	cp	r11, r7
    a06c:	11 f0       	breq	.+4      	; 0xa072 <_Z16menuProcCurveOneh+0x102>
    a06e:	20 e0       	ldi	r18, 0x00	; 0
    a070:	01 c0       	rjmp	.+2      	; 0xa074 <_Z16menuProcCurveOneh+0x104>
    a072:	26 2d       	mov	r18, r6
    a074:	40 e7       	ldi	r20, 0x70	; 112
    a076:	5b e1       	ldi	r21, 0x1B	; 27
    a078:	68 e3       	ldi	r22, 0x38	; 56
    a07a:	8c e0       	ldi	r24, 0x0C	; 12
    a07c:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>

	if (sub == preset) {
    a080:	b7 10       	cpse	r11, r7
    a082:	3a c0       	rjmp	.+116    	; 0xa0f8 <_Z16menuProcCurveOneh+0x188>
		if (s_editMode) {
    a084:	80 91 a5 0d 	lds	r24, 0x0DA5
    a088:	88 23       	and	r24, r24
    a08a:	f1 f1       	breq	.+124    	; 0xa108 <_Z16menuProcCurveOneh+0x198>
			int8_t t;
			Tevent = event;
    a08c:	80 92 e1 01 	sts	0x01E1, r8
			t = dfltCrv;
    a090:	10 91 4d 0e 	lds	r17, 0x0E4D
			dfltCrv = checkIncDec (t, -4, 4, 0);
    a094:	20 e0       	ldi	r18, 0x00	; 0
    a096:	44 e0       	ldi	r20, 0x04	; 4
    a098:	6c ef       	ldi	r22, 0xFC	; 252
    a09a:	81 2f       	mov	r24, r17
    a09c:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <_Z11checkIncDecaaah>
    a0a0:	08 2f       	mov	r16, r24
    a0a2:	80 93 4d 0e 	sts	0x0E4D, r24
			if (dfltCrv != t) {
    a0a6:	81 17       	cp	r24, r17
    a0a8:	79 f1       	breq	.+94     	; 0xa108 <_Z16menuProcCurveOneh+0x198>
				uint8_t offset = cv9 ? 4 : 2;
    a0aa:	aa 20       	and	r10, r10
    a0ac:	11 f0       	breq	.+4      	; 0xa0b2 <_Z16menuProcCurveOneh+0x142>
    a0ae:	24 e0       	ldi	r18, 0x04	; 4
    a0b0:	01 c0       	rjmp	.+2      	; 0xa0b4 <_Z16menuProcCurveOneh+0x144>
    a0b2:	22 e0       	ldi	r18, 0x02	; 2

				for (int8_t i = -offset; i <= offset; i++)
    a0b4:	12 2f       	mov	r17, r18
    a0b6:	11 95       	neg	r17
    a0b8:	30 e0       	ldi	r19, 0x00	; 0
					crv[i + offset] = i * dfltCrv * 25 / offset;
    a0ba:	59 e1       	ldi	r21, 0x19	; 25
    a0bc:	f5 2e       	mov	r15, r21
			t = dfltCrv;
			dfltCrv = checkIncDec (t, -4, 4, 0);
			if (dfltCrv != t) {
				uint8_t offset = cv9 ? 4 : 2;

				for (int8_t i = -offset; i <= offset; i++)
    a0be:	e1 2f       	mov	r30, r17
    a0c0:	ff 27       	eor	r31, r31
    a0c2:	e7 fd       	sbrc	r30, 7
    a0c4:	f0 95       	com	r31
    a0c6:	2e 17       	cp	r18, r30
    a0c8:	3f 07       	cpc	r19, r31
    a0ca:	94 f0       	brlt	.+36     	; 0xa0f0 <_Z16menuProcCurveOneh+0x180>
					crv[i + offset] = i * dfltCrv * 25 / offset;
    a0cc:	ec 0f       	add	r30, r28
    a0ce:	fd 1f       	adc	r31, r29
    a0d0:	e2 0f       	add	r30, r18
    a0d2:	f3 1f       	adc	r31, r19
    a0d4:	10 02       	muls	r17, r16
    a0d6:	a0 01       	movw	r20, r0
    a0d8:	11 24       	eor	r1, r1
    a0da:	f4 9e       	mul	r15, r20
    a0dc:	c0 01       	movw	r24, r0
    a0de:	f5 9e       	mul	r15, r21
    a0e0:	90 0d       	add	r25, r0
    a0e2:	11 24       	eor	r1, r1
    a0e4:	b9 01       	movw	r22, r18
    a0e6:	0e 94 ea 71 	call	0xe3d4	; 0xe3d4 <__divmodhi4>
    a0ea:	60 83       	st	Z, r22
    a0ec:	1f 5f       	subi	r17, 0xFF	; 255
    a0ee:	e7 cf       	rjmp	.-50     	; 0xa0be <_Z16menuProcCurveOneh+0x14e>
				STORE_MODELVARS;
    a0f0:	82 e0       	ldi	r24, 0x02	; 2
    a0f2:	0e 94 4e 20 	call	0x409c	; 0x409c <_Z7eeDirtyh>
    a0f6:	08 c0       	rjmp	.+16     	; 0xa108 <_Z16menuProcCurveOneh+0x198>
			}
		}
	} else /*if(sub>0)*/
	{
		CHECK_INCDEC_H_MODELVAR(crv[sub], -100, 100);
    a0f8:	cb 0d       	add	r28, r11
    a0fa:	d1 1d       	adc	r29, r1
    a0fc:	44 e6       	ldi	r20, 0x64	; 100
    a0fe:	6c e9       	ldi	r22, 0x9C	; 156
    a100:	88 81       	ld	r24, Y
    a102:	0e 94 86 13 	call	0x270c	; 0x270c <_Z14checkIncDec_hmaaa>
    a106:	88 83       	st	Y, r24
	}

// Draw the curve
	drawCurve (sub);
    a108:	8b 2d       	mov	r24, r11

}
    a10a:	df 91       	pop	r29
    a10c:	cf 91       	pop	r28
    a10e:	1f 91       	pop	r17
    a110:	0f 91       	pop	r16
    a112:	ff 90       	pop	r15
    a114:	ef 90       	pop	r14
    a116:	df 90       	pop	r13
    a118:	cf 90       	pop	r12
    a11a:	bf 90       	pop	r11
    a11c:	af 90       	pop	r10
    a11e:	9f 90       	pop	r9
    a120:	8f 90       	pop	r8
    a122:	7f 90       	pop	r7
    a124:	6f 90       	pop	r6
    a126:	5f 90       	pop	r5
	{
		CHECK_INCDEC_H_MODELVAR(crv[sub], -100, 100);
	}

// Draw the curve
	drawCurve (sub);
    a128:	c8 ce       	rjmp	.-624    	; 0x9eba <_Z9drawCurveh>

0000a12a <_Z6perOutPih>:
		}
	}

}

void perOut (int16_t *chanOut, uint8_t att) {
    a12a:	2f 92       	push	r2
    a12c:	3f 92       	push	r3
    a12e:	4f 92       	push	r4
    a130:	5f 92       	push	r5
    a132:	6f 92       	push	r6
    a134:	7f 92       	push	r7
    a136:	8f 92       	push	r8
    a138:	9f 92       	push	r9
    a13a:	af 92       	push	r10
    a13c:	bf 92       	push	r11
    a13e:	cf 92       	push	r12
    a140:	df 92       	push	r13
    a142:	ef 92       	push	r14
    a144:	ff 92       	push	r15
    a146:	0f 93       	push	r16
    a148:	1f 93       	push	r17
    a14a:	cf 93       	push	r28
    a14c:	df 93       	push	r29
    a14e:	cd b7       	in	r28, 0x3d	; 61
    a150:	de b7       	in	r29, 0x3e	; 62
    a152:	6d 97       	sbiw	r28, 0x1d	; 29
    a154:	0f b6       	in	r0, 0x3f	; 63
    a156:	f8 94       	cli
    a158:	de bf       	out	0x3e, r29	; 62
    a15a:	0f be       	out	0x3f, r0	; 63
    a15c:	cd bf       	out	0x3d, r28	; 61
    a15e:	9d 8f       	std	Y+29, r25	; 0x1d
    a160:	8c 8f       	std	Y+28, r24	; 0x1c
    a162:	69 8b       	std	Y+17, r22	; 0x11

	uint8_t ele_stick, ail_stick;
	ele_stick = 1; //ELE_STICK ;
	ail_stick = 3; //AIL_STICK ;
	//===========Swash Ring================
	if (g_model.swashRingValue) {
    a164:	e0 91 39 02 	lds	r30, 0x0239
    a168:	e1 11       	cpse	r30, r1
    a16a:	03 c0       	rjmp	.+6      	; 0xa172 <_Z6perOutPih+0x48>
}

void perOut (int16_t *chanOut, uint8_t att) {
	int16_t trimA[4];
	uint8_t anaCenter = 0;
	uint16_t d = 0;
    a16c:	81 2c       	mov	r8, r1
    a16e:	91 2c       	mov	r9, r1
    a170:	25 c0       	rjmp	.+74     	; 0xa1bc <_Z6perOutPih+0x92>
	uint8_t ele_stick, ail_stick;
	ele_stick = 1; //ELE_STICK ;
	ail_stick = 3; //AIL_STICK ;
	//===========Swash Ring================
	if (g_model.swashRingValue) {
		uint32_t v = (int32_t (calibratedStick[ele_stick]) * calibratedStick[ele_stick]
    a172:	a0 91 c9 0d 	lds	r26, 0x0DC9
    a176:	b0 91 ca 0d 	lds	r27, 0x0DCA
				+ int32_t (calibratedStick[ail_stick]) * calibratedStick[ail_stick]);
    a17a:	40 91 cd 0d 	lds	r20, 0x0DCD
    a17e:	50 91 ce 0d 	lds	r21, 0x0DCE
	uint8_t ele_stick, ail_stick;
	ele_stick = 1; //ELE_STICK ;
	ail_stick = 3; //AIL_STICK ;
	//===========Swash Ring================
	if (g_model.swashRingValue) {
		uint32_t v = (int32_t (calibratedStick[ele_stick]) * calibratedStick[ele_stick]
    a182:	9d 01       	movw	r18, r26
    a184:	0e 94 41 72 	call	0xe482	; 0xe482 <__mulhisi3>
    a188:	6b 01       	movw	r12, r22
    a18a:	7c 01       	movw	r14, r24
				+ int32_t (calibratedStick[ail_stick]) * calibratedStick[ail_stick]);
    a18c:	9a 01       	movw	r18, r20
    a18e:	da 01       	movw	r26, r20
    a190:	0e 94 41 72 	call	0xe482	; 0xe482 <__mulhisi3>
    a194:	c6 0e       	add	r12, r22
    a196:	d7 1e       	adc	r13, r23
    a198:	e8 1e       	adc	r14, r24
    a19a:	f9 1e       	adc	r15, r25
		uint32_t q = calc100toRESX (g_model.swashRingValue);
    a19c:	8e 2f       	mov	r24, r30
    a19e:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <_Z13calc100toRESXa>
		q *= q;
    a1a2:	9c 01       	movw	r18, r24
    a1a4:	dc 01       	movw	r26, r24
    a1a6:	0e 94 41 72 	call	0xe482	; 0xe482 <__mulhisi3>
		if (v > q) d = isqrt32 (v);
    a1aa:	6c 15       	cp	r22, r12
    a1ac:	7d 05       	cpc	r23, r13
    a1ae:	8e 05       	cpc	r24, r14
    a1b0:	9f 05       	cpc	r25, r15
    a1b2:	e0 f6       	brcc	.-72     	; 0xa16c <_Z6perOutPih+0x42>
    a1b4:	c7 01       	movw	r24, r14
    a1b6:	b6 01       	movw	r22, r12
    a1b8:	35 dd       	rcall	.-1430   	; 0x9c24 <_Z7isqrt32m>
    a1ba:	4c 01       	movw	r8, r24
	}
	//===========Swash Ring================

#ifdef FIX_MODE
	uint8_t stickIndex = g_eeGeneral.stickMode * 4;
    a1bc:	20 90 26 06 	lds	r2, 0x0626
    a1c0:	22 0c       	add	r2, r2
    a1c2:	22 0c       	add	r2, r2
    a1c4:	23 ee       	ldi	r18, 0xE3	; 227
    a1c6:	35 e0       	ldi	r19, 0x05	; 5
    a1c8:	3a 87       	std	Y+10, r19	; 0x0a
    a1ca:	29 87       	std	Y+9, r18	; 0x09
    a1cc:	be 01       	movw	r22, r28
    a1ce:	6f 5f       	subi	r22, 0xFF	; 255
    a1d0:	7f 4f       	sbci	r23, 0xFF	; 255
    a1d2:	2b 01       	movw	r4, r22
    a1d4:	83 e1       	ldi	r24, 0x13	; 19
    a1d6:	9d e0       	ldi	r25, 0x0D	; 13
    a1d8:	9e 87       	std	Y+14, r25	; 0x0e
    a1da:	8d 87       	std	Y+13, r24	; 0x0d
    a1dc:	e1 2c       	mov	r14, r1
    a1de:	f1 2c       	mov	r15, r1
void perOut (int16_t *chanOut, uint8_t att) {
	int16_t trimA[4];
	uint8_t anaCenter = 0;
	uint16_t d = 0;
	int16_t trainerThrottleValue = 0;
	uint8_t trainerThrottleValid = 0;
    a1e0:	19 8e       	std	Y+25, r1	; 0x19

void perOut (int16_t *chanOut, uint8_t att) {
	int16_t trimA[4];
	uint8_t anaCenter = 0;
	uint16_t d = 0;
	int16_t trainerThrottleValue = 0;
    a1e2:	1b 8e       	std	Y+27, r1	; 0x1b
    a1e4:	1a 8e       	std	Y+26, r1	; 0x1a

}

void perOut (int16_t *chanOut, uint8_t att) {
	int16_t trimA[4];
	uint8_t anaCenter = 0;
    a1e6:	1b 86       	std	Y+11, r1	; 0x0b
		}
#ifdef FIX_MODE
		uint8_t index = i;
		if (i < 4) {
			phyStick[i] = v >> 4;
			index = pgm_read_byte(stickScramble + stickIndex + i);
    a1e8:	31 2c       	mov	r3, r1
    a1ea:	d1 01       	movw	r26, r2
    a1ec:	ac 55       	subi	r26, 0x5C	; 92
    a1ee:	bd 4f       	sbci	r27, 0xFD	; 253
    a1f0:	1d 01       	movw	r2, r26
			}
		}

		if (i < 4) { //only do this for sticks
			//===========Trainer mode================
			if (! (att & NO_TRAINER) && g_model.traineron) {
    a1f2:	b9 89       	ldd	r27, Y+17	; 0x11
    a1f4:	b1 70       	andi	r27, 0x01	; 1
    a1f6:	bc 8b       	std	Y+20, r27	; 0x14
			//===========Swash Ring================
			if (d && (index == ele_stick || index == ail_stick)) v = int32_t (v)
					* calc100toRESX (g_model.swashRingValue) / int32_t (d);
			//===========Swash Ring================

			if (att & FADE_FIRST) {
    a1f8:	e9 89       	ldd	r30, Y+17	; 0x11
    a1fa:	e0 72       	andi	r30, 0x20	; 32
    a1fc:	eb 8b       	std	Y+19, r30	; 0x13
				}
			}

			//===========Swash Ring================
			if (d && (index == ele_stick || index == ail_stick)) v = int32_t (v)
					* calc100toRESX (g_model.swashRingValue) / int32_t (d);
    a1fe:	b4 01       	movw	r22, r8
    a200:	80 e0       	ldi	r24, 0x00	; 0
    a202:	90 e0       	ldi	r25, 0x00	; 0
    a204:	6d 8b       	std	Y+21, r22	; 0x15
    a206:	7e 8b       	std	Y+22, r23	; 0x16
    a208:	8f 8b       	std	Y+23, r24	; 0x17
    a20a:	98 8f       	std	Y+24, r25	; 0x18
			Output.anas[index] = v; //set values for mixer
#else
					Output.anas[i] = v; //set values for mixer
#endif
		}
		if (att & NO_INPUT) { //zero input for setStickCenter()
    a20c:	79 89       	ldd	r23, Y+17	; 0x11
    a20e:	72 70       	andi	r23, 0x02	; 2
    a210:	7a 8b       	std	Y+18, r23	; 0x12
    a212:	6e 2c       	mov	r6, r14
#endif
	for (uint8_t i = 0; i < 7; i++) {        // calc Sticks

		//Normalization  [0..2048] ->   [-1024..1024]

		int16_t v = anaIn (i);
    a214:	8e 2d       	mov	r24, r14
    a216:	0e 94 b8 14 	call	0x2970	; 0x2970 <_Z5anaInh>
#ifndef SIMU
		v -= g_eeGeneral.calibMid[i];
    a21a:	a9 85       	ldd	r26, Y+9	; 0x09
    a21c:	ba 85       	ldd	r27, Y+10	; 0x0a
    a21e:	2d 91       	ld	r18, X+
    a220:	3d 91       	ld	r19, X+
    a222:	ba 87       	std	Y+10, r27	; 0x0a
    a224:	a9 87       	std	Y+9, r26	; 0x09
    a226:	82 1b       	sub	r24, r18
    a228:	93 0b       	sbc	r25, r19
    a22a:	9c 01       	movw	r18, r24
		v = v * (int32_t) RESX
    a22c:	bc 01       	movw	r22, r24
    a22e:	88 27       	eor	r24, r24
    a230:	77 fd       	sbrc	r23, 7
    a232:	80 95       	com	r24
    a234:	98 2f       	mov	r25, r24
    a236:	ea e0       	ldi	r30, 0x0A	; 10
    a238:	66 0f       	add	r22, r22
    a23a:	77 1f       	adc	r23, r23
    a23c:	88 1f       	adc	r24, r24
    a23e:	99 1f       	adc	r25, r25
    a240:	ea 95       	dec	r30
    a242:	d1 f7       	brne	.-12     	; 0xa238 <_Z6perOutPih+0x10e>
				/ (max ((int16_t) 100,
						(v > 0 ? g_eeGeneral.calibSpanPos[i] : g_eeGeneral.calibSpanNeg[i])));
    a244:	12 16       	cp	r1, r18
    a246:	13 06       	cpc	r1, r19
    a248:	24 f4       	brge	.+8      	; 0xa252 <_Z6perOutPih+0x128>
    a24a:	fd 01       	movw	r30, r26
    a24c:	22 8d       	ldd	r18, Z+26	; 0x1a
    a24e:	33 8d       	ldd	r19, Z+27	; 0x1b
    a250:	04 c0       	rjmp	.+8      	; 0xa25a <_Z6perOutPih+0x130>
    a252:	e9 85       	ldd	r30, Y+9	; 0x09
    a254:	fa 85       	ldd	r31, Y+10	; 0x0a
    a256:	24 85       	ldd	r18, Z+12	; 0x0c
    a258:	35 85       	ldd	r19, Z+13	; 0x0d
/// liefert das Maximum der Argumente
template<class t> inline t max(t a, t b){ return a>b?a:b; }
    a25a:	24 36       	cpi	r18, 0x64	; 100
    a25c:	31 05       	cpc	r19, r1
    a25e:	14 f4       	brge	.+4      	; 0xa264 <_Z6perOutPih+0x13a>
    a260:	24 e6       	ldi	r18, 0x64	; 100
    a262:	30 e0       	ldi	r19, 0x00	; 0

		int16_t v = anaIn (i);
#ifndef SIMU
		v -= g_eeGeneral.calibMid[i];
		v = v * (int32_t) RESX
				/ (max ((int16_t) 100,
    a264:	44 27       	eor	r20, r20
    a266:	37 fd       	sbrc	r19, 7
    a268:	40 95       	com	r20
    a26a:	54 2f       	mov	r21, r20
    a26c:	0e 94 1f 72 	call	0xe43e	; 0xe43e <__divmodsi4>
						(v > 0 ? g_eeGeneral.calibSpanPos[i] : g_eeGeneral.calibSpanNeg[i])));
    a270:	89 01       	movw	r16, r18
#endif
		if (v <= -RESX) v = -RESX;
    a272:	21 30       	cpi	r18, 0x01	; 1
    a274:	fc ef       	ldi	r31, 0xFC	; 252
    a276:	3f 07       	cpc	r19, r31
    a278:	3c f0       	brlt	.+14     	; 0xa288 <_Z6perOutPih+0x15e>
		if (v >= RESX) v = RESX;
    a27a:	01 15       	cp	r16, r1
    a27c:	24 e0       	ldi	r18, 0x04	; 4
    a27e:	12 07       	cpc	r17, r18
    a280:	2c f0       	brlt	.+10     	; 0xa28c <_Z6perOutPih+0x162>
    a282:	00 e0       	ldi	r16, 0x00	; 0
    a284:	14 e0       	ldi	r17, 0x04	; 4
    a286:	02 c0       	rjmp	.+4      	; 0xa28c <_Z6perOutPih+0x162>
		v -= g_eeGeneral.calibMid[i];
		v = v * (int32_t) RESX
				/ (max ((int16_t) 100,
						(v > 0 ? g_eeGeneral.calibSpanPos[i] : g_eeGeneral.calibSpanNeg[i])));
#endif
		if (v <= -RESX) v = -RESX;
    a288:	00 e0       	ldi	r16, 0x00	; 0
    a28a:	1c ef       	ldi	r17, 0xFC	; 252
		if (v >= RESX) v = RESX;
		if (g_eeGeneral.throttleReversed) {
    a28c:	80 91 28 06 	lds	r24, 0x0628
    a290:	80 ff       	sbrs	r24, 0
    a292:	11 c0       	rjmp	.+34     	; 0xa2b6 <_Z6perOutPih+0x18c>
			if (i == THR_STICK) {
    a294:	80 91 26 06 	lds	r24, 0x0626
    a298:	81 70       	andi	r24, 0x01	; 1
    a29a:	8f 87       	std	Y+15, r24	; 0x0f
    a29c:	18 8a       	std	Y+16, r1	; 0x10
    a29e:	82 e0       	ldi	r24, 0x02	; 2
    a2a0:	90 e0       	ldi	r25, 0x00	; 0
    a2a2:	6f 85       	ldd	r22, Y+15	; 0x0f
    a2a4:	78 89       	ldd	r23, Y+16	; 0x10
    a2a6:	86 1b       	sub	r24, r22
    a2a8:	97 0b       	sbc	r25, r23
    a2aa:	e8 16       	cp	r14, r24
    a2ac:	f9 06       	cpc	r15, r25
    a2ae:	19 f4       	brne	.+6      	; 0xa2b6 <_Z6perOutPih+0x18c>
				v = -v;
    a2b0:	11 95       	neg	r17
    a2b2:	01 95       	neg	r16
    a2b4:	11 09       	sbc	r17, r1
			}
		}
#ifdef FIX_MODE
		uint8_t index = i;
		if (i < 4) {
    a2b6:	73 e0       	ldi	r23, 0x03	; 3
    a2b8:	76 15       	cp	r23, r6
    a2ba:	78 f0       	brcs	.+30     	; 0xa2da <_Z6perOutPih+0x1b0>
			phyStick[i] = v >> 4;
    a2bc:	c8 01       	movw	r24, r16
    a2be:	54 e0       	ldi	r21, 0x04	; 4
    a2c0:	95 95       	asr	r25
    a2c2:	87 95       	ror	r24
    a2c4:	5a 95       	dec	r21
    a2c6:	e1 f7       	brne	.-8      	; 0xa2c0 <_Z6perOutPih+0x196>
    a2c8:	f7 01       	movw	r30, r14
    a2ca:	eb 52       	subi	r30, 0x2B	; 43
    a2cc:	f2 4f       	sbci	r31, 0xF2	; 242
    a2ce:	80 83       	st	Z, r24
    a2d0:	f1 01       	movw	r30, r2
    a2d2:	ee 0d       	add	r30, r14
    a2d4:	ff 1d       	adc	r31, r15
			index = pgm_read_byte(stickScramble + stickIndex + i);
    a2d6:	74 90       	lpm	r7, Z
    a2d8:	01 c0       	rjmp	.+2      	; 0xa2dc <_Z6perOutPih+0x1b2>
    a2da:	76 2c       	mov	r7, r6
		}
#else
		uint8_t index = i;
#endif
		calibratedStick[index] = v; //for show in expo
    a2dc:	c7 2c       	mov	r12, r7
    a2de:	d1 2c       	mov	r13, r1
    a2e0:	f6 01       	movw	r30, r12
    a2e2:	ee 0f       	add	r30, r30
    a2e4:	ff 1f       	adc	r31, r31
    a2e6:	e9 53       	subi	r30, 0x39	; 57
    a2e8:	f2 4f       	sbci	r31, 0xF2	; 242
    a2ea:	11 83       	std	Z+1, r17	; 0x01
    a2ec:	00 83       	st	Z, r16
		// Filter beep centre
		{
			int8_t t = v / 16;
    a2ee:	c8 01       	movw	r24, r16
    a2f0:	17 fd       	sbrc	r17, 7
    a2f2:	0f 96       	adiw	r24, 0x0f	; 15
    a2f4:	34 e0       	ldi	r19, 0x04	; 4
    a2f6:	95 95       	asr	r25
    a2f8:	87 95       	ror	r24
    a2fa:	3a 95       	dec	r19
    a2fc:	e1 f7       	brne	.-8      	; 0xa2f6 <_Z6perOutPih+0x1cc>
    a2fe:	28 2f       	mov	r18, r24
#ifdef FIX_MODE
			uint8_t mask = 1 << index;
#else
			uint8_t mask = 1<<(CONVERT_MODE((i+1))-1);
#endif
			if (t < 0) {
    a300:	87 fd       	sbrc	r24, 7
				t = -t;		//abs(t)
    a302:	21 95       	neg	r18
			}
			if (t <= 1) {
    a304:	22 30       	cpi	r18, 0x02	; 2
    a306:	8c f4       	brge	.+34     	; 0xa32a <_Z6perOutPih+0x200>
		calibratedStick[index] = v; //for show in expo
		// Filter beep centre
		{
			int8_t t = v / 16;
#ifdef FIX_MODE
			uint8_t mask = 1 << index;
    a308:	81 e0       	ldi	r24, 0x01	; 1
    a30a:	90 e0       	ldi	r25, 0x00	; 0
    a30c:	0c 2c       	mov	r0, r12
    a30e:	01 c0       	rjmp	.+2      	; 0xa312 <_Z6perOutPih+0x1e8>
    a310:	88 0f       	add	r24, r24
    a312:	0a 94       	dec	r0
    a314:	ea f7       	brpl	.-6      	; 0xa310 <_Z6perOutPih+0x1e6>
#endif
			if (t < 0) {
				t = -t;		//abs(t)
			}
			if (t <= 1) {
				anaCenter |= (t == 0) ? mask : bpanaCenter & mask;
    a316:	21 11       	cpse	r18, r1
    a318:	02 c0       	rjmp	.+4      	; 0xa31e <_Z6perOutPih+0x1f4>
    a31a:	98 2f       	mov	r25, r24
    a31c:	03 c0       	rjmp	.+6      	; 0xa324 <_Z6perOutPih+0x1fa>
    a31e:	90 91 2b 0d 	lds	r25, 0x0D2B
    a322:	98 23       	and	r25, r24
    a324:	8b 85       	ldd	r24, Y+11	; 0x0b
    a326:	89 2b       	or	r24, r25
    a328:	8b 87       	std	Y+11, r24	; 0x0b
			}
		}

		if (i < 4) { //only do this for sticks
    a32a:	93 e0       	ldi	r25, 0x03	; 3
    a32c:	96 15       	cp	r25, r6
    a32e:	08 f4       	brcc	.+2      	; 0xa332 <_Z6perOutPih+0x208>
    a330:	8c c0       	rjmp	.+280    	; 0xa44a <_Z6perOutPih+0x320>
			//===========Trainer mode================
			if (! (att & NO_TRAINER) && g_model.traineron) {
    a332:	ac 89       	ldd	r26, Y+20	; 0x14
    a334:	a1 11       	cpse	r26, r1
    a336:	1c c0       	rjmp	.+56     	; 0xa370 <_Z6perOutPih+0x246>
    a338:	80 91 2d 02 	lds	r24, 0x022D
    a33c:	81 ff       	sbrs	r24, 1
    a33e:	18 c0       	rjmp	.+48     	; 0xa370 <_Z6perOutPih+0x246>
				TrainerMix* td = &g_eeGeneral.trainer.mix[index];
    a340:	56 01       	movw	r10, r12
    a342:	aa 0c       	add	r10, r10
    a344:	bb 1c       	adc	r11, r11
    a346:	f5 01       	movw	r30, r10
    a348:	e4 5e       	subi	r30, 0xE4	; 228
    a34a:	f9 4f       	sbci	r31, 0xF9	; 249
    a34c:	5f 01       	movw	r10, r30
				if (td->mode && getSwitch (td->swtch, 1)) {
    a34e:	81 81       	ldd	r24, Z+1	; 0x01
    a350:	80 7c       	andi	r24, 0xC0	; 192
    a352:	71 f0       	breq	.+28     	; 0xa370 <_Z6perOutPih+0x246>
    a354:	80 81       	ld	r24, Z
    a356:	40 e0       	ldi	r20, 0x00	; 0
    a358:	61 e0       	ldi	r22, 0x01	; 1
    a35a:	85 95       	asr	r24
    a35c:	85 95       	asr	r24
    a35e:	85 95       	asr	r24
    a360:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_Z9getSwitchabh>
    a364:	88 23       	and	r24, r24
    a366:	21 f0       	breq	.+8      	; 0xa370 <_Z6perOutPih+0x246>
					if (ppmInValid) {
    a368:	80 91 eb 01 	lds	r24, 0x01EB
    a36c:	81 11       	cpse	r24, r1
    a36e:	19 c0       	rjmp	.+50     	; 0xa3a2 <_Z6perOutPih+0x278>
					}
				}
			}

			//===========Swash Ring================
			if (d && (index == ele_stick || index == ail_stick)) v = int32_t (v)
    a370:	81 14       	cp	r8, r1
    a372:	91 04       	cpc	r9, r1
    a374:	09 f4       	brne	.+2      	; 0xa378 <_Z6perOutPih+0x24e>
    a376:	51 c0       	rjmp	.+162    	; 0xa41a <_Z6perOutPih+0x2f0>
    a378:	87 2d       	mov	r24, r7
    a37a:	8d 7f       	andi	r24, 0xFD	; 253
    a37c:	81 30       	cpi	r24, 0x01	; 1
    a37e:	09 f0       	breq	.+2      	; 0xa382 <_Z6perOutPih+0x258>
    a380:	4c c0       	rjmp	.+152    	; 0xa41a <_Z6perOutPih+0x2f0>
					* calc100toRESX (g_model.swashRingValue) / int32_t (d);
    a382:	80 91 39 02 	lds	r24, 0x0239
    a386:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <_Z13calc100toRESXa>
    a38a:	98 01       	movw	r18, r16
    a38c:	dc 01       	movw	r26, r24
    a38e:	0e 94 41 72 	call	0xe482	; 0xe482 <__mulhisi3>
    a392:	2d 89       	ldd	r18, Y+21	; 0x15
    a394:	3e 89       	ldd	r19, Y+22	; 0x16
    a396:	4f 89       	ldd	r20, Y+23	; 0x17
    a398:	58 8d       	ldd	r21, Y+24	; 0x18
    a39a:	0e 94 1f 72 	call	0xe43e	; 0xe43e <__divmodsi4>
    a39e:	89 01       	movw	r16, r18
    a3a0:	3c c0       	rjmp	.+120    	; 0xa41a <_Z6perOutPih+0x2f0>
			//===========Trainer mode================
			if (! (att & NO_TRAINER) && g_model.traineron) {
				TrainerMix* td = &g_eeGeneral.trainer.mix[index];
				if (td->mode && getSwitch (td->swtch, 1)) {
					if (ppmInValid) {
						uint8_t chStud = td->srcChn;
    a3a2:	d5 01       	movw	r26, r10
    a3a4:	ec 91       	ld	r30, X
    a3a6:	e7 70       	andi	r30, 0x07	; 7
						int16_t vStud = (g_ppmIns[chStud] - g_eeGeneral.trainer.calib[chStud]) /* *2 */;
    a3a8:	f0 e0       	ldi	r31, 0x00	; 0
    a3aa:	df 01       	movw	r26, r30
    a3ac:	aa 0f       	add	r26, r26
    a3ae:	bb 1f       	adc	r27, r27
    a3b0:	a8 5a       	subi	r26, 0xA8	; 168
    a3b2:	be 4f       	sbci	r27, 0xFE	; 254
    a3b4:	ee 0f       	add	r30, r30
    a3b6:	ff 1f       	adc	r31, r31
    a3b8:	ec 5e       	subi	r30, 0xEC	; 236
    a3ba:	f9 4f       	sbci	r31, 0xF9	; 249
    a3bc:	8d 91       	ld	r24, X+
    a3be:	9c 91       	ld	r25, X
    a3c0:	20 81       	ld	r18, Z
    a3c2:	31 81       	ldd	r19, Z+1	; 0x01
						vStud /= 2;		// Only 2, because no *2 above
    a3c4:	82 1b       	sub	r24, r18
    a3c6:	93 0b       	sbc	r25, r19
    a3c8:	97 fd       	sbrc	r25, 7
    a3ca:	01 96       	adiw	r24, 0x01	; 1
    a3cc:	ac 01       	movw	r20, r24
    a3ce:	55 95       	asr	r21
    a3d0:	47 95       	ror	r20
						vStud *= td->studWeight;
    a3d2:	f5 01       	movw	r30, r10
    a3d4:	21 81       	ldd	r18, Z+1	; 0x01
    a3d6:	32 2f       	mov	r19, r18
    a3d8:	33 0f       	add	r19, r19
    a3da:	33 0f       	add	r19, r19
    a3dc:	35 95       	asr	r19
    a3de:	35 95       	asr	r19
    a3e0:	34 03       	mulsu	r19, r20
    a3e2:	c0 01       	movw	r24, r0
    a3e4:	35 9f       	mul	r19, r21
    a3e6:	90 0d       	add	r25, r0
    a3e8:	11 24       	eor	r1, r1
						vStud /= 31;
    a3ea:	6f e1       	ldi	r22, 0x1F	; 31
    a3ec:	70 e0       	ldi	r23, 0x00	; 0
    a3ee:	0e 94 ea 71 	call	0xe3d4	; 0xe3d4 <__divmodhi4>
						vStud *= 4;
    a3f2:	66 0f       	add	r22, r22
    a3f4:	77 1f       	adc	r23, r23
    a3f6:	66 0f       	add	r22, r22
    a3f8:	77 1f       	adc	r23, r23
						switch ((uint8_t) td->mode) {
    a3fa:	22 95       	swap	r18
    a3fc:	26 95       	lsr	r18
    a3fe:	26 95       	lsr	r18
    a400:	23 70       	andi	r18, 0x03	; 3
    a402:	21 30       	cpi	r18, 0x01	; 1
    a404:	09 f0       	breq	.+2      	; 0xa408 <_Z6perOutPih+0x2de>
    a406:	0f c7       	rjmp	.+3614   	; 0xb226 <_Z6perOutPih+0x10fc>
							case 1:
								v += vStud;
    a408:	06 0f       	add	r16, r22
    a40a:	17 1f       	adc	r17, r23
							case 2:
								v = vStud;
								break; // subst-mode
						}
#ifdef FIX_MODE
						if (index == 2)
    a40c:	f2 e0       	ldi	r31, 0x02	; 2
    a40e:	7f 12       	cpse	r7, r31
    a410:	af cf       	rjmp	.-162    	; 0xa370 <_Z6perOutPih+0x246>
#else
								if ( index == THR_STICK )
#endif
								{
							trainerThrottleValue = vStud;
    a412:	7b 8f       	std	Y+27, r23	; 0x1b
    a414:	6a 8f       	std	Y+26, r22	; 0x1a
							trainerThrottleValid = 1;
    a416:	21 e0       	ldi	r18, 0x01	; 1
    a418:	29 8f       	std	Y+25, r18	; 0x19
			//===========Swash Ring================
			if (d && (index == ele_stick || index == ail_stick)) v = int32_t (v)
					* calc100toRESX (g_model.swashRingValue) / int32_t (d);
			//===========Swash Ring================

			if (att & FADE_FIRST) {
    a41a:	3b 89       	ldd	r19, Y+19	; 0x13
    a41c:	33 23       	and	r19, r19
    a41e:	39 f0       	breq	.+14     	; 0xa42e <_Z6perOutPih+0x304>
#ifdef FIX_MODE
				Output.rawSticks[index] = v; //set values for mixer
    a420:	f6 01       	movw	r30, r12
    a422:	ee 0f       	add	r30, r30
    a424:	ff 1f       	adc	r31, r31
    a426:	ed 5d       	subi	r30, 0xDD	; 221
    a428:	f2 4f       	sbci	r31, 0xF2	; 242
    a42a:	11 83       	std	Z+1, r17	; 0x01
    a42c:	00 83       	st	Z, r16
#else
						Output.rawSticks[i] = v; //set values for mixer
#endif
			}
			v = calcExpo (index, v);
    a42e:	b8 01       	movw	r22, r16
    a430:	87 2d       	mov	r24, r7
    a432:	71 dc       	rcall	.-1822   	; 0x9d16 <_Z8calcExpohi>
    a434:	8c 01       	movw	r16, r24
//#endif
//                v = (int16_t)x;
//                if (IS_EXPO_THROTTLE(index)) v -= RESX;

#ifdef PHASES
			trimA[i] = getTrimValue (CurrentPhase, i) * 2;
    a436:	66 2d       	mov	r22, r6
    a438:	80 91 1a 0c 	lds	r24, 0x0C1A
    a43c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <_Z12getTrimValuehh>
    a440:	88 0f       	add	r24, r24
    a442:	99 1f       	adc	r25, r25
    a444:	d2 01       	movw	r26, r4
    a446:	8d 93       	st	X+, r24
    a448:	9c 93       	st	X, r25
#else
			trimA[i] = g_model.trim[i]*2;
#endif
#endif
		}
		if (att & FADE_FIRST) {
    a44a:	bb 89       	ldd	r27, Y+19	; 0x13
    a44c:	bb 23       	and	r27, r27
    a44e:	39 f0       	breq	.+14     	; 0xa45e <_Z6perOutPih+0x334>
#ifdef FIX_MODE
			Output.anas[index] = v; //set values for mixer
    a450:	f6 01       	movw	r30, r12
    a452:	ee 0f       	add	r30, r30
    a454:	ff 1f       	adc	r31, r31
    a456:	e5 50       	subi	r30, 0x05	; 5
    a458:	f3 4f       	sbci	r31, 0xF3	; 243
    a45a:	11 83       	std	Z+1, r17	; 0x01
    a45c:	00 83       	st	Z, r16
#else
					Output.anas[i] = v; //set values for mixer
#endif
		}
		if (att & NO_INPUT) { //zero input for setStickCenter()
    a45e:	ea 89       	ldd	r30, Y+18	; 0x12
    a460:	ee 23       	and	r30, r30
    a462:	c9 f0       	breq	.+50     	; 0xa496 <_Z6perOutPih+0x36c>
			if (i < 4) {
    a464:	f3 e0       	ldi	r31, 0x03	; 3
    a466:	f6 15       	cp	r31, r6
    a468:	b0 f0       	brcs	.+44     	; 0xa496 <_Z6perOutPih+0x36c>
				if (!IS_THROTTLE(index)) {
    a46a:	22 e0       	ldi	r18, 0x02	; 2
    a46c:	72 16       	cp	r7, r18
    a46e:	79 f0       	breq	.+30     	; 0xa48e <_Z6perOutPih+0x364>
					if ( (v > (RESX / 100)) || (v < - (RESX / 100))) {
    a470:	06 5f       	subi	r16, 0xF6	; 246
    a472:	1f 4f       	sbci	r17, 0xFF	; 255
    a474:	05 31       	cpi	r16, 0x15	; 21
    a476:	11 05       	cpc	r17, r1
    a478:	38 f0       	brcs	.+14     	; 0xa488 <_Z6perOutPih+0x35e>
#ifdef FIX_MODE
						Output.anas[index] = 0; //set values for mixer
    a47a:	f6 01       	movw	r30, r12
    a47c:	ee 0f       	add	r30, r30
    a47e:	ff 1f       	adc	r31, r31
    a480:	e5 50       	subi	r30, 0x05	; 5
    a482:	f3 4f       	sbci	r31, 0xF3	; 243
    a484:	11 82       	std	Z+1, r1	; 0x01
    a486:	10 82       	st	Z, r1
#else
								Output.anas[i] = 0;
#endif
					}
					trimA[i] = 0;
    a488:	d2 01       	movw	r26, r4
    a48a:	1d 92       	st	X+, r1
    a48c:	1c 92       	st	X, r1
				}
				Output.anas[i + PPM_BASE] = 0;
    a48e:	ed 85       	ldd	r30, Y+13	; 0x0d
    a490:	fe 85       	ldd	r31, Y+14	; 0x0e
    a492:	11 82       	std	Z+1, r1	; 0x01
    a494:	10 82       	st	Z, r1
    a496:	ff ef       	ldi	r31, 0xFF	; 255
    a498:	ef 1a       	sub	r14, r31
    a49a:	ff 0a       	sbc	r15, r31
    a49c:	2d 85       	ldd	r18, Y+13	; 0x0d
    a49e:	3e 85       	ldd	r19, Y+14	; 0x0e
    a4a0:	2e 5f       	subi	r18, 0xFE	; 254
    a4a2:	3f 4f       	sbci	r19, 0xFF	; 255
    a4a4:	3e 87       	std	Y+14, r19	; 0x0e
    a4a6:	2d 87       	std	Y+13, r18	; 0x0d
    a4a8:	32 e0       	ldi	r19, 0x02	; 2
    a4aa:	43 0e       	add	r4, r19
    a4ac:	51 1c       	adc	r5, r1
	//===========Swash Ring================

#ifdef FIX_MODE
	uint8_t stickIndex = g_eeGeneral.stickMode * 4;
#endif
	for (uint8_t i = 0; i < 7; i++) {        // calc Sticks
    a4ae:	67 e0       	ldi	r22, 0x07	; 7
    a4b0:	e6 16       	cp	r14, r22
    a4b2:	f1 04       	cpc	r15, r1
    a4b4:	09 f0       	breq	.+2      	; 0xa4b8 <_Z6perOutPih+0x38e>
    a4b6:	ad ce       	rjmp	.-678    	; 0xa212 <_Z6perOutPih+0xe8>
			}
		}

	}
	//    if throttle trim -> trim low end
	if (g_model.thrTrim) {
    a4b8:	80 91 32 02 	lds	r24, 0x0232
    a4bc:	80 ff       	sbrs	r24, 0
    a4be:	26 c0       	rjmp	.+76     	; 0xa50c <_Z6perOutPih+0x3e2>
		int8_t ttrim;
#ifdef PHASES
		ttrim = getTrimValue (CurrentPhase, 2);
    a4c0:	62 e0       	ldi	r22, 0x02	; 2
    a4c2:	80 91 1a 0c 	lds	r24, 0x0C1A
    a4c6:	0e 94 70 12 	call	0x24e0	; 0x24e0 <_Z12getTrimValuehh>
    a4ca:	08 2f       	mov	r16, r24
		ttrim = *TrimPtr[2];
#else
		ttrim = g_model.trim[2];
#endif
#endif
		if (g_eeGeneral.throttleReversed) {
    a4cc:	80 91 28 06 	lds	r24, 0x0628
    a4d0:	80 fd       	sbrc	r24, 0
			ttrim = -ttrim;
    a4d2:	01 95       	neg	r16
		}
		trimA[2] = ((int32_t) ttrim + 125) * (RESX - Output.anas[2]) / (RESX);
    a4d4:	20 2f       	mov	r18, r16
    a4d6:	33 27       	eor	r19, r19
    a4d8:	27 fd       	sbrc	r18, 7
    a4da:	30 95       	com	r19
    a4dc:	43 2f       	mov	r20, r19
    a4de:	53 2f       	mov	r21, r19
    a4e0:	23 58       	subi	r18, 0x83	; 131
    a4e2:	3f 4f       	sbci	r19, 0xFF	; 255
    a4e4:	4f 4f       	sbci	r20, 0xFF	; 255
    a4e6:	5f 4f       	sbci	r21, 0xFF	; 255
    a4e8:	a0 e0       	ldi	r26, 0x00	; 0
    a4ea:	b4 e0       	ldi	r27, 0x04	; 4
    a4ec:	80 91 ff 0c 	lds	r24, 0x0CFF
    a4f0:	90 91 00 0d 	lds	r25, 0x0D00
    a4f4:	a8 1b       	sub	r26, r24
    a4f6:	b9 0b       	sbc	r27, r25
    a4f8:	0e 94 66 72 	call	0xe4cc	; 0xe4cc <__mulshisi3>
    a4fc:	20 e0       	ldi	r18, 0x00	; 0
    a4fe:	34 e0       	ldi	r19, 0x04	; 4
    a500:	40 e0       	ldi	r20, 0x00	; 0
    a502:	50 e0       	ldi	r21, 0x00	; 0
    a504:	0e 94 1f 72 	call	0xe43e	; 0xe43e <__divmodsi4>
    a508:	3e 83       	std	Y+6, r19	; 0x06
    a50a:	2d 83       	std	Y+5, r18	; 0x05
	}
	if (att & FADE_FIRST) {
    a50c:	7b 89       	ldd	r23, Y+19	; 0x13
    a50e:	77 23       	and	r23, r23
    a510:	09 f4       	brne	.+2      	; 0xa514 <_Z6perOutPih+0x3ea>
    a512:	ac c1       	rjmp	.+856    	; 0xa86c <_Z6perOutPih+0x742>

		//===========BEEP CENTER================
		anaCenter &= g_model.beepANACenter;
    a514:	10 91 36 02 	lds	r17, 0x0236
    a518:	8b 85       	ldd	r24, Y+11	; 0x0b
    a51a:	18 23       	and	r17, r24
		if ( ( (bpanaCenter ^ anaCenter) & anaCenter)) audioDefevent (AU_POT_STICK_MIDDLE);
    a51c:	80 91 2b 0d 	lds	r24, 0x0D2B
    a520:	80 95       	com	r24
    a522:	81 23       	and	r24, r17
    a524:	19 f0       	breq	.+6      	; 0xa52c <_Z6perOutPih+0x402>
    a526:	88 e1       	ldi	r24, 0x18	; 24
    a528:	0e 94 74 34 	call	0x68e8	; 0x68e8 <_Z13audioDefeventh>
		bpanaCenter = anaCenter;
    a52c:	10 93 2b 0d 	sts	0x0D2B, r17

		Output.anas[MIX_MAX - 1] = RESX;     // MAX
    a530:	80 e0       	ldi	r24, 0x00	; 0
    a532:	94 e0       	ldi	r25, 0x04	; 4
    a534:	90 93 0a 0d 	sts	0x0D0A, r25
    a538:	80 93 09 0d 	sts	0x0D09, r24
		Output.anas[MIX_FULL - 1] = RESX;     // FULL
    a53c:	90 93 0c 0d 	sts	0x0D0C, r25
    a540:	80 93 0b 0d 	sts	0x0D0B, r24
    a544:	28 e5       	ldi	r18, 0x58	; 88
    a546:	31 e0       	ldi	r19, 0x01	; 1
    a548:	e4 e1       	ldi	r30, 0x14	; 20
    a54a:	f6 e0       	ldi	r31, 0x06	; 6
    a54c:	03 e1       	ldi	r16, 0x13	; 19
    a54e:	1d e0       	ldi	r17, 0x0D	; 13
//        Output.anas[MIX_3POS-1] = keyState(SW_ID0) ? -1024 : (keyState(SW_ID1) ? 0 : 1024) ;

//        for(uint8_t i=0;i<4;i++) Output.anas[i+PPM_BASE] = (g_ppmIns[i] - g_eeGeneral.trainer.calib[i])*2; //add ppm channels
//        for(uint8_t i=4;i<NUM_PPM;i++)    Output.anas[i+PPM_BASE]   = g_ppmIns[i]*2; //add ppm channels
		for (uint8_t i = 0; i < NUM_PPM; i++) {
    a550:	60 e0       	ldi	r22, 0x00	; 0
			int16_t x;
			x = g_ppmIns[i];
    a552:	d9 01       	movw	r26, r18
    a554:	8d 91       	ld	r24, X+
    a556:	9d 91       	ld	r25, X+
    a558:	9d 01       	movw	r18, r26
			if (i < 4) x -= g_eeGeneral.trainer.calib[i];  //add ppm channels
    a55a:	64 30       	cpi	r22, 0x04	; 4
    a55c:	20 f4       	brcc	.+8      	; 0xa566 <_Z6perOutPih+0x43c>
    a55e:	40 81       	ld	r20, Z
    a560:	51 81       	ldd	r21, Z+1	; 0x01
    a562:	84 1b       	sub	r24, r20
    a564:	95 0b       	sbc	r25, r21
			Output.anas[i + PPM_BASE] = x * 2;
    a566:	88 0f       	add	r24, r24
    a568:	99 1f       	adc	r25, r25
    a56a:	d8 01       	movw	r26, r16
    a56c:	8d 93       	st	X+, r24
    a56e:	9d 93       	st	X+, r25
    a570:	8d 01       	movw	r16, r26
		Output.anas[MIX_FULL - 1] = RESX;     // FULL
//        Output.anas[MIX_3POS-1] = keyState(SW_ID0) ? -1024 : (keyState(SW_ID1) ? 0 : 1024) ;

//        for(uint8_t i=0;i<4;i++) Output.anas[i+PPM_BASE] = (g_ppmIns[i] - g_eeGeneral.trainer.calib[i])*2; //add ppm channels
//        for(uint8_t i=4;i<NUM_PPM;i++)    Output.anas[i+PPM_BASE]   = g_ppmIns[i]*2; //add ppm channels
		for (uint8_t i = 0; i < NUM_PPM; i++) {
    a572:	6f 5f       	subi	r22, 0xFF	; 255
    a574:	32 96       	adiw	r30, 0x02	; 2
    a576:	68 30       	cpi	r22, 0x08	; 8
    a578:	61 f7       	brne	.-40     	; 0xa552 <_Z6perOutPih+0x428>
//#if GVARS
//        for(uint8_t i=0;i<MAX_GVARS;i++) Output.anas[i+MIX_3POS] = g_model.gvars[i].gvar * 8 ;
//#endif

		//===========Swash Ring================
		if (g_model.swashRingValue) {
    a57a:	e0 91 39 02 	lds	r30, 0x0239
    a57e:	ee 23       	and	r30, r30
    a580:	09 f4       	brne	.+2      	; 0xa584 <_Z6perOutPih+0x45a>
    a582:	46 c0       	rjmp	.+140    	; 0xa610 <_Z6perOutPih+0x4e6>
			uint32_t v = ((int32_t) Output.anas[ele_stick] * Output.anas[ele_stick]
    a584:	a0 91 fd 0c 	lds	r26, 0x0CFD
    a588:	b0 91 fe 0c 	lds	r27, 0x0CFE
					+ (int32_t) Output.anas[ail_stick] * Output.anas[ail_stick]);
    a58c:	40 91 01 0d 	lds	r20, 0x0D01
    a590:	50 91 02 0d 	lds	r21, 0x0D02
//        for(uint8_t i=0;i<MAX_GVARS;i++) Output.anas[i+MIX_3POS] = g_model.gvars[i].gvar * 8 ;
//#endif

		//===========Swash Ring================
		if (g_model.swashRingValue) {
			uint32_t v = ((int32_t) Output.anas[ele_stick] * Output.anas[ele_stick]
    a594:	9d 01       	movw	r18, r26
    a596:	0e 94 41 72 	call	0xe482	; 0xe482 <__mulhisi3>
    a59a:	6b 01       	movw	r12, r22
    a59c:	7c 01       	movw	r14, r24
					+ (int32_t) Output.anas[ail_stick] * Output.anas[ail_stick]);
    a59e:	9a 01       	movw	r18, r20
    a5a0:	da 01       	movw	r26, r20
    a5a2:	0e 94 41 72 	call	0xe482	; 0xe482 <__mulhisi3>
    a5a6:	c6 0e       	add	r12, r22
    a5a8:	d7 1e       	adc	r13, r23
    a5aa:	e8 1e       	adc	r14, r24
    a5ac:	f9 1e       	adc	r15, r25
			int16_t tmp = calc100toRESX (g_model.swashRingValue);
    a5ae:	8e 2f       	mov	r24, r30
    a5b0:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <_Z13calc100toRESXa>
    a5b4:	8c 01       	movw	r16, r24
			uint32_t q;
			q = (int32_t) tmp * tmp;
    a5b6:	9c 01       	movw	r18, r24
    a5b8:	dc 01       	movw	r26, r24
    a5ba:	0e 94 41 72 	call	0xe482	; 0xe482 <__mulhisi3>
			if (v > q) {
    a5be:	6c 15       	cp	r22, r12
    a5c0:	7d 05       	cpc	r23, r13
    a5c2:	8e 05       	cpc	r24, r14
    a5c4:	9f 05       	cpc	r25, r15
    a5c6:	20 f5       	brcc	.+72     	; 0xa610 <_Z6perOutPih+0x4e6>
				uint16_t d = isqrt32 (v);
    a5c8:	c7 01       	movw	r24, r14
    a5ca:	b6 01       	movw	r22, r12
    a5cc:	2b db       	rcall	.-2474   	; 0x9c24 <_Z7isqrt32m>
				Output.anas[ele_stick] = (int32_t) Output.anas[ele_stick] * tmp / ((int32_t) d);
    a5ce:	20 91 fd 0c 	lds	r18, 0x0CFD
    a5d2:	30 91 fe 0c 	lds	r19, 0x0CFE
    a5d6:	6c 01       	movw	r12, r24
    a5d8:	e1 2c       	mov	r14, r1
    a5da:	f1 2c       	mov	r15, r1
    a5dc:	d8 01       	movw	r26, r16
    a5de:	0e 94 41 72 	call	0xe482	; 0xe482 <__mulhisi3>
    a5e2:	a7 01       	movw	r20, r14
    a5e4:	96 01       	movw	r18, r12
    a5e6:	0e 94 1f 72 	call	0xe43e	; 0xe43e <__divmodsi4>
    a5ea:	30 93 fe 0c 	sts	0x0CFE, r19
    a5ee:	20 93 fd 0c 	sts	0x0CFD, r18
				Output.anas[ail_stick] = (int32_t) Output.anas[ail_stick] * tmp / ((int32_t) d);
    a5f2:	20 91 01 0d 	lds	r18, 0x0D01
    a5f6:	30 91 02 0d 	lds	r19, 0x0D02
    a5fa:	d8 01       	movw	r26, r16
    a5fc:	0e 94 41 72 	call	0xe482	; 0xe482 <__mulhisi3>
    a600:	a7 01       	movw	r20, r14
    a602:	96 01       	movw	r18, r12
    a604:	0e 94 1f 72 	call	0xe43e	; 0xe43e <__divmodsi4>
    a608:	30 93 02 0d 	sts	0x0D02, r19
    a60c:	20 93 01 0d 	sts	0x0D01, r18
//#define REZ_SWASH_X(x)  ((x) - (x)/8 - (x)/128 - (x)/512)   //  1024*sin(60) ~= 886
// Correction sin(60) * 1024 = 886.8 so 887 is closer
#define REZ_SWASH_X(x)  ((x) - (x)/8 - (x)/128 - (x)/1024 )   //  1024*sin(60) ~= 887
#define REZ_SWASH_Y(x)  ((x))   //  1024 => 1024

		if (g_model.swashType) {
    a610:	60 91 37 02 	lds	r22, 0x0237
    a614:	86 2f       	mov	r24, r22
    a616:	80 7e       	andi	r24, 0xE0	; 224
    a618:	09 f4       	brne	.+2      	; 0xa61c <_Z6perOutPih+0x4f2>
    a61a:	dd c0       	rjmp	.+442    	; 0xa7d6 <_Z6perOutPih+0x6ac>
			int16_t vp = 0;
			int16_t vr = 0;

			if (! (att & NO_INPUT))  //zero input for setStickCenter()
    a61c:	ba 89       	ldd	r27, Y+18	; 0x12
    a61e:	b1 11       	cpse	r27, r1
    a620:	11 c0       	rjmp	.+34     	; 0xa644 <_Z6perOutPih+0x51a>
			{
				vp += Output.anas[ele_stick] + trimA[ele_stick];
    a622:	20 91 fd 0c 	lds	r18, 0x0CFD
    a626:	30 91 fe 0c 	lds	r19, 0x0CFE
    a62a:	8b 81       	ldd	r24, Y+3	; 0x03
    a62c:	9c 81       	ldd	r25, Y+4	; 0x04
    a62e:	28 0f       	add	r18, r24
    a630:	39 1f       	adc	r19, r25
				vr += Output.anas[ail_stick] + trimA[ail_stick];
    a632:	80 91 01 0d 	lds	r24, 0x0D01
    a636:	90 91 02 0d 	lds	r25, 0x0D02
    a63a:	4f 81       	ldd	r20, Y+7	; 0x07
    a63c:	58 85       	ldd	r21, Y+8	; 0x08
    a63e:	84 0f       	add	r24, r20
    a640:	95 1f       	adc	r25, r21
    a642:	04 c0       	rjmp	.+8      	; 0xa64c <_Z6perOutPih+0x522>
#define REZ_SWASH_X(x)  ((x) - (x)/8 - (x)/128 - (x)/1024 )   //  1024*sin(60) ~= 887
#define REZ_SWASH_Y(x)  ((x))   //  1024 => 1024

		if (g_model.swashType) {
			int16_t vp = 0;
			int16_t vr = 0;
    a644:	80 e0       	ldi	r24, 0x00	; 0
    a646:	90 e0       	ldi	r25, 0x00	; 0
// Correction sin(60) * 1024 = 886.8 so 887 is closer
#define REZ_SWASH_X(x)  ((x) - (x)/8 - (x)/128 - (x)/1024 )   //  1024*sin(60) ~= 887
#define REZ_SWASH_Y(x)  ((x))   //  1024 => 1024

		if (g_model.swashType) {
			int16_t vp = 0;
    a648:	20 e0       	ldi	r18, 0x00	; 0
    a64a:	30 e0       	ldi	r19, 0x00	; 0
				vr += Output.anas[ail_stick] + trimA[ail_stick];
			}

			int16_t vc = 0;
			int16_t *panas = Output.anas;
			FORCE_INDIRECT(panas);
    a64c:	eb ef       	ldi	r30, 0xFB	; 251
    a64e:	fc e0       	ldi	r31, 0x0C	; 12

			if (g_model.swashCollectiveSource) {
    a650:	40 91 38 02 	lds	r20, 0x0238
    a654:	44 23       	and	r20, r20
    a656:	79 f0       	breq	.+30     	; 0xa676 <_Z6perOutPih+0x54c>
				uint8_t k = g_model.swashCollectiveSource - 1;
    a658:	41 50       	subi	r20, 0x01	; 1
    a65a:	a4 2f       	mov	r26, r20
    a65c:	b0 e0       	ldi	r27, 0x00	; 0
				if (k < CHOUT_BASE) {
					vc = panas[k];
    a65e:	aa 0f       	add	r26, r26
    a660:	bb 1f       	adc	r27, r27
			int16_t *panas = Output.anas;
			FORCE_INDIRECT(panas);

			if (g_model.swashCollectiveSource) {
				uint8_t k = g_model.swashCollectiveSource - 1;
				if (k < CHOUT_BASE) {
    a662:	44 31       	cpi	r20, 0x14	; 20
    a664:	18 f4       	brcc	.+6      	; 0xa66c <_Z6perOutPih+0x542>
					vc = panas[k];
    a666:	ae 0f       	add	r26, r30
    a668:	bf 1f       	adc	r27, r31
    a66a:	02 c0       	rjmp	.+4      	; 0xa670 <_Z6perOutPih+0x546>
				} else {
					vc = ex_chans[k - CHOUT_BASE];
    a66c:	a1 58       	subi	r26, 0x81	; 129
    a66e:	b2 4f       	sbci	r27, 0xF2	; 242
    a670:	4d 91       	ld	r20, X+
    a672:	5c 91       	ld	r21, X
    a674:	02 c0       	rjmp	.+4      	; 0xa67a <_Z6perOutPih+0x550>
			{
				vp += Output.anas[ele_stick] + trimA[ele_stick];
				vr += Output.anas[ail_stick] + trimA[ail_stick];
			}

			int16_t vc = 0;
    a676:	40 e0       	ldi	r20, 0x00	; 0
    a678:	50 e0       	ldi	r21, 0x00	; 0
				} else {
					vc = ex_chans[k - CHOUT_BASE];
				}
			}

			if (g_model.swashInvertELE) vp = -vp;
    a67a:	62 ff       	sbrs	r22, 2
    a67c:	03 c0       	rjmp	.+6      	; 0xa684 <_Z6perOutPih+0x55a>
    a67e:	31 95       	neg	r19
    a680:	21 95       	neg	r18
    a682:	31 09       	sbc	r19, r1
			if (g_model.swashInvertAIL) vr = -vr;
    a684:	63 ff       	sbrs	r22, 3
    a686:	03 c0       	rjmp	.+6      	; 0xa68e <_Z6perOutPih+0x564>
    a688:	91 95       	neg	r25
    a68a:	81 95       	neg	r24
    a68c:	91 09       	sbc	r25, r1
			if (g_model.swashInvertCOL) vc = -vc;
    a68e:	64 ff       	sbrs	r22, 4
    a690:	03 c0       	rjmp	.+6      	; 0xa698 <_Z6perOutPih+0x56e>
    a692:	51 95       	neg	r21
    a694:	41 95       	neg	r20
    a696:	51 09       	sbc	r21, r1

			switch ((uint8_t) g_model.swashType) {
    a698:	62 95       	swap	r22
    a69a:	66 95       	lsr	r22
    a69c:	67 70       	andi	r22, 0x07	; 7
    a69e:	62 30       	cpi	r22, 0x02	; 2
    a6a0:	09 f4       	brne	.+2      	; 0xa6a4 <_Z6perOutPih+0x57a>
    a6a2:	51 c0       	rjmp	.+162    	; 0xa746 <_Z6perOutPih+0x61c>
    a6a4:	18 f4       	brcc	.+6      	; 0xa6ac <_Z6perOutPih+0x582>
    a6a6:	61 30       	cpi	r22, 0x01	; 1
    a6a8:	b1 f0       	breq	.+44     	; 0xa6d6 <_Z6perOutPih+0x5ac>
    a6aa:	95 c0       	rjmp	.+298    	; 0xa7d6 <_Z6perOutPih+0x6ac>
    a6ac:	63 30       	cpi	r22, 0x03	; 3
    a6ae:	09 f4       	brne	.+2      	; 0xa6b2 <_Z6perOutPih+0x588>
    a6b0:	82 c0       	rjmp	.+260    	; 0xa7b6 <_Z6perOutPih+0x68c>
    a6b2:	64 30       	cpi	r22, 0x04	; 4
    a6b4:	09 f0       	breq	.+2      	; 0xa6b8 <_Z6perOutPih+0x58e>
    a6b6:	8f c0       	rjmp	.+286    	; 0xa7d6 <_Z6perOutPih+0x6ac>
					panas[MIX_CYC3 - 1] = vc + vp - vr;
					break;
				case (SWASH_TYPE_90):
					vp = REZ_SWASH_Y(vp);
					vr = REZ_SWASH_Y(vr);
					panas[MIX_CYC1 - 1] = vc - vp;
    a6b8:	ba 01       	movw	r22, r20
    a6ba:	62 1b       	sub	r22, r18
    a6bc:	73 0b       	sbc	r23, r19
    a6be:	73 8b       	std	Z+19, r23	; 0x13
    a6c0:	62 8b       	std	Z+18, r22	; 0x12
					panas[MIX_CYC2 - 1] = vc + vr;
    a6c2:	9a 01       	movw	r18, r20
    a6c4:	28 0f       	add	r18, r24
    a6c6:	39 1f       	adc	r19, r25
    a6c8:	35 8b       	std	Z+21, r19	; 0x15
    a6ca:	24 8b       	std	Z+20, r18	; 0x14
					panas[MIX_CYC3 - 1] = vc - vr;
    a6cc:	48 1b       	sub	r20, r24
    a6ce:	59 0b       	sbc	r21, r25
    a6d0:	57 8b       	std	Z+23, r21	; 0x17
    a6d2:	46 8b       	std	Z+22, r20	; 0x16
					break;
    a6d4:	80 c0       	rjmp	.+256    	; 0xa7d6 <_Z6perOutPih+0x6ac>
			if (g_model.swashInvertCOL) vc = -vc;

			switch ((uint8_t) g_model.swashType) {
				case (SWASH_TYPE_120):
					vp = REZ_SWASH_Y(vp);
					vr = REZ_SWASH_X(vr);
    a6d6:	bc 01       	movw	r22, r24
    a6d8:	97 ff       	sbrs	r25, 7
    a6da:	02 c0       	rjmp	.+4      	; 0xa6e0 <_Z6perOutPih+0x5b6>
    a6dc:	69 5f       	subi	r22, 0xF9	; 249
    a6de:	7f 4f       	sbci	r23, 0xFF	; 255
    a6e0:	03 e0       	ldi	r16, 0x03	; 3
    a6e2:	75 95       	asr	r23
    a6e4:	67 95       	ror	r22
    a6e6:	0a 95       	dec	r16
    a6e8:	e1 f7       	brne	.-8      	; 0xa6e2 <_Z6perOutPih+0x5b8>
    a6ea:	dc 01       	movw	r26, r24
    a6ec:	a6 1b       	sub	r26, r22
    a6ee:	b7 0b       	sbc	r27, r23
    a6f0:	bc 01       	movw	r22, r24
    a6f2:	97 ff       	sbrs	r25, 7
    a6f4:	02 c0       	rjmp	.+4      	; 0xa6fa <_Z6perOutPih+0x5d0>
    a6f6:	61 58       	subi	r22, 0x81	; 129
    a6f8:	7f 4f       	sbci	r23, 0xFF	; 255
    a6fa:	66 0f       	add	r22, r22
    a6fc:	67 2f       	mov	r22, r23
    a6fe:	66 1f       	adc	r22, r22
    a700:	77 0b       	sbc	r23, r23
    a702:	a6 1b       	sub	r26, r22
    a704:	b7 0b       	sbc	r27, r23
    a706:	97 ff       	sbrs	r25, 7
    a708:	02 c0       	rjmp	.+4      	; 0xa70e <_Z6perOutPih+0x5e4>
    a70a:	81 50       	subi	r24, 0x01	; 1
    a70c:	9c 4f       	sbci	r25, 0xFC	; 252
    a70e:	89 2f       	mov	r24, r25
    a710:	99 0f       	add	r25, r25
    a712:	99 0b       	sbc	r25, r25
    a714:	85 95       	asr	r24
    a716:	85 95       	asr	r24
    a718:	a8 1b       	sub	r26, r24
    a71a:	b9 0b       	sbc	r27, r25
					panas[MIX_CYC1 - 1] = vc - vp;
    a71c:	ca 01       	movw	r24, r20
    a71e:	82 1b       	sub	r24, r18
    a720:	93 0b       	sbc	r25, r19
    a722:	93 8b       	std	Z+19, r25	; 0x13
    a724:	82 8b       	std	Z+18, r24	; 0x12
					panas[MIX_CYC2 - 1] = vc + vp / 2 + vr;
    a726:	37 ff       	sbrs	r19, 7
    a728:	02 c0       	rjmp	.+4      	; 0xa72e <_Z6perOutPih+0x604>
    a72a:	2f 5f       	subi	r18, 0xFF	; 255
    a72c:	3f 4f       	sbci	r19, 0xFF	; 255
    a72e:	35 95       	asr	r19
    a730:	27 95       	ror	r18
    a732:	24 0f       	add	r18, r20
    a734:	35 1f       	adc	r19, r21
    a736:	c9 01       	movw	r24, r18
    a738:	8a 0f       	add	r24, r26
    a73a:	9b 1f       	adc	r25, r27
    a73c:	95 8b       	std	Z+21, r25	; 0x15
    a73e:	84 8b       	std	Z+20, r24	; 0x14
					panas[MIX_CYC3 - 1] = vc + vp / 2 - vr;
    a740:	2a 1b       	sub	r18, r26
    a742:	3b 0b       	sbc	r19, r27
    a744:	46 c0       	rjmp	.+140    	; 0xa7d2 <_Z6perOutPih+0x6a8>
					break;
				case (SWASH_TYPE_120X):
					vp = REZ_SWASH_X(vp);
    a746:	b9 01       	movw	r22, r18
    a748:	37 ff       	sbrs	r19, 7
    a74a:	02 c0       	rjmp	.+4      	; 0xa750 <_Z6perOutPih+0x626>
    a74c:	69 5f       	subi	r22, 0xF9	; 249
    a74e:	7f 4f       	sbci	r23, 0xFF	; 255
    a750:	03 e0       	ldi	r16, 0x03	; 3
    a752:	75 95       	asr	r23
    a754:	67 95       	ror	r22
    a756:	0a 95       	dec	r16
    a758:	e1 f7       	brne	.-8      	; 0xa752 <_Z6perOutPih+0x628>
    a75a:	d9 01       	movw	r26, r18
    a75c:	a6 1b       	sub	r26, r22
    a75e:	b7 0b       	sbc	r27, r23
    a760:	b9 01       	movw	r22, r18
    a762:	37 ff       	sbrs	r19, 7
    a764:	02 c0       	rjmp	.+4      	; 0xa76a <_Z6perOutPih+0x640>
    a766:	61 58       	subi	r22, 0x81	; 129
    a768:	7f 4f       	sbci	r23, 0xFF	; 255
    a76a:	66 0f       	add	r22, r22
    a76c:	67 2f       	mov	r22, r23
    a76e:	66 1f       	adc	r22, r22
    a770:	77 0b       	sbc	r23, r23
    a772:	a6 1b       	sub	r26, r22
    a774:	b7 0b       	sbc	r27, r23
    a776:	37 ff       	sbrs	r19, 7
    a778:	02 c0       	rjmp	.+4      	; 0xa77e <_Z6perOutPih+0x654>
    a77a:	21 50       	subi	r18, 0x01	; 1
    a77c:	3c 4f       	sbci	r19, 0xFC	; 252
    a77e:	23 2f       	mov	r18, r19
    a780:	33 0f       	add	r19, r19
    a782:	33 0b       	sbc	r19, r19
    a784:	25 95       	asr	r18
    a786:	25 95       	asr	r18
    a788:	a2 1b       	sub	r26, r18
    a78a:	b3 0b       	sbc	r27, r19
					vr = REZ_SWASH_Y(vr);
					panas[MIX_CYC1 - 1] = vc - vr;
    a78c:	9a 01       	movw	r18, r20
    a78e:	28 1b       	sub	r18, r24
    a790:	39 0b       	sbc	r19, r25
    a792:	33 8b       	std	Z+19, r19	; 0x13
    a794:	22 8b       	std	Z+18, r18	; 0x12
					panas[MIX_CYC2 - 1] = vc + vr / 2 + vp;
    a796:	97 fd       	sbrc	r25, 7
    a798:	01 96       	adiw	r24, 0x01	; 1
    a79a:	95 95       	asr	r25
    a79c:	87 95       	ror	r24
    a79e:	84 0f       	add	r24, r20
    a7a0:	95 1f       	adc	r25, r21
    a7a2:	9c 01       	movw	r18, r24
    a7a4:	2a 0f       	add	r18, r26
    a7a6:	3b 1f       	adc	r19, r27
    a7a8:	35 8b       	std	Z+21, r19	; 0x15
    a7aa:	24 8b       	std	Z+20, r18	; 0x14
					panas[MIX_CYC3 - 1] = vc + vr / 2 - vp;
    a7ac:	8a 1b       	sub	r24, r26
    a7ae:	9b 0b       	sbc	r25, r27
    a7b0:	97 8b       	std	Z+23, r25	; 0x17
    a7b2:	86 8b       	std	Z+22, r24	; 0x16
					break;
    a7b4:	10 c0       	rjmp	.+32     	; 0xa7d6 <_Z6perOutPih+0x6ac>
				case (SWASH_TYPE_140):
					vp = REZ_SWASH_Y(vp);
					vr = REZ_SWASH_Y(vr);
					panas[MIX_CYC1 - 1] = vc - vp;
    a7b6:	ba 01       	movw	r22, r20
    a7b8:	62 1b       	sub	r22, r18
    a7ba:	73 0b       	sbc	r23, r19
    a7bc:	73 8b       	std	Z+19, r23	; 0x13
    a7be:	62 8b       	std	Z+18, r22	; 0x12
					panas[MIX_CYC2 - 1] = vc + vp + vr;
    a7c0:	24 0f       	add	r18, r20
    a7c2:	35 1f       	adc	r19, r21
    a7c4:	a9 01       	movw	r20, r18
    a7c6:	48 0f       	add	r20, r24
    a7c8:	59 1f       	adc	r21, r25
    a7ca:	55 8b       	std	Z+21, r21	; 0x15
    a7cc:	44 8b       	std	Z+20, r20	; 0x14
					panas[MIX_CYC3 - 1] = vc + vp - vr;
    a7ce:	28 1b       	sub	r18, r24
    a7d0:	39 0b       	sbc	r19, r25
    a7d2:	37 8b       	std	Z+23, r19	; 0x17
    a7d4:	26 8b       	std	Z+22, r18	; 0x16
				default:
					break;
			}
		}

		if (tick10ms) {
    a7d6:	80 91 6b 01 	lds	r24, 0x016B
    a7da:	88 23       	and	r24, r24
    a7dc:	09 f4       	brne	.+2      	; 0xa7e0 <_Z6perOutPih+0x6b6>
    a7de:	46 c0       	rjmp	.+140    	; 0xa86c <_Z6perOutPih+0x742>
		int32_t fade[NUM_CHNOUT];
} Fade;

static void inactivityCheck () {
	struct t_inactivity *PtrInactivity = &Inactivity;
	FORCE_INDIRECT(PtrInactivity);
    a7e0:	0c e2       	ldi	r16, 0x2C	; 44
    a7e2:	1d e0       	ldi	r17, 0x0D	; 13
    a7e4:	d8 01       	movw	r26, r16
    a7e6:	8d 01       	movw	r16, r26

	if (s_noHi) s_noHi--;
    a7e8:	80 91 a3 0d 	lds	r24, 0x0DA3
    a7ec:	88 23       	and	r24, r24
    a7ee:	19 f0       	breq	.+6      	; 0xa7f6 <_Z6perOutPih+0x6cc>
    a7f0:	81 50       	subi	r24, 0x01	; 1
    a7f2:	80 93 a3 0d 	sts	0x0DA3, r24
	uint16_t tsum = stickMoveValue ();
    a7f6:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <_Z14stickMoveValuev>
	if (tsum != PtrInactivity->inacSum) {
    a7fa:	f8 01       	movw	r30, r16
    a7fc:	23 81       	ldd	r18, Z+3	; 0x03
    a7fe:	34 81       	ldd	r19, Z+4	; 0x04
    a800:	82 17       	cp	r24, r18
    a802:	93 07       	cpc	r25, r19
    a804:	41 f0       	breq	.+16     	; 0xa816 <_Z6perOutPih+0x6ec>
		PtrInactivity->inacSum = tsum;
    a806:	94 83       	std	Z+4, r25	; 0x04
    a808:	83 83       	std	Z+3, r24	; 0x03
		PtrInactivity->inacCounter = 0;
    a80a:	12 82       	std	Z+2, r1	; 0x02
    a80c:	11 82       	std	Z+1, r1	; 0x01
		stickMoved = 1;  // reset in perMain
    a80e:	81 e0       	ldi	r24, 0x01	; 1
    a810:	80 93 68 01 	sts	0x0168, r24
    a814:	2a c0       	rjmp	.+84     	; 0xa86a <_Z6perOutPih+0x740>
	} else {
		uint8_t timer = g_eeGeneral.inactivityTimer + 10;
    a816:	60 91 27 06 	lds	r22, 0x0627
    a81a:	66 5f       	subi	r22, 0xF6	; 246
		if ( (timer) && (g_vbat100mV > 49)) {
    a81c:	31 f1       	breq	.+76     	; 0xa86a <_Z6perOutPih+0x740>
    a81e:	80 91 6c 01 	lds	r24, 0x016C
    a822:	82 33       	cpi	r24, 0x32	; 50
    a824:	10 f1       	brcs	.+68     	; 0xa86a <_Z6perOutPih+0x740>
			if (++PtrInactivity->inacPrescale > 15) {
    a826:	d8 01       	movw	r26, r16
    a828:	80 81       	ld	r24, Z
    a82a:	8f 5f       	subi	r24, 0xFF	; 255
    a82c:	80 83       	st	Z, r24
    a82e:	80 31       	cpi	r24, 0x10	; 16
    a830:	e0 f0       	brcs	.+56     	; 0xa86a <_Z6perOutPih+0x740>
				PtrInactivity->inacCounter++;
    a832:	f8 01       	movw	r30, r16
    a834:	81 81       	ldd	r24, Z+1	; 0x01
    a836:	92 81       	ldd	r25, Z+2	; 0x02
    a838:	01 96       	adiw	r24, 0x01	; 1
    a83a:	92 83       	std	Z+2, r25	; 0x02
    a83c:	81 83       	std	Z+1, r24	; 0x01
				PtrInactivity->inacPrescale = 0;
    a83e:	1c 92       	st	X, r1
				if (PtrInactivity->inacCounter > (uint16_t) ( (timer) * (100 * 60 / 16))) if ( (PtrInactivity->inacCounter
    a840:	47 e7       	ldi	r20, 0x77	; 119
    a842:	51 e0       	ldi	r21, 0x01	; 1
    a844:	64 9f       	mul	r22, r20
    a846:	90 01       	movw	r18, r0
    a848:	65 9f       	mul	r22, r21
    a84a:	30 0d       	add	r19, r0
    a84c:	11 24       	eor	r1, r1
    a84e:	28 17       	cp	r18, r24
    a850:	39 07       	cpc	r19, r25
    a852:	58 f4       	brcc	.+22     	; 0xa86a <_Z6perOutPih+0x740>
						& 0x1F) == 1) {
    a854:	8f 71       	andi	r24, 0x1F	; 31
    a856:	99 27       	eor	r25, r25
		uint8_t timer = g_eeGeneral.inactivityTimer + 10;
		if ( (timer) && (g_vbat100mV > 49)) {
			if (++PtrInactivity->inacPrescale > 15) {
				PtrInactivity->inacCounter++;
				PtrInactivity->inacPrescale = 0;
				if (PtrInactivity->inacCounter > (uint16_t) ( (timer) * (100 * 60 / 16))) if ( (PtrInactivity->inacCounter
    a858:	01 97       	sbiw	r24, 0x01	; 1
    a85a:	39 f4       	brne	.+14     	; 0xa86a <_Z6perOutPih+0x740>
						& 0x1F) == 1) {
					setVolume (NUM_VOL_LEVELS - 2);		// Nearly full volume
    a85c:	86 e0       	ldi	r24, 0x06	; 6
    a85e:	0e 94 df 13 	call	0x27be	; 0x27be <_Z9setVolumeh>
					audioVoiceDefevent ( AU_INACTIVITY, V_INACTIVE);
    a862:	6d e2       	ldi	r22, 0x2D	; 45
    a864:	80 e1       	ldi	r24, 0x10	; 16
    a866:	0e 94 7e 34 	call	0x68fc	; 0x68fc <_Z18audioVoiceDefeventhh>
			}
		}

		if (tick10ms) {
			inactivityCheck ();
			trace (); //trace thr 0..32  (/32)
    a86a:	8e d9       	rcall	.-3300   	; 0x9b88 <_Z5tracev>
		}
	}
	memset (chans, 0, sizeof (chans));        // All outputs to 0
    a86c:	80 e4       	ldi	r24, 0x40	; 64
    a86e:	e1 e3       	ldi	r30, 0x31	; 49
    a870:	fd e0       	ldi	r31, 0x0D	; 13
    a872:	df 01       	movw	r26, r30
    a874:	1d 92       	st	X+, r1
    a876:	8a 95       	dec	r24
    a878:	e9 f7       	brne	.-6      	; 0xa874 <_Z6perOutPih+0x74a>
    a87a:	eb e5       	ldi	r30, 0x5B	; 91
    a87c:	fc e0       	ldi	r31, 0x0C	; 12
    a87e:	fa 87       	std	Y+10, r31	; 0x0a
    a880:	e9 87       	std	Y+9, r30	; 0x09
    a882:	2b e1       	ldi	r18, 0x1B	; 27
    a884:	3c e0       	ldi	r19, 0x0C	; 12
    a886:	38 8b       	std	Y+16, r19	; 0x10
    a888:	2f 87       	std	Y+15, r18	; 0x0f
    a88a:	6b ed       	ldi	r22, 0xDB	; 219
    a88c:	7c e0       	ldi	r23, 0x0C	; 12
    a88e:	7c 87       	std	Y+12, r23	; 0x0c
    a890:	6b 87       	std	Y+11, r22	; 0x0b
	p[1] = &g_model.trim[1];
	p[2] = &g_model.trim[2];
	p[3] = &g_model.trim[3];
#endif

	for (uint8_t i = 0; i < MAX_MIXERS; i++) {
    a892:	1d 86       	std	Y+13, r1	; 0x0d
			trace (); //trace thr 0..32  (/32)
		}
	}
	memset (chans, 0, sizeof (chans));        // All outputs to 0

	uint8_t mixWarning = 0;
    a894:	21 2c       	mov	r2, r1
	p[2] = &g_model.trim[2];
	p[3] = &g_model.trim[3];
#endif

	for (uint8_t i = 0; i < MAX_MIXERS; i++) {
		MixData *md = mixaddress (i);
    a896:	8d 85       	ldd	r24, Y+13	; 0x0d
    a898:	0e 94 87 10 	call	0x210e	; 0x210e <_Z10mixaddressh>
    a89c:	7c 01       	movw	r14, r24
#if GVARS
		int8_t mixweight = REG100_100 (md->weight);
    a89e:	fc 01       	movw	r30, r24
    a8a0:	82 81       	ldd	r24, Z+2	; 0x02
    a8a2:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <_Z10REG100_100a>
    a8a6:	38 2e       	mov	r3, r24
#endif

		if ( (md->destCh == 0) || (md->destCh > NUM_CHNOUT)) break;
    a8a8:	d7 01       	movw	r26, r14
    a8aa:	8c 91       	ld	r24, X
    a8ac:	81 50       	subi	r24, 0x01	; 1
    a8ae:	80 31       	cpi	r24, 0x10	; 16
    a8b0:	08 f0       	brcs	.+2      	; 0xa8b4 <_Z6perOutPih+0x78a>
    a8b2:	1d c3       	rjmp	.+1594   	; 0xaeee <_Z6perOutPih+0xdc4>

		//Notice 0 = NC switch means not used -> always on line
		int16_t v = 0;
		uint8_t swTog;
		uint8_t swon = Output.swOn[i];
    a8b4:	eb 85       	ldd	r30, Y+11	; 0x0b
    a8b6:	fc 85       	ldd	r31, Y+12	; 0x0c
    a8b8:	d0 80       	ld	r13, Z

		bool t_switch = getSwitch (md->swtch, 1);
    a8ba:	40 e0       	ldi	r20, 0x00	; 0
    a8bc:	61 e0       	ldi	r22, 0x01	; 1
    a8be:	f7 01       	movw	r30, r14
    a8c0:	83 81       	ldd	r24, Z+3	; 0x03
    a8c2:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_Z9getSwitchabh>
		if (md->swtch && (md->srcRaw >= PPM_BASE) && (md->srcRaw < PPM_BASE + NUM_PPM)
    a8c6:	f7 01       	movw	r30, r14
    a8c8:	93 81       	ldd	r25, Z+3	; 0x03
    a8ca:	11 81       	ldd	r17, Z+1	; 0x01
    a8cc:	99 23       	and	r25, r25
    a8ce:	41 f0       	breq	.+16     	; 0xa8e0 <_Z6perOutPih+0x7b6>
    a8d0:	94 ef       	ldi	r25, 0xF4	; 244
    a8d2:	91 0f       	add	r25, r17
    a8d4:	98 30       	cpi	r25, 0x08	; 8
    a8d6:	20 f4       	brcc	.+8      	; 0xa8e0 <_Z6perOutPih+0x7b6>
				&& (ppmInValid == 0)) {
    a8d8:	90 91 eb 01 	lds	r25, 0x01EB
    a8dc:	99 23       	and	r25, r25
    a8de:	79 f0       	breq	.+30     	; 0xa8fe <_Z6perOutPih+0x7d4>
			// then treat switch as false ???
			t_switch = 0;
		}

		if (t_switch) {
    a8e0:	88 23       	and	r24, r24
    a8e2:	69 f0       	breq	.+26     	; 0xa8fe <_Z6perOutPih+0x7d4>
			if (md->modeControl & (1 << CurrentPhase)) {
    a8e4:	f7 01       	movw	r30, r14
    a8e6:	81 85       	ldd	r24, Z+9	; 0x09
    a8e8:	8f 71       	andi	r24, 0x1F	; 31
    a8ea:	90 e0       	ldi	r25, 0x00	; 0
    a8ec:	00 90 1a 0c 	lds	r0, 0x0C1A
    a8f0:	02 c0       	rjmp	.+4      	; 0xa8f6 <_Z6perOutPih+0x7cc>
    a8f2:	95 95       	asr	r25
    a8f4:	87 95       	ror	r24
    a8f6:	0a 94       	dec	r0
    a8f8:	e2 f7       	brpl	.-8      	; 0xa8f2 <_Z6perOutPih+0x7c8>

		uint8_t k = md->srcRaw;

#define DEL_MULT 256
		//swOn[i]=false;
		if (!t_switch) { // switch on?  if no switch selected => on
    a8fa:	80 ff       	sbrs	r24, 0
    a8fc:	34 c0       	rjmp	.+104    	; 0xa966 <_Z6perOutPih+0x83c>
			swTog = swon;
			Output.swOn[i] = swon = false;	// In case we do a "continue" just below
    a8fe:	ab 85       	ldd	r26, Y+11	; 0x0b
    a900:	bc 85       	ldd	r27, Y+12	; 0x0c
    a902:	1c 92       	st	X, r1
			if (k == MIX_3POS + MAX_GVARS + 1)	// "THIS"
    a904:	1d 32       	cpi	r17, 0x2D	; 45
    a906:	e9 f4       	brne	.+58     	; 0xa942 <_Z6perOutPih+0x818>
					{
				int32_t temp = chans[md->destCh - 1] * ((int32_t) DEL_MULT * 256 / 100);
    a908:	f7 01       	movw	r30, r14
    a90a:	a0 81       	ld	r26, Z
    a90c:	f4 e0       	ldi	r31, 0x04	; 4
    a90e:	af 9f       	mul	r26, r31
    a910:	d0 01       	movw	r26, r0
    a912:	11 24       	eor	r1, r1
    a914:	a3 5d       	subi	r26, 0xD3	; 211
    a916:	b2 4f       	sbci	r27, 0xF2	; 242
    a918:	2d 91       	ld	r18, X+
    a91a:	3d 91       	ld	r19, X+
    a91c:	4d 91       	ld	r20, X+
    a91e:	5c 91       	ld	r21, X
    a920:	af e8       	ldi	r26, 0x8F	; 143
    a922:	b2 e0       	ldi	r27, 0x02	; 2
    a924:	0e 94 5c 72 	call	0xe4b8	; 0xe4b8 <__muluhisi3>
				Output.act[i] = temp >> 8;
    a928:	47 2f       	mov	r20, r23
    a92a:	58 2f       	mov	r21, r24
    a92c:	69 2f       	mov	r22, r25
    a92e:	77 27       	eor	r23, r23
    a930:	67 fd       	sbrc	r22, 7
    a932:	7a 95       	dec	r23
    a934:	a9 85       	ldd	r26, Y+9	; 0x09
    a936:	ba 85       	ldd	r27, Y+10	; 0x0a
    a938:	4d 93       	st	X+, r20
    a93a:	5d 93       	st	X+, r21
    a93c:	6d 93       	st	X+, r22
    a93e:	7c 93       	st	X, r23
    a940:	13 97       	sbiw	r26, 0x03	; 3
			}
			if (k != MIX_MAX && k != MIX_FULL) continue;	// if not MAX or FULL - next loop
    a942:	88 ef       	ldi	r24, 0xF8	; 248
    a944:	81 0f       	add	r24, r17
    a946:	82 30       	cpi	r24, 0x02	; 2
    a948:	08 f0       	brcs	.+2      	; 0xa94c <_Z6perOutPih+0x822>
    a94a:	ba c2       	rjmp	.+1396   	; 0xaec0 <_Z6perOutPih+0xd96>
			if (md->mltpx == MLTPX_REP) continue; // if switch is off and REPLACE then off
    a94c:	f7 01       	movw	r30, r14
    a94e:	87 81       	ldd	r24, Z+7	; 0x07
    a950:	86 70       	andi	r24, 0x06	; 6
    a952:	84 30       	cpi	r24, 0x04	; 4
    a954:	09 f4       	brne	.+2      	; 0xa958 <_Z6perOutPih+0x82e>
    a956:	b4 c2       	rjmp	.+1384   	; 0xaec0 <_Z6perOutPih+0xd96>

#define DEL_MULT 256
		//swOn[i]=false;
		if (!t_switch) { // switch on?  if no switch selected => on
			swTog = swon;
			Output.swOn[i] = swon = false;	// In case we do a "continue" just below
    a958:	80 e0       	ldi	r24, 0x00	; 0
				int32_t temp = chans[md->destCh - 1] * ((int32_t) DEL_MULT * 256 / 100);
				Output.act[i] = temp >> 8;
			}
			if (k != MIX_MAX && k != MIX_FULL) continue;	// if not MAX or FULL - next loop
			if (md->mltpx == MLTPX_REP) continue; // if switch is off and REPLACE then off
			v = (k == MIX_FULL ? -RESX : 0); // switch is off and it is either MAX=0 or FULL=-512
    a95a:	19 30       	cpi	r17, 0x09	; 9
    a95c:	09 f0       	breq	.+2      	; 0xa960 <_Z6perOutPih+0x836>
    a95e:	a9 c0       	rjmp	.+338    	; 0xaab2 <_Z6perOutPih+0x988>
    a960:	00 e0       	ldi	r16, 0x00	; 0
    a962:	1c ef       	ldi	r17, 0xFC	; 252
    a964:	aa c0       	rjmp	.+340    	; 0xaaba <_Z6perOutPih+0x990>
		} else {
			swTog = !swon;
    a966:	81 e0       	ldi	r24, 0x01	; 1
    a968:	d1 10       	cpse	r13, r1
    a96a:	80 e0       	ldi	r24, 0x00	; 0
    a96c:	d8 2e       	mov	r13, r24
			swon = true;
			k -= 1;
    a96e:	8f ef       	ldi	r24, 0xFF	; 255
    a970:	81 0f       	add	r24, r17

//            v = Output.anas[k]; //Switch is on. MAX=FULL=512 or value.
			if (k < CHOUT_BASE) {
    a972:	84 31       	cpi	r24, 0x14	; 20
    a974:	b0 f4       	brcc	.+44     	; 0xa9a2 <_Z6perOutPih+0x878>
				v = Output.anas[k]; //Switch is on. MAX=FULL=512 or value.
    a976:	28 2f       	mov	r18, r24
    a978:	30 e0       	ldi	r19, 0x00	; 0
    a97a:	d9 01       	movw	r26, r18
    a97c:	aa 0f       	add	r26, r26
    a97e:	bb 1f       	adc	r27, r27
    a980:	a5 50       	subi	r26, 0x05	; 5
    a982:	b3 4f       	sbci	r27, 0xF3	; 243
    a984:	0d 91       	ld	r16, X+
    a986:	1c 91       	ld	r17, X
				if (k < 4) {
    a988:	84 30       	cpi	r24, 0x04	; 4
    a98a:	08 f0       	brcs	.+2      	; 0xa98e <_Z6perOutPih+0x864>
    a98c:	81 c0       	rjmp	.+258    	; 0xaa90 <_Z6perOutPih+0x966>
					if (md->disableExpoDr) {
    a98e:	f7 01       	movw	r30, r14
    a990:	87 81       	ldd	r24, Z+7	; 0x07
    a992:	86 ff       	sbrs	r24, 6
    a994:	7d c0       	rjmp	.+250    	; 0xaa90 <_Z6perOutPih+0x966>
						v = Output.rawSticks[k]; //Switch is on. MAX=FULL=512 or value.
    a996:	f9 01       	movw	r30, r18
    a998:	ee 0f       	add	r30, r30
    a99a:	ff 1f       	adc	r31, r31
    a99c:	ed 5d       	subi	r30, 0xDD	; 221
    a99e:	f2 4f       	sbci	r31, 0xF2	; 242
    a9a0:	21 c0       	rjmp	.+66     	; 0xa9e4 <_Z6perOutPih+0x8ba>
					}
				}
			} else if (k < CHOUT_BASE + NUM_CHNOUT) {
    a9a2:	84 32       	cpi	r24, 0x24	; 36
    a9a4:	10 f5       	brcc	.+68     	; 0xa9ea <_Z6perOutPih+0x8c0>
				if (md->disableExpoDr) {
    a9a6:	f7 01       	movw	r30, r14
    a9a8:	27 81       	ldd	r18, Z+7	; 0x07
    a9aa:	90 e0       	ldi	r25, 0x00	; 0
    a9ac:	26 ff       	sbrs	r18, 6
    a9ae:	06 c0       	rjmp	.+12     	; 0xa9bc <_Z6perOutPih+0x892>
					v = g_chans512[k - CHOUT_BASE];
    a9b0:	fc 01       	movw	r30, r24
    a9b2:	ee 0f       	add	r30, r30
    a9b4:	ff 1f       	adc	r31, r31
    a9b6:	e9 5a       	subi	r30, 0xA9	; 169
    a9b8:	f2 4f       	sbci	r31, 0xF2	; 242
    a9ba:	14 c0       	rjmp	.+40     	; 0xa9e4 <_Z6perOutPih+0x8ba>
				} else {
					if (k < CHOUT_BASE + md->destCh - 1) {
    a9bc:	20 81       	ld	r18, Z
    a9be:	30 e0       	ldi	r19, 0x00	; 0
    a9c0:	2e 5e       	subi	r18, 0xEE	; 238
    a9c2:	3f 4f       	sbci	r19, 0xFF	; 255
    a9c4:	fc 01       	movw	r30, r24
    a9c6:	74 97       	sbiw	r30, 0x14	; 20
    a9c8:	28 17       	cp	r18, r24
    a9ca:	39 07       	cpc	r19, r25
    a9cc:	3c f0       	brlt	.+14     	; 0xa9dc <_Z6perOutPih+0x8b2>
						v = chans[k - CHOUT_BASE] / 100; // if we've already calculated the value - take it instead // anas[i+CHOUT_BASE] = chans[i]
    a9ce:	ee 0f       	add	r30, r30
    a9d0:	ff 1f       	adc	r31, r31
    a9d2:	ee 0f       	add	r30, r30
    a9d4:	ff 1f       	adc	r31, r31
    a9d6:	ef 5c       	subi	r30, 0xCF	; 207
    a9d8:	f2 4f       	sbci	r31, 0xF2	; 242
    a9da:	3f c0       	rjmp	.+126    	; 0xaa5a <_Z6perOutPih+0x930>
					} else {
						v = ex_chans[k - CHOUT_BASE];
    a9dc:	ee 0f       	add	r30, r30
    a9de:	ff 1f       	adc	r31, r31
    a9e0:	e9 55       	subi	r30, 0x59	; 89
    a9e2:	f2 4f       	sbci	r31, 0xF2	; 242
    a9e4:	00 81       	ld	r16, Z
    a9e6:	11 81       	ldd	r17, Z+1	; 0x01
    a9e8:	53 c0       	rjmp	.+166    	; 0xaa90 <_Z6perOutPih+0x966>
					}
				}
			} else if (k == MIX_3POS - 1) {
    a9ea:	84 32       	cpi	r24, 0x24	; 36
    a9ec:	f1 f4       	brne	.+60     	; 0xaa2a <_Z6perOutPih+0x900>
				uint8_t sw = md->sw23pos;
    a9ee:	f7 01       	movw	r30, r14
    a9f0:	91 85       	ldd	r25, Z+9	; 0x09
    a9f2:	92 95       	swap	r25
    a9f4:	96 95       	lsr	r25
    a9f6:	97 70       	andi	r25, 0x07	; 7
				if (sw) {
    a9f8:	59 f0       	breq	.+22     	; 0xaa10 <_Z6perOutPih+0x8e6>
					sw += SW_ThrCt - KEY_MENU - 1;
    a9fa:	8e e0       	ldi	r24, 0x0E	; 14
    a9fc:	89 0f       	add	r24, r25
					if (sw >= SW_ID0) {
    a9fe:	82 31       	cpi	r24, 0x12	; 18
    aa00:	10 f0       	brcs	.+4      	; 0xaa06 <_Z6perOutPih+0x8dc>
						sw += SW_AileDR - SW_ID0;
    aa02:	81 e1       	ldi	r24, 0x11	; 17
    aa04:	89 0f       	add	r24, r25
					}
					v = keyState ((EnumKeys) sw) ? 1024 : -1024;
    aa06:	0e 94 14 2b 	call	0x5628	; 0x5628 <_Z8keyState8EnumKeys>
    aa0a:	88 23       	and	r24, r24
    aa0c:	e1 f1       	breq	.+120    	; 0xaa86 <_Z6perOutPih+0x95c>
    aa0e:	3e c0       	rjmp	.+124    	; 0xaa8c <_Z6perOutPih+0x962>
				} else {
					v = keyState (SW_ID0) ? -1024 : (keyState (SW_ID1) ? 0 : 1024);
    aa10:	82 e1       	ldi	r24, 0x12	; 18
    aa12:	0e 94 14 2b 	call	0x5628	; 0x5628 <_Z8keyState8EnumKeys>
    aa16:	81 11       	cpse	r24, r1
    aa18:	36 c0       	rjmp	.+108    	; 0xaa86 <_Z6perOutPih+0x95c>
    aa1a:	83 e1       	ldi	r24, 0x13	; 19
    aa1c:	0e 94 14 2b 	call	0x5628	; 0x5628 <_Z8keyState8EnumKeys>
    aa20:	88 23       	and	r24, r24
    aa22:	a1 f1       	breq	.+104    	; 0xaa8c <_Z6perOutPih+0x962>
    aa24:	00 e0       	ldi	r16, 0x00	; 0
    aa26:	10 e0       	ldi	r17, 0x00	; 0
    aa28:	33 c0       	rjmp	.+102    	; 0xaa90 <_Z6perOutPih+0x966>
				}
			} else if (k < MIX_3POS + MAX_GVARS) {
    aa2a:	8c 32       	cpi	r24, 0x2C	; 44
    aa2c:	60 f4       	brcc	.+24     	; 0xaa46 <_Z6perOutPih+0x91c>
				v = g_model.gvars[k - MIX_3POS].gvar * 8;
    aa2e:	e8 2f       	mov	r30, r24
    aa30:	f0 e0       	ldi	r31, 0x00	; 0
    aa32:	ee 0f       	add	r30, r30
    aa34:	ff 1f       	adc	r31, r31
    aa36:	e2 57       	subi	r30, 0x72	; 114
    aa38:	fb 4f       	sbci	r31, 0xFB	; 251
    aa3a:	00 81       	ld	r16, Z
    aa3c:	f8 e0       	ldi	r31, 0x08	; 8
    aa3e:	0f 02       	muls	r16, r31
    aa40:	80 01       	movw	r16, r0
    aa42:	11 24       	eor	r1, r1
    aa44:	25 c0       	rjmp	.+74     	; 0xaa90 <_Z6perOutPih+0x966>
			} else if (k == MIX_3POS + MAX_GVARS)	// "THIS"
    aa46:	8c 32       	cpi	r24, 0x2C	; 44
    aa48:	a1 f4       	brne	.+40     	; 0xaa72 <_Z6perOutPih+0x948>
			{
				v = chans[md->destCh - 1] / 100;
    aa4a:	d7 01       	movw	r26, r14
    aa4c:	ec 91       	ld	r30, X
    aa4e:	b4 e0       	ldi	r27, 0x04	; 4
    aa50:	eb 9f       	mul	r30, r27
    aa52:	f0 01       	movw	r30, r0
    aa54:	11 24       	eor	r1, r1
    aa56:	e3 5d       	subi	r30, 0xD3	; 211
    aa58:	f2 4f       	sbci	r31, 0xF2	; 242
    aa5a:	60 81       	ld	r22, Z
    aa5c:	71 81       	ldd	r23, Z+1	; 0x01
    aa5e:	82 81       	ldd	r24, Z+2	; 0x02
    aa60:	93 81       	ldd	r25, Z+3	; 0x03
    aa62:	24 e6       	ldi	r18, 0x64	; 100
    aa64:	30 e0       	ldi	r19, 0x00	; 0
    aa66:	40 e0       	ldi	r20, 0x00	; 0
    aa68:	50 e0       	ldi	r21, 0x00	; 0
    aa6a:	0e 94 1f 72 	call	0xe43e	; 0xe43e <__divmodsi4>
    aa6e:	89 01       	movw	r16, r18
    aa70:	0f c0       	rjmp	.+30     	; 0xaa90 <_Z6perOutPih+0x966>
			} else {
				v = calc_scaler (k - (MIX_3POS + MAX_GVARS + 1), 0, 0);
    aa72:	40 e0       	ldi	r20, 0x00	; 0
    aa74:	50 e0       	ldi	r21, 0x00	; 0
    aa76:	60 e0       	ldi	r22, 0x00	; 0
    aa78:	70 e0       	ldi	r23, 0x00	; 0
    aa7a:	82 ed       	ldi	r24, 0xD2	; 210
    aa7c:	81 0f       	add	r24, r17
    aa7e:	0e 94 97 36 	call	0x6d2e	; 0x6d2e <_Z11calc_scalerhPhS_>
    aa82:	8c 01       	movw	r16, r24
    aa84:	05 c0       	rjmp	.+10     	; 0xaa90 <_Z6perOutPih+0x966>
					if (sw >= SW_ID0) {
						sw += SW_AileDR - SW_ID0;
					}
					v = keyState ((EnumKeys) sw) ? 1024 : -1024;
				} else {
					v = keyState (SW_ID0) ? -1024 : (keyState (SW_ID1) ? 0 : 1024);
    aa86:	00 e0       	ldi	r16, 0x00	; 0
    aa88:	1c ef       	ldi	r17, 0xFC	; 252
    aa8a:	02 c0       	rjmp	.+4      	; 0xaa90 <_Z6perOutPih+0x966>
    aa8c:	00 e0       	ldi	r16, 0x00	; 0
    aa8e:	14 e0       	ldi	r17, 0x04	; 4
				v = chans[md->destCh - 1] / 100;
			} else {
				v = calc_scaler (k - (MIX_3POS + MAX_GVARS + 1), 0, 0);
			}

			if (md->mixWarn) mixWarning |= 1 << (md->mixWarn - 1); // Mix warning
    aa90:	f7 01       	movw	r30, r14
    aa92:	87 81       	ldd	r24, Z+7	; 0x07
    aa94:	98 2f       	mov	r25, r24
    aa96:	90 73       	andi	r25, 0x30	; 48
    aa98:	79 f0       	breq	.+30     	; 0xaab8 <_Z6perOutPih+0x98e>
    aa9a:	82 95       	swap	r24
    aa9c:	83 70       	andi	r24, 0x03	; 3
    aa9e:	81 50       	subi	r24, 0x01	; 1
    aaa0:	21 e0       	ldi	r18, 0x01	; 1
    aaa2:	30 e0       	ldi	r19, 0x00	; 0
    aaa4:	02 c0       	rjmp	.+4      	; 0xaaaa <_Z6perOutPih+0x980>
    aaa6:	22 0f       	add	r18, r18
    aaa8:	33 1f       	adc	r19, r19
    aaaa:	8a 95       	dec	r24
    aaac:	e2 f7       	brpl	.-8      	; 0xaaa6 <_Z6perOutPih+0x97c>
    aaae:	22 2a       	or	r2, r18
    aab0:	03 c0       	rjmp	.+6      	; 0xaab8 <_Z6perOutPih+0x98e>
				int32_t temp = chans[md->destCh - 1] * ((int32_t) DEL_MULT * 256 / 100);
				Output.act[i] = temp >> 8;
			}
			if (k != MIX_MAX && k != MIX_FULL) continue;	// if not MAX or FULL - next loop
			if (md->mltpx == MLTPX_REP) continue; // if switch is off and REPLACE then off
			v = (k == MIX_FULL ? -RESX : 0); // switch is off and it is either MAX=0 or FULL=-512
    aab2:	00 e0       	ldi	r16, 0x00	; 0
    aab4:	10 e0       	ldi	r17, 0x00	; 0
    aab6:	01 c0       	rjmp	.+2      	; 0xaaba <_Z6perOutPih+0x990>
		} else {
			swTog = !swon;
			swon = true;
    aab8:	81 e0       	ldi	r24, 0x01	; 1
							TrimPtr[md->srcRaw-1] = &md->sOffset; // Use the value stored here for the trim
						}
					}
#endif
		}
		Output.swOn[i] = swon;
    aaba:	ab 85       	ldd	r26, Y+11	; 0x0b
    aabc:	bc 85       	ldd	r27, Y+12	; 0x0c
    aabe:	8c 93       	st	X, r24

		//========== INPUT OFFSET ===============
#ifdef FMODE_TRIM
		if ( ( md->enableFmTrim == 0 ) && ( md->lateOffset == 0 ) )
#else
		if (md->lateOffset == 0)
    aac0:	f7 01       	movw	r30, r14
    aac2:	87 81       	ldd	r24, Z+7	; 0x07
    aac4:	83 fd       	sbrc	r24, 3
    aac6:	0b c0       	rjmp	.+22     	; 0xaade <_Z6perOutPih+0x9b4>
#endif
				{
#if GVARS
			if (md->sOffset) v += calc100toRESX (REG (md->sOffset, -125, 125));
    aac8:	80 85       	ldd	r24, Z+8	; 0x08
    aaca:	88 23       	and	r24, r24
    aacc:	41 f0       	breq	.+16     	; 0xaade <_Z6perOutPih+0x9b4>
    aace:	4d e7       	ldi	r20, 0x7D	; 125
    aad0:	63 e8       	ldi	r22, 0x83	; 131
    aad2:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <_Z3REGaaa>
    aad6:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <_Z13calc100toRESXa>
    aada:	08 0f       	add	r16, r24
    aadc:	19 1f       	adc	r17, r25
			if(md->sOffset) v += calc100toRESX(md->sOffset);
#endif
		}

		//========== DELAY and PAUSE ===============
		if (md->speedUp || md->speedDown || md->delayUp || md->delayDown)  // there are delay values
    aade:	f7 01       	movw	r30, r14
    aae0:	f6 81       	ldd	r31, Z+6	; 0x06
    aae2:	fc 8b       	std	Y+20, r31	; 0x14
    aae4:	f1 11       	cpse	r31, r1
    aae6:	05 c0       	rjmp	.+10     	; 0xaaf2 <_Z6perOutPih+0x9c8>
    aae8:	f7 01       	movw	r30, r14
    aaea:	85 81       	ldd	r24, Z+5	; 0x05
    aaec:	88 23       	and	r24, r24
    aaee:	09 f4       	brne	.+2      	; 0xaaf2 <_Z6perOutPih+0x9c8>
    aaf0:	f0 c0       	rjmp	.+480    	; 0xacd2 <_Z6perOutPih+0xba8>
				{
			uint8_t timing = g_model.mixTime ? 20 : 100;
    aaf2:	80 91 32 02 	lds	r24, 0x0232
    aaf6:	83 ff       	sbrs	r24, 3
    aaf8:	03 c0       	rjmp	.+6      	; 0xab00 <_Z6perOutPih+0x9d6>
    aafa:	f4 e1       	ldi	r31, 0x14	; 20
    aafc:	fa 8b       	std	Y+18, r31	; 0x12
    aafe:	02 c0       	rjmp	.+4      	; 0xab04 <_Z6perOutPih+0x9da>
    ab00:	24 e6       	ldi	r18, 0x64	; 100
    ab02:	2a 8b       	std	Y+18, r18	; 0x12
			uint16_t my_delay = Output.sDelay[i];
    ab04:	af 85       	ldd	r26, Y+15	; 0x0f
    ab06:	b8 89       	ldd	r27, Y+16	; 0x10
    ab08:	ad 90       	ld	r10, X+
    ab0a:	bc 90       	ld	r11, X
			int32_t tact = Output.act[i];
    ab0c:	e9 85       	ldd	r30, Y+9	; 0x09
    ab0e:	fa 85       	ldd	r31, Y+10	; 0x0a
    ab10:	40 80       	ld	r4, Z
    ab12:	51 80       	ldd	r5, Z+1	; 0x01
    ab14:	62 80       	ldd	r6, Z+2	; 0x02
    ab16:	73 80       	ldd	r7, Z+3	; 0x03
#if DEL_MULT == 256
			int16_t diff = v - (tact >> 8);
    ab18:	bb 27       	eor	r27, r27
    ab1a:	77 fc       	sbrc	r7, 7
    ab1c:	ba 95       	dec	r27
    ab1e:	a7 2d       	mov	r26, r7
    ab20:	96 2d       	mov	r25, r6
    ab22:	85 2d       	mov	r24, r5
    ab24:	98 01       	movw	r18, r16
    ab26:	28 1b       	sub	r18, r24
    ab28:	39 0b       	sbc	r19, r25
    ab2a:	c9 01       	movw	r24, r18
#else
			int16_t diff = v-tact/DEL_MULT;
#endif

			if ( (diff > 10) || (diff < -10)) {
    ab2c:	26 5f       	subi	r18, 0xF6	; 246
    ab2e:	3f 4f       	sbci	r19, 0xFF	; 255
    ab30:	25 31       	cpi	r18, 0x15	; 21
    ab32:	31 05       	cpc	r19, r1
    ab34:	38 f0       	brcs	.+14     	; 0xab44 <_Z6perOutPih+0xa1a>
				if (my_delay == 0) {
    ab36:	a1 14       	cp	r10, r1
    ab38:	b1 04       	cpc	r11, r1
    ab3a:	21 f4       	brne	.+8      	; 0xab44 <_Z6perOutPih+0xa1a>
					if (md->delayUp || md->delayDown)  // there are delay values
    ab3c:	f7 01       	movw	r30, r14
    ab3e:	25 81       	ldd	r18, Z+5	; 0x05
    ab40:	21 11       	cpse	r18, r1
    ab42:	04 c0       	rjmp	.+8      	; 0xab4c <_Z6perOutPih+0xa22>
						swTog = 1;
					}
				}
			}

			if (swTog) {
    ab44:	d1 10       	cpse	r13, r1
    ab46:	02 c0       	rjmp	.+4      	; 0xab4c <_Z6perOutPih+0xa22>
				{
			uint8_t timing = g_model.mixTime ? 20 : 100;
			uint16_t my_delay = Output.sDelay[i];
			int32_t tact = Output.act[i];
#if DEL_MULT == 256
			int16_t diff = v - (tact >> 8);
    ab48:	6c 01       	movw	r12, r24
    ab4a:	32 c0       	rjmp	.+100    	; 0xabb0 <_Z6perOutPih+0xa86>

			if (swTog) {
				//need to know which "v" will give "anas".
				//curves(v)*weight/100 -> anas
				// v * weight / 100 = anas => anas*100/weight = v
				if (md->mltpx == MLTPX_REP) {
    ab4c:	f7 01       	movw	r30, r14
    ab4e:	87 81       	ldd	r24, Z+7	; 0x07
    ab50:	86 70       	andi	r24, 0x06	; 6
    ab52:	84 30       	cpi	r24, 0x04	; 4
    ab54:	d1 f4       	brne	.+52     	; 0xab8a <_Z6perOutPih+0xa60>
//                    tact = (int32_t)Output.anas[md->destCh-1+CHOUT_BASE]*DEL_MULT * 100 ;
					tact = (int32_t) ex_chans[md->destCh - 1] * DEL_MULT * 100;
    ab56:	e0 81       	ld	r30, Z
    ab58:	f0 e0       	ldi	r31, 0x00	; 0
    ab5a:	ee 0f       	add	r30, r30
    ab5c:	ff 1f       	adc	r31, r31
    ab5e:	eb 55       	subi	r30, 0x5B	; 91
    ab60:	f2 4f       	sbci	r31, 0xF2	; 242
    ab62:	a0 81       	ld	r26, Z
    ab64:	b1 81       	ldd	r27, Z+1	; 0x01
    ab66:	20 e0       	ldi	r18, 0x00	; 0
    ab68:	34 e6       	ldi	r19, 0x64	; 100
    ab6a:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__usmulhisi3>
    ab6e:	2b 01       	movw	r4, r22
    ab70:	3c 01       	movw	r6, r24
#if GVARS
					if (mixweight) tact /= mixweight;
    ab72:	33 20       	and	r3, r3
    ab74:	51 f0       	breq	.+20     	; 0xab8a <_Z6perOutPih+0xa60>
    ab76:	23 2d       	mov	r18, r3
    ab78:	33 27       	eor	r19, r19
    ab7a:	27 fd       	sbrc	r18, 7
    ab7c:	30 95       	com	r19
    ab7e:	43 2f       	mov	r20, r19
    ab80:	53 2f       	mov	r21, r19
    ab82:	0e 94 1f 72 	call	0xe43e	; 0xe43e <__divmodsi4>
    ab86:	29 01       	movw	r4, r18
    ab88:	3a 01       	movw	r6, r20
#else
					if(md->weight) tact /= md->weight;
#endif
				}
#if DEL_MULT == 256
				diff = v - (tact >> 8);
    ab8a:	bb 27       	eor	r27, r27
    ab8c:	77 fc       	sbrc	r7, 7
    ab8e:	ba 95       	dec	r27
    ab90:	a7 2d       	mov	r26, r7
    ab92:	96 2d       	mov	r25, r6
    ab94:	85 2d       	mov	r24, r5
    ab96:	68 01       	movw	r12, r16
    ab98:	c8 1a       	sub	r12, r24
    ab9a:	d9 0a       	sbc	r13, r25
#else
				diff = v-tact/DEL_MULT;
#endif
				if (diff) my_delay = (diff < 0 ? md->delayUp : md->delayDown) * timing;
    ab9c:	49 f0       	breq	.+18     	; 0xabb0 <_Z6perOutPih+0xa86>
    ab9e:	f7 01       	movw	r30, r14
    aba0:	85 81       	ldd	r24, Z+5	; 0x05
    aba2:	d7 fe       	sbrs	r13, 7
    aba4:	82 95       	swap	r24
    aba6:	8f 70       	andi	r24, 0x0F	; 15
    aba8:	fa 89       	ldd	r31, Y+18	; 0x12
    abaa:	f8 9f       	mul	r31, r24
    abac:	50 01       	movw	r10, r0
    abae:	11 24       	eor	r1, r1
			}

			if (my_delay) { // perform delay
    abb0:	a1 14       	cp	r10, r1
    abb2:	b1 04       	cpc	r11, r1
    abb4:	91 f0       	breq	.+36     	; 0xabda <_Z6perOutPih+0xab0>
				if (tick10ms) {
    abb6:	80 91 6b 01 	lds	r24, 0x016B
    abba:	88 23       	and	r24, r24
    abbc:	31 f0       	breq	.+12     	; 0xabca <_Z6perOutPih+0xaa0>
					my_delay--;
    abbe:	21 e0       	ldi	r18, 0x01	; 1
    abc0:	a2 1a       	sub	r10, r18
    abc2:	b1 08       	sbc	r11, r1
				}
				if (my_delay != 0) { // At end of delay, use new V and diff
    abc4:	a1 14       	cp	r10, r1
    abc6:	b1 04       	cpc	r11, r1
    abc8:	41 f0       	breq	.+16     	; 0xabda <_Z6perOutPih+0xab0>
#if DEL_MULT == 256
					v = tact >> 8;	   // Stay in old position until delay over
    abca:	33 27       	eor	r19, r19
    abcc:	77 fc       	sbrc	r7, 7
    abce:	3a 95       	dec	r19
    abd0:	27 2d       	mov	r18, r7
    abd2:	16 2d       	mov	r17, r6
    abd4:	05 2d       	mov	r16, r5
#else
							v = tact/DEL_MULT;   // Stay in old position until delay over
#endif
					diff = 0;
    abd6:	c1 2c       	mov	r12, r1
    abd8:	d1 2c       	mov	r13, r1
				}
			}

			Output.sDelay[i] = my_delay;
    abda:	af 85       	ldd	r26, Y+15	; 0x0f
    abdc:	b8 89       	ldd	r27, Y+16	; 0x10
    abde:	ad 92       	st	X+, r10
    abe0:	bc 92       	st	X, r11

			if (diff && (md->speedUp || md->speedDown)) {
    abe2:	c1 14       	cp	r12, r1
    abe4:	d1 04       	cpc	r13, r1
    abe6:	09 f4       	brne	.+2      	; 0xabea <_Z6perOutPih+0xac0>
    abe8:	6d c0       	rjmp	.+218    	; 0xacc4 <_Z6perOutPih+0xb9a>
    abea:	48 01       	movw	r8, r16
    abec:	aa 24       	eor	r10, r10
    abee:	97 fc       	sbrc	r9, 7
    abf0:	a0 94       	com	r10
    abf2:	ba 2c       	mov	r11, r10
    abf4:	bc 89       	ldd	r27, Y+20	; 0x14
    abf6:	bb 23       	and	r27, r27
    abf8:	09 f4       	brne	.+2      	; 0xabfc <_Z6perOutPih+0xad2>
    abfa:	60 c0       	rjmp	.+192    	; 0xacbc <_Z6perOutPih+0xb92>
				//rate = steps/sec => 32*1024/100*md->speedUp/Down
				//act[i] += diff>0 ? (32768)/((int16_t)100*md->speedUp) : -(32768)/((int16_t)100*md->speedDown);
				//-100..100 => 32768 ->  100*83886/256 = 32768,   For MAX we divide by 2 sincde it's asymmetrical
				if (tick10ms) {
    abfc:	80 91 6b 01 	lds	r24, 0x016B
    ac00:	88 23       	and	r24, r24
    ac02:	e9 f1       	breq	.+122    	; 0xac7e <_Z6perOutPih+0xb54>
					int32_t rate = (int32_t) DEL_MULT * 2048 * 100;
#if GVARS
					if (mixweight) {
    ac04:	33 20       	and	r3, r3
    ac06:	79 f0       	breq	.+30     	; 0xac26 <_Z6perOutPih+0xafc>
						uint8_t mweight = mixweight;
						if (mixweight < 0) {
							mweight = -mixweight;
    ac08:	23 2d       	mov	r18, r3
    ac0a:	27 fd       	sbrc	r18, 7
    ac0c:	21 95       	neg	r18
						}
						rate /= mweight;
    ac0e:	30 e0       	ldi	r19, 0x00	; 0
    ac10:	40 e0       	ldi	r20, 0x00	; 0
    ac12:	50 e0       	ldi	r21, 0x00	; 0
    ac14:	60 e0       	ldi	r22, 0x00	; 0
    ac16:	70 e0       	ldi	r23, 0x00	; 0
    ac18:	80 e2       	ldi	r24, 0x20	; 32
    ac1a:	93 e0       	ldi	r25, 0x03	; 3
    ac1c:	0e 94 1f 72 	call	0xe43e	; 0xe43e <__divmodsi4>
    ac20:	ca 01       	movw	r24, r20
    ac22:	b9 01       	movw	r22, r18
    ac24:	04 c0       	rjmp	.+8      	; 0xac2e <_Z6perOutPih+0xb04>
			if (diff && (md->speedUp || md->speedDown)) {
				//rate = steps/sec => 32*1024/100*md->speedUp/Down
				//act[i] += diff>0 ? (32768)/((int16_t)100*md->speedUp) : -(32768)/((int16_t)100*md->speedDown);
				//-100..100 => 32768 ->  100*83886/256 = 32768,   For MAX we divide by 2 sincde it's asymmetrical
				if (tick10ms) {
					int32_t rate = (int32_t) DEL_MULT * 2048 * 100;
    ac26:	60 e0       	ldi	r22, 0x00	; 0
    ac28:	70 e0       	ldi	r23, 0x00	; 0
    ac2a:	80 e2       	ldi	r24, 0x20	; 32
    ac2c:	93 e0       	ldi	r25, 0x03	; 3
    ac2e:	f7 01       	movw	r30, r14
    ac30:	26 81       	ldd	r18, Z+6	; 0x06
#else
					if(md->weight) rate /= abs(md->weight);
#endif

					int16_t speed;
					if (diff > 0) {
    ac32:	1c 14       	cp	r1, r12
    ac34:	1d 04       	cpc	r1, r13
    ac36:	44 f0       	brlt	.+16     	; 0xac48 <_Z6perOutPih+0xb1e>
						speed = md->speedUp;
					} else {
						rate = -rate;
    ac38:	90 95       	com	r25
    ac3a:	80 95       	com	r24
    ac3c:	70 95       	com	r23
    ac3e:	61 95       	neg	r22
    ac40:	7f 4f       	sbci	r23, 0xFF	; 255
    ac42:	8f 4f       	sbci	r24, 0xFF	; 255
    ac44:	9f 4f       	sbci	r25, 0xFF	; 255
						speed = md->speedDown;
    ac46:	22 95       	swap	r18
    ac48:	2f 70       	andi	r18, 0x0F	; 15
    ac4a:	30 e0       	ldi	r19, 0x00	; 0
					}
					tact = (speed) ?
							tact + (rate) / ((int16_t) timing * speed) : (int32_t) v * DEL_MULT;
    ac4c:	21 15       	cp	r18, r1
    ac4e:	31 05       	cpc	r19, r1
    ac50:	91 f0       	breq	.+36     	; 0xac76 <_Z6perOutPih+0xb4c>
    ac52:	fa 89       	ldd	r31, Y+18	; 0x12
    ac54:	f2 9f       	mul	r31, r18
    ac56:	a0 01       	movw	r20, r0
    ac58:	f3 9f       	mul	r31, r19
    ac5a:	50 0d       	add	r21, r0
    ac5c:	11 24       	eor	r1, r1
    ac5e:	9a 01       	movw	r18, r20
    ac60:	44 27       	eor	r20, r20
    ac62:	37 fd       	sbrc	r19, 7
    ac64:	40 95       	com	r20
    ac66:	54 2f       	mov	r21, r20
    ac68:	0e 94 1f 72 	call	0xe43e	; 0xe43e <__divmodsi4>
    ac6c:	42 0e       	add	r4, r18
    ac6e:	53 1e       	adc	r5, r19
    ac70:	64 1e       	adc	r6, r20
    ac72:	75 1e       	adc	r7, r21
    ac74:	04 c0       	rjmp	.+8      	; 0xac7e <_Z6perOutPih+0xb54>
    ac76:	44 24       	eor	r4, r4
    ac78:	58 2c       	mov	r5, r8
    ac7a:	69 2c       	mov	r6, r9
    ac7c:	7a 2c       	mov	r7, r10

				}
				{
#if DEL_MULT == 256
					int32_t tmp = tact >> 8;
    ac7e:	bb 27       	eor	r27, r27
    ac80:	77 fc       	sbrc	r7, 7
    ac82:	ba 95       	dec	r27
    ac84:	a7 2d       	mov	r26, r7
    ac86:	96 2d       	mov	r25, r6
    ac88:	85 2d       	mov	r24, r5
#else
					int32_t tmp = tact/DEL_MULT;
#endif
					if ( ( (diff > 0) && (v < tmp)) || ( (diff < 0) && (v > tmp))) tact =
    ac8a:	1c 14       	cp	r1, r12
    ac8c:	1d 04       	cpc	r1, r13
    ac8e:	34 f4       	brge	.+12     	; 0xac9c <_Z6perOutPih+0xb72>
    ac90:	88 16       	cp	r8, r24
    ac92:	99 06       	cpc	r9, r25
    ac94:	aa 06       	cpc	r10, r26
    ac96:	bb 06       	cpc	r11, r27
    ac98:	34 f0       	brlt	.+12     	; 0xaca6 <_Z6perOutPih+0xb7c>
    ac9a:	09 c0       	rjmp	.+18     	; 0xacae <_Z6perOutPih+0xb84>
    ac9c:	88 15       	cp	r24, r8
    ac9e:	99 05       	cpc	r25, r9
    aca0:	aa 05       	cpc	r26, r10
    aca2:	bb 05       	cpc	r27, r11
    aca4:	24 f4       	brge	.+8      	; 0xacae <_Z6perOutPih+0xb84>
							(int32_t) v * DEL_MULT; //deal with overflow
    aca6:	44 24       	eor	r4, r4
    aca8:	58 2c       	mov	r5, r8
    acaa:	69 2c       	mov	r6, r9
    acac:	7a 2c       	mov	r7, r10
				}
#if DEL_MULT == 256
				v = tact >> 8;
    acae:	33 27       	eor	r19, r19
    acb0:	77 fc       	sbrc	r7, 7
    acb2:	3a 95       	dec	r19
    acb4:	27 2d       	mov	r18, r7
    acb6:	16 2d       	mov	r17, r6
    acb8:	05 2d       	mov	r16, r5
    acba:	04 c0       	rjmp	.+8      	; 0xacc4 <_Z6perOutPih+0xb9a>
#else
				v = tact/DEL_MULT;
#endif
			} else if (diff) {
				tact = (int32_t) v * DEL_MULT;
    acbc:	44 24       	eor	r4, r4
    acbe:	58 2c       	mov	r5, r8
    acc0:	69 2c       	mov	r6, r9
    acc2:	7a 2c       	mov	r7, r10
			}
			Output.act[i] = tact;
    acc4:	a9 85       	ldd	r26, Y+9	; 0x09
    acc6:	ba 85       	ldd	r27, Y+10	; 0x0a
    acc8:	4d 92       	st	X+, r4
    acca:	5d 92       	st	X+, r5
    accc:	6d 92       	st	X+, r6
    acce:	7c 92       	st	X, r7
    acd0:	13 97       	sbiw	r26, 0x03	; 3

		}

		//========== CURVES ===============
		if (md->differential) {
    acd2:	f7 01       	movw	r30, r14
    acd4:	87 81       	ldd	r24, Z+7	; 0x07
    acd6:	87 ff       	sbrs	r24, 7
    acd8:	28 c0       	rjmp	.+80     	; 0xad2a <_Z6perOutPih+0xc00>
			//========== DIFFERENTIAL =========
			int16_t curveParam = REG (md->curve, -100, 100);
    acda:	44 e6       	ldi	r20, 0x64	; 100
    acdc:	6c e9       	ldi	r22, 0x9C	; 156
    acde:	84 81       	ldd	r24, Z+4	; 0x04
    ace0:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <_Z3REGaaa>
    ace4:	a8 2f       	mov	r26, r24
    ace6:	bb 27       	eor	r27, r27
    ace8:	a7 fd       	sbrc	r26, 7
    acea:	b0 95       	com	r27
			if (curveParam > 0 && v < 0) v = ((int32_t) v * (100 - curveParam)) / 100;
    acec:	1a 16       	cp	r1, r26
    acee:	1b 06       	cpc	r1, r27
    acf0:	44 f4       	brge	.+16     	; 0xad02 <_Z6perOutPih+0xbd8>
    acf2:	17 ff       	sbrs	r17, 7
    acf4:	76 c0       	rjmp	.+236    	; 0xade2 <_Z6perOutPih+0xcb8>
    acf6:	24 e6       	ldi	r18, 0x64	; 100
    acf8:	30 e0       	ldi	r19, 0x00	; 0
    acfa:	2a 1b       	sub	r18, r26
    acfc:	3b 0b       	sbc	r19, r27
    acfe:	d9 01       	movw	r26, r18
    ad00:	09 c0       	rjmp	.+18     	; 0xad14 <_Z6perOutPih+0xbea>
			else if (curveParam < 0 && v > 0) v = ((int32_t) v * (100 + curveParam)) / 100;
    ad02:	10 97       	sbiw	r26, 0x00	; 0
    ad04:	09 f4       	brne	.+2      	; 0xad08 <_Z6perOutPih+0xbde>
    ad06:	6d c0       	rjmp	.+218    	; 0xade2 <_Z6perOutPih+0xcb8>
    ad08:	10 16       	cp	r1, r16
    ad0a:	11 06       	cpc	r1, r17
    ad0c:	0c f0       	brlt	.+2      	; 0xad10 <_Z6perOutPih+0xbe6>
    ad0e:	69 c0       	rjmp	.+210    	; 0xade2 <_Z6perOutPih+0xcb8>
    ad10:	ac 59       	subi	r26, 0x9C	; 156
    ad12:	bf 4f       	sbci	r27, 0xFF	; 255
    ad14:	98 01       	movw	r18, r16
    ad16:	0e 94 41 72 	call	0xe482	; 0xe482 <__mulhisi3>
    ad1a:	24 e6       	ldi	r18, 0x64	; 100
    ad1c:	30 e0       	ldi	r19, 0x00	; 0
    ad1e:	40 e0       	ldi	r20, 0x00	; 0
    ad20:	50 e0       	ldi	r21, 0x00	; 0
    ad22:	0e 94 1f 72 	call	0xe43e	; 0xe43e <__divmodsi4>
    ad26:	89 01       	movw	r16, r18
    ad28:	5c c0       	rjmp	.+184    	; 0xade2 <_Z6perOutPih+0xcb8>
		} else {
			if ( (md->curve <= -28) || (md->curve > 27)) {
    ad2a:	f7 01       	movw	r30, r14
    ad2c:	64 81       	ldd	r22, Z+4	; 0x04
    ad2e:	8b e1       	ldi	r24, 0x1B	; 27
    ad30:	86 0f       	add	r24, r22
    ad32:	87 33       	cpi	r24, 0x37	; 55
    ad34:	40 f0       	brcs	.+16     	; 0xad46 <_Z6perOutPih+0xc1c>
				// do expo using md->curve + 128
				int8_t x = md->curve + 128;
    ad36:	60 58       	subi	r22, 0x80	; 128
				v = expo (v, x);
    ad38:	77 27       	eor	r23, r23
    ad3a:	67 fd       	sbrc	r22, 7
    ad3c:	70 95       	com	r23
    ad3e:	c8 01       	movw	r24, r16
    ad40:	0e 94 e8 42 	call	0x85d0	; 0x85d0 <_Z4expoii>
    ad44:	47 c0       	rjmp	.+142    	; 0xadd4 <_Z6perOutPih+0xcaa>
			} else {
				switch (md->curve) {
    ad46:	86 2f       	mov	r24, r22
    ad48:	99 27       	eor	r25, r25
    ad4a:	87 fd       	sbrc	r24, 7
    ad4c:	90 95       	com	r25
    ad4e:	a9 2f       	mov	r26, r25
    ad50:	b9 2f       	mov	r27, r25
    ad52:	87 30       	cpi	r24, 0x07	; 7
    ad54:	91 05       	cpc	r25, r1
    ad56:	90 f5       	brcc	.+100    	; 0xadbc <_Z6perOutPih+0xc92>
    ad58:	fc 01       	movw	r30, r24
    ad5a:	e5 56       	subi	r30, 0x65	; 101
    ad5c:	ff 4f       	sbci	r31, 0xFF	; 255
    ad5e:	0c 94 3b 72 	jmp	0xe476	; 0xe476 <__tablejump2__>
					case 0:
						break;
					case 1:
						if (md->srcRaw == MIX_FULL) //FUL
    ad62:	f7 01       	movw	r30, r14
    ad64:	81 81       	ldd	r24, Z+1	; 0x01
    ad66:	89 30       	cpi	r24, 0x09	; 9
    ad68:	21 f4       	brne	.+8      	; 0xad72 <_Z6perOutPih+0xc48>
						{
							if (v < 0) v = -RESX;   //x|x>0
    ad6a:	17 fd       	sbrc	r17, 7
    ad6c:	35 c0       	rjmp	.+106    	; 0xadd8 <_Z6perOutPih+0xcae>
							else v = -RESX + 2 * v;
    ad6e:	12 50       	subi	r17, 0x02	; 2
    ad70:	0b c0       	rjmp	.+22     	; 0xad88 <_Z6perOutPih+0xc5e>
    ad72:	17 ff       	sbrs	r17, 7
    ad74:	36 c0       	rjmp	.+108    	; 0xade2 <_Z6perOutPih+0xcb8>
    ad76:	1b c0       	rjmp	.+54     	; 0xadae <_Z6perOutPih+0xc84>
						} else {
							if (v < 0) v = 0;   //x|x>0
						}
						break;
					case 2:
						if (md->srcRaw == MIX_FULL) //FUL
    ad78:	f7 01       	movw	r30, r14
    ad7a:	81 81       	ldd	r24, Z+1	; 0x01
    ad7c:	89 30       	cpi	r24, 0x09	; 9
    ad7e:	39 f4       	brne	.+14     	; 0xad8e <_Z6perOutPih+0xc64>
						{
							if (v > 0) v = RESX;   //x|x<0
    ad80:	10 16       	cp	r1, r16
    ad82:	11 06       	cpc	r1, r17
    ad84:	64 f1       	brlt	.+88     	; 0xadde <_Z6perOutPih+0xcb4>
							else v = RESX + 2 * v;
    ad86:	1e 5f       	subi	r17, 0xFE	; 254
    ad88:	00 0f       	add	r16, r16
    ad8a:	11 1f       	adc	r17, r17
    ad8c:	2a c0       	rjmp	.+84     	; 0xade2 <_Z6perOutPih+0xcb8>
    ad8e:	10 16       	cp	r1, r16
    ad90:	11 06       	cpc	r1, r17
    ad92:	6c f0       	brlt	.+26     	; 0xadae <_Z6perOutPih+0xc84>
    ad94:	26 c0       	rjmp	.+76     	; 0xade2 <_Z6perOutPih+0xcb8>
						} else {
							if (v > 0) v = 0;   //x|x<0
						}
						break;
					case 3:       // x|abs(x)
						v = abs(v);
    ad96:	17 ff       	sbrs	r17, 7
    ad98:	24 c0       	rjmp	.+72     	; 0xade2 <_Z6perOutPih+0xcb8>
    ad9a:	11 95       	neg	r17
    ad9c:	01 95       	neg	r16
    ad9e:	11 09       	sbc	r17, r1
						break;
    ada0:	20 c0       	rjmp	.+64     	; 0xade2 <_Z6perOutPih+0xcb8>
					case 4:       //f|f>0
						v = v > 0 ? RESX : 0;
    ada2:	10 16       	cp	r1, r16
    ada4:	11 06       	cpc	r1, r17
    ada6:	dc f0       	brlt	.+54     	; 0xadde <_Z6perOutPih+0xcb4>
    ada8:	02 c0       	rjmp	.+4      	; 0xadae <_Z6perOutPih+0xc84>
						break;
					case 5:       //f|f<0
						v = v < 0 ? -RESX : 0;
    adaa:	17 fd       	sbrc	r17, 7
    adac:	15 c0       	rjmp	.+42     	; 0xadd8 <_Z6perOutPih+0xcae>
						break;
					case 3:       // x|abs(x)
						v = abs(v);
						break;
					case 4:       //f|f>0
						v = v > 0 ? RESX : 0;
    adae:	00 e0       	ldi	r16, 0x00	; 0
    adb0:	10 e0       	ldi	r17, 0x00	; 0
    adb2:	17 c0       	rjmp	.+46     	; 0xade2 <_Z6perOutPih+0xcb8>
						break;
					case 5:       //f|f<0
						v = v < 0 ? -RESX : 0;
						break;
					case 6:       //f|abs(f)
						v = v > 0 ? RESX : -RESX;
    adb4:	10 16       	cp	r1, r16
    adb6:	11 06       	cpc	r1, r17
    adb8:	94 f0       	brlt	.+36     	; 0xadde <_Z6perOutPih+0xcb4>
    adba:	0e c0       	rjmp	.+28     	; 0xadd8 <_Z6perOutPih+0xcae>
						break;
					default: //c1..c16
					{
						int8_t idx = md->curve;
						if (idx < 0) {
    adbc:	67 ff       	sbrs	r22, 7
    adbe:	06 c0       	rjmp	.+12     	; 0xadcc <_Z6perOutPih+0xca2>
							v = -v;
    adc0:	11 95       	neg	r17
    adc2:	01 95       	neg	r16
    adc4:	11 09       	sbc	r17, r1
							idx = 6 - idx;
    adc6:	f6 e0       	ldi	r31, 0x06	; 6
    adc8:	f6 1b       	sub	r31, r22
    adca:	6f 2f       	mov	r22, r31
						}
						v = intpol (v, idx - 7);
    adcc:	67 50       	subi	r22, 0x07	; 7
    adce:	c8 01       	movw	r24, r16
    add0:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <_Z6intpolih>
    add4:	8c 01       	movw	r16, r24
    add6:	05 c0       	rjmp	.+10     	; 0xade2 <_Z6perOutPih+0xcb8>
						break;
					case 4:       //f|f>0
						v = v > 0 ? RESX : 0;
						break;
					case 5:       //f|f<0
						v = v < 0 ? -RESX : 0;
    add8:	00 e0       	ldi	r16, 0x00	; 0
    adda:	1c ef       	ldi	r17, 0xFC	; 252
    addc:	02 c0       	rjmp	.+4      	; 0xade2 <_Z6perOutPih+0xcb8>
						break;
					case 3:       // x|abs(x)
						v = abs(v);
						break;
					case 4:       //f|f>0
						v = v > 0 ? RESX : 0;
    adde:	00 e0       	ldi	r16, 0x00	; 0
    ade0:	14 e0       	ldi	r17, 0x04	; 4
				}
			}
		}

		//========== TRIM ===============
		if ( (md->carryTrim == 0) && (md->srcRaw > 0) && (md->srcRaw <= 4)) v += trimA[md->srcRaw
    ade2:	f7 01       	movw	r30, r14
    ade4:	47 81       	ldd	r20, Z+7	; 0x07
    ade6:	40 fd       	sbrc	r20, 0
    ade8:	10 c0       	rjmp	.+32     	; 0xae0a <_Z6perOutPih+0xce0>
    adea:	81 81       	ldd	r24, Z+1	; 0x01
    adec:	9f ef       	ldi	r25, 0xFF	; 255
    adee:	98 0f       	add	r25, r24
    adf0:	94 30       	cpi	r25, 0x04	; 4
    adf2:	58 f4       	brcc	.+22     	; 0xae0a <_Z6perOutPih+0xce0>
				- 1];  //  0 = Trim ON  =  Default
    adf4:	fe 01       	movw	r30, r28
    adf6:	31 96       	adiw	r30, 0x01	; 1
    adf8:	e8 0f       	add	r30, r24
    adfa:	f1 1d       	adc	r31, r1
    adfc:	e8 0f       	add	r30, r24
    adfe:	f1 1d       	adc	r31, r1
    ae00:	32 97       	sbiw	r30, 0x02	; 2
    ae02:	80 81       	ld	r24, Z
    ae04:	91 81       	ldd	r25, Z+1	; 0x01
    ae06:	08 0f       	add	r16, r24
    ae08:	19 1f       	adc	r17, r25

		//========== MULTIPLEX ===============
#if GVARS
		int32_t dv = (int32_t) v * mixweight;
    ae0a:	98 01       	movw	r18, r16
    ae0c:	a3 2d       	mov	r26, r3
    ae0e:	bb 27       	eor	r27, r27
    ae10:	a7 fd       	sbrc	r26, 7
    ae12:	b0 95       	com	r27
    ae14:	0e 94 41 72 	call	0xe482	; 0xe482 <__mulhisi3>
    ae18:	4b 01       	movw	r8, r22
    ae1a:	5c 01       	movw	r10, r24
#endif
		//========== lateOffset ===============
#ifdef FMODE_TRIM
		if ( ( md->enableFmTrim == 0 ) && ( md->lateOffset ) )
#else
		if (md->lateOffset)
    ae1c:	43 ff       	sbrs	r20, 3
    ae1e:	13 c0       	rjmp	.+38     	; 0xae46 <_Z6perOutPih+0xd1c>
#endif
		{
#if GVARS
			if (md->sOffset) dv += calc100toRESX (REG (md->sOffset, -125, 125)) * 100L;
    ae20:	f7 01       	movw	r30, r14
    ae22:	80 85       	ldd	r24, Z+8	; 0x08
    ae24:	88 23       	and	r24, r24
    ae26:	79 f0       	breq	.+30     	; 0xae46 <_Z6perOutPih+0xd1c>
    ae28:	4d e7       	ldi	r20, 0x7D	; 125
    ae2a:	63 e8       	ldi	r22, 0x83	; 131
    ae2c:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <_Z3REGaaa>
    ae30:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <_Z13calc100toRESXa>
    ae34:	24 e6       	ldi	r18, 0x64	; 100
    ae36:	30 e0       	ldi	r19, 0x00	; 0
    ae38:	dc 01       	movw	r26, r24
    ae3a:	0e 94 56 72 	call	0xe4ac	; 0xe4ac <__usmulhisi3>
    ae3e:	86 0e       	add	r8, r22
    ae40:	97 1e       	adc	r9, r23
    ae42:	a8 1e       	adc	r10, r24
    ae44:	b9 1e       	adc	r11, r25
			if(md->sOffset) dv += calc100toRESX(md->sOffset) * 100L;
#endif
		}

		int32_t *ptr;			// Save calculating address several times
		ptr = &chans[md->destCh - 1];
    ae46:	d7 01       	movw	r26, r14
    ae48:	0c 91       	ld	r16, X
    ae4a:	10 e0       	ldi	r17, 0x00	; 0
    ae4c:	01 50       	subi	r16, 0x01	; 1
    ae4e:	11 09       	sbc	r17, r1
		switch ((uint8_t) md->mltpx) {
    ae50:	f7 01       	movw	r30, r14
    ae52:	87 81       	ldd	r24, Z+7	; 0x07
    ae54:	86 95       	lsr	r24
    ae56:	83 70       	andi	r24, 0x03	; 3
    ae58:	00 0f       	add	r16, r16
    ae5a:	11 1f       	adc	r17, r17
    ae5c:	00 0f       	add	r16, r16
    ae5e:	11 1f       	adc	r17, r17
    ae60:	81 30       	cpi	r24, 0x01	; 1
    ae62:	71 f0       	breq	.+28     	; 0xae80 <_Z6perOutPih+0xd56>
    ae64:	82 30       	cpi	r24, 0x02	; 2
    ae66:	29 f1       	breq	.+74     	; 0xaeb2 <_Z6perOutPih+0xd88>
				dv /= 100;
				dv *= *ptr;
				dv /= RESXl;
				break;
			default:  // MLTPX_ADD
				dv += *ptr;
    ae68:	f8 01       	movw	r30, r16
    ae6a:	ef 5c       	subi	r30, 0xCF	; 207
    ae6c:	f2 4f       	sbci	r31, 0xF2	; 242
    ae6e:	80 81       	ld	r24, Z
    ae70:	91 81       	ldd	r25, Z+1	; 0x01
    ae72:	a2 81       	ldd	r26, Z+2	; 0x02
    ae74:	b3 81       	ldd	r27, Z+3	; 0x03
    ae76:	88 0e       	add	r8, r24
    ae78:	99 1e       	adc	r9, r25
    ae7a:	aa 1e       	adc	r10, r26
    ae7c:	bb 1e       	adc	r11, r27
				break;
    ae7e:	19 c0       	rjmp	.+50     	; 0xaeb2 <_Z6perOutPih+0xd88>
		ptr = &chans[md->destCh - 1];
		switch ((uint8_t) md->mltpx) {
			case MLTPX_REP:
				break;
			case MLTPX_MUL:
				dv /= 100;
    ae80:	c5 01       	movw	r24, r10
    ae82:	b4 01       	movw	r22, r8
    ae84:	24 e6       	ldi	r18, 0x64	; 100
    ae86:	30 e0       	ldi	r19, 0x00	; 0
    ae88:	40 e0       	ldi	r20, 0x00	; 0
    ae8a:	50 e0       	ldi	r21, 0x00	; 0
    ae8c:	0e 94 1f 72 	call	0xe43e	; 0xe43e <__divmodsi4>
				dv *= *ptr;
    ae90:	f8 01       	movw	r30, r16
    ae92:	ef 5c       	subi	r30, 0xCF	; 207
    ae94:	f2 4f       	sbci	r31, 0xF2	; 242
    ae96:	60 81       	ld	r22, Z
    ae98:	71 81       	ldd	r23, Z+1	; 0x01
    ae9a:	82 81       	ldd	r24, Z+2	; 0x02
    ae9c:	93 81       	ldd	r25, Z+3	; 0x03
    ae9e:	0e 94 ba 71 	call	0xe374	; 0xe374 <__mulsi3>
				dv /= RESXl;
    aea2:	20 e0       	ldi	r18, 0x00	; 0
    aea4:	34 e0       	ldi	r19, 0x04	; 4
    aea6:	40 e0       	ldi	r20, 0x00	; 0
    aea8:	50 e0       	ldi	r21, 0x00	; 0
    aeaa:	0e 94 1f 72 	call	0xe43e	; 0xe43e <__divmodsi4>
    aeae:	49 01       	movw	r8, r18
    aeb0:	5a 01       	movw	r10, r20
//				test = dv >> 24 ;
//				if ( ( test != -1) && ( test != 0 ) )
//				{
//					dv >>= 8 ;
//				}
		*ptr = dv;
    aeb2:	f8 01       	movw	r30, r16
    aeb4:	ef 5c       	subi	r30, 0xCF	; 207
    aeb6:	f2 4f       	sbci	r31, 0xF2	; 242
    aeb8:	80 82       	st	Z, r8
    aeba:	91 82       	std	Z+1, r9	; 0x01
    aebc:	a2 82       	std	Z+2, r10	; 0x02
    aebe:	b3 82       	std	Z+3, r11	; 0x03
	p[1] = &g_model.trim[1];
	p[2] = &g_model.trim[2];
	p[3] = &g_model.trim[3];
#endif

	for (uint8_t i = 0; i < MAX_MIXERS; i++) {
    aec0:	fd 85       	ldd	r31, Y+13	; 0x0d
    aec2:	ff 5f       	subi	r31, 0xFF	; 255
    aec4:	fd 87       	std	Y+13, r31	; 0x0d
    aec6:	29 85       	ldd	r18, Y+9	; 0x09
    aec8:	3a 85       	ldd	r19, Y+10	; 0x0a
    aeca:	2c 5f       	subi	r18, 0xFC	; 252
    aecc:	3f 4f       	sbci	r19, 0xFF	; 255
    aece:	3a 87       	std	Y+10, r19	; 0x0a
    aed0:	29 87       	std	Y+9, r18	; 0x09
    aed2:	6f 85       	ldd	r22, Y+15	; 0x0f
    aed4:	78 89       	ldd	r23, Y+16	; 0x10
    aed6:	6e 5f       	subi	r22, 0xFE	; 254
    aed8:	7f 4f       	sbci	r23, 0xFF	; 255
    aeda:	78 8b       	std	Y+16, r23	; 0x10
    aedc:	6f 87       	std	Y+15, r22	; 0x0f
    aede:	8b 85       	ldd	r24, Y+11	; 0x0b
    aee0:	9c 85       	ldd	r25, Y+12	; 0x0c
    aee2:	01 96       	adiw	r24, 0x01	; 1
    aee4:	9c 87       	std	Y+12, r25	; 0x0c
    aee6:	8b 87       	std	Y+11, r24	; 0x0b
    aee8:	f0 32       	cpi	r31, 0x20	; 32
    aeea:	09 f0       	breq	.+2      	; 0xaeee <_Z6perOutPih+0xdc4>
    aeec:	d4 cc       	rjmp	.-1624   	; 0xa896 <_Z6perOutPih+0x76c>
	//1= 00,08
	//2= 24,32,40
	//3= 56,64,72,80
	{
		uint8_t tmr10ms;
		tmr10ms = g_blinkTmr10ms;	// Only need low 8 bits
    aeee:	10 91 cf 0a 	lds	r17, 0x0ACF

		if (mixWarning & 1) if ( ( (tmr10ms) == 0)) audioDefevent (AU_MIX_WARNING_1);
    aef2:	20 fe       	sbrs	r2, 0
    aef4:	05 c0       	rjmp	.+10     	; 0xaf00 <_Z6perOutPih+0xdd6>
    aef6:	11 11       	cpse	r17, r1
    aef8:	03 c0       	rjmp	.+6      	; 0xaf00 <_Z6perOutPih+0xdd6>
    aefa:	8e e1       	ldi	r24, 0x1E	; 30
    aefc:	0e 94 74 34 	call	0x68e8	; 0x68e8 <_Z13audioDefeventh>
		if (mixWarning & 2) if ( ( (tmr10ms) == 64) || ( (tmr10ms) == 72)) audioDefevent (
    af00:	21 fe       	sbrs	r2, 1
    af02:	07 c0       	rjmp	.+14     	; 0xaf12 <_Z6perOutPih+0xde8>
    af04:	81 2f       	mov	r24, r17
    af06:	87 7f       	andi	r24, 0xF7	; 247
    af08:	80 34       	cpi	r24, 0x40	; 64
    af0a:	19 f4       	brne	.+6      	; 0xaf12 <_Z6perOutPih+0xde8>
				AU_MIX_WARNING_2);
    af0c:	8f e1       	ldi	r24, 0x1F	; 31
    af0e:	0e 94 74 34 	call	0x68e8	; 0x68e8 <_Z13audioDefeventh>
		if (mixWarning & 4) if ( ( (tmr10ms) == 128) || ( (tmr10ms) == 136) || ( (tmr10ms) == 144)) audioDefevent (
    af12:	22 fe       	sbrs	r2, 2
    af14:	09 c0       	rjmp	.+18     	; 0xaf28 <_Z6perOutPih+0xdfe>
    af16:	81 2f       	mov	r24, r17
    af18:	87 7f       	andi	r24, 0xF7	; 247
    af1a:	80 38       	cpi	r24, 0x80	; 128
    af1c:	11 f0       	breq	.+4      	; 0xaf22 <_Z6perOutPih+0xdf8>
    af1e:	10 39       	cpi	r17, 0x90	; 144
    af20:	19 f4       	brne	.+6      	; 0xaf28 <_Z6perOutPih+0xdfe>
				AU_MIX_WARNING_3);
    af22:	80 e2       	ldi	r24, 0x20	; 32
    af24:	0e 94 74 34 	call	0x68e8	; 0x68e8 <_Z13audioDefeventh>

	}

	ThrottleStickyOn = 0;
    af28:	10 92 d9 0d 	sts	0x0DD9, r1
    af2c:	a1 e3       	ldi	r26, 0x31	; 49
    af2e:	bd e0       	ldi	r27, 0x0D	; 13
    af30:	bc 87       	std	Y+12, r27	; 0x0c
    af32:	ab 87       	std	Y+11, r26	; 0x0b
    af34:	0a ed       	ldi	r16, 0xDA	; 218
    af36:	80 2e       	mov	r8, r16
    af38:	0b e0       	ldi	r16, 0x0B	; 11
    af3a:	90 2e       	mov	r9, r16
    af3c:	21 2c       	mov	r2, r1
    af3e:	31 2c       	mov	r3, r1
    af40:	a1 2c       	mov	r10, r1
    af42:	b1 2c       	mov	r11, r1
				l_fade = 0;
			}
			l_fade += (q / 100) * Fade.fadeScale[CurrentPhase];
			Fade.fade[i] = l_fade;

			if ( (att & FADE_LAST) == 0) {
    af44:	b9 89       	ldd	r27, Y+17	; 0x11
    af46:	b0 74       	andi	r27, 0x40	; 64
    af48:	b9 8b       	std	Y+17, r27	; 0x11
    af4a:	ad 86       	std	Y+13, r10	; 0x0d
		// later we multiply by the limit (up to 100) and then we need to normalize
		// at the end chans[i] = chans[i]/100 =>  -1024..1024
		// interpolate value with min/max so we get smooth motion from center to stop
		// this limits based on v original values and min=-1024, max=1024  RESX=1024

		int32_t q = chans[i];  // + (int32_t)g_model.limitData[i].offset*100; // offset before limit
    af4c:	eb 85       	ldd	r30, Y+11	; 0x0b
    af4e:	fc 85       	ldd	r31, Y+12	; 0x0c
    af50:	40 80       	ld	r4, Z
    af52:	51 80       	ldd	r5, Z+1	; 0x01
    af54:	62 80       	ldd	r6, Z+2	; 0x02
    af56:	73 80       	ldd	r7, Z+3	; 0x03

		if (Fade.fadePhases) {
    af58:	80 91 cb 0b 	lds	r24, 0x0BCB
    af5c:	88 23       	and	r24, r24
    af5e:	c9 f1       	breq	.+114    	; 0xafd2 <_Z6perOutPih+0xea8>
			int32_t l_fade = Fade.fade[i];
    af60:	d4 01       	movw	r26, r8
    af62:	cd 90       	ld	r12, X+
    af64:	dd 90       	ld	r13, X+
    af66:	ed 90       	ld	r14, X+
    af68:	fc 90       	ld	r15, X
			if (att & FADE_FIRST) {
    af6a:	bb 89       	ldd	r27, Y+19	; 0x13
    af6c:	bb 23       	and	r27, r27
    af6e:	19 f0       	breq	.+6      	; 0xaf76 <_Z6perOutPih+0xe4c>
				l_fade = 0;
    af70:	c1 2c       	mov	r12, r1
    af72:	d1 2c       	mov	r13, r1
    af74:	76 01       	movw	r14, r12
			}
			l_fade += (q / 100) * Fade.fadeScale[CurrentPhase];
    af76:	c3 01       	movw	r24, r6
    af78:	b2 01       	movw	r22, r4
    af7a:	24 e6       	ldi	r18, 0x64	; 100
    af7c:	30 e0       	ldi	r19, 0x00	; 0
    af7e:	40 e0       	ldi	r20, 0x00	; 0
    af80:	50 e0       	ldi	r21, 0x00	; 0
    af82:	0e 94 1f 72 	call	0xe43e	; 0xe43e <__divmodsi4>
    af86:	e0 91 1a 0c 	lds	r30, 0x0C1A
    af8a:	f0 e0       	ldi	r31, 0x00	; 0
    af8c:	ee 0f       	add	r30, r30
    af8e:	ff 1f       	adc	r31, r31
    af90:	e5 53       	subi	r30, 0x35	; 53
    af92:	f4 4f       	sbci	r31, 0xF4	; 244
    af94:	a5 81       	ldd	r26, Z+5	; 0x05
    af96:	b6 81       	ldd	r27, Z+6	; 0x06
    af98:	0e 94 5c 72 	call	0xe4b8	; 0xe4b8 <__muluhisi3>
    af9c:	6c 0d       	add	r22, r12
    af9e:	7d 1d       	adc	r23, r13
    afa0:	8e 1d       	adc	r24, r14
    afa2:	9f 1d       	adc	r25, r15
			Fade.fade[i] = l_fade;
    afa4:	f4 01       	movw	r30, r8
    afa6:	60 83       	st	Z, r22
    afa8:	71 83       	std	Z+1, r23	; 0x01
    afaa:	82 83       	std	Z+2, r24	; 0x02
    afac:	93 83       	std	Z+3, r25	; 0x03

			if ( (att & FADE_LAST) == 0) {
    afae:	f9 89       	ldd	r31, Y+17	; 0x11
    afb0:	ff 23       	and	r31, r31
    afb2:	09 f4       	brne	.+2      	; 0xafb6 <_Z6perOutPih+0xe8c>
    afb4:	0c c1       	rjmp	.+536    	; 0xb1ce <_Z6perOutPih+0x10a4>
				continue;
			}
			l_fade /= Fade.fadeWeight;
    afb6:	20 91 ce 0b 	lds	r18, 0x0BCE
    afba:	30 91 cf 0b 	lds	r19, 0x0BCF
    afbe:	40 e0       	ldi	r20, 0x00	; 0
    afc0:	50 e0       	ldi	r21, 0x00	; 0
    afc2:	0e 94 1f 72 	call	0xe43e	; 0xe43e <__divmodsi4>
			q = l_fade * 100;
    afc6:	a4 e6       	ldi	r26, 0x64	; 100
    afc8:	b0 e0       	ldi	r27, 0x00	; 0
    afca:	0e 94 5c 72 	call	0xe4b8	; 0xe4b8 <__muluhisi3>
    afce:	2b 01       	movw	r4, r22
    afd0:	3c 01       	movw	r6, r24
		}
		chans[i] = q / 100; // chans back to -1024..1024
    afd2:	c3 01       	movw	r24, r6
    afd4:	b2 01       	movw	r22, r4
    afd6:	24 e6       	ldi	r18, 0x64	; 100
    afd8:	30 e0       	ldi	r19, 0x00	; 0
    afda:	40 e0       	ldi	r20, 0x00	; 0
    afdc:	50 e0       	ldi	r21, 0x00	; 0
    afde:	0e 94 1f 72 	call	0xe43e	; 0xe43e <__divmodsi4>
    afe2:	ab 85       	ldd	r26, Y+11	; 0x0b
    afe4:	bc 85       	ldd	r27, Y+12	; 0x0c
    afe6:	2d 93       	st	X+, r18
    afe8:	3d 93       	st	X+, r19
    afea:	4d 93       	st	X+, r20
    afec:	5c 93       	st	X, r21
    afee:	13 97       	sbiw	r26, 0x03	; 3
    aff0:	f1 01       	movw	r30, r2
    aff2:	e9 55       	subi	r30, 0x59	; 89
    aff4:	f2 4f       	sbci	r31, 0xF2	; 242

		ex_chans[i] = chans[i]; //for getswitch
    aff6:	31 83       	std	Z+1, r19	; 0x01
    aff8:	20 83       	st	Z, r18

		LimitData *limit = limitaddress (i);
    affa:	8d 85       	ldd	r24, Y+13	; 0x0d
    affc:	0e 94 8e 10 	call	0x211c	; 0x211c <_Z12limitaddressh>
    b000:	9a 87       	std	Y+10, r25	; 0x0a
    b002:	89 87       	std	Y+9, r24	; 0x09
		int16_t ofs = limit->offset;
    b004:	fc 01       	movw	r30, r24
    b006:	23 81       	ldd	r18, Z+3	; 0x03
    b008:	34 81       	ldd	r19, Z+4	; 0x04
		int16_t xofs = ofs;
		if (xofs > g_model.sub_trim_limit) {
    b00a:	80 91 d1 04 	lds	r24, 0x04D1
    b00e:	90 e0       	ldi	r25, 0x00	; 0
    b010:	82 17       	cp	r24, r18
    b012:	93 07       	cpc	r25, r19
    b014:	3c f0       	brlt	.+14     	; 0xb024 <_Z6perOutPih+0xefa>
			xofs = g_model.sub_trim_limit;
		} else if (xofs < -g_model.sub_trim_limit) {
    b016:	91 95       	neg	r25
    b018:	81 95       	neg	r24
    b01a:	91 09       	sbc	r25, r1
    b01c:	82 17       	cp	r24, r18
    b01e:	93 07       	cpc	r25, r19
    b020:	0c f4       	brge	.+2      	; 0xb024 <_Z6perOutPih+0xefa>
    b022:	c9 01       	movw	r24, r18
			xofs = -g_model.sub_trim_limit;
		}
		int16_t lim_p = 10 * (limit->max + 100) + xofs;
    b024:	e9 85       	ldd	r30, Y+9	; 0x09
    b026:	fa 85       	ldd	r31, Y+10	; 0x0a
    b028:	41 81       	ldd	r20, Z+1	; 0x01
    b02a:	55 27       	eor	r21, r21
    b02c:	47 fd       	sbrc	r20, 7
    b02e:	50 95       	com	r21
    b030:	4c 59       	subi	r20, 0x9C	; 156
    b032:	5f 4f       	sbci	r21, 0xFF	; 255
    b034:	fa e0       	ldi	r31, 0x0A	; 10
    b036:	f4 9f       	mul	r31, r20
    b038:	80 01       	movw	r16, r0
    b03a:	f5 9f       	mul	r31, r21
    b03c:	10 0d       	add	r17, r0
    b03e:	11 24       	eor	r1, r1
		int16_t lim_n = 10 * (limit->min - 100) + xofs; //multiply by 10 to get same range as ofs (-1000..1000)
    b040:	a9 85       	ldd	r26, Y+9	; 0x09
    b042:	ba 85       	ldd	r27, Y+10	; 0x0a
    b044:	4c 91       	ld	r20, X
    b046:	55 27       	eor	r21, r21
    b048:	47 fd       	sbrc	r20, 7
    b04a:	50 95       	com	r21
    b04c:	44 56       	subi	r20, 0x64	; 100
    b04e:	51 09       	sbc	r21, r1
    b050:	f4 9f       	mul	r31, r20
    b052:	60 01       	movw	r12, r0
    b054:	f5 9f       	mul	r31, r21
    b056:	d0 0c       	add	r13, r0
    b058:	11 24       	eor	r1, r1
    b05a:	c8 0e       	add	r12, r24
    b05c:	d9 1e       	adc	r13, r25
    b05e:	08 0f       	add	r16, r24
    b060:	19 1f       	adc	r17, r25
    b062:	03 3e       	cpi	r16, 0xE3	; 227
    b064:	b4 e0       	ldi	r27, 0x04	; 4
    b066:	1b 07       	cpc	r17, r27
    b068:	14 f0       	brlt	.+4      	; 0xb06e <_Z6perOutPih+0xf44>
    b06a:	02 ee       	ldi	r16, 0xE2	; 226
    b06c:	14 e0       	ldi	r17, 0x04	; 4
    b06e:	ee e1       	ldi	r30, 0x1E	; 30
    b070:	ce 16       	cp	r12, r30
    b072:	eb ef       	ldi	r30, 0xFB	; 251
    b074:	de 06       	cpc	r13, r30
    b076:	24 f4       	brge	.+8      	; 0xb080 <_Z6perOutPih+0xf56>
    b078:	be e1       	ldi	r27, 0x1E	; 30
    b07a:	cb 2e       	mov	r12, r27
    b07c:	bb ef       	ldi	r27, 0xFB	; 251
    b07e:	db 2e       	mov	r13, r27
    b080:	90 2f       	mov	r25, r16
    b082:	81 2f       	mov	r24, r17
    b084:	20 17       	cp	r18, r16
    b086:	31 07       	cpc	r19, r17
    b088:	14 f4       	brge	.+4      	; 0xb08e <_Z6perOutPih+0xf64>
    b08a:	92 2f       	mov	r25, r18
    b08c:	83 2f       	mov	r24, r19
    b08e:	e9 2e       	mov	r14, r25
    b090:	f8 2e       	mov	r15, r24
    b092:	ec 14       	cp	r14, r12
    b094:	fd 04       	cpc	r15, r13
    b096:	0c f4       	brge	.+2      	; 0xb09a <_Z6perOutPih+0xf70>
    b098:	76 01       	movw	r14, r12
			lim_n = -1250;
		}
		if (ofs > lim_p) ofs = lim_p;
		if (ofs < lim_n) ofs = lim_n;

		if (q) {
    b09a:	41 14       	cp	r4, r1
    b09c:	51 04       	cpc	r5, r1
    b09e:	61 04       	cpc	r6, r1
    b0a0:	71 04       	cpc	r7, r1
    b0a2:	a9 f0       	breq	.+42     	; 0xb0ce <_Z6perOutPih+0xfa4>
			int16_t temp = (q < 0) ? ((int16_t) ofs - lim_n) : ((int16_t) lim_p - ofs);
    b0a4:	77 fe       	sbrs	r7, 7
    b0a6:	04 c0       	rjmp	.+8      	; 0xb0b0 <_Z6perOutPih+0xf86>
    b0a8:	d7 01       	movw	r26, r14
    b0aa:	ac 19       	sub	r26, r12
    b0ac:	bd 09       	sbc	r27, r13
    b0ae:	03 c0       	rjmp	.+6      	; 0xb0b6 <_Z6perOutPih+0xf8c>
    b0b0:	d8 01       	movw	r26, r16
    b0b2:	ae 19       	sub	r26, r14
    b0b4:	bf 09       	sbc	r27, r15
			q = (q * temp) / 100000; //div by 100000 -> output = -1024..1024
    b0b6:	a3 01       	movw	r20, r6
    b0b8:	92 01       	movw	r18, r4
    b0ba:	0e 94 66 72 	call	0xe4cc	; 0xe4cc <__mulshisi3>
    b0be:	20 ea       	ldi	r18, 0xA0	; 160
    b0c0:	36 e8       	ldi	r19, 0x86	; 134
    b0c2:	41 e0       	ldi	r20, 0x01	; 1
    b0c4:	50 e0       	ldi	r21, 0x00	; 0
    b0c6:	0e 94 1f 72 	call	0xe43e	; 0xe43e <__divmodsi4>
    b0ca:	29 01       	movw	r4, r18
    b0cc:	3a 01       	movw	r6, r20
		}

		int16_t result;
		result = calc1000toRESX (ofs);
    b0ce:	c7 01       	movw	r24, r14
    b0d0:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <_Z14calc1000toRESXi>
    b0d4:	7c 01       	movw	r14, r24
		result += q; // we convert value to a 16bit value
    b0d6:	e4 0c       	add	r14, r4
    b0d8:	f5 1c       	adc	r15, r5

		lim_p = calc1000toRESX (lim_p);
    b0da:	c8 01       	movw	r24, r16
    b0dc:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <_Z14calc1000toRESXi>
    b0e0:	8e 15       	cp	r24, r14
    b0e2:	9f 05       	cpc	r25, r15
    b0e4:	0c f4       	brge	.+2      	; 0xb0e8 <_Z6perOutPih+0xfbe>
    b0e6:	7c 01       	movw	r14, r24
		if (result > lim_p) result = lim_p;
		lim_n = calc1000toRESX (lim_n);
    b0e8:	c6 01       	movw	r24, r12
    b0ea:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <_Z14calc1000toRESXi>
    b0ee:	e8 16       	cp	r14, r24
    b0f0:	f9 06       	cpc	r15, r25
    b0f2:	0c f4       	brge	.+2      	; 0xb0f6 <_Z6perOutPih+0xfcc>
    b0f4:	7c 01       	movw	r14, r24
		if (result < lim_n) result = lim_n;

		if (limit->reverse) result = -result; // finally do the reverse.
    b0f6:	e9 85       	ldd	r30, Y+9	; 0x09
    b0f8:	fa 85       	ldd	r31, Y+10	; 0x0a
    b0fa:	82 81       	ldd	r24, Z+2	; 0x02
    b0fc:	88 23       	and	r24, r24
    b0fe:	19 f0       	breq	.+6      	; 0xb106 <_Z6perOutPih+0xfdc>
    b100:	f1 94       	neg	r15
    b102:	e1 94       	neg	r14
    b104:	f1 08       	sbc	r15, r1

		{
			uint8_t numSafety = 16 - g_model.numVoice;
    b106:	80 91 9d 04 	lds	r24, 0x049D
    b10a:	8f 71       	andi	r24, 0x1F	; 31
    b10c:	f0 e1       	ldi	r31, 0x10	; 16
    b10e:	f8 1b       	sub	r31, r24
			if (i < numSafety) {
    b110:	2d 85       	ldd	r18, Y+13	; 0x0d
    b112:	2f 17       	cp	r18, r31
    b114:	08 f0       	brcs	.+2      	; 0xb118 <_Z6perOutPih+0xfee>
    b116:	53 c0       	rjmp	.+166    	; 0xb1be <_Z6perOutPih+0x1094>
				if (g_model.safetySw[i].opt.ss.swtch) //if safety sw available for channel check and replace val if needed
    b118:	85 01       	movw	r16, r10
    b11a:	00 0f       	add	r16, r16
    b11c:	11 1f       	adc	r17, r17
    b11e:	02 56       	subi	r16, 0x62	; 98
    b120:	1b 4f       	sbci	r17, 0xFB	; 251
    b122:	d8 01       	movw	r26, r16
    b124:	9c 91       	ld	r25, X
    b126:	89 2f       	mov	r24, r25
    b128:	88 0f       	add	r24, r24
    b12a:	88 0f       	add	r24, r24
    b12c:	85 95       	asr	r24
    b12e:	85 95       	asr	r24
    b130:	09 f4       	brne	.+2      	; 0xb134 <_Z6perOutPih+0x100a>
    b132:	45 c0       	rjmp	.+138    	; 0xb1be <_Z6perOutPih+0x1094>
				{
					if ( (g_model.safetySw[i].opt.ss.mode != 1)
							&& (g_model.safetySw[i].opt.ss.mode != 2))	// And not used as an alarm
    b134:	92 95       	swap	r25
    b136:	96 95       	lsr	r25
    b138:	96 95       	lsr	r25
    b13a:	93 70       	andi	r25, 0x03	; 3
    b13c:	9d 5f       	subi	r25, 0xFD	; 253
    b13e:	93 70       	andi	r25, 0x03	; 3
		{
			uint8_t numSafety = 16 - g_model.numVoice;
			if (i < numSafety) {
				if (g_model.safetySw[i].opt.ss.swtch) //if safety sw available for channel check and replace val if needed
				{
					if ( (g_model.safetySw[i].opt.ss.mode != 1)
    b140:	92 30       	cpi	r25, 0x02	; 2
    b142:	e8 f1       	brcs	.+122    	; 0xb1be <_Z6perOutPih+0x1094>
							{
						static uint8_t sticky = 0;
						uint8_t applySafety = 0;
						int8_t sSwitch = g_model.safetySw[i].opt.ss.swtch;

						if (getSwitch (sSwitch, 0)) {
    b144:	40 e0       	ldi	r20, 0x00	; 0
    b146:	60 e0       	ldi	r22, 0x00	; 0
    b148:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_Z9getSwitchabh>
							applySafety = 1;
						}

						if (g_model.safetySw[i].opt.ss.mode == 3) {
    b14c:	f8 01       	movw	r30, r16
    b14e:	90 81       	ld	r25, Z
    b150:	92 95       	swap	r25
    b152:	96 95       	lsr	r25
    b154:	96 95       	lsr	r25
    b156:	93 70       	andi	r25, 0x03	; 3
    b158:	93 30       	cpi	r25, 0x03	; 3
    b15a:	41 f5       	brne	.+80     	; 0xb1ac <_Z6perOutPih+0x1082>
							// Special case, sticky throttle
							if (applySafety) {
    b15c:	88 23       	and	r24, r24
    b15e:	19 f0       	breq	.+6      	; 0xb166 <_Z6perOutPih+0x103c>
								sticky = 0;
    b160:	10 92 3c 0e 	sts	0x0E3C, r1
    b164:	1c c0       	rjmp	.+56     	; 0xb19e <_Z6perOutPih+0x1074>
							}
#ifdef FIX_MODE
							else {
								uint8_t throttleOK = 0;
								if (g_model.throttleIdle) {
    b166:	90 91 92 05 	lds	r25, 0x0592
    b16a:	90 76       	andi	r25, 0x60	; 96
    b16c:	20 91 cb 0d 	lds	r18, 0x0DCB
    b170:	30 91 cc 0d 	lds	r19, 0x0DCC
    b174:	99 23       	and	r25, r25
    b176:	31 f0       	breq	.+12     	; 0xb184 <_Z6perOutPih+0x105a>
									if ( abs( calibratedStick[2] ) < 20) {
    b178:	2d 5e       	subi	r18, 0xED	; 237
    b17a:	3f 4f       	sbci	r19, 0xFF	; 255
    b17c:	27 32       	cpi	r18, 0x27	; 39
    b17e:	31 05       	cpc	r19, r1
    b180:	20 f0       	brcs	.+8      	; 0xb18a <_Z6perOutPih+0x1060>
    b182:	0d c0       	rjmp	.+26     	; 0xb19e <_Z6perOutPih+0x1074>
										throttleOK = 1;
									}
								} else {
									if (calibratedStick[2] < -1004) {
    b184:	24 31       	cpi	r18, 0x14	; 20
    b186:	3c 4f       	sbci	r19, 0xFC	; 252
    b188:	54 f4       	brge	.+20     	; 0xb19e <_Z6perOutPih+0x1074>
										throttleOK = 1;
									}
								}
								if (throttleOK) {
									if (trainerThrottleValid) {
    b18a:	29 8d       	ldd	r18, Y+25	; 0x19
    b18c:	22 23       	and	r18, r18
    b18e:	09 f4       	brne	.+2      	; 0xb192 <_Z6perOutPih+0x1068>
    b190:	4f c0       	rjmp	.+158    	; 0xb230 <_Z6perOutPih+0x1106>
										if (trainerThrottleValue < -1004) {
    b192:	2a 8d       	ldd	r18, Y+26	; 0x1a
    b194:	3b 8d       	ldd	r19, Y+27	; 0x1b
    b196:	24 31       	cpi	r18, 0x14	; 20
    b198:	3c 4f       	sbci	r19, 0xFC	; 252
    b19a:	0c f4       	brge	.+2      	; 0xb19e <_Z6perOutPih+0x1074>
    b19c:	49 c0       	rjmp	.+146    	; 0xb230 <_Z6perOutPih+0x1106>
								{
									sticky = 1;
								}
							}
#endif
							if (sticky == 0) {
    b19e:	90 91 3c 0e 	lds	r25, 0x0E3C
    b1a2:	91 11       	cpse	r25, r1
    b1a4:	01 c0       	rjmp	.+2      	; 0xb1a8 <_Z6perOutPih+0x107e>
								applySafety = 1;
    b1a6:	81 e0       	ldi	r24, 0x01	; 1
							}
							ThrottleStickyOn = applySafety;
    b1a8:	80 93 d9 0d 	sts	0x0DD9, r24
						}
						if (applySafety) result = calc100toRESX (g_model.safetySw[i].opt.ss.val);
    b1ac:	88 23       	and	r24, r24
    b1ae:	39 f0       	breq	.+14     	; 0xb1be <_Z6perOutPih+0x1094>
    b1b0:	f1 01       	movw	r30, r2
    b1b2:	e1 56       	subi	r30, 0x61	; 97
    b1b4:	fb 4f       	sbci	r31, 0xFB	; 251
    b1b6:	80 81       	ld	r24, Z
    b1b8:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <_Z13calc100toRESXa>
    b1bc:	7c 01       	movw	r14, r24
					}
				}
			}
		}
		cli();
    b1be:	f8 94       	cli
    b1c0:	ec 8d       	ldd	r30, Y+28	; 0x1c
    b1c2:	fd 8d       	ldd	r31, Y+29	; 0x1d
    b1c4:	e2 0d       	add	r30, r2
    b1c6:	f3 1d       	adc	r31, r3
		chanOut[i] = result; //copy consistent word to int-level
    b1c8:	f1 82       	std	Z+1, r15	; 0x01
    b1ca:	e0 82       	st	Z, r14
		sei();
    b1cc:	78 94       	sei
    b1ce:	8f ef       	ldi	r24, 0xFF	; 255
    b1d0:	a8 1a       	sub	r10, r24
    b1d2:	b8 0a       	sbc	r11, r24
    b1d4:	ab 85       	ldd	r26, Y+11	; 0x0b
    b1d6:	bc 85       	ldd	r27, Y+12	; 0x0c
    b1d8:	14 96       	adiw	r26, 0x04	; 4
    b1da:	bc 87       	std	Y+12, r27	; 0x0c
    b1dc:	ab 87       	std	Y+11, r26	; 0x0b
    b1de:	b4 e0       	ldi	r27, 0x04	; 4
    b1e0:	8b 0e       	add	r8, r27
    b1e2:	91 1c       	adc	r9, r1
    b1e4:	e2 e0       	ldi	r30, 0x02	; 2
    b1e6:	2e 0e       	add	r2, r30
    b1e8:	31 1c       	adc	r3, r1

	}

	ThrottleStickyOn = 0;
	//========== LIMITS ===============
	for (uint8_t i = 0; i < NUM_CHNOUT; i++) {
    b1ea:	f0 e1       	ldi	r31, 0x10	; 16
    b1ec:	af 16       	cp	r10, r31
    b1ee:	b1 04       	cpc	r11, r1
    b1f0:	09 f0       	breq	.+2      	; 0xb1f4 <_Z6perOutPih+0x10ca>
    b1f2:	ab ce       	rjmp	.-682    	; 0xaf4a <_Z6perOutPih+0xe20>
		}
		cli();
		chanOut[i] = result; //copy consistent word to int-level
		sei();
	}
}
    b1f4:	6d 96       	adiw	r28, 0x1d	; 29
    b1f6:	0f b6       	in	r0, 0x3f	; 63
    b1f8:	f8 94       	cli
    b1fa:	de bf       	out	0x3e, r29	; 62
    b1fc:	0f be       	out	0x3f, r0	; 63
    b1fe:	cd bf       	out	0x3d, r28	; 61
    b200:	df 91       	pop	r29
    b202:	cf 91       	pop	r28
    b204:	1f 91       	pop	r17
    b206:	0f 91       	pop	r16
    b208:	ff 90       	pop	r15
    b20a:	ef 90       	pop	r14
    b20c:	df 90       	pop	r13
    b20e:	cf 90       	pop	r12
    b210:	bf 90       	pop	r11
    b212:	af 90       	pop	r10
    b214:	9f 90       	pop	r9
    b216:	8f 90       	pop	r8
    b218:	7f 90       	pop	r7
    b21a:	6f 90       	pop	r6
    b21c:	5f 90       	pop	r5
    b21e:	4f 90       	pop	r4
    b220:	3f 90       	pop	r3
    b222:	2f 90       	pop	r2
    b224:	08 95       	ret
						int16_t vStud = (g_ppmIns[chStud] - g_eeGeneral.trainer.calib[chStud]) /* *2 */;
						vStud /= 2;		// Only 2, because no *2 above
						vStud *= td->studWeight;
						vStud /= 31;
						vStud *= 4;
						switch ((uint8_t) td->mode) {
    b226:	22 30       	cpi	r18, 0x02	; 2
    b228:	09 f0       	breq	.+2      	; 0xb22c <_Z6perOutPih+0x1102>
    b22a:	f0 c8       	rjmp	.-3616   	; 0xa40c <_Z6perOutPih+0x2e2>
							case 1:
								v += vStud;
								break; // add-mode
							case 2:
								v = vStud;
    b22c:	8b 01       	movw	r16, r22
    b22e:	ee c8       	rjmp	.-3620   	; 0xa40c <_Z6perOutPih+0x2e2>
									}
								}
								if (throttleOK) {
									if (trainerThrottleValid) {
										if (trainerThrottleValue < -1004) {
											sticky = 1;
    b230:	71 e0       	ldi	r23, 0x01	; 1
    b232:	70 93 3c 0e 	sts	0x0E3C, r23
    b236:	b3 cf       	rjmp	.-154    	; 0xb19e <_Z6perOutPih+0x1074>

0000b238 <_Z14setStickCenterv>:
	}
	asm("");
}

void setStickCenter () // copy state of 3 primary to subtrim
{
    b238:	df 92       	push	r13
    b23a:	ef 92       	push	r14
    b23c:	ff 92       	push	r15
    b23e:	0f 93       	push	r16
    b240:	1f 93       	push	r17
    b242:	cf 93       	push	r28
    b244:	df 93       	push	r29
    b246:	cd b7       	in	r28, 0x3d	; 61
    b248:	de b7       	in	r29, 0x3e	; 62
    b24a:	c0 54       	subi	r28, 0x40	; 64
    b24c:	d1 09       	sbc	r29, r1
    b24e:	0f b6       	in	r0, 0x3f	; 63
    b250:	f8 94       	cli
    b252:	de bf       	out	0x3e, r29	; 62
    b254:	0f be       	out	0x3f, r0	; 63
    b256:	cd bf       	out	0x3d, r28	; 61
	uint8_t thisPhase;
	int16_t zero_chans512_before[NUM_CHNOUT];
	int16_t zero_chans512_after[NUM_CHNOUT];

	thisPhase = getFlightPhase ();
    b258:	0e 94 a1 1b 	call	0x3742	; 0x3742 <_Z14getFlightPhasev>
    b25c:	f8 2e       	mov	r15, r24
	CurrentPhase = thisPhase;
    b25e:	80 93 1a 0c 	sts	0x0C1A, r24

	perOut (zero_chans512_before, NO_TRAINER | NO_INPUT | FADE_FIRST | FADE_LAST); // do output loop - zero input channels
    b262:	63 e6       	ldi	r22, 0x63	; 99
    b264:	ce 01       	movw	r24, r28
    b266:	81 96       	adiw	r24, 0x21	; 33
    b268:	0e 94 95 50 	call	0xa12a	; 0xa12a <_Z6perOutPih>
	perOut (zero_chans512_after, NO_TRAINER | FADE_FIRST | FADE_LAST); // do output loop - zero input channels
    b26c:	61 e6       	ldi	r22, 0x61	; 97
    b26e:	ce 01       	movw	r24, r28
    b270:	01 96       	adiw	r24, 0x01	; 1
    b272:	0e 94 95 50 	call	0xa12a	; 0xa12a <_Z6perOutPih>
    b276:	ed e7       	ldi	r30, 0x7D	; 125
    b278:	f3 e0       	ldi	r31, 0x03	; 3
    b27a:	ae 01       	movw	r20, r28
    b27c:	4f 5d       	subi	r20, 0xDF	; 223
    b27e:	5f 4f       	sbci	r21, 0xFF	; 255
    b280:	8e 01       	movw	r16, r28
    b282:	0f 5f       	subi	r16, 0xFF	; 255
    b284:	1f 4f       	sbci	r17, 0xFF	; 255

	for (uint8_t i = 0; i < NUM_CHNOUT; i++) {
		int16_t v = g_model.limitData[i].offset;
    b286:	81 81       	ldd	r24, Z+1	; 0x01
    b288:	92 81       	ldd	r25, Z+2	; 0x02
		v += g_model.limitData[i].reverse ?
				(zero_chans512_before[i] - zero_chans512_after[i]) :
				(zero_chans512_after[i] - zero_chans512_before[i]);
    b28a:	20 81       	ld	r18, Z
    b28c:	22 23       	and	r18, r18
    b28e:	29 f0       	breq	.+10     	; 0xb29a <_Z14setStickCenterv+0x62>
    b290:	da 01       	movw	r26, r20
    b292:	2d 91       	ld	r18, X+
    b294:	3c 91       	ld	r19, X
    b296:	d8 01       	movw	r26, r16
    b298:	04 c0       	rjmp	.+8      	; 0xb2a2 <_Z14setStickCenterv+0x6a>
    b29a:	d8 01       	movw	r26, r16
    b29c:	2d 91       	ld	r18, X+
    b29e:	3c 91       	ld	r19, X
    b2a0:	da 01       	movw	r26, r20
    b2a2:	6d 91       	ld	r22, X+
    b2a4:	7c 91       	ld	r23, X
    b2a6:	26 1b       	sub	r18, r22
    b2a8:	37 0b       	sbc	r19, r23
    b2aa:	28 0f       	add	r18, r24
    b2ac:	39 1f       	adc	r19, r25
#define DIM(arr) (sizeof((arr))/sizeof((arr)[0]))

/// liefert Betrag des Arguments
template<class t> inline t abs(t a){ return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> inline t min(t a, t b){ return a<b?a:b; }
    b2ae:	28 3e       	cpi	r18, 0xE8	; 232
    b2b0:	b3 e0       	ldi	r27, 0x03	; 3
    b2b2:	3b 07       	cpc	r19, r27
    b2b4:	3c f4       	brge	.+14     	; 0xb2c4 <_Z14setStickCenterv+0x8c>
/// liefert das Maximum der Argumente
template<class t> inline t max(t a, t b){ return a>b?a:b; }
    b2b6:	29 31       	cpi	r18, 0x19	; 25
    b2b8:	8c ef       	ldi	r24, 0xFC	; 252
    b2ba:	38 07       	cpc	r19, r24
    b2bc:	34 f0       	brlt	.+12     	; 0xb2ca <_Z14setStickCenterv+0x92>
    b2be:	92 2f       	mov	r25, r18
    b2c0:	83 2f       	mov	r24, r19
    b2c2:	05 c0       	rjmp	.+10     	; 0xb2ce <_Z14setStickCenterv+0x96>
#define DIM(arr) (sizeof((arr))/sizeof((arr)[0]))

/// liefert Betrag des Arguments
template<class t> inline t abs(t a){ return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> inline t min(t a, t b){ return a<b?a:b; }
    b2c4:	98 ee       	ldi	r25, 0xE8	; 232
    b2c6:	83 e0       	ldi	r24, 0x03	; 3
    b2c8:	02 c0       	rjmp	.+4      	; 0xb2ce <_Z14setStickCenterv+0x96>
/// liefert das Maximum der Argumente
template<class t> inline t max(t a, t b){ return a>b?a:b; }
    b2ca:	98 e1       	ldi	r25, 0x18	; 24
    b2cc:	8c ef       	ldi	r24, 0xFC	; 252
		g_model.limitData[i].offset = max (min (v, (int16_t) 1000), (int16_t) -1000); // make sure the offset doesn't go haywire
    b2ce:	91 83       	std	Z+1, r25	; 0x01
    b2d0:	82 83       	std	Z+2, r24	; 0x02
    b2d2:	35 96       	adiw	r30, 0x05	; 5
    b2d4:	4e 5f       	subi	r20, 0xFE	; 254
    b2d6:	5f 4f       	sbci	r21, 0xFF	; 255
    b2d8:	0e 5f       	subi	r16, 0xFE	; 254
    b2da:	1f 4f       	sbci	r17, 0xFF	; 255
	CurrentPhase = thisPhase;

	perOut (zero_chans512_before, NO_TRAINER | NO_INPUT | FADE_FIRST | FADE_LAST); // do output loop - zero input channels
	perOut (zero_chans512_after, NO_TRAINER | FADE_FIRST | FADE_LAST); // do output loop - zero input channels

	for (uint8_t i = 0; i < NUM_CHNOUT; i++) {
    b2dc:	a3 e0       	ldi	r26, 0x03	; 3
    b2de:	ed 3c       	cpi	r30, 0xCD	; 205
    b2e0:	fa 07       	cpc	r31, r26
    b2e2:	89 f6       	brne	.-94     	; 0xb286 <_Z14setStickCenterv+0x4e>
    b2e4:	e1 2c       	mov	r14, r1
				(zero_chans512_after[i] - zero_chans512_before[i]);
		g_model.limitData[i].offset = max (min (v, (int16_t) 1000), (int16_t) -1000); // make sure the offset doesn't go haywire
	}

	for (uint8_t i = 0; i < 4; i++) {
		if (!IS_THROTTLE(i)) {
    b2e6:	b2 e0       	ldi	r27, 0x02	; 2
    b2e8:	eb 12       	cpse	r14, r27
    b2ea:	19 c0       	rjmp	.+50     	; 0xb31e <_Z14setStickCenterv+0xe6>
				(zero_chans512_before[i] - zero_chans512_after[i]) :
				(zero_chans512_after[i] - zero_chans512_before[i]);
		g_model.limitData[i].offset = max (min (v, (int16_t) 1000), (int16_t) -1000); // make sure the offset doesn't go haywire
	}

	for (uint8_t i = 0; i < 4; i++) {
    b2ec:	e3 94       	inc	r14
    b2ee:	24 e0       	ldi	r18, 0x04	; 4
    b2f0:	e2 12       	cpse	r14, r18
    b2f2:	f9 cf       	rjmp	.-14     	; 0xb2e6 <_Z14setStickCenterv+0xae>
					setTrimValue (phase, i, trim - original_trim);
				}
			}
		}
	}
	STORE_MODELVARS_TRIM;
    b2f4:	86 e0       	ldi	r24, 0x06	; 6
    b2f6:	0e 94 4e 20 	call	0x409c	; 0x409c <_Z7eeDirtyh>
	audioDefevent (AU_WARNING2);
    b2fa:	81 e0       	ldi	r24, 0x01	; 1
    b2fc:	0e 94 74 34 	call	0x68e8	; 0x68e8 <_Z13audioDefeventh>
}
    b300:	c0 5c       	subi	r28, 0xC0	; 192
    b302:	df 4f       	sbci	r29, 0xFF	; 255
    b304:	0f b6       	in	r0, 0x3f	; 63
    b306:	f8 94       	cli
    b308:	de bf       	out	0x3e, r29	; 62
    b30a:	0f be       	out	0x3f, r0	; 63
    b30c:	cd bf       	out	0x3d, r28	; 61
    b30e:	df 91       	pop	r29
    b310:	cf 91       	pop	r28
    b312:	1f 91       	pop	r17
    b314:	0f 91       	pop	r16
    b316:	ff 90       	pop	r15
    b318:	ef 90       	pop	r14
    b31a:	df 90       	pop	r13
    b31c:	08 95       	ret
		g_model.limitData[i].offset = max (min (v, (int16_t) 1000), (int16_t) -1000); // make sure the offset doesn't go haywire
	}

	for (uint8_t i = 0; i < 4; i++) {
		if (!IS_THROTTLE(i)) {
			int16_t original_trim = getTrimValue (thisPhase, i);
    b31e:	6e 2d       	mov	r22, r14
    b320:	8f 2d       	mov	r24, r15
    b322:	0e 94 70 12 	call	0x24e0	; 0x24e0 <_Z12getTrimValuehh>
    b326:	8c 01       	movw	r16, r24
			for (uint8_t phase = 0; phase < MAX_MODES; phase += 1) {
    b328:	d1 2c       	mov	r13, r1
				int16_t trim = getRawTrimValue (phase, i);
    b32a:	6e 2d       	mov	r22, r14
    b32c:	8d 2d       	mov	r24, r13
    b32e:	0e 94 30 12 	call	0x2460	; 0x2460 <_Z15getRawTrimValuehh>
				if (trim <= TRIM_EXTENDED_MAX) {
    b332:	85 3f       	cpi	r24, 0xF5	; 245
    b334:	a1 e0       	ldi	r26, 0x01	; 1
    b336:	9a 07       	cpc	r25, r26
    b338:	3c f4       	brge	.+14     	; 0xb348 <_Z14setStickCenterv+0x110>
					setTrimValue (phase, i, trim - original_trim);
    b33a:	ac 01       	movw	r20, r24
    b33c:	40 1b       	sub	r20, r16
    b33e:	51 0b       	sbc	r21, r17
    b340:	6e 2d       	mov	r22, r14
    b342:	8d 2d       	mov	r24, r13
    b344:	0e 94 85 12 	call	0x250a	; 0x250a <_Z12setTrimValuehhi>
	}

	for (uint8_t i = 0; i < 4; i++) {
		if (!IS_THROTTLE(i)) {
			int16_t original_trim = getTrimValue (thisPhase, i);
			for (uint8_t phase = 0; phase < MAX_MODES; phase += 1) {
    b348:	d3 94       	inc	r13
    b34a:	b4 e0       	ldi	r27, 0x04	; 4
    b34c:	db 12       	cpse	r13, r27
    b34e:	ed cf       	rjmp	.-38     	; 0xb32a <_Z14setStickCenterv+0xf2>
    b350:	cd cf       	rjmp	.-102    	; 0xb2ec <_Z14setStickCenterv+0xb4>

0000b352 <_Z9menuProc0h>:
		putsTelemValue(14 * FW, y - FH, frskyTelemetry[1].value, 1, /*blink|*/DBLSIZE | LEFT);
	}
}
#endif

void menuProc0 (uint8_t event) {
    b352:	8f 92       	push	r8
    b354:	9f 92       	push	r9
    b356:	af 92       	push	r10
    b358:	bf 92       	push	r11
    b35a:	cf 92       	push	r12
    b35c:	df 92       	push	r13
    b35e:	ef 92       	push	r14
    b360:	ff 92       	push	r15
    b362:	0f 93       	push	r16
    b364:	1f 93       	push	r17
    b366:	cf 93       	push	r28
    b368:	df 93       	push	r29
	static uint8_t trimSwLock;
	uint8_t view = g_eeGeneral.view & 0x0f;
    b36a:	90 91 24 06 	lds	r25, 0x0624
    b36e:	29 2f       	mov	r18, r25
    b370:	2f 70       	andi	r18, 0x0F	; 15
    b372:	f2 2e       	mov	r15, r18
	uint8_t tview = g_eeGeneral.view & 0x30;
//    static uint8_t displayCount = 0;

	StickScrollAllowed = 0;
    b374:	10 92 85 01 	sts	0x0185, r1

//#if defined(CPUM128) || defined(CPUM2561)
	if (!PopupData.PopupActive) {
    b378:	20 91 fc 0d 	lds	r18, 0x0DFC
    b37c:	21 11       	cpse	r18, r1
    b37e:	b2 c0       	rjmp	.+356    	; 0xb4e4 <_Z9menuProc0h+0x192>
#endif

void menuProc0 (uint8_t event) {
	static uint8_t trimSwLock;
	uint8_t view = g_eeGeneral.view & 0x0f;
	uint8_t tview = g_eeGeneral.view & 0x30;
    b380:	90 73       	andi	r25, 0x30	; 48
	StickScrollAllowed = 0;

//#if defined(CPUM128) || defined(CPUM2561)
	if (!PopupData.PopupActive) {
//#endif
		switch (event) {
    b382:	81 38       	cpi	r24, 0x81	; 129
    b384:	09 f4       	brne	.+2      	; 0xb388 <_Z9menuProc0h+0x36>
    b386:	98 c0       	rjmp	.+304    	; 0xb4b8 <_Z9menuProc0h+0x166>
    b388:	a0 f4       	brcc	.+40     	; 0xb3b2 <_Z9menuProc0h+0x60>
    b38a:	84 32       	cpi	r24, 0x24	; 36
    b38c:	09 f4       	brne	.+2      	; 0xb390 <_Z9menuProc0h+0x3e>
    b38e:	44 c0       	rjmp	.+136    	; 0xb418 <_Z9menuProc0h+0xc6>
    b390:	38 f4       	brcc	.+14     	; 0xb3a0 <_Z9menuProc0h+0x4e>
    b392:	82 32       	cpi	r24, 0x22	; 34
    b394:	09 f4       	brne	.+2      	; 0xb398 <_Z9menuProc0h+0x46>
    b396:	65 c0       	rjmp	.+202    	; 0xb462 <_Z9menuProc0h+0x110>
    b398:	83 32       	cpi	r24, 0x23	; 35
    b39a:	09 f4       	brne	.+2      	; 0xb39e <_Z9menuProc0h+0x4c>
    b39c:	55 c0       	rjmp	.+170    	; 0xb448 <_Z9menuProc0h+0xf6>
    b39e:	a2 c0       	rjmp	.+324    	; 0xb4e4 <_Z9menuProc0h+0x192>
    b3a0:	81 36       	cpi	r24, 0x61	; 97
    b3a2:	09 f4       	brne	.+2      	; 0xb3a6 <_Z9menuProc0h+0x54>
    b3a4:	81 c0       	rjmp	.+258    	; 0xb4a8 <_Z9menuProc0h+0x156>
    b3a6:	80 38       	cpi	r24, 0x80	; 128
    b3a8:	21 f1       	breq	.+72     	; 0xb3f2 <_Z9menuProc0h+0xa0>
    b3aa:	85 32       	cpi	r24, 0x25	; 37
    b3ac:	09 f4       	brne	.+2      	; 0xb3b0 <_Z9menuProc0h+0x5e>
    b3ae:	3e c0       	rjmp	.+124    	; 0xb42c <_Z9menuProc0h+0xda>
    b3b0:	99 c0       	rjmp	.+306    	; 0xb4e4 <_Z9menuProc0h+0x192>
    b3b2:	84 38       	cpi	r24, 0x84	; 132
    b3b4:	41 f1       	breq	.+80     	; 0xb406 <_Z9menuProc0h+0xb4>
    b3b6:	60 f4       	brcc	.+24     	; 0xb3d0 <_Z9menuProc0h+0x7e>
    b3b8:	82 38       	cpi	r24, 0x82	; 130
    b3ba:	09 f4       	brne	.+2      	; 0xb3be <_Z9menuProc0h+0x6c>
    b3bc:	60 c0       	rjmp	.+192    	; 0xb47e <_Z9menuProc0h+0x12c>
    b3be:	83 38       	cpi	r24, 0x83	; 131
    b3c0:	09 f0       	breq	.+2      	; 0xb3c4 <_Z9menuProc0h+0x72>
    b3c2:	90 c0       	rjmp	.+288    	; 0xb4e4 <_Z9menuProc0h+0x192>
//        STORE_GENERALVARS;     //eeWriteGeneral();
				eeDirty (EE_GENERAL | 0xA0);
				audioDefevent (AU_KEYPAD_DOWN);
				break;
			case EVT_KEY_LONG(KEY_UP):
				pushMenu (menuProcStatistic);
    b3c4:	83 e3       	ldi	r24, 0x33	; 51
    b3c6:	99 e3       	ldi	r25, 0x39	; 57
    b3c8:	0e 94 ab 18 	call	0x3156	; 0x3156 <_Z8pushMenuPFvhE>
				killEvents (event);
    b3cc:	83 e8       	ldi	r24, 0x83	; 131
    b3ce:	5e c0       	rjmp	.+188    	; 0xb48c <_Z9menuProc0h+0x13a>
	StickScrollAllowed = 0;

//#if defined(CPUM128) || defined(CPUM2561)
	if (!PopupData.PopupActive) {
//#endif
		switch (event) {
    b3d0:	8e 38       	cpi	r24, 0x8E	; 142
    b3d2:	79 f0       	breq	.+30     	; 0xb3f2 <_Z9menuProc0h+0xa0>
    b3d4:	8f 3b       	cpi	r24, 0xBF	; 191
    b3d6:	09 f4       	brne	.+2      	; 0xb3da <_Z9menuProc0h+0x88>
    b3d8:	77 c0       	rjmp	.+238    	; 0xb4c8 <_Z9menuProc0h+0x176>
    b3da:	85 38       	cpi	r24, 0x85	; 133
    b3dc:	09 f0       	breq	.+2      	; 0xb3e0 <_Z9menuProc0h+0x8e>
    b3de:	82 c0       	rjmp	.+260    	; 0xb4e4 <_Z9menuProc0h+0x192>
				}
#endif
				break;
			case EVT_KEY_LONG(KEY_LEFT):
#ifndef NOPOTSCROLL
				scroll_disabled = 1;
    b3e0:	81 e0       	ldi	r24, 0x01	; 1
    b3e2:	80 93 a1 0d 	sts	0x0DA1, r24
#endif
#ifdef INDEX_MENU
				pushMenu (menuProcIndex);
    b3e6:	87 e6       	ldi	r24, 0x67	; 103
    b3e8:	95 e4       	ldi	r25, 0x45	; 69
    b3ea:	0e 94 ab 18 	call	0x3156	; 0x3156 <_Z8pushMenuPFvhE>
#else
				pushMenu(menuProcSetup);
#endif
				killEvents (event);
    b3ee:	85 e8       	ldi	r24, 0x85	; 133
    b3f0:	28 c0       	rjmp	.+80     	; 0xb442 <_Z9menuProc0h+0xf0>
				{
#endif
#endif
//#if defined(CPUM128) || defined(CPUM2561)
#if 1
				PopupData.PopupActive = 2;
    b3f2:	92 e0       	ldi	r25, 0x02	; 2
    b3f4:	90 93 fc 0d 	sts	0x0DFC, r25
				PopupData.PopupIdx = 0;
    b3f8:	10 92 fd 0d 	sts	0x0DFD, r1
				killEvents (event);
    b3fc:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
				event = 0;
				Tevent = 0;
    b400:	10 92 e1 01 	sts	0x01E1, r1
#else
#ifdef FRSKY
			}
#endif
#endif
				break;
    b404:	6f c0       	rjmp	.+222    	; 0xb4e4 <_Z9menuProc0h+0x192>
			case EVT_KEY_LONG(KEY_RIGHT):
#ifndef NOPOTSCROLL
				scroll_disabled = 1;
    b406:	81 e0       	ldi	r24, 0x01	; 1
    b408:	80 93 a1 0d 	sts	0x0DA1, r24
#endif
				pushMenu (menuProcModelSelect);
    b40c:	8f e5       	ldi	r24, 0x5F	; 95
    b40e:	91 e4       	ldi	r25, 0x41	; 65
    b410:	0e 94 ab 18 	call	0x3156	; 0x3156 <_Z8pushMenuPFvhE>
				killEvents (event);
    b414:	84 e8       	ldi	r24, 0x84	; 132
    b416:	15 c0       	rjmp	.+42     	; 0xb442 <_Z9menuProc0h+0xf0>
				break;
			case EVT_KEY_BREAK(KEY_RIGHT):
#if defined(CPUM128) || defined(CPUM2561)
				if(view <= e_inputs1)
#else
				if (view == e_inputs1)
    b418:	42 e0       	ldi	r20, 0x02	; 2
    b41a:	f4 12       	cpse	r15, r20
    b41c:	63 c0       	rjmp	.+198    	; 0xb4e4 <_Z9menuProc0h+0x192>
					int8_t x;
					x = inputs_subview;
#if defined(CPUM128) || defined(CPUM2561)
					if ( ++x > ((view == e_inputs1) ? 3 : 1) ) x = 0;
#else
					if (++x > 2) x = 0;
    b41e:	80 91 50 0e 	lds	r24, 0x0E50
    b422:	8f 5f       	subi	r24, 0xFF	; 255
    b424:	83 30       	cpi	r24, 0x03	; 3
    b426:	54 f0       	brlt	.+20     	; 0xb43c <_Z9menuProc0h+0xea>
    b428:	80 e0       	ldi	r24, 0x00	; 0
    b42a:	08 c0       	rjmp	.+16     	; 0xb43c <_Z9menuProc0h+0xea>
				break;
			case EVT_KEY_BREAK(KEY_LEFT):
#if defined(CPUM128) || defined(CPUM2561)
				if(view <= e_inputs1)
#else
				if (view == e_inputs1)
    b42c:	52 e0       	ldi	r21, 0x02	; 2
    b42e:	f5 12       	cpse	r15, r21
    b430:	59 c0       	rjmp	.+178    	; 0xb4e4 <_Z9menuProc0h+0x192>
					int8_t x;
					x = inputs_subview;
#if defined(CPUM128) || defined(CPUM2561)
					if ( --x < 0 ) x = (view == e_inputs1) ? 3 : 1;
#else
					if (--x < 0) x = 2;
    b432:	80 91 50 0e 	lds	r24, 0x0E50
    b436:	81 50       	subi	r24, 0x01	; 1
    b438:	87 fd       	sbrc	r24, 7
    b43a:	82 e0       	ldi	r24, 0x02	; 2
#endif
					inputs_subview = x;
    b43c:	80 93 50 0e 	sts	0x0E50, r24
    b440:	51 c0       	rjmp	.+162    	; 0xb4e4 <_Z9menuProc0h+0x192>
#ifdef INDEX_MENU
				pushMenu (menuProcIndex);
#else
				pushMenu(menuProcSetup);
#endif
				killEvents (event);
    b442:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
				break;
    b446:	4e c0       	rjmp	.+156    	; 0xb4e4 <_Z9menuProc0h+0x192>
			case EVT_KEY_BREAK(KEY_UP):
				view += 1;
    b448:	f3 94       	inc	r15
				if (view >= MAX_VIEWS) view = 0;
    b44a:	83 e0       	ldi	r24, 0x03	; 3
    b44c:	8f 15       	cp	r24, r15
    b44e:	08 f4       	brcc	.+2      	; 0xb452 <_Z9menuProc0h+0x100>
    b450:	f1 2c       	mov	r15, r1
				g_eeGeneral.view = view | tview;
    b452:	9f 29       	or	r25, r15
    b454:	90 93 24 06 	sts	0x0624, r25
//        STORE_GENERALVARS;     //eeWriteGeneral();
				eeDirty (EE_GENERAL | 0xA0);
    b458:	81 ea       	ldi	r24, 0xA1	; 161
    b45a:	0e 94 4e 20 	call	0x409c	; 0x409c <_Z7eeDirtyh>
				audioDefevent (AU_KEYPAD_UP);
    b45e:	83 e1       	ldi	r24, 0x13	; 19
    b460:	30 c0       	rjmp	.+96     	; 0xb4c2 <_Z9menuProc0h+0x170>
				break;
			case EVT_KEY_BREAK(KEY_DOWN):
				if (view > 0) view = view - 1;
    b462:	ff 20       	and	r15, r15
    b464:	11 f0       	breq	.+4      	; 0xb46a <_Z9menuProc0h+0x118>
    b466:	fa 94       	dec	r15
    b468:	02 c0       	rjmp	.+4      	; 0xb46e <_Z9menuProc0h+0x11c>
				else view = MAX_VIEWS - 1;
    b46a:	33 e0       	ldi	r19, 0x03	; 3
    b46c:	f3 2e       	mov	r15, r19
				g_eeGeneral.view = view | tview;
    b46e:	9f 29       	or	r25, r15
    b470:	90 93 24 06 	sts	0x0624, r25
//        STORE_GENERALVARS;     //eeWriteGeneral();
				eeDirty (EE_GENERAL | 0xA0);
    b474:	81 ea       	ldi	r24, 0xA1	; 161
    b476:	0e 94 4e 20 	call	0x409c	; 0x409c <_Z7eeDirtyh>
				audioDefevent (AU_KEYPAD_DOWN);
    b47a:	84 e1       	ldi	r24, 0x14	; 20
    b47c:	22 c0       	rjmp	.+68     	; 0xb4c2 <_Z9menuProc0h+0x170>
#elif defined(FRSKY)
				view = e_telemetry;
				g_eeGeneral.view = view | tview;
				audioDefevent(AU_MENUS);
#elif defined(ELERES)
				ELERES_EnableRXD (); // enable eLeReS reception
    b47e:	0e 94 6e 6f 	call	0xdedc	; 0xdedc <_Z16ELERES_EnableRXDv>
				chainMenu (menuProceLeReS);
    b482:	8e ee       	ldi	r24, 0xEE	; 238
    b484:	9f e6       	ldi	r25, 0x6F	; 111
    b486:	0e 94 a2 13 	call	0x2744	; 0x2744 <_Z9chainMenuPFvhE>
#else
				pushMenu(menuProcStatistic);
#endif
				killEvents (event);
    b48a:	82 e8       	ldi	r24, 0x82	; 130
		}
	}
#endif

	asm("");
}
    b48c:	df 91       	pop	r29
    b48e:	cf 91       	pop	r28
    b490:	1f 91       	pop	r17
    b492:	0f 91       	pop	r16
    b494:	ff 90       	pop	r15
    b496:	ef 90       	pop	r14
    b498:	df 90       	pop	r13
    b49a:	cf 90       	pop	r12
    b49c:	bf 90       	pop	r11
    b49e:	af 90       	pop	r10
    b4a0:	9f 90       	pop	r9
    b4a2:	8f 90       	pop	r8
				ELERES_EnableRXD (); // enable eLeReS reception
				chainMenu (menuProceLeReS);
#else
				pushMenu(menuProcStatistic);
#endif
				killEvents (event);
    b4a4:	0c 94 63 2b 	jmp	0x56c6	; 0x56c6 <_Z10killEventsh>
				return;
			case EVT_KEY_FIRST(KEY_EXIT):
				if (s_timer[0].s_timerState == TMR_BEEPING) {
    b4a8:	80 91 e2 0d 	lds	r24, 0x0DE2
    b4ac:	82 30       	cpi	r24, 0x02	; 2
    b4ae:	d1 f4       	brne	.+52     	; 0xb4e4 <_Z9menuProc0h+0x192>
					s_timer[0].s_timerState = TMR_STOPPED;
    b4b0:	83 e0       	ldi	r24, 0x03	; 3
    b4b2:	80 93 e2 0d 	sts	0x0DE2, r24
    b4b6:	04 c0       	rjmp	.+8      	; 0xb4c0 <_Z9menuProc0h+0x16e>
					audioDefevent(AU_MENUS);
				}
#endif
				break;
			case EVT_KEY_LONG(KEY_EXIT):
				resetTimer1 ();
    b4b8:	0e 94 d7 4b 	call	0x97ae	; 0x97ae <_Z11resetTimer1v>
				resetTimer2 ();
    b4bc:	0e 94 dd 4b 	call	0x97ba	; 0x97ba <_Z11resetTimer2v>
#if (defined(FRSKY) | defined(HUB))							//!!!!!!!!!!!!!!!!
				AltOffset = AltMax = HomeSave = 0;					//!!!!!!!!!!!!!!!!
#endif
#endif
#endif
				audioDefevent (AU_MENUS);
    b4c0:	87 e1       	ldi	r24, 0x17	; 23
    b4c2:	0e 94 74 34 	call	0x68e8	; 0x68e8 <_Z13audioDefeventh>
				break;
    b4c6:	0e c0       	rjmp	.+28     	; 0xb4e4 <_Z9menuProc0h+0x192>
			case EVT_ENTRY:
				killEvents (KEY_EXIT);
    b4c8:	81 e0       	ldi	r24, 0x01	; 1
    b4ca:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
				killEvents (KEY_UP);
    b4ce:	83 e0       	ldi	r24, 0x03	; 3
    b4d0:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
				killEvents (KEY_DOWN);
    b4d4:	82 e0       	ldi	r24, 0x02	; 2
    b4d6:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
				trimSwLock = true;
    b4da:	81 e0       	ldi	r24, 0x01	; 1
    b4dc:	80 93 3e 0e 	sts	0x0E3E, r24
				inputs_subview = 0;
    b4e0:	10 92 50 0e 	sts	0x0E50, r1
//#if defined(CPUM128) || defined(CPUM2561)
	} // !PopupActive
//#endif
	{
		uint8_t tsw;
		tsw = getSwitch (g_model.trimSw, 0);
    b4e4:	40 e0       	ldi	r20, 0x00	; 0
    b4e6:	60 e0       	ldi	r22, 0x00	; 0
    b4e8:	80 91 35 02 	lds	r24, 0x0235
    b4ec:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_Z9getSwitchabh>
    b4f0:	c8 2f       	mov	r28, r24
		if (tsw && !trimSwLock) setStickCenter ();
    b4f2:	88 23       	and	r24, r24
    b4f4:	29 f0       	breq	.+10     	; 0xb500 <_Z9menuProc0h+0x1ae>
    b4f6:	80 91 3e 0e 	lds	r24, 0x0E3E
    b4fa:	81 11       	cpse	r24, r1
    b4fc:	01 c0       	rjmp	.+2      	; 0xb500 <_Z9menuProc0h+0x1ae>
    b4fe:	9c de       	rcall	.-712    	; 0xb238 <_Z14setStickCenterv>
		trimSwLock = tsw;
    b500:	c0 93 3e 0e 	sts	0x0E3E, r28
	if (view != e_telemetry) {
//#else
//		if ( tview == 0 ) {
#endif
	uint8_t x = FW * 2;
	uint8_t att = (g_vbat100mV < g_eeGeneral.vBatWarn ? BLINK : 0) | DBLSIZE;
    b504:	90 91 6c 01 	lds	r25, 0x016C
    b508:	80 91 11 06 	lds	r24, 0x0611
    b50c:	98 17       	cp	r25, r24
    b50e:	10 f4       	brcc	.+4      	; 0xb514 <_Z9menuProc0h+0x1c2>
    b510:	c6 e0       	ldi	r28, 0x06	; 6
    b512:	01 c0       	rjmp	.+2      	; 0xb516 <_Z9menuProc0h+0x1c4>
    b514:	c4 e0       	ldi	r28, 0x04	; 4
	uint8_t i;

	putsDblSizeName (0);
    b516:	80 e0       	ldi	r24, 0x00	; 0
    b518:	0e 94 f6 11 	call	0x23ec	; 0x23ec <_Z15putsDblSizeNameh>

	putsVBat (6 * FW + 1, 2 * FH, att | NO_UNIT);
    b51c:	4c 2f       	mov	r20, r28
    b51e:	40 68       	ori	r20, 0x80	; 128
    b520:	60 e1       	ldi	r22, 0x10	; 16
    b522:	85 e2       	ldi	r24, 0x25	; 37
    b524:	0e 94 43 29 	call	0x5286	; 0x5286 <_Z8putsVBathhh>
	lcd_putc (6 * FW + 2, 3 * FH, 'V');
    b528:	46 e5       	ldi	r20, 0x56	; 86
    b52a:	68 e1       	ldi	r22, 0x18	; 24
    b52c:	86 e2       	ldi	r24, 0x26	; 38
    b52e:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <_Z8lcd_putchhc>

//        if ( TimerConfig[0].tmrModeA != TMRMODE_NONE )
//				{
	displayTimer (x + 14 * FW - 3, FH * 2, 0, DBLSIZE);
    b532:	24 e0       	ldi	r18, 0x04	; 4
    b534:	40 e0       	ldi	r20, 0x00	; 0
    b536:	60 e1       	ldi	r22, 0x10	; 16
    b538:	8d e5       	ldi	r24, 0x5D	; 93
    b53a:	0e 94 ab 37 	call	0x6f56	; 0x6f56 <_Z12displayTimerhhhh>
	putsTmrMode (x + 7 * FW - FW / 2, FH * 3, 0, 0);
    b53e:	20 e0       	ldi	r18, 0x00	; 0
    b540:	40 e0       	ldi	r20, 0x00	; 0
    b542:	68 e1       	ldi	r22, 0x18	; 24
    b544:	83 e3       	ldi	r24, 0x33	; 51
    b546:	0e 94 15 11 	call	0x222a	; 0x222a <_Z11putsTmrModehhhh>
//        }

	i = getFlightPhase ();
    b54a:	0e 94 a1 1b 	call	0x3742	; 0x3742 <_Z14getFlightPhasev>
	if (i) {
    b54e:	88 23       	and	r24, r24
    b550:	79 f0       	breq	.+30     	; 0xb570 <_Z9menuProc0h+0x21e>
		dispFlightModename (6 * FW + 2, 2 * FH, i);
    b552:	48 2f       	mov	r20, r24
    b554:	60 e1       	ldi	r22, 0x10	; 16
    b556:	86 e2       	ldi	r24, 0x26	; 38
    b558:	0e 94 dc 44 	call	0x89b8	; 0x89b8 <_Z18dispFlightModenamehhh>
		lcd_rect (6 * FW + 1, 2 * FH - 1, 6 * FW + 2, 9);
    b55c:	29 e0       	ldi	r18, 0x09	; 9
    b55e:	46 e2       	ldi	r20, 0x26	; 38
    b560:	6f e0       	ldi	r22, 0x0F	; 15
    b562:	85 e2       	ldi	r24, 0x25	; 37
    b564:	0e 94 98 29 	call	0x5330	; 0x5330 <_Z8lcd_recthhhh>
	if (view != e_telemetry) {
//#else
//		if ( tview == 0 ) {
#endif
	uint8_t x = FW * 2;
	uint8_t att = (g_vbat100mV < g_eeGeneral.vBatWarn ? BLINK : 0) | DBLSIZE;
    b568:	00 e0       	ldi	r16, 0x00	; 0
#endif
					{
				lcd_vline (xm - 1, ym - 1, 3);
				lcd_vline (xm + 1, ym - 1, 3);
			}
			ym -= val;
    b56a:	2f e1       	ldi	r18, 0x1F	; 31
    b56c:	c2 2e       	mov	r12, r18
    b56e:	43 c0       	rjmp	.+134    	; 0xb5f6 <_Z9menuProc0h+0x2a4>
	i = getFlightPhase ();
	if (i) {
		dispFlightModename (6 * FW + 2, 2 * FH, i);
		lcd_rect (6 * FW + 1, 2 * FH - 1, 6 * FW + 2, 9);
	} else {
		lcd_putsAttIdx (6 * FW + 2, 2 * FH, PSTR(STR_TRIM_OPTS), g_model.trimInc, 0);
    b570:	00 e0       	ldi	r16, 0x00	; 0
    b572:	20 91 33 02 	lds	r18, 0x0233
    b576:	48 e7       	ldi	r20, 0x78	; 120
    b578:	58 e1       	ldi	r21, 0x18	; 24
    b57a:	60 e1       	ldi	r22, 0x10	; 16
    b57c:	86 e2       	ldi	r24, 0x26	; 38
    b57e:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
		if (g_model.thrTrim) {
    b582:	80 91 32 02 	lds	r24, 0x0232
    b586:	80 ff       	sbrs	r24, 0
    b588:	ef cf       	rjmp	.-34     	; 0xb568 <_Z9menuProc0h+0x216>
			lcd_puts_P (x + 8 * FW - FW / 2 - 1, 2 * FH, PSTR(STR_TTM));
    b58a:	44 e7       	ldi	r20, 0x74	; 116
    b58c:	58 e1       	ldi	r21, 0x18	; 24
    b58e:	60 e1       	ldi	r22, 0x10	; 16
    b590:	88 e3       	ldi	r24, 0x38	; 56
    b592:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <_Z10lcd_puts_PhhPKc>
    b596:	e8 cf       	rjmp	.-48     	; 0xb568 <_Z9menuProc0h+0x216>
		int8_t valt = g_model.trim[i];
#endif

#endif
		uint8_t centre = (valt == 0);
		int8_t val = max ((int8_t) - (TL + 1), min ((int8_t) (TL + 1), (int8_t) (valt / 4)));
    b598:	35 95       	asr	r19
    b59a:	27 95       	ror	r18
    b59c:	35 95       	asr	r19
    b59e:	27 95       	ror	r18
    b5a0:	24 3e       	cpi	r18, 0xE4	; 228
    b5a2:	0c f4       	brge	.+2      	; 0xb5a6 <_Z9menuProc0h+0x254>
    b5a4:	24 ee       	ldi	r18, 0xE4	; 228
    b5a6:	e2 2e       	mov	r14, r18
    b5a8:	9c e1       	ldi	r25, 0x1C	; 28
    b5aa:	92 17       	cp	r25, r18
    b5ac:	14 f4       	brge	.+4      	; 0xb5b2 <_Z9menuProc0h+0x260>
    b5ae:	8c e1       	ldi	r24, 0x1C	; 28
    b5b0:	e8 2e       	mov	r14, r24
    b5b2:	8f ef       	ldi	r24, 0xFF	; 255
    b5b4:	80 0f       	add	r24, r16
//            if(vert[i]){
		if ( (i == 1) || (i == 2)) {
			ym = 31;
			lcd_vline (xm, ym - TL, TL * 2);
    b5b6:	46 e3       	ldi	r20, 0x36	; 54

#endif
		uint8_t centre = (valt == 0);
		int8_t val = max ((int8_t) - (TL + 1), min ((int8_t) (TL + 1), (int8_t) (valt / 4)));
//            if(vert[i]){
		if ( (i == 1) || (i == 2)) {
    b5b8:	82 30       	cpi	r24, 0x02	; 2
    b5ba:	08 f0       	brcs	.+2      	; 0xb5be <_Z9menuProc0h+0x26c>
    b5bc:	3d c0       	rjmp	.+122    	; 0xb638 <_Z9menuProc0h+0x2e6>
			ym = 31;
			lcd_vline (xm, ym - TL, TL * 2);
    b5be:	64 e0       	ldi	r22, 0x04	; 4
    b5c0:	81 2f       	mov	r24, r17
    b5c2:	0e 94 d5 27 	call	0x4faa	; 0x4faa <_Z9lcd_vlinehha>

#ifdef FIX_MODE
			if ( (i == 1)
    b5c6:	01 30       	cpi	r16, 0x01	; 1
    b5c8:	51 f1       	breq	.+84     	; 0xb61e <_Z9menuProc0h+0x2cc>
					|| ! (g_model.thrTrim))
    b5ca:	80 91 32 02 	lds	r24, 0x0232
    b5ce:	80 ff       	sbrs	r24, 0
    b5d0:	26 c0       	rjmp	.+76     	; 0xb61e <_Z9menuProc0h+0x2cc>
#endif
					{
				lcd_vline (xm - 1, ym - 1, 3);
				lcd_vline (xm + 1, ym - 1, 3);
			}
			ym -= val;
    b5d2:	ec 2d       	mov	r30, r12
    b5d4:	ee 19       	sub	r30, r14
    b5d6:	ee 2e       	mov	r14, r30
			lcd_hline (xm - TL, ym, TL * 2);
			lcd_hline (xm - 1, ym - 1, 3);
			lcd_hline (xm - 1, ym + 1, 3);
			xm += val;
		}
		DO_SQUARE (xm, ym, 7);
    b5d8:	47 e0       	ldi	r20, 0x07	; 7
    b5da:	6e 2d       	mov	r22, r14
    b5dc:	81 2f       	mov	r24, r17
    b5de:	0e 94 f7 38 	call	0x71ee	; 0x71ee <_Z9DO_SQUAREhhh>
		if (centre) {
    b5e2:	cd 2b       	or	r28, r29
    b5e4:	29 f4       	brne	.+10     	; 0xb5f0 <_Z9menuProc0h+0x29e>
			DO_SQUARE (xm, ym, 5);
    b5e6:	45 e0       	ldi	r20, 0x05	; 5
    b5e8:	6e 2d       	mov	r22, r14
    b5ea:	81 2f       	mov	r24, r17
    b5ec:	0e 94 f7 38 	call	0x71ee	; 0x71ee <_Z9DO_SQUAREhhh>
		if (g_model.thrTrim) {
			lcd_puts_P (x + 8 * FW - FW / 2 - 1, 2 * FH, PSTR(STR_TTM));
		}
	}
	//trim sliders
	for (uint8_t i = 0; i < 4; i++) {
    b5f0:	0f 5f       	subi	r16, 0xFF	; 255
    b5f2:	04 30       	cpi	r16, 0x04	; 4
    b5f4:	b9 f1       	breq	.+110    	; 0xb664 <_Z9menuProc0h+0x312>
		const static prog_uint8_t APM xt[4] = {
				128 * 1 / 4 + 2, 4, 128 - 4, 128 * 3 / 4 - 2 };
//            static uint8_t vert[4] = {0,1,1,0};
		uint8_t xm, ym;
#ifdef FIX_MODE
		xm = modeFixValue (i);
    b5f6:	80 2f       	mov	r24, r16
    b5f8:	0e 94 6d 10 	call	0x20da	; 0x20da <_Z12modeFixValueh>
		xm = pgm_read_byte(xt + xm - 1);
    b5fc:	e8 2f       	mov	r30, r24
    b5fe:	f0 e0       	ldi	r31, 0x00	; 0
    b600:	e1 59       	subi	r30, 0x91	; 145
    b602:	f7 4e       	sbci	r31, 0xE7	; 231
    b604:	14 91       	lpm	r17, Z
#else
		xm = pgm_read_byte(xt+i);
#endif
#ifdef PHASES
		int16_t valt = getTrimValue (CurrentPhase, i);
    b606:	60 2f       	mov	r22, r16
    b608:	80 91 1a 0c 	lds	r24, 0x0C1A
    b60c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <_Z12getTrimValuehh>
    b610:	ec 01       	movw	r28, r24
		int8_t valt = g_model.trim[i];
#endif

#endif
		uint8_t centre = (valt == 0);
		int8_t val = max ((int8_t) - (TL + 1), min ((int8_t) (TL + 1), (int8_t) (valt / 4)));
    b612:	9c 01       	movw	r18, r24
    b614:	97 ff       	sbrs	r25, 7
    b616:	c0 cf       	rjmp	.-128    	; 0xb598 <_Z9menuProc0h+0x246>
    b618:	2d 5f       	subi	r18, 0xFD	; 253
    b61a:	3f 4f       	sbci	r19, 0xFF	; 255
    b61c:	bd cf       	rjmp	.-134    	; 0xb598 <_Z9menuProc0h+0x246>
					|| ! (g_model.thrTrim))
#else
					if(((g_eeGeneral.stickMode&1) != (i&1)) || !(g_model.thrTrim))
#endif
					{
				lcd_vline (xm - 1, ym - 1, 3);
    b61e:	43 e0       	ldi	r20, 0x03	; 3
    b620:	6e e1       	ldi	r22, 0x1E	; 30
    b622:	8f ef       	ldi	r24, 0xFF	; 255
    b624:	81 0f       	add	r24, r17
    b626:	0e 94 d5 27 	call	0x4faa	; 0x4faa <_Z9lcd_vlinehha>
				lcd_vline (xm + 1, ym - 1, 3);
    b62a:	43 e0       	ldi	r20, 0x03	; 3
    b62c:	6e e1       	ldi	r22, 0x1E	; 30
    b62e:	81 e0       	ldi	r24, 0x01	; 1
    b630:	81 0f       	add	r24, r17
    b632:	0e 94 d5 27 	call	0x4faa	; 0x4faa <_Z9lcd_vlinehha>
    b636:	cd cf       	rjmp	.-102    	; 0xb5d2 <_Z9menuProc0h+0x280>
			}
			ym -= val;
		} else {
			ym = 59;
			lcd_hline (xm - TL, ym, TL * 2);
    b638:	6b e3       	ldi	r22, 0x3B	; 59
    b63a:	85 ee       	ldi	r24, 0xE5	; 229
    b63c:	81 0f       	add	r24, r17
    b63e:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <_Z9lcd_hlinehha>
			lcd_hline (xm - 1, ym - 1, 3);
    b642:	dd 24       	eor	r13, r13
    b644:	da 94       	dec	r13
    b646:	d1 0e       	add	r13, r17
    b648:	43 e0       	ldi	r20, 0x03	; 3
    b64a:	6a e3       	ldi	r22, 0x3A	; 58
    b64c:	8d 2d       	mov	r24, r13
    b64e:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <_Z9lcd_hlinehha>
			lcd_hline (xm - 1, ym + 1, 3);
    b652:	43 e0       	ldi	r20, 0x03	; 3
    b654:	6c e3       	ldi	r22, 0x3C	; 60
    b656:	8d 2d       	mov	r24, r13
    b658:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <_Z9lcd_hlinehha>
			xm += val;
    b65c:	1e 0d       	add	r17, r14
				lcd_vline (xm - 1, ym - 1, 3);
				lcd_vline (xm + 1, ym - 1, 3);
			}
			ym -= val;
		} else {
			ym = 59;
    b65e:	bb e3       	ldi	r27, 0x3B	; 59
    b660:	eb 2e       	mov	r14, r27
    b662:	ba cf       	rjmp	.-140    	; 0xb5d8 <_Z9menuProc0h+0x286>
	displayTimer(18 * FW + 3, 0, 0, 0);
//        }
}
#endif

	if (view < e_inputs1) {
    b664:	f1 e0       	ldi	r31, 0x01	; 1
    b666:	ff 15       	cp	r31, r15
    b668:	08 f4       	brcc	.+2      	; 0xb66c <_Z9menuProc0h+0x31a>
    b66a:	89 c0       	rjmp	.+274    	; 0xb77e <_Z9menuProc0h+0x42c>
    b66c:	0f e7       	ldi	r16, 0x7F	; 127
    b66e:	1d e0       	ldi	r17, 0x0D	; 13
    b670:	e1 2c       	mov	r14, r1
				case e_outputBars:
#define WBAR2 (50/2)
					x0 = i < 4 ? 128 / 4 + 2 : 128 * 3 / 4 - 2;
					y0 = 38 + (i % 4) * 5;
					int16_t limit = (g_model.extendedLimits ? 1280 : 1024);
					int8_t l = (abs(val) * WBAR2 + 512) / limit;
    b672:	f9 e1       	ldi	r31, 0x19	; 25
    b674:	df 2e       	mov	r13, r31
			int16_t val = g_chans512[i];
#endif
			//val += g_model.limitData[i].reverse ? g_model.limitData[i].offset : -g_model.limitData[i].offset;
			switch (view) {
				case e_outputValues:
					x0 = (i % 4 * 9 + 3) * FW / 2;
    b676:	ab e1       	ldi	r26, 0x1B	; 27
    b678:	ca 2e       	mov	r12, r26
			uint8_t x0, y0;
#if defined(CPUM128) || defined(CPUM2561)
			uint8_t chan = 8 * inputs_subview + i;
			int16_t val = g_chans512[chan];
#else
			int16_t val = g_chans512[i];
    b67a:	f8 01       	movw	r30, r16
    b67c:	c1 91       	ld	r28, Z+
    b67e:	d1 91       	ld	r29, Z+
    b680:	8f 01       	movw	r16, r30
    b682:	8e 2d       	mov	r24, r14
    b684:	83 70       	andi	r24, 0x03	; 3
#endif
			//val += g_model.limitData[i].reverse ? g_model.limitData[i].offset : -g_model.limitData[i].offset;
			switch (view) {
    b686:	f1 e0       	ldi	r31, 0x01	; 1
    b688:	ff 16       	cp	r15, r31
    b68a:	39 f1       	breq	.+78     	; 0xb6da <_Z9menuProc0h+0x388>
				case e_outputValues:
					x0 = (i % 4 * 9 + 3) * FW / 2;
    b68c:	8c 9d       	mul	r24, r12
    b68e:	80 2d       	mov	r24, r0
    b690:	11 24       	eor	r1, r1
					y0 = i / 4 * FH + 40;
					y0 = i < 4 ? 40 : 48; // /4*FH+40;
    b692:	23 e0       	ldi	r18, 0x03	; 3
    b694:	2e 15       	cp	r18, r14
    b696:	10 f0       	brcs	.+4      	; 0xb69c <_Z9menuProc0h+0x34a>
    b698:	68 e2       	ldi	r22, 0x28	; 40
    b69a:	01 c0       	rjmp	.+2      	; 0xb69e <_Z9menuProc0h+0x34c>
    b69c:	60 e3       	ldi	r22, 0x30	; 48
					// *1000/1024 = x - x/8 + x/32
#define GPERC(x)  (x - x/32 + x/128)
					lcd_outdezAtt (x0 + 4 * FW, y0, GPERC(val), PREC1);
    b69e:	9e 01       	movw	r18, r28
    b6a0:	d7 ff       	sbrs	r29, 7
    b6a2:	02 c0       	rjmp	.+4      	; 0xb6a8 <_Z9menuProc0h+0x356>
    b6a4:	21 5e       	subi	r18, 0xE1	; 225
    b6a6:	3f 4f       	sbci	r19, 0xFF	; 255
    b6a8:	e5 e0       	ldi	r30, 0x05	; 5
    b6aa:	35 95       	asr	r19
    b6ac:	27 95       	ror	r18
    b6ae:	ea 95       	dec	r30
    b6b0:	e1 f7       	brne	.-8      	; 0xb6aa <_Z9menuProc0h+0x358>
    b6b2:	ae 01       	movw	r20, r28
    b6b4:	42 1b       	sub	r20, r18
    b6b6:	53 0b       	sbc	r21, r19
    b6b8:	9a 01       	movw	r18, r20
    b6ba:	d7 ff       	sbrs	r29, 7
    b6bc:	02 c0       	rjmp	.+4      	; 0xb6c2 <_Z9menuProc0h+0x370>
    b6be:	c1 58       	subi	r28, 0x81	; 129
    b6c0:	df 4f       	sbci	r29, 0xFF	; 255
    b6c2:	ae 01       	movw	r20, r28
    b6c4:	44 0f       	add	r20, r20
    b6c6:	45 2f       	mov	r20, r21
    b6c8:	44 1f       	adc	r20, r20
    b6ca:	55 0b       	sbc	r21, r21
    b6cc:	42 0f       	add	r20, r18
    b6ce:	53 1f       	adc	r21, r19
    b6d0:	20 e2       	ldi	r18, 0x20	; 32
    b6d2:	8f 5d       	subi	r24, 0xDF	; 223
    b6d4:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
					break;
    b6d8:	4d c0       	rjmp	.+154    	; 0xb774 <_Z9menuProc0h+0x422>
				case e_outputBars:
#define WBAR2 (50/2)
					x0 = i < 4 ? 128 / 4 + 2 : 128 * 3 / 4 - 2;
    b6da:	53 e0       	ldi	r21, 0x03	; 3
    b6dc:	5e 15       	cp	r21, r14
    b6de:	18 f0       	brcs	.+6      	; 0xb6e6 <_Z9menuProc0h+0x394>
    b6e0:	92 e2       	ldi	r25, 0x22	; 34
    b6e2:	a9 2e       	mov	r10, r25
    b6e4:	02 c0       	rjmp	.+4      	; 0xb6ea <_Z9menuProc0h+0x398>
    b6e6:	be e5       	ldi	r27, 0x5E	; 94
    b6e8:	ab 2e       	mov	r10, r27
					y0 = 38 + (i % 4) * 5;
    b6ea:	b8 2e       	mov	r11, r24
    b6ec:	bb 0c       	add	r11, r11
    b6ee:	bb 0c       	add	r11, r11
    b6f0:	b8 0e       	add	r11, r24
    b6f2:	a6 e2       	ldi	r26, 0x26	; 38
    b6f4:	8a 2e       	mov	r8, r26
    b6f6:	8b 0c       	add	r8, r11
					int16_t limit = (g_model.extendedLimits ? 1280 : 1024);
    b6f8:	80 91 37 02 	lds	r24, 0x0237
    b6fc:	81 ff       	sbrs	r24, 1
    b6fe:	03 c0       	rjmp	.+6      	; 0xb706 <_Z9menuProc0h+0x3b4>
    b700:	60 e0       	ldi	r22, 0x00	; 0
    b702:	75 e0       	ldi	r23, 0x05	; 5
    b704:	02 c0       	rjmp	.+4      	; 0xb70a <_Z9menuProc0h+0x3b8>
    b706:	60 e0       	ldi	r22, 0x00	; 0
    b708:	74 e0       	ldi	r23, 0x04	; 4
					int8_t l = (abs(val) * WBAR2 + 512) / limit;
    b70a:	ae 01       	movw	r20, r28
    b70c:	d7 ff       	sbrs	r29, 7
    b70e:	04 c0       	rjmp	.+8      	; 0xb718 <_Z9menuProc0h+0x3c6>
    b710:	44 27       	eor	r20, r20
    b712:	55 27       	eor	r21, r21
    b714:	4c 1b       	sub	r20, r28
    b716:	5d 0b       	sbc	r21, r29
    b718:	d4 9e       	mul	r13, r20
    b71a:	f0 01       	movw	r30, r0
    b71c:	d5 9e       	mul	r13, r21
    b71e:	f0 0d       	add	r31, r0
    b720:	11 24       	eor	r1, r1
    b722:	cf 01       	movw	r24, r30
    b724:	9e 5f       	subi	r25, 0xFE	; 254
    b726:	0e 94 ea 71 	call	0xe3d4	; 0xe3d4 <__divmodhi4>
    b72a:	96 2e       	mov	r9, r22
    b72c:	89 e1       	ldi	r24, 0x19	; 25
    b72e:	86 17       	cp	r24, r22
    b730:	14 f4       	brge	.+4      	; 0xb736 <_Z9menuProc0h+0x3e4>
    b732:	f9 e1       	ldi	r31, 0x19	; 25
    b734:	9f 2e       	mov	r9, r31
					if (l > WBAR2) l = WBAR2; // prevent bars from going over the end - comment for debugging

					lcd_hlineStip (x0 - WBAR2, y0, WBAR2 * 2 + 1, 0x55);
    b736:	25 e5       	ldi	r18, 0x55	; 85
    b738:	43 e3       	ldi	r20, 0x33	; 51
    b73a:	68 2d       	mov	r22, r8
    b73c:	87 ee       	ldi	r24, 0xE7	; 231
    b73e:	8a 0d       	add	r24, r10
    b740:	0e 94 98 27 	call	0x4f30	; 0x4f30 <_Z13lcd_hlineStiphhah>
					lcd_vline (x0, y0 - 2, 5);
    b744:	45 e0       	ldi	r20, 0x05	; 5
    b746:	64 e2       	ldi	r22, 0x24	; 36
    b748:	6b 0d       	add	r22, r11
    b74a:	8a 2d       	mov	r24, r10
    b74c:	0e 94 d5 27 	call	0x4faa	; 0x4faa <_Z9lcd_vlinehha>
					if (val > 0) {
    b750:	1c 16       	cp	r1, r28
    b752:	1d 06       	cpc	r1, r29
    b754:	14 f4       	brge	.+4      	; 0xb75a <_Z9menuProc0h+0x408>
						x0 += 1;
    b756:	a3 94       	inc	r10
    b758:	01 c0       	rjmp	.+2      	; 0xb75c <_Z9menuProc0h+0x40a>
					} else {
						x0 -= l;
    b75a:	a9 18       	sub	r10, r9
					}
					lcd_hline (x0, y0 + 1, l);
    b75c:	67 e2       	ldi	r22, 0x27	; 39
    b75e:	6b 0d       	add	r22, r11
    b760:	49 2d       	mov	r20, r9
    b762:	8a 2d       	mov	r24, r10
    b764:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <_Z9lcd_hlinehha>
					lcd_hline (x0, y0 - 1, l);
    b768:	6b 2d       	mov	r22, r11
    b76a:	6b 5d       	subi	r22, 0xDB	; 219
    b76c:	49 2d       	mov	r20, r9
    b76e:	8a 2d       	mov	r24, r10
    b770:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <_Z9lcd_hlinehha>
		lcd_hlineStip(46, 33, 36, 0x55 );
		lcd_hlineStip(46, 34, 36, 0x55 );
		lcd_hlineStip(46 + inputs_subview * 18, 33, 18, 0xAA );
		lcd_hlineStip(46 + inputs_subview * 18, 34, 18, 0xAA );
#endif
		for (uint8_t i = 0; i < 8; i++) {
    b774:	e3 94       	inc	r14
    b776:	98 e0       	ldi	r25, 0x08	; 8
    b778:	e9 12       	cpse	r14, r25
    b77a:	7f cf       	rjmp	.-258    	; 0xb67a <_Z9menuProc0h+0x328>
    b77c:	28 c0       	rjmp	.+80     	; 0xb7ce <_Z9menuProc0h+0x47c>
//		lcd_outhex4( 0, 1*FH, SportId ) ;
//		lcd_outhex4( 0, 2*FH, SportValue ) ;

	}
#endif
	else if (view < e_timer2) {
    b77e:	e2 e0       	ldi	r30, 0x02	; 2
    b780:	fe 12       	cpse	r15, r30
    b782:	19 c0       	rjmp	.+50     	; 0xb7b6 <_Z9menuProc0h+0x464>

		doMainScreenGrphics ();
    b784:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <_Z19doMainScreenGrphicsv>

		uint8_t a = inputs_subview;
    b788:	60 91 50 0e 	lds	r22, 0x0E50
		if (a != 0) a = a * 6 + 3;		// 0, 9, 15
    b78c:	66 23       	and	r22, r22
    b78e:	29 f0       	breq	.+10     	; 0xb79a <_Z9menuProc0h+0x448>
    b790:	86 2f       	mov	r24, r22
    b792:	88 0f       	add	r24, r24
    b794:	68 0f       	add	r22, r24
    b796:	66 0f       	add	r22, r22
    b798:	6d 5f       	subi	r22, 0xFD	; 253
			if (j == 1) {
				a = inputs_subview;
				a += 1;
				a *= 6;		// 6, 12, 18
			}
			switchDisplay (j, a);
    b79a:	80 e0       	ldi	r24, 0x00	; 0
    b79c:	0e 94 e6 4d 	call	0x9bcc	; 0x9bcc <_Z13switchDisplayhh>
		uint8_t a = inputs_subview;
		if (a != 0) a = a * 6 + 3;		// 0, 9, 15
		uint8_t j;
		for (j = 0; j < 2; j += 1) {
			if (j == 1) {
				a = inputs_subview;
    b7a0:	80 91 50 0e 	lds	r24, 0x0E50
				a += 1;
    b7a4:	8f 5f       	subi	r24, 0xFF	; 255
				a *= 6;		// 6, 12, 18
    b7a6:	68 2f       	mov	r22, r24
    b7a8:	66 0f       	add	r22, r22
    b7aa:	68 0f       	add	r22, r24
    b7ac:	66 0f       	add	r22, r22
			}
			switchDisplay (j, a);
    b7ae:	81 e0       	ldi	r24, 0x01	; 1
    b7b0:	0e 94 e6 4d 	call	0x9bcc	; 0x9bcc <_Z13switchDisplayhh>
    b7b4:	0c c0       	rjmp	.+24     	; 0xb7ce <_Z9menuProc0h+0x47c>
//					for(uint8_t i=a; i<(a+3); i++) lcd_putsnAtt((2+j*15)*FW-2 ,(i-a+4)*FH,Str_Switches+3*i,3,getSwitch(i+1, 0) ? INVERS : 0);
		}
	} else  // New Timer2 display
	{
		displayTimer (30 + 5 * FW, FH * 5, 1, DBLSIZE);
    b7b6:	24 e0       	ldi	r18, 0x04	; 4
    b7b8:	41 e0       	ldi	r20, 0x01	; 1
    b7ba:	68 e2       	ldi	r22, 0x28	; 40
    b7bc:	8c e3       	ldi	r24, 0x3C	; 60
    b7be:	0e 94 ab 37 	call	0x6f56	; 0x6f56 <_Z12displayTimerhhhh>
		putsTmrMode (30 - 2 * FW - FW / 2, FH * 6, 0, 0x80);
    b7c2:	20 e8       	ldi	r18, 0x80	; 128
    b7c4:	40 e0       	ldi	r20, 0x00	; 0
    b7c6:	60 e3       	ldi	r22, 0x30	; 48
    b7c8:	8f e0       	ldi	r24, 0x0F	; 15
    b7ca:	0e 94 15 11 	call	0x222a	; 0x222a <_Z11putsTmrModehhhh>
//extern uint8_t TezDebug1 ;
//	lcd_outhex4( 0, 0, (TezDebug1 << 8) | TezDebug0 ) ;

//#if defined(CPUM128) || defined(CPUM2561)
#if 1
	if (PopupData.PopupActive) {
    b7ce:	80 91 fc 0d 	lds	r24, 0x0DFC
    b7d2:	88 23       	and	r24, r24
    b7d4:	61 f1       	breq	.+88     	; 0xb82e <_Z9menuProc0h+0x4dc>
		if (PopupData.PopupActive == 1) {
			popidx = 5;
			popaction = doPopup(PSTR("Zero Alt.\0Zero A1 Offs\0Zero A2 Offs\0Reset GPS"), 0x0F, 14);
		} else {
#endif
		popaction = doPopup (Str_Main_Popup, 0x1F, 14);
    b7d6:	4e e0       	ldi	r20, 0x0E	; 14
    b7d8:	6f e1       	ldi	r22, 0x1F	; 31
    b7da:	85 e5       	ldi	r24, 0x55	; 85
    b7dc:	9d e1       	ldi	r25, 0x1D	; 29
    b7de:	0e 94 bb 40 	call	0x8176	; 0x8176 <_Z7doPopupPKchh>
#endif
//		uint8_t popaction = popupProcess( 4 ) ;
//		lcd_char_inverse( 4*FW, (popidx+1)*FH, 12*FW, 0 ) ;
//		popidx = popTranslate( popidx, mask ) ;

		UseLastSubmenuIndex = 0;
    b7e2:	10 92 59 0e 	sts	0x0E59, r1
		if (popaction == POPUP_SELECT) {
    b7e6:	81 30       	cpi	r24, 0x01	; 1
    b7e8:	11 f5       	brne	.+68     	; 0xb82e <_Z9menuProc0h+0x4dc>
			popidx += PopupData.PopupSel;
    b7ea:	90 91 fe 0d 	lds	r25, 0x0DFE
//    	if( poptype == 1 )
//			{
//				popidx += 5 ;
//			}
//#endif
			if (popidx == 0)	// Model Select
    b7ee:	91 11       	cpse	r25, r1
    b7f0:	03 c0       	rjmp	.+6      	; 0xb7f8 <_Z9menuProc0h+0x4a6>
					{
				pushMenu (menuProcModelSelect);
    b7f2:	8f e5       	ldi	r24, 0x5F	; 95
    b7f4:	91 e4       	ldi	r25, 0x41	; 65
    b7f6:	19 c0       	rjmp	.+50     	; 0xb82a <_Z9menuProc0h+0x4d8>
			} else if (popidx == 1)	// Edit Model
    b7f8:	91 30       	cpi	r25, 0x01	; 1
    b7fa:	39 f4       	brne	.+14     	; 0xb80a <_Z9menuProc0h+0x4b8>
					{
#ifdef MODEL_INDEX
#ifndef NOPOTSCROLL
				scroll_disabled = 1;
    b7fc:	90 93 a1 0d 	sts	0x0DA1, r25
#endif
				RotaryState = ROTARY_MENU_UD;
    b800:	10 92 db 0d 	sts	0x0DDB, r1
				pushMenu (menuProcModelIndex);
    b804:	81 e9       	ldi	r24, 0x91	; 145
    b806:	93 e6       	ldi	r25, 0x63	; 99
    b808:	10 c0       	rjmp	.+32     	; 0xb82a <_Z9menuProc0h+0x4d8>
#else
				pushMenu(menuProcModel);
#endif // MODEL_INDEX
			} else if (popidx == 2)	// Last Menu
    b80a:	92 30       	cpi	r25, 0x02	; 2
    b80c:	29 f4       	brne	.+10     	; 0xb818 <_Z9menuProc0h+0x4c6>
					{
				UseLastSubmenuIndex = 1;
    b80e:	80 93 59 0e 	sts	0x0E59, r24
				pushMenu (lastPopMenu ());
    b812:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z11lastPopMenuv>
    b816:	09 c0       	rjmp	.+18     	; 0xb82a <_Z9menuProc0h+0x4d8>
			} else if (popidx == 3)	// Radio Setup
    b818:	93 30       	cpi	r25, 0x03	; 3
    b81a:	19 f4       	brne	.+6      	; 0xb822 <_Z9menuProc0h+0x4d0>
					{
				pushMenu (menuProcIndex);
    b81c:	87 e6       	ldi	r24, 0x67	; 103
    b81e:	95 e4       	ldi	r25, 0x45	; 69
    b820:	04 c0       	rjmp	.+8      	; 0xb82a <_Z9menuProc0h+0x4d8>
			} else if (popidx == 4)	// Statistics
    b822:	94 30       	cpi	r25, 0x04	; 4
    b824:	21 f4       	brne	.+8      	; 0xb82e <_Z9menuProc0h+0x4dc>
					{
				pushMenu (menuProcStatistic);
    b826:	83 e3       	ldi	r24, 0x33	; 51
    b828:	99 e3       	ldi	r25, 0x39	; 57
    b82a:	0e 94 ab 18 	call	0x3156	; 0x3156 <_Z8pushMenuPFvhE>
		}
	}
#endif

	asm("");
}
    b82e:	df 91       	pop	r29
    b830:	cf 91       	pop	r28
    b832:	1f 91       	pop	r17
    b834:	0f 91       	pop	r16
    b836:	ff 90       	pop	r15
    b838:	ef 90       	pop	r14
    b83a:	df 90       	pop	r13
    b83c:	cf 90       	pop	r12
    b83e:	bf 90       	pop	r11
    b840:	af 90       	pop	r10
    b842:	9f 90       	pop	r9
    b844:	8f 90       	pop	r8
    b846:	08 95       	ret

0000b848 <_Z11perOutPhasePih>:
			}
		}
	}
}

void perOutPhase (int16_t *chanOut, uint8_t att) {
    b848:	af 92       	push	r10
    b84a:	bf 92       	push	r11
    b84c:	cf 92       	push	r12
    b84e:	df 92       	push	r13
    b850:	ef 92       	push	r14
    b852:	ff 92       	push	r15
    b854:	0f 93       	push	r16
    b856:	1f 93       	push	r17
    b858:	cf 93       	push	r28
    b85a:	df 93       	push	r29
    b85c:	6c 01       	movw	r12, r24
    b85e:	16 2f       	mov	r17, r22
	static uint8_t lastPhase;
	uint8_t thisPhase;
	struct t_fade *pFade;
	pFade = &Fade;
	FORCE_INDIRECT(pFade);
    b860:	cb ec       	ldi	r28, 0xCB	; 203
    b862:	db e0       	ldi	r29, 0x0B	; 11

	thisPhase = getFlightPhase ();
    b864:	0e 94 a1 1b 	call	0x3742	; 0x3742 <_Z14getFlightPhasev>
    b868:	f8 2e       	mov	r15, r24
	if (thisPhase != lastPhase) {
    b86a:	40 91 3d 0e 	lds	r20, 0x0E3D
    b86e:	84 17       	cp	r24, r20
    b870:	e1 f1       	breq	.+120    	; 0xb8ea <_Z11perOutPhasePih+0xa2>
		uint8_t time1 = 0;
		uint8_t time2;

		if (lastPhase) {
    b872:	44 23       	and	r20, r20
    b874:	61 f0       	breq	.+24     	; 0xb88e <_Z11perOutPhasePih+0x46>
			time1 = g_model.phaseData[(uint8_t) (lastPhase - 1)].fadeOut;
    b876:	ef ef       	ldi	r30, 0xFF	; 255
    b878:	e4 0f       	add	r30, r20
    b87a:	8a e0       	ldi	r24, 0x0A	; 10
    b87c:	e8 9f       	mul	r30, r24
    b87e:	f0 01       	movw	r30, r0
    b880:	11 24       	eor	r1, r1
    b882:	e1 51       	subi	r30, 0x11	; 17
    b884:	fb 4f       	sbci	r31, 0xFB	; 251
    b886:	80 81       	ld	r24, Z
    b888:	82 95       	swap	r24
    b88a:	8f 70       	andi	r24, 0x0F	; 15
    b88c:	01 c0       	rjmp	.+2      	; 0xb890 <_Z11perOutPhasePih+0x48>
	pFade = &Fade;
	FORCE_INDIRECT(pFade);

	thisPhase = getFlightPhase ();
	if (thisPhase != lastPhase) {
		uint8_t time1 = 0;
    b88e:	80 e0       	ldi	r24, 0x00	; 0
		uint8_t time2;

		if (lastPhase) {
			time1 = g_model.phaseData[(uint8_t) (lastPhase - 1)].fadeOut;
		}
		if (thisPhase) {
    b890:	ff 20       	and	r15, r15
    b892:	61 f0       	breq	.+24     	; 0xb8ac <_Z11perOutPhasePih+0x64>
			time2 = g_model.phaseData[(uint8_t) (thisPhase - 1)].fadeIn;
    b894:	ef ef       	ldi	r30, 0xFF	; 255
    b896:	ef 0d       	add	r30, r15
    b898:	9a e0       	ldi	r25, 0x0A	; 10
    b89a:	e9 9f       	mul	r30, r25
    b89c:	f0 01       	movw	r30, r0
    b89e:	11 24       	eor	r1, r1
    b8a0:	e1 51       	subi	r30, 0x11	; 17
    b8a2:	fb 4f       	sbci	r31, 0xFB	; 251
    b8a4:	90 81       	ld	r25, Z
    b8a6:	9f 70       	andi	r25, 0x0F	; 15
			if (time2 > time1) {
    b8a8:	89 17       	cp	r24, r25
    b8aa:	18 f0       	brcs	.+6      	; 0xb8b2 <_Z11perOutPhasePih+0x6a>
				time1 = time2;
			}
		}
		if (time1) {
    b8ac:	88 23       	and	r24, r24
    b8ae:	d9 f0       	breq	.+54     	; 0xb8e6 <_Z11perOutPhasePih+0x9e>
    b8b0:	01 c0       	rjmp	.+2      	; 0xb8b4 <_Z11perOutPhasePih+0x6c>
    b8b2:	89 2f       	mov	r24, r25
			pFade->fadeRate = (25600 / 50) / time1;
    b8b4:	68 2f       	mov	r22, r24
    b8b6:	70 e0       	ldi	r23, 0x00	; 0
    b8b8:	80 e0       	ldi	r24, 0x00	; 0
    b8ba:	92 e0       	ldi	r25, 0x02	; 2
    b8bc:	0e 94 ea 71 	call	0xe3d4	; 0xe3d4 <__divmodhi4>
    b8c0:	7a 83       	std	Y+2, r23	; 0x02
    b8c2:	69 83       	std	Y+1, r22	; 0x01
			pFade->fadePhases |= (1 << lastPhase) | (1 << thisPhase);
    b8c4:	81 e0       	ldi	r24, 0x01	; 1
    b8c6:	90 e0       	ldi	r25, 0x00	; 0
    b8c8:	9c 01       	movw	r18, r24
    b8ca:	04 2e       	mov	r0, r20
    b8cc:	01 c0       	rjmp	.+2      	; 0xb8d0 <_Z11perOutPhasePih+0x88>
    b8ce:	22 0f       	add	r18, r18
    b8d0:	0a 94       	dec	r0
    b8d2:	ea f7       	brpl	.-6      	; 0xb8ce <_Z11perOutPhasePih+0x86>
    b8d4:	38 81       	ld	r19, Y
    b8d6:	32 2b       	or	r19, r18
    b8d8:	0f 2c       	mov	r0, r15
    b8da:	01 c0       	rjmp	.+2      	; 0xb8de <_Z11perOutPhasePih+0x96>
    b8dc:	88 0f       	add	r24, r24
    b8de:	0a 94       	dec	r0
    b8e0:	ea f7       	brpl	.-6      	; 0xb8dc <_Z11perOutPhasePih+0x94>
    b8e2:	38 2b       	or	r19, r24
    b8e4:	38 83       	st	Y, r19
		}
		lastPhase = thisPhase;
    b8e6:	f0 92 3d 0e 	sts	0x0E3D, r15
	}
	att |= FADE_FIRST;
    b8ea:	10 62       	ori	r17, 0x20	; 32
    b8ec:	e1 2e       	mov	r14, r17
	if (pFade->fadePhases) {
    b8ee:	88 81       	ld	r24, Y
    b8f0:	88 23       	and	r24, r24
    b8f2:	29 f1       	breq	.+74     	; 0xb93e <_Z11perOutPhasePih+0xf6>
		pFade->fadeWeight = 0;
    b8f4:	1c 82       	std	Y+4, r1	; 0x04
    b8f6:	1b 82       	std	Y+3, r1	; 0x03
    b8f8:	8e 01       	movw	r16, r28
		uint8_t fadeMask = 1;
		for (uint8_t p = 0; p < MAX_MODES + 1; p++) {
    b8fa:	b1 2c       	mov	r11, r1
		lastPhase = thisPhase;
	}
	att |= FADE_FIRST;
	if (pFade->fadePhases) {
		pFade->fadeWeight = 0;
		uint8_t fadeMask = 1;
    b8fc:	aa 24       	eor	r10, r10
    b8fe:	a3 94       	inc	r10
		for (uint8_t p = 0; p < MAX_MODES + 1; p++) {
			if (pFade->fadePhases & fadeMask) {
    b900:	88 81       	ld	r24, Y
    b902:	8a 21       	and	r24, r10
    b904:	a1 f0       	breq	.+40     	; 0xb92e <_Z11perOutPhasePih+0xe6>
				if (p != thisPhase) {
    b906:	bf 14       	cp	r11, r15
    b908:	91 f0       	breq	.+36     	; 0xb92e <_Z11perOutPhasePih+0xe6>
					CurrentPhase = p;
    b90a:	b0 92 1a 0c 	sts	0x0C1A, r11
					pFade->fadeWeight += pFade->fadeScale[p];
    b90e:	8b 81       	ldd	r24, Y+3	; 0x03
    b910:	9c 81       	ldd	r25, Y+4	; 0x04
    b912:	f8 01       	movw	r30, r16
    b914:	25 81       	ldd	r18, Z+5	; 0x05
    b916:	36 81       	ldd	r19, Z+6	; 0x06
    b918:	82 0f       	add	r24, r18
    b91a:	93 1f       	adc	r25, r19
    b91c:	9c 83       	std	Y+4, r25	; 0x04
    b91e:	8b 83       	std	Y+3, r24	; 0x03
					perOut (chanOut, att);
    b920:	6e 2d       	mov	r22, r14
    b922:	c6 01       	movw	r24, r12
    b924:	0e 94 95 50 	call	0xa12a	; 0xa12a <_Z6perOutPih>
					att &= ~FADE_FIRST;
    b928:	fe 2d       	mov	r31, r14
    b92a:	ff 7d       	andi	r31, 0xDF	; 223
    b92c:	ef 2e       	mov	r14, r31
				}
			}
			fadeMask <<= 1;
    b92e:	aa 0c       	add	r10, r10
	}
	att |= FADE_FIRST;
	if (pFade->fadePhases) {
		pFade->fadeWeight = 0;
		uint8_t fadeMask = 1;
		for (uint8_t p = 0; p < MAX_MODES + 1; p++) {
    b930:	b3 94       	inc	r11
    b932:	0e 5f       	subi	r16, 0xFE	; 254
    b934:	1f 4f       	sbci	r17, 0xFF	; 255
    b936:	85 e0       	ldi	r24, 0x05	; 5
    b938:	b8 12       	cpse	r11, r24
    b93a:	e2 cf       	rjmp	.-60     	; 0xb900 <_Z11perOutPhasePih+0xb8>
    b93c:	09 c0       	rjmp	.+18     	; 0xb950 <_Z11perOutPhasePih+0x108>
				}
			}
			fadeMask <<= 1;
		}
	} else {
		pFade->fadeScale[thisPhase] = 25600;
    b93e:	fe 01       	movw	r30, r28
    b940:	ef 0d       	add	r30, r15
    b942:	f1 1d       	adc	r31, r1
    b944:	ef 0d       	add	r30, r15
    b946:	f1 1d       	adc	r31, r1
    b948:	80 e0       	ldi	r24, 0x00	; 0
    b94a:	94 e6       	ldi	r25, 0x64	; 100
    b94c:	96 83       	std	Z+6, r25	; 0x06
    b94e:	85 83       	std	Z+5, r24	; 0x05
	}
	pFade->fadeWeight += pFade->fadeScale[thisPhase];
    b950:	fe 01       	movw	r30, r28
    b952:	ef 0d       	add	r30, r15
    b954:	f1 1d       	adc	r31, r1
    b956:	ef 0d       	add	r30, r15
    b958:	f1 1d       	adc	r31, r1
    b95a:	8b 81       	ldd	r24, Y+3	; 0x03
    b95c:	9c 81       	ldd	r25, Y+4	; 0x04
    b95e:	25 81       	ldd	r18, Z+5	; 0x05
    b960:	36 81       	ldd	r19, Z+6	; 0x06
    b962:	82 0f       	add	r24, r18
    b964:	93 1f       	adc	r25, r19
    b966:	9c 83       	std	Y+4, r25	; 0x04
    b968:	8b 83       	std	Y+3, r24	; 0x03
	CurrentPhase = thisPhase;
    b96a:	f0 92 1a 0c 	sts	0x0C1A, r15
	perOut (chanOut, att | FADE_LAST);
    b96e:	6e 2d       	mov	r22, r14
    b970:	60 64       	ori	r22, 0x40	; 64
    b972:	c6 01       	movw	r24, r12
    b974:	0e 94 95 50 	call	0xa12a	; 0xa12a <_Z6perOutPih>

	if (pFade->fadePhases && tick10ms) {
    b978:	88 81       	ld	r24, Y
    b97a:	88 23       	and	r24, r24
    b97c:	09 f4       	brne	.+2      	; 0xb980 <_Z11perOutPhasePih+0x138>
    b97e:	3e c0       	rjmp	.+124    	; 0xb9fc <_Z11perOutPhasePih+0x1b4>
    b980:	80 91 6b 01 	lds	r24, 0x016B
    b984:	88 23       	and	r24, r24
    b986:	d1 f1       	breq	.+116    	; 0xb9fc <_Z11perOutPhasePih+0x1b4>
    b988:	fe 01       	movw	r30, r28
    b98a:	b0 e0       	ldi	r27, 0x00	; 0
    b98c:	a1 e0       	ldi	r26, 0x01	; 1
					} else {
						l_fadeScale = 0;
						pFade->fadePhases &= ~fadeMask;
					}
				} else {
					if (25600 - l_fadeScale > x) {
    b98e:	80 e0       	ldi	r24, 0x00	; 0
    b990:	94 e6       	ldi	r25, 0x64	; 100
	perOut (chanOut, att | FADE_LAST);

	if (pFade->fadePhases && tick10ms) {
		uint8_t fadeMask = 1;
		for (uint8_t p = 0; p < MAX_MODES + 1; p += 1) {
			uint16_t l_fadeScale = pFade->fadeScale[p];
    b992:	25 81       	ldd	r18, Z+5	; 0x05
    b994:	36 81       	ldd	r19, Z+6	; 0x06

			if (pFade->fadePhases & fadeMask) {
    b996:	18 81       	ld	r17, Y
    b998:	4a 2f       	mov	r20, r26
    b99a:	41 23       	and	r20, r17
    b99c:	31 f1       	breq	.+76     	; 0xb9ea <_Z11perOutPhasePih+0x1a2>
				uint16_t x = pFade->fadeRate * tick10ms;
    b99e:	00 91 6b 01 	lds	r16, 0x016B
    b9a2:	69 81       	ldd	r22, Y+1	; 0x01
    b9a4:	7a 81       	ldd	r23, Y+2	; 0x02
    b9a6:	06 9f       	mul	r16, r22
    b9a8:	a0 01       	movw	r20, r0
    b9aa:	07 9f       	mul	r16, r23
    b9ac:	50 0d       	add	r21, r0
    b9ae:	11 24       	eor	r1, r1
				if (p != thisPhase) {
    b9b0:	bf 15       	cp	r27, r15
    b9b2:	59 f0       	breq	.+22     	; 0xb9ca <_Z11perOutPhasePih+0x182>
					if (l_fadeScale > x) {
    b9b4:	42 17       	cp	r20, r18
    b9b6:	53 07       	cpc	r21, r19
    b9b8:	18 f4       	brcc	.+6      	; 0xb9c0 <_Z11perOutPhasePih+0x178>
						l_fadeScale -= x;
    b9ba:	24 1b       	sub	r18, r20
    b9bc:	35 0b       	sbc	r19, r21
    b9be:	17 c0       	rjmp	.+46     	; 0xb9ee <_Z11perOutPhasePih+0x1a6>
					} else {
						l_fadeScale = 0;
						pFade->fadePhases &= ~fadeMask;
    b9c0:	2a 2f       	mov	r18, r26
    b9c2:	20 95       	com	r18
    b9c4:	21 23       	and	r18, r17
    b9c6:	28 83       	st	Y, r18
    b9c8:	10 c0       	rjmp	.+32     	; 0xb9ea <_Z11perOutPhasePih+0x1a2>
					}
				} else {
					if (25600 - l_fadeScale > x) {
    b9ca:	bc 01       	movw	r22, r24
    b9cc:	62 1b       	sub	r22, r18
    b9ce:	73 0b       	sbc	r23, r19
    b9d0:	46 17       	cp	r20, r22
    b9d2:	57 07       	cpc	r21, r23
    b9d4:	18 f4       	brcc	.+6      	; 0xb9dc <_Z11perOutPhasePih+0x194>
						l_fadeScale += x;
    b9d6:	24 0f       	add	r18, r20
    b9d8:	35 1f       	adc	r19, r21
    b9da:	09 c0       	rjmp	.+18     	; 0xb9ee <_Z11perOutPhasePih+0x1a6>
					} else {
						l_fadeScale = 25600;
						pFade->fadePhases &= ~fadeMask;
    b9dc:	2a 2f       	mov	r18, r26
    b9de:	20 95       	com	r18
    b9e0:	21 23       	and	r18, r17
    b9e2:	28 83       	st	Y, r18
					}
				} else {
					if (25600 - l_fadeScale > x) {
						l_fadeScale += x;
					} else {
						l_fadeScale = 25600;
    b9e4:	20 e0       	ldi	r18, 0x00	; 0
    b9e6:	34 e6       	ldi	r19, 0x64	; 100
    b9e8:	02 c0       	rjmp	.+4      	; 0xb9ee <_Z11perOutPhasePih+0x1a6>
						pFade->fadePhases &= ~fadeMask;
					}
				}
			} else {
				l_fadeScale = 0;
    b9ea:	20 e0       	ldi	r18, 0x00	; 0
    b9ec:	30 e0       	ldi	r19, 0x00	; 0
			}
			pFade->fadeScale[p] = l_fadeScale;
    b9ee:	36 83       	std	Z+6, r19	; 0x06
    b9f0:	25 83       	std	Z+5, r18	; 0x05
			fadeMask <<= 1;
    b9f2:	aa 0f       	add	r26, r26
	CurrentPhase = thisPhase;
	perOut (chanOut, att | FADE_LAST);

	if (pFade->fadePhases && tick10ms) {
		uint8_t fadeMask = 1;
		for (uint8_t p = 0; p < MAX_MODES + 1; p += 1) {
    b9f4:	bf 5f       	subi	r27, 0xFF	; 255
    b9f6:	32 96       	adiw	r30, 0x02	; 2
    b9f8:	b5 30       	cpi	r27, 0x05	; 5
    b9fa:	59 f6       	brne	.-106    	; 0xb992 <_Z11perOutPhasePih+0x14a>
			pFade->fadeScale[p] = l_fadeScale;
			fadeMask <<= 1;
		}
	}

}
    b9fc:	df 91       	pop	r29
    b9fe:	cf 91       	pop	r28
    ba00:	1f 91       	pop	r17
    ba02:	0f 91       	pop	r16
    ba04:	ff 90       	pop	r15
    ba06:	ef 90       	pop	r14
    ba08:	df 90       	pop	r13
    ba0a:	cf 90       	pop	r12
    ba0c:	bf 90       	pop	r11
    ba0e:	af 90       	pop	r10
    ba10:	08 95       	ret

0000ba12 <_Z10evalOffsetah>:
	}
	asm("");
}
//#endif // MODEL_INDEX

uint8_t evalOffset (int8_t sub, uint8_t max) {
    ba12:	98 2f       	mov	r25, r24
	uint8_t t_pgOfs = s_pgOfs;
    ba14:	80 91 a6 0d 	lds	r24, 0x0DA6
	int8_t x = sub - t_pgOfs;
    ba18:	29 2f       	mov	r18, r25
    ba1a:	28 1b       	sub	r18, r24
	if (sub < 1) t_pgOfs = 0;
    ba1c:	19 16       	cp	r1, r25
    ba1e:	6c f4       	brge	.+26     	; 0xba3a <_Z10evalOffsetah+0x28>
	else if (x > (int8_t) max) t_pgOfs = sub - (int8_t) max;
    ba20:	62 17       	cp	r22, r18
    ba22:	1c f4       	brge	.+6      	; 0xba2a <_Z10evalOffsetah+0x18>
    ba24:	89 2f       	mov	r24, r25
    ba26:	86 1b       	sub	r24, r22
    ba28:	09 c0       	rjmp	.+18     	; 0xba3c <_Z10evalOffsetah+0x2a>
	else if (x < (int8_t) (max - 6)) t_pgOfs = sub - (int8_t) max + 6;
    ba2a:	3a ef       	ldi	r19, 0xFA	; 250
    ba2c:	36 0f       	add	r19, r22
    ba2e:	23 17       	cp	r18, r19
    ba30:	2c f4       	brge	.+10     	; 0xba3c <_Z10evalOffsetah+0x2a>
    ba32:	89 2f       	mov	r24, r25
    ba34:	86 1b       	sub	r24, r22
    ba36:	8a 5f       	subi	r24, 0xFA	; 250
    ba38:	01 c0       	rjmp	.+2      	; 0xba3c <_Z10evalOffsetah+0x2a>
//#endif // MODEL_INDEX

uint8_t evalOffset (int8_t sub, uint8_t max) {
	uint8_t t_pgOfs = s_pgOfs;
	int8_t x = sub - t_pgOfs;
	if (sub < 1) t_pgOfs = 0;
    ba3a:	80 e0       	ldi	r24, 0x00	; 0
	else if (x > (int8_t) max) t_pgOfs = sub - (int8_t) max;
	else if (x < (int8_t) (max - 6)) t_pgOfs = sub - (int8_t) max + 6;
	return (s_pgOfs = t_pgOfs);
    ba3c:	80 93 a6 0d 	sts	0x0DA6, r24
}
    ba40:	08 95       	ret

0000ba42 <_Z13menuProcCurveh>:
// Draw the curve
	drawCurve (sub);

}

void menuProcCurve (uint8_t event) {
    ba42:	cf 92       	push	r12
    ba44:	df 92       	push	r13
    ba46:	ef 92       	push	r14
    ba48:	ff 92       	push	r15
    ba4a:	0f 93       	push	r16
    ba4c:	1f 93       	push	r17
    ba4e:	cf 93       	push	r28
    ba50:	df 93       	push	r29
    ba52:	c8 2f       	mov	r28, r24
	TITLEP (Str_Curves);
    ba54:	8e e2       	ldi	r24, 0x2E	; 46
    ba56:	9d e1       	ldi	r25, 0x1D	; 29
    ba58:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>
	static MState2 mstate2;
//	if (SubMenuFromIndex)
//	{
	mstate2.check_columns (event, 1 + MAX_CURVE5 + MAX_CURVE9 - 1 - 1);
    ba5c:	4f e0       	ldi	r20, 0x0F	; 15
    ba5e:	6c 2f       	mov	r22, r28
    ba60:	8c e4       	ldi	r24, 0x4C	; 76
    ba62:	9e e0       	ldi	r25, 0x0E	; 14
    ba64:	0e 94 07 3c 	call	0x780e	; 0x780e <_ZN7MState213check_columnsEhh>
//	{
//		mstate2.check_simple(event,e_Curve,menuTabModel,DIM(menuTabModel),1+MAX_CURVE5+MAX_CURVE9-1) ;
//	}
//    SIMPLE_MENU(STR_CURVES, menuTabModel, e_Curve, 1+MAX_CURVE5+MAX_CURVE9);

	int8_t sub = mstate2.m_posVert;
    ba68:	f0 90 4c 0e 	lds	r15, 0x0E4C
//    int8_t  sub    = mstate2.m_posVert - 1;

	uint8_t t_pgOfs = evalOffset (sub, 6);
    ba6c:	66 e0       	ldi	r22, 0x06	; 6
    ba6e:	8f 2d       	mov	r24, r15
    ba70:	d0 df       	rcall	.-96     	; 0xba12 <_Z10evalOffsetah>
    ba72:	d8 2e       	mov	r13, r24

	switch (event) {
    ba74:	c0 36       	cpi	r28, 0x60	; 96
    ba76:	11 f0       	breq	.+4      	; 0xba7c <_Z13menuProcCurveh+0x3a>
    ba78:	c4 36       	cpi	r28, 0x64	; 100
    ba7a:	69 f4       	brne	.+26     	; 0xba96 <_Z13menuProcCurveh+0x54>
		case EVT_KEY_FIRST(KEY_RIGHT):
		case EVT_KEY_FIRST(KEY_MENU):
			if (sub >= 0) {
    ba7c:	f7 fc       	sbrc	r15, 7
    ba7e:	0b c0       	rjmp	.+22     	; 0xba96 <_Z13menuProcCurveh+0x54>
				s_curveChan = sub;
    ba80:	f0 92 55 0e 	sts	0x0E55, r15
				killEvents (event);
    ba84:	8c 2f       	mov	r24, r28
    ba86:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
				Tevent = 0;
    ba8a:	10 92 e1 01 	sts	0x01E1, r1
				pushMenu (menuProcCurveOne);
    ba8e:	88 eb       	ldi	r24, 0xB8	; 184
    ba90:	9f e4       	ldi	r25, 0x4F	; 79
    ba92:	0e 94 ab 18 	call	0x3156	; 0x3156 <_Z8pushMenuPFvhE>
// Draw the curve
	drawCurve (sub);

}

void menuProcCurve (uint8_t event) {
    ba96:	48 e0       	ldi	r20, 0x08	; 8
    ba98:	e4 2e       	mov	r14, r20
	uint8_t y = 1 * FH;
//    uint8_t yd   = 1;
//    uint8_t m    = 0;
	for (uint8_t i = 0; i < 7; i++) {
		uint8_t k = i + t_pgOfs;
		uint8_t attr = sub == k ? INVERS : 0;
    ba9a:	0f 2d       	mov	r16, r15
    ba9c:	11 27       	eor	r17, r17
    ba9e:	07 fd       	sbrc	r16, 7
    baa0:	10 95       	com	r17
    baa2:	cd 2d       	mov	r28, r13
    baa4:	d0 e0       	ldi	r29, 0x00	; 0
    baa6:	cc 24       	eor	r12, r12
    baa8:	c3 94       	inc	r12
    baaa:	0c 17       	cp	r16, r28
    baac:	1d 07       	cpc	r17, r29
    baae:	09 f0       	breq	.+2      	; 0xbab2 <_Z13menuProcCurveh+0x70>
    bab0:	c1 2c       	mov	r12, r1
//        bool    cv9 = k >= MAX_CURVE5;

//        if(cv9 && (y>6*FH)) break;
		if (y > 7 * FH) break;
//        if(!m) m = attr;
		lcd_putsAtt ( FW * 0, y, PSTR(STR_CV), attr);
    bab2:	2c 2d       	mov	r18, r12
    bab4:	4d e6       	ldi	r20, 0x6D	; 109
    bab6:	5b e1       	ldi	r21, 0x1B	; 27
    bab8:	6e 2d       	mov	r22, r14
    baba:	80 e0       	ldi	r24, 0x00	; 0
    babc:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>
		lcd_outdezAtt ( (k < 9) ? FW * 3 - 1 : FW * 4 - 2, y, k + 1, attr);
    bac0:	ae 01       	movw	r20, r28
    bac2:	4f 5f       	subi	r20, 0xFF	; 255
    bac4:	5f 4f       	sbci	r21, 0xFF	; 255
    bac6:	88 e0       	ldi	r24, 0x08	; 8
    bac8:	8d 15       	cp	r24, r13
    baca:	10 f4       	brcc	.+4      	; 0xbad0 <_Z13menuProcCurveh+0x8e>
    bacc:	86 e1       	ldi	r24, 0x16	; 22
    bace:	01 c0       	rjmp	.+2      	; 0xbad2 <_Z13menuProcCurveh+0x90>
    bad0:	81 e1       	ldi	r24, 0x11	; 17
    bad2:	2c 2d       	mov	r18, r12
    bad4:	6e 2d       	mov	r22, r14
    bad6:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>

//        int8_t *crv = cv9 ? g_model.curves9[k-MAX_CURVE5] : g_model.curves5[k];
//        for (uint8_t j = 0; j < (5); j++) {
//            lcd_outdez( j*(3*FW+3) + 7*FW, y, crv[j] );
//        }
		y += FH; // yd++;
    bada:	88 e0       	ldi	r24, 0x08	; 8
    badc:	e8 0e       	add	r14, r24
    bade:	d3 94       	inc	r13
	}

	uint8_t y = 1 * FH;
//    uint8_t yd   = 1;
//    uint8_t m    = 0;
	for (uint8_t i = 0; i < 7; i++) {
    bae0:	80 e4       	ldi	r24, 0x40	; 64
    bae2:	e8 12       	cpse	r14, r24
    bae4:	de cf       	rjmp	.-68     	; 0xbaa2 <_Z13menuProcCurveh+0x60>
//            y += FH; // yd++;
//        }
	}

//    if(!m) s_pgOfs++;
	if (sub >= 0) {
    bae6:	f7 fc       	sbrc	r15, 7
    bae8:	05 c0       	rjmp	.+10     	; 0xbaf4 <_Z13menuProcCurveh+0xb2>
		s_curveChan = sub;
    baea:	f0 92 55 0e 	sts	0x0E55, r15
		drawCurve (100);
    baee:	84 e6       	ldi	r24, 0x64	; 100
    baf0:	0e 94 5d 4f 	call	0x9eba	; 0x9eba <_Z9drawCurveh>
	}
	asm("");
}
    baf4:	df 91       	pop	r29
    baf6:	cf 91       	pop	r28
    baf8:	1f 91       	pop	r17
    bafa:	0f 91       	pop	r16
    bafc:	ff 90       	pop	r15
    bafe:	ef 90       	pop	r14
    bb00:	df 90       	pop	r13
    bb02:	cf 90       	pop	r12
    bb04:	08 95       	ret

0000bb06 <_Z12menuScaleOneh>:
//	lcd_outdezAtt( 14*FW, y, val+1, attr) ;
	if (attr) val = checkIncDec_hmu0 (val, 255);
	return val;
}

void menuScaleOne (uint8_t event) {
    bb06:	9f 92       	push	r9
    bb08:	af 92       	push	r10
    bb0a:	bf 92       	push	r11
    bb0c:	cf 92       	push	r12
    bb0e:	df 92       	push	r13
    bb10:	ef 92       	push	r14
    bb12:	ff 92       	push	r15
    bb14:	0f 93       	push	r16
    bb16:	1f 93       	push	r17
    bb18:	cf 93       	push	r28
    bb1a:	df 93       	push	r29

//  SIMPLE_SUBMENU_NOTITLE( 9, { 0, 3, 0 /*, 0*/} ) ;
	static MState2 mstate2;
	mstate2.check_columns (event, 8);
    bb1c:	48 e0       	ldi	r20, 0x08	; 8
    bb1e:	68 2f       	mov	r22, r24
    bb20:	8b e4       	ldi	r24, 0x4B	; 75
    bb22:	9e e0       	ldi	r25, 0x0E	; 14
    bb24:	0e 94 07 3c 	call	0x780e	; 0x780e <_ZN7MState213check_columnsEhh>
	lcd_puts_Pleft (0, PSTR("SC"));
    bb28:	63 e6       	ldi	r22, 0x63	; 99
    bb2a:	7b e1       	ldi	r23, 0x1B	; 27
    bb2c:	80 e0       	ldi	r24, 0x00	; 0
    bb2e:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
	uint8_t index = s_currIdx;
    bb32:	c0 91 58 0e 	lds	r28, 0x0E58
	lcd_putc (2 * FW, 0, index + '1');
    bb36:	41 e3       	ldi	r20, 0x31	; 49
    bb38:	4c 0f       	add	r20, r28
    bb3a:	60 e0       	ldi	r22, 0x00	; 0
    bb3c:	8c e0       	ldi	r24, 0x0C	; 12
    bb3e:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <_Z8lcd_putchhc>

	int8_t sub = mstate2.m_posVert;
    bb42:	d0 91 4b 0e 	lds	r29, 0x0E4B
	uint8_t t_pgOfs = evalOffset (sub, 6);
    bb46:	66 e0       	ldi	r22, 0x06	; 6
    bb48:	8d 2f       	mov	r24, r29
    bb4a:	63 df       	rcall	.-314    	; 0xba12 <_Z10evalOffsetah>
    bb4c:	98 2e       	mov	r9, r24

	putsTelemetryChannel (8 * FW, 0, index + TEL_ITEM_SC1, 0, 0, TELEM_UNIT);
    bb4e:	45 e2       	ldi	r20, 0x25	; 37
    bb50:	4c 0f       	add	r20, r28
    bb52:	52 e0       	ldi	r21, 0x02	; 2
    bb54:	e5 2e       	mov	r14, r21
    bb56:	00 e0       	ldi	r16, 0x00	; 0
    bb58:	20 e0       	ldi	r18, 0x00	; 0
    bb5a:	30 e0       	ldi	r19, 0x00	; 0
    bb5c:	60 e0       	ldi	r22, 0x00	; 0
    bb5e:	80 e3       	ldi	r24, 0x30	; 48
    bb60:	0e 94 be 37 	call	0x6f7c	; 0x6f7c <_Z20putsTelemetryChannelhhaihh>

	lcd_puts_Pskip ( FH,
			PSTR(
					"Source\037\037"STR_OFFSET"\037Multiplier\037Divisor\037Unit\037Sign\037Decimals\037Offset At"),
			s_pgOfs);
    bb64:	40 91 a6 0d 	lds	r20, 0x0DA6
    bb68:	64 e2       	ldi	r22, 0x24	; 36
    bb6a:	7b e1       	ldi	r23, 0x1B	; 27
    bb6c:	88 e0       	ldi	r24, 0x08	; 8
    bb6e:	0e 94 24 27 	call	0x4e48	; 0x4e48 <_Z14lcd_puts_PskiphPKch>
    bb72:	18 e0       	ldi	r17, 0x08	; 8

	for (uint8_t k = 0; k < 7; k += 1) {
		uint8_t y = (k + 1) * FH;
		uint8_t i = k + t_pgOfs;
		uint8_t attr = (sub == i ? InverseBlink : 0);
    bb74:	ed 2e       	mov	r14, r29
    bb76:	ff 24       	eor	r15, r15
    bb78:	e7 fc       	sbrc	r14, 7
    bb7a:	f0 94       	com	r15
		ScaleData *pscaler;
		pscaler = &g_model.Scalers[index];
    bb7c:	8b e0       	ldi	r24, 0x0B	; 11
    bb7e:	c8 9f       	mul	r28, r24
    bb80:	e0 01       	movw	r28, r0
    bb82:	11 24       	eor	r1, r1
    bb84:	cc 59       	subi	r28, 0x9C	; 156
    bb86:	da 4f       	sbci	r29, 0xFA	; 250
				break;
			case 1:	// name
				if (attr) {
					Columns = &ProgColumns[COLUMNS_3];
				}
				editName (g_posHorz, y, pscaler->name, 4, attr ? EE_MODEL : 0);
    bb88:	6e 01       	movw	r12, r28
    bb8a:	87 e0       	ldi	r24, 0x07	; 7
    bb8c:	c8 0e       	add	r12, r24
    bb8e:	d1 1c       	adc	r13, r1
				if (attr)
				CHECK_INCDEC_H_MODELVAR_0(pscaler->source, NUM_XCHNRAW+NUM_TELEM_ITEMS);
				break;
			case 1:	// name
				if (attr) {
					Columns = &ProgColumns[COLUMNS_3];
    bb90:	65 e0       	ldi	r22, 0x05	; 5
    bb92:	a6 2e       	mov	r10, r22
    bb94:	6d e1       	ldi	r22, 0x1D	; 29
    bb96:	b6 2e       	mov	r11, r22
			s_pgOfs);

	for (uint8_t k = 0; k < 7; k += 1) {
		uint8_t y = (k + 1) * FH;
		uint8_t i = k + t_pgOfs;
		uint8_t attr = (sub == i ? InverseBlink : 0);
    bb98:	89 2d       	mov	r24, r9
    bb9a:	90 e0       	ldi	r25, 0x00	; 0
    bb9c:	e8 16       	cp	r14, r24
    bb9e:	f9 06       	cpc	r15, r25
    bba0:	19 f4       	brne	.+6      	; 0xbba8 <_Z12menuScaleOneh+0xa2>
    bba2:	00 91 9f 0d 	lds	r16, 0x0D9F
    bba6:	01 c0       	rjmp	.+2      	; 0xbbaa <_Z12menuScaleOneh+0xa4>
    bba8:	00 e0       	ldi	r16, 0x00	; 0
		ScaleData *pscaler;
		pscaler = &g_model.Scalers[index];

		switch (i) {
    bbaa:	89 2d       	mov	r24, r9
    bbac:	90 e0       	ldi	r25, 0x00	; 0
    bbae:	89 30       	cpi	r24, 0x09	; 9
    bbb0:	91 05       	cpc	r25, r1
    bbb2:	08 f0       	brcs	.+2      	; 0xbbb6 <_Z12menuScaleOneh+0xb0>
    bbb4:	9a c0       	rjmp	.+308    	; 0xbcea <_Z12menuScaleOneh+0x1e4>
    bbb6:	fc 01       	movw	r30, r24
    bbb8:	ee 55       	subi	r30, 0x5E	; 94
    bbba:	ff 4f       	sbci	r31, 0xFF	; 255
    bbbc:	0c 94 3b 72 	jmp	0xe476	; 0xe476 <__tablejump2__>
			case 0:	// Source
//				lcd_puts_Pleft( y, PSTR("Source") ) ;
				putsChnRaw (11 * FW, y, pscaler->source, attr);
    bbc0:	20 2f       	mov	r18, r16
    bbc2:	48 81       	ld	r20, Y
    bbc4:	61 2f       	mov	r22, r17
    bbc6:	82 e4       	ldi	r24, 0x42	; 66
    bbc8:	0e 94 95 10 	call	0x212a	; 0x212a <_Z10putsChnRawhhhh>
				if (attr)
    bbcc:	00 23       	and	r16, r16
    bbce:	09 f4       	brne	.+2      	; 0xbbd2 <_Z12menuScaleOneh+0xcc>
    bbd0:	8c c0       	rjmp	.+280    	; 0xbcea <_Z12menuScaleOneh+0x1e4>
				CHECK_INCDEC_H_MODELVAR_0(pscaler->source, NUM_XCHNRAW+NUM_TELEM_ITEMS);
    bbd2:	6e e2       	ldi	r22, 0x2E	; 46
    bbd4:	88 81       	ld	r24, Y
    bbd6:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    bbda:	88 83       	st	Y, r24
    bbdc:	86 c0       	rjmp	.+268    	; 0xbcea <_Z12menuScaleOneh+0x1e4>
				break;
			case 1:	// name
				if (attr) {
    bbde:	00 23       	and	r16, r16
    bbe0:	31 f0       	breq	.+12     	; 0xbbee <_Z12menuScaleOneh+0xe8>
					Columns = &ProgColumns[COLUMNS_3];
    bbe2:	b0 92 57 0e 	sts	0x0E57, r11
    bbe6:	a0 92 56 0e 	sts	0x0E56, r10
				}
				editName (g_posHorz, y, pscaler->name, 4, attr ? EE_MODEL : 0);
    bbea:	02 e0       	ldi	r16, 0x02	; 2
    bbec:	01 c0       	rjmp	.+2      	; 0xbbf0 <_Z12menuScaleOneh+0xea>
    bbee:	00 e0       	ldi	r16, 0x00	; 0
    bbf0:	24 e0       	ldi	r18, 0x04	; 4
    bbf2:	a6 01       	movw	r20, r12
    bbf4:	61 2f       	mov	r22, r17
    bbf6:	80 91 7e 0d 	lds	r24, 0x0D7E
    bbfa:	0e 94 77 43 	call	0x86ee	; 0x86ee <_Z8editNamehhPhhh>

				break;
    bbfe:	75 c0       	rjmp	.+234    	; 0xbcea <_Z12menuScaleOneh+0x1e4>
			case 2:	// offset
//				lcd_puts_Pleft( y, PSTR(STR_OFFSET) ) ;
				lcd_outdezAtt (13 * FW, y, pscaler->offset, attr);
    bc00:	49 81       	ldd	r20, Y+1	; 0x01
    bc02:	5a 81       	ldd	r21, Y+2	; 0x02
    bc04:	20 2f       	mov	r18, r16
    bc06:	61 2f       	mov	r22, r17
    bc08:	8e e4       	ldi	r24, 0x4E	; 78
    bc0a:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
				if (attr) {
    bc0e:	00 23       	and	r16, r16
    bc10:	09 f4       	brne	.+2      	; 0xbc14 <_Z12menuScaleOneh+0x10e>
    bc12:	6b c0       	rjmp	.+214    	; 0xbcea <_Z12menuScaleOneh+0x1e4>

					pscaler->offset = checkIncDec16 (pscaler->offset, -32000, 32000, EE_MODEL);
    bc14:	22 e0       	ldi	r18, 0x02	; 2
    bc16:	40 e0       	ldi	r20, 0x00	; 0
    bc18:	5d e7       	ldi	r21, 0x7D	; 125
    bc1a:	60 e0       	ldi	r22, 0x00	; 0
    bc1c:	73 e8       	ldi	r23, 0x83	; 131
    bc1e:	89 81       	ldd	r24, Y+1	; 0x01
    bc20:	9a 81       	ldd	r25, Y+2	; 0x02
    bc22:	0e 94 b7 12 	call	0x256e	; 0x256e <_Z13checkIncDec16iiih>
    bc26:	9a 83       	std	Y+2, r25	; 0x02
    bc28:	89 83       	std	Y+1, r24	; 0x01
    bc2a:	5f c0       	rjmp	.+190    	; 0xbcea <_Z12menuScaleOneh+0x1e4>

				}
				break;
			case 3:	// mult
				pscaler->mult = scalerDecimal (y, pscaler->mult, attr);
    bc2c:	40 2f       	mov	r20, r16
    bc2e:	6b 81       	ldd	r22, Y+3	; 0x03
    bc30:	81 2f       	mov	r24, r17
    bc32:	0e 94 56 3f 	call	0x7eac	; 0x7eac <_Z13scalerDecimalhhh>
    bc36:	8b 83       	std	Y+3, r24	; 0x03
				break;
    bc38:	58 c0       	rjmp	.+176    	; 0xbcea <_Z12menuScaleOneh+0x1e4>
			case 4:	// div
				pscaler->div = scalerDecimal (y, pscaler->div, attr);
    bc3a:	40 2f       	mov	r20, r16
    bc3c:	6c 81       	ldd	r22, Y+4	; 0x04
    bc3e:	81 2f       	mov	r24, r17
    bc40:	0e 94 56 3f 	call	0x7eac	; 0x7eac <_Z13scalerDecimalhhh>
    bc44:	8c 83       	std	Y+4, r24	; 0x04
				break;
    bc46:	51 c0       	rjmp	.+162    	; 0xbcea <_Z12menuScaleOneh+0x1e4>
			case 5:	// unit
				if (attr)
    bc48:	00 23       	and	r16, r16
    bc4a:	29 f0       	breq	.+10     	; 0xbc56 <_Z12menuScaleOneh+0x150>
				CHECK_INCDEC_H_MODELVAR_0(pscaler->unit, 7);
    bc4c:	67 e0       	ldi	r22, 0x07	; 7
    bc4e:	8d 81       	ldd	r24, Y+5	; 0x05
    bc50:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    bc54:	8d 83       	std	Y+5, r24	; 0x05
				lcd_putsAttIdx (12 * FW, y, UnitsString, pscaler->unit, attr);
    bc56:	2d 81       	ldd	r18, Y+5	; 0x05
    bc58:	49 ec       	ldi	r20, 0xC9	; 201
    bc5a:	5c e1       	ldi	r21, 0x1C	; 28
    bc5c:	42 c0       	rjmp	.+132    	; 0xbce2 <_Z12menuScaleOneh+0x1dc>
				break;
			case 6:	// sign
				if (attr)
    bc5e:	00 23       	and	r16, r16
    bc60:	49 f0       	breq	.+18     	; 0xbc74 <_Z12menuScaleOneh+0x16e>
				CHECK_INCDEC_H_MODELVAR_0(pscaler->neg, 1);
    bc62:	8e 81       	ldd	r24, Y+6	; 0x06
    bc64:	61 e0       	ldi	r22, 0x01	; 1
    bc66:	81 70       	andi	r24, 0x01	; 1
    bc68:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    bc6c:	9e 81       	ldd	r25, Y+6	; 0x06
    bc6e:	80 fb       	bst	r24, 0
    bc70:	90 f9       	bld	r25, 0
    bc72:	9e 83       	std	Y+6, r25	; 0x06
				lcd_putcAtt (12 * FW, y, pscaler->neg ? '-' : '+', attr);
    bc74:	8e 81       	ldd	r24, Y+6	; 0x06
    bc76:	80 ff       	sbrs	r24, 0
    bc78:	02 c0       	rjmp	.+4      	; 0xbc7e <_Z12menuScaleOneh+0x178>
    bc7a:	4d e2       	ldi	r20, 0x2D	; 45
    bc7c:	01 c0       	rjmp	.+2      	; 0xbc80 <_Z12menuScaleOneh+0x17a>
    bc7e:	4b e2       	ldi	r20, 0x2B	; 43
    bc80:	20 2f       	mov	r18, r16
    bc82:	61 2f       	mov	r22, r17
    bc84:	88 e4       	ldi	r24, 0x48	; 72
    bc86:	0e 94 31 26 	call	0x4c62	; 0x4c62 <_Z11lcd_putcAtthhch>
				break;
    bc8a:	2f c0       	rjmp	.+94     	; 0xbcea <_Z12menuScaleOneh+0x1e4>
			case 7:	// precision
				if (attr)
    bc8c:	00 23       	and	r16, r16
    bc8e:	61 f0       	breq	.+24     	; 0xbca8 <_Z12menuScaleOneh+0x1a2>
				CHECK_INCDEC_H_MODELVAR_0(pscaler->precision, 2);
    bc90:	8e 81       	ldd	r24, Y+6	; 0x06
    bc92:	86 95       	lsr	r24
    bc94:	62 e0       	ldi	r22, 0x02	; 2
    bc96:	83 70       	andi	r24, 0x03	; 3
    bc98:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    bc9c:	83 70       	andi	r24, 0x03	; 3
    bc9e:	88 0f       	add	r24, r24
    bca0:	9e 81       	ldd	r25, Y+6	; 0x06
    bca2:	99 7f       	andi	r25, 0xF9	; 249
    bca4:	98 2b       	or	r25, r24
    bca6:	9e 83       	std	Y+6, r25	; 0x06
				lcd_outdezAtt (14 * FW, y, pscaler->precision, attr);
    bca8:	4e 81       	ldd	r20, Y+6	; 0x06
    bcaa:	46 95       	lsr	r20
    bcac:	43 70       	andi	r20, 0x03	; 3
    bcae:	50 e0       	ldi	r21, 0x00	; 0
    bcb0:	20 2f       	mov	r18, r16
    bcb2:	61 2f       	mov	r22, r17
    bcb4:	84 e5       	ldi	r24, 0x54	; 84
    bcb6:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
				break;
    bcba:	17 c0       	rjmp	.+46     	; 0xbcea <_Z12menuScaleOneh+0x1e4>
			case 8:	// offsetLast
			{
				if (attr)
    bcbc:	00 23       	and	r16, r16
    bcbe:	59 f0       	breq	.+22     	; 0xbcd6 <_Z12menuScaleOneh+0x1d0>
				CHECK_INCDEC_H_MODELVAR_0(pscaler->offsetLast, 1);
    bcc0:	8e 81       	ldd	r24, Y+6	; 0x06
    bcc2:	61 e0       	ldi	r22, 0x01	; 1
    bcc4:	83 fb       	bst	r24, 3
    bcc6:	88 27       	eor	r24, r24
    bcc8:	80 f9       	bld	r24, 0
    bcca:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    bcce:	9e 81       	ldd	r25, Y+6	; 0x06
    bcd0:	80 fb       	bst	r24, 0
    bcd2:	93 f9       	bld	r25, 3
    bcd4:	9e 83       	std	Y+6, r25	; 0x06
				lcd_putsAttIdx (12 * FW, y, PSTR("\005FirstLast "), pscaler->offsetLast, attr);
    bcd6:	2e 81       	ldd	r18, Y+6	; 0x06
    bcd8:	23 fb       	bst	r18, 3
    bcda:	22 27       	eor	r18, r18
    bcdc:	20 f9       	bld	r18, 0
    bcde:	48 e1       	ldi	r20, 0x18	; 24
    bce0:	5b e1       	ldi	r21, 0x1B	; 27
    bce2:	61 2f       	mov	r22, r17
    bce4:	88 e4       	ldi	r24, 0x48	; 72
    bce6:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
    bcea:	93 94       	inc	r9
    bcec:	18 5f       	subi	r17, 0xF8	; 248
	lcd_puts_Pskip ( FH,
			PSTR(
					"Source\037\037"STR_OFFSET"\037Multiplier\037Divisor\037Unit\037Sign\037Decimals\037Offset At"),
			s_pgOfs);

	for (uint8_t k = 0; k < 7; k += 1) {
    bcee:	10 34       	cpi	r17, 0x40	; 64
    bcf0:	09 f0       	breq	.+2      	; 0xbcf4 <_Z12menuScaleOneh+0x1ee>
    bcf2:	52 cf       	rjmp	.-348    	; 0xbb98 <_Z12menuScaleOneh+0x92>
			}
				break;
		}
	}

}
    bcf4:	df 91       	pop	r29
    bcf6:	cf 91       	pop	r28
    bcf8:	1f 91       	pop	r17
    bcfa:	0f 91       	pop	r16
    bcfc:	ff 90       	pop	r15
    bcfe:	ef 90       	pop	r14
    bd00:	df 90       	pop	r13
    bd02:	cf 90       	pop	r12
    bd04:	bf 90       	pop	r11
    bd06:	af 90       	pop	r10
    bd08:	9f 90       	pop	r9
    bd0a:	08 95       	ret

0000bd0c <_Z17menuProcTemplatesh>:

#endif

#ifndef NO_TEMPLATES
void menuProcTemplates (uint8_t event)  //Issue 73
		{
    bd0c:	cf 92       	push	r12
    bd0e:	df 92       	push	r13
    bd10:	ef 92       	push	r14
    bd12:	ff 92       	push	r15
    bd14:	0f 93       	push	r16
    bd16:	1f 93       	push	r17
    bd18:	cf 93       	push	r28
    bd1a:	df 93       	push	r29
    bd1c:	c8 2f       	mov	r28, r24
//    SIMPLE_MENU(STR_TEMPLATES, menuTabModel, e_Templates, NUM_TEMPLATES+2);
//    SIMPLE_SUBMENU(STR_TEMPLATES, NUM_TEMPLATES+1) ;
	TITLE(STR_TEMPLATES);
    bd1e:	84 ed       	ldi	r24, 0xD4	; 212
    bd20:	9a e1       	ldi	r25, 0x1A	; 26
    bd22:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>
	static MState2 mstate2;
	mstate2.check_columns (event, NUM_TEMPLATES);
    bd26:	48 e0       	ldi	r20, 0x08	; 8
    bd28:	6c 2f       	mov	r22, r28
    bd2a:	89 e4       	ldi	r24, 0x49	; 73
    bd2c:	9e e0       	ldi	r25, 0x0E	; 14
    bd2e:	0e 94 07 3c 	call	0x780e	; 0x780e <_ZN7MState213check_columnsEhh>

	uint8_t t_pgOfs;
	uint8_t y = 0;
	uint8_t k = 0;
	int8_t sub = mstate2.m_posVert;
    bd32:	e0 90 49 0e 	lds	r14, 0x0E49

	t_pgOfs = evalOffset (sub, 6);
    bd36:	66 e0       	ldi	r22, 0x06	; 6
    bd38:	8e 2d       	mov	r24, r14
    bd3a:	6b de       	rcall	.-810    	; 0xba12 <_Z10evalOffsetah>
    bd3c:	d8 2f       	mov	r29, r24

	switch (event) {
    bd3e:	c0 38       	cpi	r28, 0x80	; 128
    bd40:	a9 f4       	brne	.+42     	; 0xbd6c <_Z17menuProcTemplatesh+0x60>
		case EVT_KEY_LONG(KEY_MENU):
			killEvents (event);
    bd42:	80 e8       	ldi	r24, 0x80	; 128
    bd44:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
			//apply mixes or delete
			s_noHi = NO_HI_LEN;
    bd48:	89 e1       	ldi	r24, 0x19	; 25
    bd4a:	80 93 a3 0d 	sts	0x0DA3, r24
			if (sub == NUM_TEMPLATES) clearMixes ();
    bd4e:	88 e0       	ldi	r24, 0x08	; 8
    bd50:	e8 12       	cpse	r14, r24
    bd52:	03 c0       	rjmp	.+6      	; 0xbd5a <_Z17menuProcTemplatesh+0x4e>
    bd54:	0e 94 2d 2c 	call	0x585a	; 0x585a <_Z10clearMixesv>
    bd58:	06 c0       	rjmp	.+12     	; 0xbd66 <_Z17menuProcTemplatesh+0x5a>
			else if ( (sub >= 0) && (sub < (int8_t) NUM_TEMPLATES)) applyTemplate (sub);
    bd5a:	87 e0       	ldi	r24, 0x07	; 7
    bd5c:	8e 15       	cp	r24, r14
    bd5e:	18 f0       	brcs	.+6      	; 0xbd66 <_Z17menuProcTemplatesh+0x5a>
    bd60:	8e 2d       	mov	r24, r14
    bd62:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <_Z13applyTemplateh>
			audioDefevent (AU_WARNING2);
    bd66:	81 e0       	ldi	r24, 0x01	; 1
    bd68:	0e 94 74 34 	call	0x68e8	; 0x68e8 <_Z13audioDefeventh>

#endif

#ifndef NO_TEMPLATES
void menuProcTemplates (uint8_t event)  //Issue 73
		{
    bd6c:	8d 2f       	mov	r24, r29
    bd6e:	e8 e0       	ldi	r30, 0x08	; 8
    bd70:	fe 2e       	mov	r15, r30
		k = i + t_pgOfs;
		if (k == NUM_TEMPLATES) break;

		//write mix names here
//        lcd_outdezNAtt(3*FW, y, (uint16_t)k+1, (sub==k ? INVERS : 0) + LEADING0,2);
		lcd_2_digits (3 * FW, y, k + 1, (sub == k ? INVERS : 0));
    bd72:	0e 2d       	mov	r16, r14
    bd74:	11 27       	eor	r17, r17
    bd76:	07 fd       	sbrc	r16, 7
    bd78:	10 95       	com	r17
	}

	y = 1 * FH;
	for (uint8_t i = 0; i < 7; i++) {
		k = i + t_pgOfs;
		if (k == NUM_TEMPLATES) break;
    bd7a:	88 30       	cpi	r24, 0x08	; 8
    bd7c:	29 f4       	brne	.+10     	; 0xbd88 <_Z17menuProcTemplatesh+0x7c>
#endif
		y += FH;
	}

	if (y > 7 * FH) return;
	uint8_t attr = s_noHi ? 0 : ( (sub == NUM_TEMPLATES) ? INVERS : 0);
    bd7e:	80 91 a3 0d 	lds	r24, 0x0DA3
    bd82:	88 23       	and	r24, r24
    bd84:	59 f1       	breq	.+86     	; 0xbddc <_Z17menuProcTemplatesh+0xd0>
    bd86:	2d c0       	rjmp	.+90     	; 0xbde2 <_Z17menuProcTemplatesh+0xd6>
		k = i + t_pgOfs;
		if (k == NUM_TEMPLATES) break;

		//write mix names here
//        lcd_outdezNAtt(3*FW, y, (uint16_t)k+1, (sub==k ? INVERS : 0) + LEADING0,2);
		lcd_2_digits (3 * FW, y, k + 1, (sub == k ? INVERS : 0));
    bd88:	c8 2f       	mov	r28, r24
    bd8a:	d0 e0       	ldi	r29, 0x00	; 0
    bd8c:	dd 24       	eor	r13, r13
    bd8e:	d3 94       	inc	r13
    bd90:	0c 17       	cp	r16, r28
    bd92:	1d 07       	cpc	r17, r29
    bd94:	09 f0       	breq	.+2      	; 0xbd98 <_Z17menuProcTemplatesh+0x8c>
    bd96:	d1 2c       	mov	r13, r1
    bd98:	cc 24       	eor	r12, r12
    bd9a:	c3 94       	inc	r12
    bd9c:	c8 0e       	add	r12, r24
    bd9e:	2d 2d       	mov	r18, r13
    bda0:	4c 2d       	mov	r20, r12
    bda2:	6f 2d       	mov	r22, r15
    bda4:	82 e1       	ldi	r24, 0x12	; 18
    bda6:	0e 94 49 29 	call	0x5292	; 0x5292 <_Z12lcd_2_digitshhhh>

#ifndef SIMU
		lcd_putsAtt (4 * FW, y, (const prog_char*) pgm_read_word(&n_Templates[k]),
				(s_noHi ? 0 : (sub == k ? INVERS : 0)));
    bdaa:	80 91 a3 0d 	lds	r24, 0x0DA3
    bdae:	88 23       	and	r24, r24
    bdb0:	11 f0       	breq	.+4      	; 0xbdb6 <_Z17menuProcTemplatesh+0xaa>
    bdb2:	20 e0       	ldi	r18, 0x00	; 0
    bdb4:	01 c0       	rjmp	.+2      	; 0xbdb8 <_Z17menuProcTemplatesh+0xac>
    bdb6:	2d 2d       	mov	r18, r13
		//write mix names here
//        lcd_outdezNAtt(3*FW, y, (uint16_t)k+1, (sub==k ? INVERS : 0) + LEADING0,2);
		lcd_2_digits (3 * FW, y, k + 1, (sub == k ? INVERS : 0));

#ifndef SIMU
		lcd_putsAtt (4 * FW, y, (const prog_char*) pgm_read_word(&n_Templates[k]),
    bdb8:	fe 01       	movw	r30, r28
    bdba:	ee 0f       	add	r30, r30
    bdbc:	ff 1f       	adc	r31, r31
    bdbe:	e4 53       	subi	r30, 0x34	; 52
    bdc0:	f0 4f       	sbci	r31, 0xF0	; 240
    bdc2:	45 91       	lpm	r20, Z+
    bdc4:	54 91       	lpm	r21, Z
				(s_noHi ? 0 : (sub == k ? INVERS : 0)));
    bdc6:	6f 2d       	mov	r22, r15
    bdc8:	88 e1       	ldi	r24, 0x18	; 24
    bdca:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>
#else
		lcd_putsAtt( 4*FW, y, n_Templates[k], (s_noHi ? 0 : (sub==k ? INVERS : 0)));
#endif
		y += FH;
    bdce:	88 e0       	ldi	r24, 0x08	; 8
    bdd0:	f8 0e       	add	r15, r24
			audioDefevent (AU_WARNING2);
			break;
	}

	y = 1 * FH;
	for (uint8_t i = 0; i < 7; i++) {
    bdd2:	80 e4       	ldi	r24, 0x40	; 64
    bdd4:	f8 16       	cp	r15, r24
    bdd6:	a1 f0       	breq	.+40     	; 0xbe00 <_Z17menuProcTemplatesh+0xf4>
    bdd8:	8c 2d       	mov	r24, r12
    bdda:	cf cf       	rjmp	.-98     	; 0xbd7a <_Z17menuProcTemplatesh+0x6e>
#endif
		y += FH;
	}

	if (y > 7 * FH) return;
	uint8_t attr = s_noHi ? 0 : ( (sub == NUM_TEMPLATES) ? INVERS : 0);
    bddc:	21 e0       	ldi	r18, 0x01	; 1
    bdde:	88 e0       	ldi	r24, 0x08	; 8
    bde0:	e8 12       	cpse	r14, r24
    bde2:	20 e0       	ldi	r18, 0x00	; 0
	lcd_putsAtt (1 * FW, y, PSTR(STR_CLEAR_MIXES), attr);
    bde4:	41 ec       	ldi	r20, 0xC1	; 193
    bde6:	5a e1       	ldi	r21, 0x1A	; 26
    bde8:	6f 2d       	mov	r22, r15
    bdea:	86 e0       	ldi	r24, 0x06	; 6
	y += FH;

}
    bdec:	df 91       	pop	r29
    bdee:	cf 91       	pop	r28
    bdf0:	1f 91       	pop	r17
    bdf2:	0f 91       	pop	r16
    bdf4:	ff 90       	pop	r15
    bdf6:	ef 90       	pop	r14
    bdf8:	df 90       	pop	r13
    bdfa:	cf 90       	pop	r12
		y += FH;
	}

	if (y > 7 * FH) return;
	uint8_t attr = s_noHi ? 0 : ( (sub == NUM_TEMPLATES) ? INVERS : 0);
	lcd_putsAtt (1 * FW, y, PSTR(STR_CLEAR_MIXES), attr);
    bdfc:	0c 94 fa 26 	jmp	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>
	y += FH;

}
    be00:	df 91       	pop	r29
    be02:	cf 91       	pop	r28
    be04:	1f 91       	pop	r17
    be06:	0f 91       	pop	r16
    be08:	ff 90       	pop	r15
    be0a:	ef 90       	pop	r14
    be0c:	df 90       	pop	r13
    be0e:	cf 90       	pop	r12
    be10:	08 95       	ret

0000be12 <_Z14menuProcMixOneh>:
		}
	}
	asm("");
}

void menuProcMixOne (uint8_t event) {
    be12:	5f 92       	push	r5
    be14:	6f 92       	push	r6
    be16:	7f 92       	push	r7
    be18:	8f 92       	push	r8
    be1a:	9f 92       	push	r9
    be1c:	af 92       	push	r10
    be1e:	bf 92       	push	r11
    be20:	cf 92       	push	r12
    be22:	df 92       	push	r13
    be24:	ef 92       	push	r14
    be26:	ff 92       	push	r15
    be28:	0f 93       	push	r16
    be2a:	1f 93       	push	r17
    be2c:	cf 93       	push	r28
    be2e:	df 93       	push	r29
    be30:	a8 2e       	mov	r10, r24

	MixData *md2 = mixaddress (s_currMixIdx);
    be32:	80 91 53 0e 	lds	r24, 0x0E53
    be36:	0e 94 87 10 	call	0x210e	; 0x210e <_Z10mixaddressh>
    be3a:	ec 01       	movw	r28, r24
	static MState2 mstate2;
	mstate2.check_columns (event, 15);
    be3c:	4f e0       	ldi	r20, 0x0F	; 15
    be3e:	6a 2d       	mov	r22, r10
    be40:	88 e4       	ldi	r24, 0x48	; 72
    be42:	9e e0       	ldi	r25, 0x0E	; 14
    be44:	0e 94 07 3c 	call	0x780e	; 0x780e <_ZN7MState213check_columnsEhh>

	uint8_t x = TITLEP (PSTR(STR_EDIT_MIX));
    be48:	84 eb       	ldi	r24, 0xB4	; 180
    be4a:	9a e1       	ldi	r25, 0x1A	; 26
    be4c:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>

	putsChn (x + 1 * FW, 0, md2->destCh, 0);
    be50:	20 e0       	ldi	r18, 0x00	; 0
    be52:	48 81       	ld	r20, Y
    be54:	60 e0       	ldi	r22, 0x00	; 0
    be56:	8a 5f       	subi	r24, 0xFA	; 250
    be58:	0e 94 c3 10 	call	0x2186	; 0x2186 <_Z7putsChnhhhh>
	uint8_t sub = mstate2.m_posVert;
    be5c:	80 90 48 0e 	lds	r8, 0x0E48

	uint8_t t_pgOfs = evalOffset (sub, 6);
    be60:	66 e0       	ldi	r22, 0x06	; 6
    be62:	88 2d       	mov	r24, r8
    be64:	d6 dd       	rcall	.-1108   	; 0xba12 <_Z10evalOffsetah>
    be66:	b8 2e       	mov	r11, r24
	lcd_puts_Pskip ( FH,
			PSTR(
					STR_2SOURCE"\037"STR_2WEIGHT"\037""\001"STR_OFFSET"\037"STR_2FIX_OFFSET "\037"STR_ENABLEEXPO"\037"STR_2TRIM"\037\037\037"STR_2SWITCH"\037""\001MODES""\037"STR_2WARNING "\037"STR_2MULTIPLEX"\037"STR_2DELAY_DOWN"\037"STR_2DELAY_UP"\037"STR_2SLOW_DOWN"\037"STR_2SLOW_UP "\037""SWCH Switch"),
			s_pgOfs);
    be68:	40 91 a6 0d 	lds	r20, 0x0DA6
    be6c:	62 e2       	ldi	r22, 0x22	; 34
    be6e:	7a e1       	ldi	r23, 0x1A	; 26
    be70:	88 e0       	ldi	r24, 0x08	; 8
    be72:	0e 94 24 27 	call	0x4e48	; 0x4e48 <_Z14lcd_puts_PskiphPKch>
    be76:	f8 e0       	ldi	r31, 0x08	; 8
    be78:	ff 2e       	mov	r15, r31
					}
				}
				uint8_t value2 = value;
				lcd_putsAtt (1 * FW, y,
						value ? (value == 2) ? PSTR("\021Expo") : PSTR(STR_15DIFF): PSTR(STR_Curve),
						attr);
    be7a:	99 24       	eor	r9, r9
    be7c:	93 94       	inc	r9
			case 9: {
				uint8_t b = 1;
//            lcd_puts_Pleft( y, PSTR("\001MODES"));

				if (attr) {
					Columns = &ProgColumns[COLUMNS_4];
    be7e:	a6 e0       	ldi	r26, 0x06	; 6
    be80:	ca 2e       	mov	r12, r26
    be82:	ad e1       	ldi	r26, 0x1D	; 29
    be84:	da 2e       	mov	r13, r26
						attr);
				if (attr)
				CHECK_INCDEC_H_MODELVAR_0(value2, 2);
				if (value != value2) {
					if (value2 == 2) {
						md2->curve = -128;
    be86:	b0 e8       	ldi	r27, 0x80	; 128
    be88:	7b 2e       	mov	r7, r27
			s_pgOfs);

	for (uint8_t k = 0; k < 7; k++) {
		uint8_t y = (k + 1) * FH;
		uint8_t i = k + t_pgOfs;
		uint8_t attr = sub == i ? InverseBlink : 0;
    be8a:	8b 10       	cpse	r8, r11
    be8c:	03 c0       	rjmp	.+6      	; 0xbe94 <_Z14menuProcMixOneh+0x82>
    be8e:	e0 90 9f 0d 	lds	r14, 0x0D9F
    be92:	01 c0       	rjmp	.+2      	; 0xbe96 <_Z14menuProcMixOneh+0x84>
    be94:	e1 2c       	mov	r14, r1
		uint8_t b;
		switch (i) {
    be96:	0b 2d       	mov	r16, r11
    be98:	10 e0       	ldi	r17, 0x00	; 0
    be9a:	00 31       	cpi	r16, 0x10	; 16
    be9c:	11 05       	cpc	r17, r1
    be9e:	08 f0       	brcs	.+2      	; 0xbea2 <_Z14menuProcMixOneh+0x90>
    bea0:	a9 c1       	rjmp	.+850    	; 0xc1f4 <_Z14menuProcMixOneh+0x3e2>
    bea2:	f8 01       	movw	r30, r16
    bea4:	e5 55       	subi	r30, 0x55	; 85
    bea6:	ff 4f       	sbci	r31, 0xFF	; 255
    bea8:	0c 94 3b 72 	jmp	0xe476	; 0xe476 <__tablejump2__>
			case 0: {
				uint8_t value = md2->srcRaw;
    beac:	19 81       	ldd	r17, Y+1	; 0x01
				putsChnOpRaw ( FW * 14, y, md2, attr);
    beae:	2e 2d       	mov	r18, r14
    beb0:	ae 01       	movw	r20, r28
    beb2:	6f 2d       	mov	r22, r15
    beb4:	84 e5       	ldi	r24, 0x54	; 84
    beb6:	0e 94 ae 3f 	call	0x7f5c	; 0x7f5c <_Z12putsChnOpRawhhP9t_MixDatah>
				if (value == MIX_3POS) {
    beba:	15 32       	cpi	r17, 0x25	; 37
    bebc:	31 f4       	brne	.+12     	; 0xbeca <_Z14menuProcMixOneh+0xb8>
					value += md2->sw23pos;
    bebe:	19 85       	ldd	r17, Y+9	; 0x09
    bec0:	12 95       	swap	r17
    bec2:	16 95       	lsr	r17
    bec4:	17 70       	andi	r17, 0x07	; 7
    bec6:	1b 5d       	subi	r17, 0xDB	; 219
    bec8:	03 c0       	rjmp	.+6      	; 0xbed0 <_Z14menuProcMixOneh+0xbe>
				} else {
					if (value > MIX_3POS) {
    beca:	16 32       	cpi	r17, 0x26	; 38
    becc:	08 f0       	brcs	.+2      	; 0xbed0 <_Z14menuProcMixOneh+0xbe>
						value += 6;
    bece:	1a 5f       	subi	r17, 0xFA	; 250
					}
				}
				if (attr) {
    bed0:	ee 20       	and	r14, r14
    bed2:	09 f4       	brne	.+2      	; 0xbed6 <_Z14menuProcMixOneh+0xc4>
    bed4:	8f c1       	rjmp	.+798    	; 0xc1f4 <_Z14menuProcMixOneh+0x3e2>
					CHECK_INCDEC_H_MODELVAR(value, 1, NUM_XCHNRAW+1+MAX_GVARS+1+NUM_SCALERS + 6); // 6 for switches
    bed6:	47 e3       	ldi	r20, 0x37	; 55
    bed8:	61 e0       	ldi	r22, 0x01	; 1
    beda:	81 2f       	mov	r24, r17
    bedc:	0e 94 86 13 	call	0x270c	; 0x270c <_Z14checkIncDec_hmaaa>
					if (value >= MIX_3POS) {
    bee0:	85 32       	cpi	r24, 0x25	; 37
    bee2:	68 f0       	brcs	.+26     	; 0xbefe <_Z14menuProcMixOneh+0xec>
						if (value > MIX_3POS + 6) {
    bee4:	8c 32       	cpi	r24, 0x2C	; 44
    bee6:	10 f0       	brcs	.+4      	; 0xbeec <_Z14menuProcMixOneh+0xda>
							value -= 6;
    bee8:	86 50       	subi	r24, 0x06	; 6
    beea:	09 c0       	rjmp	.+18     	; 0xbefe <_Z14menuProcMixOneh+0xec>
						} else {
							md2->sw23pos = value - MIX_3POS;
    beec:	85 52       	subi	r24, 0x25	; 37
    beee:	82 95       	swap	r24
    bef0:	88 0f       	add	r24, r24
    bef2:	80 7e       	andi	r24, 0xE0	; 224
    bef4:	99 85       	ldd	r25, Y+9	; 0x09
    bef6:	9f 71       	andi	r25, 0x1F	; 31
    bef8:	98 2b       	or	r25, r24
    befa:	99 87       	std	Y+9, r25	; 0x09
							value = MIX_3POS;
    befc:	85 e2       	ldi	r24, 0x25	; 37
						}
					}
					md2->srcRaw = value;
    befe:	89 83       	std	Y+1, r24	; 0x01
    bf00:	79 c1       	rjmp	.+754    	; 0xc1f4 <_Z14menuProcMixOneh+0x3e2>
				break;

			case 1:

#if GVARS
				md2->weight = gvarMenuItem ( FW * 16, y, md2->weight, -125, 125, attr);
    bf02:	0d e7       	ldi	r16, 0x7D	; 125
    bf04:	23 e8       	ldi	r18, 0x83	; 131
    bf06:	4a 81       	ldd	r20, Y+2	; 0x02
    bf08:	6f 2d       	mov	r22, r15
    bf0a:	80 e6       	ldi	r24, 0x60	; 96
    bf0c:	0e 94 93 38 	call	0x7126	; 0x7126 <_Z12gvarMenuItemhhaaah>
    bf10:	8a 83       	std	Y+2, r24	; 0x02
#else
				lcd_outdezAtt(FW*14,y,md2->weight,attr|LEFT);
				if(attr) CHECK_INCDEC_H_MODELVAR( md2->weight, -125,125);
#endif
				break;
    bf12:	70 c1       	rjmp	.+736    	; 0xc1f4 <_Z14menuProcMixOneh+0x3e2>
				lcd_puts_P( 2*FW,y,md2->enableFmTrim ? PSTR(STR_FMTRIMVAL) : PSTR(STR_OFFSET));
#else

#endif
#if GVARS
				md2->sOffset = gvarMenuItem ( FW * 16, y, md2->sOffset, -125, 125, attr);
    bf14:	0d e7       	ldi	r16, 0x7D	; 125
    bf16:	23 e8       	ldi	r18, 0x83	; 131
    bf18:	48 85       	ldd	r20, Y+8	; 0x08
    bf1a:	6f 2d       	mov	r22, r15
    bf1c:	80 e6       	ldi	r24, 0x60	; 96
    bf1e:	0e 94 93 38 	call	0x7126	; 0x7126 <_Z12gvarMenuItemhhaaah>
    bf22:	88 87       	std	Y+8, r24	; 0x08
#else
				lcd_outdezAtt(FW*14,y,md2->sOffset,attr|LEFT);
				if(attr) CHECK_INCDEC_H_MODELVAR( md2->sOffset, -125,125);
#endif
				break;
    bf24:	67 c1       	rjmp	.+718    	; 0xc1f4 <_Z14menuProcMixOneh+0x3e2>
			case 3:
				md2->lateOffset = onoffItem_m (md2->lateOffset, y, attr);
    bf26:	8f 81       	ldd	r24, Y+7	; 0x07
	if (condition) value = checkIncDec (value, 0, 1, flags);
	return value;
}

static uint8_t onoffItem_m (uint8_t value, uint8_t y, uint8_t condition) {
	return onoffItem (value, y, condition, EE_MODEL);
    bf28:	4e 2d       	mov	r20, r14
    bf2a:	6f 2d       	mov	r22, r15
    bf2c:	83 fb       	bst	r24, 3
    bf2e:	88 27       	eor	r24, r24
    bf30:	80 f9       	bld	r24, 0
    bf32:	0e 94 dc 39 	call	0x73b8	; 0x73b8 <_ZL9onoffItemhhhh.constprop.7>
				lcd_outdezAtt(FW*14,y,md2->sOffset,attr|LEFT);
				if(attr) CHECK_INCDEC_H_MODELVAR( md2->sOffset, -125,125);
#endif
				break;
			case 3:
				md2->lateOffset = onoffItem_m (md2->lateOffset, y, attr);
    bf36:	9f 81       	ldd	r25, Y+7	; 0x07
    bf38:	80 fb       	bst	r24, 0
    bf3a:	93 f9       	bld	r25, 3
    bf3c:	13 c1       	rjmp	.+550    	; 0xc164 <_Z14menuProcMixOneh+0x352>
				break;
			case 4:
#ifdef FMODE_TRIM
				md2->enableFmTrim = onoffMenuItem_m( md2->enableFmTrim, y, PSTR(STR_FLMODETRIM), attr );
#else
				if ( (md2->srcRaw <= 4)) {
    bf3e:	99 81       	ldd	r25, Y+1	; 0x01
    bf40:	8f 81       	ldd	r24, Y+7	; 0x07
    bf42:	95 30       	cpi	r25, 0x05	; 5
    bf44:	80 f4       	brcc	.+32     	; 0xbf66 <_Z14menuProcMixOneh+0x154>
					md2->disableExpoDr = offonItem_m (md2->disableExpoDr, y, attr);
    bf46:	86 fb       	bst	r24, 6
    bf48:	88 27       	eor	r24, r24
    bf4a:	80 f9       	bld	r24, 0
	if (condition) value = checkIncDec (value, 0, 1, flags);
	return value;
}

static uint8_t onoffItem_m (uint8_t value, uint8_t y, uint8_t condition) {
	return onoffItem (value, y, condition, EE_MODEL);
    bf4c:	4e 2d       	mov	r20, r14
    bf4e:	6f 2d       	mov	r22, r15
    bf50:	99 2d       	mov	r25, r9
    bf52:	98 1b       	sub	r25, r24
    bf54:	89 2f       	mov	r24, r25
    bf56:	0e 94 dc 39 	call	0x73b8	; 0x73b8 <_ZL9onoffItemhhhh.constprop.7>
}

static uint8_t offonItem_m (uint8_t value, uint8_t y, uint8_t condition) {
	return 1 - onoffItem_m (1 - value, y, condition);
    bf5a:	99 2d       	mov	r25, r9
    bf5c:	98 1b       	sub	r25, r24
			case 4:
#ifdef FMODE_TRIM
				md2->enableFmTrim = onoffMenuItem_m( md2->enableFmTrim, y, PSTR(STR_FLMODETRIM), attr );
#else
				if ( (md2->srcRaw <= 4)) {
					md2->disableExpoDr = offonItem_m (md2->disableExpoDr, y, attr);
    bf5e:	8f 81       	ldd	r24, Y+7	; 0x07
    bf60:	90 fb       	bst	r25, 0
    bf62:	86 f9       	bld	r24, 6
    bf64:	1b c0       	rjmp	.+54     	; 0xbf9c <_Z14menuProcMixOneh+0x18a>
static uint8_t offonMenuItem_g (uint8_t value, uint8_t y, const prog_char *s, uint8_t condition) {
	return 1 - onoffMenuItem_g (1 - value, y, s, condition);
}

static uint8_t onoffMenuItem_m (uint8_t value, uint8_t y, const prog_char *s, uint8_t condition) {
	return onoffMenuItem (value, y, s, condition, EE_MODEL);
    bf66:	2e 2d       	mov	r18, r14
    bf68:	43 e1       	ldi	r20, 0x13	; 19
    bf6a:	5a e1       	ldi	r21, 0x1A	; 26
    bf6c:	6f 2d       	mov	r22, r15
    bf6e:	86 fb       	bst	r24, 6
    bf70:	88 27       	eor	r24, r24
    bf72:	80 f9       	bld	r24, 0
    bf74:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <_ZL13onoffMenuItemhhPKchh.isra.2>
#else
				if ( (md2->srcRaw <= 4)) {
					md2->disableExpoDr = offonItem_m (md2->disableExpoDr, y, attr);
				} else {
					md2->disableExpoDr = onoffMenuItem_m (md2->disableExpoDr, y,
							PSTR("\001Use Output   "), attr);
    bf78:	9f 81       	ldd	r25, Y+7	; 0x07
    bf7a:	80 fb       	bst	r24, 0
    bf7c:	96 f9       	bld	r25, 6
    bf7e:	f2 c0       	rjmp	.+484    	; 0xc164 <_Z14menuProcMixOneh+0x352>
				}
#endif
				break;
			case 5:
				md2->carryTrim = offonItem_m (md2->carryTrim, y, attr);
    bf80:	8f 81       	ldd	r24, Y+7	; 0x07
    bf82:	81 70       	andi	r24, 0x01	; 1
	if (condition) value = checkIncDec (value, 0, 1, flags);
	return value;
}

static uint8_t onoffItem_m (uint8_t value, uint8_t y, uint8_t condition) {
	return onoffItem (value, y, condition, EE_MODEL);
    bf84:	4e 2d       	mov	r20, r14
    bf86:	6f 2d       	mov	r22, r15
    bf88:	99 2d       	mov	r25, r9
    bf8a:	98 1b       	sub	r25, r24
    bf8c:	89 2f       	mov	r24, r25
    bf8e:	0e 94 dc 39 	call	0x73b8	; 0x73b8 <_ZL9onoffItemhhhh.constprop.7>
}

static uint8_t offonItem_m (uint8_t value, uint8_t y, uint8_t condition) {
	return 1 - onoffItem_m (1 - value, y, condition);
    bf92:	99 2d       	mov	r25, r9
    bf94:	98 1b       	sub	r25, r24
							PSTR("\001Use Output   "), attr);
				}
#endif
				break;
			case 5:
				md2->carryTrim = offonItem_m (md2->carryTrim, y, attr);
    bf96:	8f 81       	ldd	r24, Y+7	; 0x07
    bf98:	90 fb       	bst	r25, 0
    bf9a:	80 f9       	bld	r24, 0
    bf9c:	8f 83       	std	Y+7, r24	; 0x07
				break;
    bf9e:	2a c1       	rjmp	.+596    	; 0xc1f4 <_Z14menuProcMixOneh+0x3e2>
			case 6: {
				uint8_t value = md2->differential;
    bfa0:	8f 81       	ldd	r24, Y+7	; 0x07
				if (value == 0) {
    bfa2:	87 fd       	sbrc	r24, 7
    bfa4:	08 c0       	rjmp	.+16     	; 0xbfb6 <_Z14menuProcMixOneh+0x1a4>
					if ( (md2->curve <= -28) || (md2->curve >= 27)) {
    bfa6:	8c 81       	ldd	r24, Y+4	; 0x04
    bfa8:	85 5e       	subi	r24, 0xE5	; 229
    bfaa:	86 33       	cpi	r24, 0x36	; 54
    bfac:	40 f4       	brcc	.+16     	; 0xbfbe <_Z14menuProcMixOneh+0x1ac>
    bfae:	10 e0       	ldi	r17, 0x00	; 0
					}
				}
				uint8_t value2 = value;
				lcd_putsAtt (1 * FW, y,
						value ? (value == 2) ? PSTR("\021Expo") : PSTR(STR_15DIFF): PSTR(STR_Curve),
						attr);
    bfb0:	41 e0       	ldi	r20, 0x01	; 1
    bfb2:	5a e1       	ldi	r21, 0x1A	; 26
    bfb4:	07 c0       	rjmp	.+14     	; 0xbfc4 <_Z14menuProcMixOneh+0x1b2>
    bfb6:	11 e0       	ldi	r17, 0x01	; 1
    bfb8:	47 e0       	ldi	r20, 0x07	; 7
    bfba:	5a e1       	ldi	r21, 0x1A	; 26
    bfbc:	03 c0       	rjmp	.+6      	; 0xbfc4 <_Z14menuProcMixOneh+0x1b2>
    bfbe:	12 e0       	ldi	r17, 0x02	; 2
    bfc0:	4d e0       	ldi	r20, 0x0D	; 13
    bfc2:	5a e1       	ldi	r21, 0x1A	; 26
    bfc4:	2e 2d       	mov	r18, r14
    bfc6:	6f 2d       	mov	r22, r15
    bfc8:	86 e0       	ldi	r24, 0x06	; 6
    bfca:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>
				if (attr)
    bfce:	ee 20       	and	r14, r14
    bfd0:	09 f4       	brne	.+2      	; 0xbfd4 <_Z14menuProcMixOneh+0x1c2>
    bfd2:	10 c1       	rjmp	.+544    	; 0xc1f4 <_Z14menuProcMixOneh+0x3e2>
				CHECK_INCDEC_H_MODELVAR_0(value2, 2);
    bfd4:	62 e0       	ldi	r22, 0x02	; 2
    bfd6:	81 2f       	mov	r24, r17
    bfd8:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
				if (value != value2) {
    bfdc:	18 17       	cp	r17, r24
    bfde:	09 f4       	brne	.+2      	; 0xbfe2 <_Z14menuProcMixOneh+0x1d0>
    bfe0:	09 c1       	rjmp	.+530    	; 0xc1f4 <_Z14menuProcMixOneh+0x3e2>
					if (value2 == 2) {
    bfe2:	82 30       	cpi	r24, 0x02	; 2
    bfe4:	11 f4       	brne	.+4      	; 0xbfea <_Z14menuProcMixOneh+0x1d8>
						md2->curve = -128;
    bfe6:	7c 82       	std	Y+4, r7	; 0x04
    bfe8:	01 c0       	rjmp	.+2      	; 0xbfec <_Z14menuProcMixOneh+0x1da>
					} else {
						md2->curve = 0;
    bfea:	1c 82       	std	Y+4, r1	; 0x04
					}
					md2->differential = value2 & 1;	// 0 and 2 turn it off
    bfec:	9f 81       	ldd	r25, Y+7	; 0x07
    bfee:	80 fb       	bst	r24, 0
    bff0:	97 f9       	bld	r25, 7
    bff2:	b8 c0       	rjmp	.+368    	; 0xc164 <_Z14menuProcMixOneh+0x352>
				}
			}
				break;
			case 7:
				if (md2->differential)		// Non zero for curve
    bff4:	8f 81       	ldd	r24, Y+7	; 0x07
    bff6:	87 ff       	sbrs	r24, 7
    bff8:	09 c0       	rjmp	.+18     	; 0xc00c <_Z14menuProcMixOneh+0x1fa>
				{
					md2->curve = gvarMenuItem (12 * FW, y, md2->curve, -100, 100, attr);
    bffa:	04 e6       	ldi	r16, 0x64	; 100
    bffc:	2c e9       	ldi	r18, 0x9C	; 156
    bffe:	4c 81       	ldd	r20, Y+4	; 0x04
    c000:	6f 2d       	mov	r22, r15
    c002:	88 e4       	ldi	r24, 0x48	; 72
    c004:	0e 94 93 38 	call	0x7126	; 0x7126 <_Z12gvarMenuItemhhaaah>
    c008:	8c 83       	std	Y+4, r24	; 0x04
    c00a:	f4 c0       	rjmp	.+488    	; 0xc1f4 <_Z14menuProcMixOneh+0x3e2>
				} else {
					if ( (md2->curve <= -28) || (md2->curve > 27)) {
    c00c:	4c 81       	ldd	r20, Y+4	; 0x04
    c00e:	8b e1       	ldi	r24, 0x1B	; 27
    c010:	84 0f       	add	r24, r20
    c012:	87 33       	cpi	r24, 0x37	; 55
    c014:	b8 f0       	brcs	.+46     	; 0xc044 <_Z14menuProcMixOneh+0x232>
						int8_t value = md2->curve + 128;	// 0 to 100, AND -100 to -1
    c016:	10 e8       	ldi	r17, 0x80	; 128
    c018:	14 0f       	add	r17, r20
						lcd_outdezAtt (FW * 17, y, value, attr | LEFT);
    c01a:	2e 2d       	mov	r18, r14
    c01c:	20 64       	ori	r18, 0x40	; 64
    c01e:	41 2f       	mov	r20, r17
    c020:	55 27       	eor	r21, r21
    c022:	47 fd       	sbrc	r20, 7
    c024:	50 95       	com	r21
    c026:	6f 2d       	mov	r22, r15
    c028:	86 e6       	ldi	r24, 0x66	; 102
    c02a:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
						if (attr)
    c02e:	ee 20       	and	r14, r14
    c030:	31 f0       	breq	.+12     	; 0xc03e <_Z14menuProcMixOneh+0x22c>
						CHECK_INCDEC_H_MODELVAR(value, -100, 100);
    c032:	44 e6       	ldi	r20, 0x64	; 100
    c034:	6c e9       	ldi	r22, 0x9C	; 156
    c036:	81 2f       	mov	r24, r17
    c038:	0e 94 86 13 	call	0x270c	; 0x270c <_Z14checkIncDec_hmaaa>
    c03c:	18 2f       	mov	r17, r24
						md2->curve = value - 128;
    c03e:	10 58       	subi	r17, 0x80	; 128
    c040:	1c 83       	std	Y+4, r17	; 0x04
    c042:	d8 c0       	rjmp	.+432    	; 0xc1f4 <_Z14menuProcMixOneh+0x3e2>
					} else {
						put_curve (2 * FW, y, md2->curve, attr);
    c044:	2e 2d       	mov	r18, r14
    c046:	6f 2d       	mov	r22, r15
    c048:	8c e0       	ldi	r24, 0x0C	; 12
    c04a:	0e 94 38 3f 	call	0x7e70	; 0x7e70 <_Z9put_curvehhah>
						if (attr) {
    c04e:	ee 20       	and	r14, r14
    c050:	09 f4       	brne	.+2      	; 0xc054 <_Z14menuProcMixOneh+0x242>
    c052:	d0 c0       	rjmp	.+416    	; 0xc1f4 <_Z14menuProcMixOneh+0x3e2>
							CHECK_INCDEC_H_MODELVAR(md2->curve, -MAX_CURVE5-MAX_CURVE9,
    c054:	46 e1       	ldi	r20, 0x16	; 22
    c056:	60 ef       	ldi	r22, 0xF0	; 240
    c058:	8c 81       	ldd	r24, Y+4	; 0x04
    c05a:	0e 94 86 13 	call	0x270c	; 0x270c <_Z14checkIncDec_hmaaa>
									MAX_CURVE5+MAX_CURVE9+7-1);
    c05e:	8c 83       	std	Y+4, r24	; 0x04
							if (event == EVT_KEY_FIRST(KEY_MENU)) {
    c060:	90 e6       	ldi	r25, 0x60	; 96
    c062:	a9 12       	cpse	r10, r25
    c064:	c7 c0       	rjmp	.+398    	; 0xc1f4 <_Z14menuProcMixOneh+0x3e2>
								if (md2->curve >= CURVE_BASE) {
    c066:	87 30       	cpi	r24, 0x07	; 7
    c068:	3c f0       	brlt	.+14     	; 0xc078 <_Z14menuProcMixOneh+0x266>
									s_curveChan = md2->curve - CURVE_BASE;
    c06a:	87 50       	subi	r24, 0x07	; 7
    c06c:	80 93 55 0e 	sts	0x0E55, r24
									pushMenu (menuProcCurveOne);
    c070:	88 eb       	ldi	r24, 0xB8	; 184
    c072:	9f e4       	ldi	r25, 0x4F	; 79
    c074:	0e 94 ab 18 	call	0x3156	; 0x3156 <_Z8pushMenuPFvhE>
								}
								if (md2->curve < 0) {
    c078:	8c 81       	ldd	r24, Y+4	; 0x04
    c07a:	87 ff       	sbrs	r24, 7
    c07c:	bb c0       	rjmp	.+374    	; 0xc1f4 <_Z14menuProcMixOneh+0x3e2>
									s_curveChan = -md2->curve - 1;
    c07e:	80 95       	com	r24
    c080:	80 93 55 0e 	sts	0x0E55, r24
									pushMenu (menuProcCurveOne);
    c084:	88 eb       	ldi	r24, 0xB8	; 184
    c086:	9f e4       	ldi	r25, 0x4F	; 79
    c088:	0e 94 ab 18 	call	0x3156	; 0x3156 <_Z8pushMenuPFvhE>
    c08c:	b3 c0       	rjmp	.+358    	; 0xc1f4 <_Z14menuProcMixOneh+0x3e2>
				}
				break;
			case 8:
//            lcd_puts_Pleft(  y,PSTR(STR_2SWITCH));
				md2->swtch = edit_dr_switch (13 * FW, y, md2->swtch, attr,
						attr ? EDIT_DR_SWITCH_EDIT : 0);
    c08e:	01 e0       	ldi	r16, 0x01	; 1
    c090:	e1 10       	cpse	r14, r1
    c092:	01 c0       	rjmp	.+2      	; 0xc096 <_Z14menuProcMixOneh+0x284>
    c094:	00 e0       	ldi	r16, 0x00	; 0
    c096:	2e 2d       	mov	r18, r14
    c098:	4b 81       	ldd	r20, Y+3	; 0x03
    c09a:	6f 2d       	mov	r22, r15
    c09c:	8e e4       	ldi	r24, 0x4E	; 78
    c09e:	0e 94 96 3f 	call	0x7f2c	; 0x7f2c <_Z14edit_dr_switchhhahh>
    c0a2:	8b 83       	std	Y+3, r24	; 0x03
//            putsDrSwitches(13*FW,  y,md2->swtch,attr);
//            if(attr) CHECK_INCDEC_H_MODELVAR( md2->swtch, -MAX_DRSWITCH, MAX_DRSWITCH);
				break;
    c0a4:	a7 c0       	rjmp	.+334    	; 0xc1f4 <_Z14menuProcMixOneh+0x3e2>
			case 9: {
				uint8_t b = 1;
//            lcd_puts_Pleft( y, PSTR("\001MODES"));

				if (attr) {
    c0a6:	ee 20       	and	r14, r14
    c0a8:	21 f0       	breq	.+8      	; 0xc0b2 <_Z14menuProcMixOneh+0x2a0>
					Columns = &ProgColumns[COLUMNS_4];
    c0aa:	d0 92 57 0e 	sts	0x0E57, r13
    c0ae:	c0 92 56 0e 	sts	0x0E56, r12
					}
				}
				uint8_t value2 = value;
				lcd_putsAtt (1 * FW, y,
						value ? (value == 2) ? PSTR("\021Expo") : PSTR(STR_15DIFF): PSTR(STR_Curve),
						attr);
    c0b2:	0f e3       	ldi	r16, 0x3F	; 63
    c0b4:	10 e0       	ldi	r17, 0x00	; 0
    c0b6:	66 24       	eor	r6, r6
    c0b8:	63 94       	inc	r6
    c0ba:	55 24       	eor	r5, r5
    c0bc:	5a 94       	dec	r5
    c0be:	5f 0c       	add	r5, r15
				if (attr) {
					Columns = &ProgColumns[COLUMNS_4];
				}

				for (uint8_t p = 0; p < MAX_MODES + 1; p++) {
					uint8_t z = md2->modeControl;
    c0c0:	99 85       	ldd	r25, Y+9	; 0x09
    c0c2:	9f 71       	andi	r25, 0x1F	; 31
					lcd_putcAtt ( (9 + p) * (FW + 1), y, '0' + p, (z & b) ? 0 : INVERS);
    c0c4:	96 21       	and	r25, r6
    c0c6:	21 e0       	ldi	r18, 0x01	; 1
    c0c8:	09 f0       	breq	.+2      	; 0xc0cc <_Z14menuProcMixOneh+0x2ba>
    c0ca:	20 e0       	ldi	r18, 0x00	; 0
    c0cc:	40 e3       	ldi	r20, 0x30	; 48
    c0ce:	41 0f       	add	r20, r17
    c0d0:	6f 2d       	mov	r22, r15
    c0d2:	80 2f       	mov	r24, r16
    c0d4:	0e 94 31 26 	call	0x4c62	; 0x4c62 <_Z11lcd_putcAtthhch>
					if (attr && (g_posHorz == p)) {
    c0d8:	ee 20       	and	r14, r14
    c0da:	e9 f0       	breq	.+58     	; 0xc116 <_Z14menuProcMixOneh+0x304>
    c0dc:	80 91 7e 0d 	lds	r24, 0x0D7E
    c0e0:	81 13       	cpse	r24, r17
    c0e2:	19 c0       	rjmp	.+50     	; 0xc116 <_Z14menuProcMixOneh+0x304>
						lcd_rect ( (9 + p) * (FW + 1) - 1, y - 1, FW + 2, 9);
    c0e4:	29 e0       	ldi	r18, 0x09	; 9
    c0e6:	48 e0       	ldi	r20, 0x08	; 8
    c0e8:	65 2d       	mov	r22, r5
    c0ea:	8f ef       	ldi	r24, 0xFF	; 255
    c0ec:	80 0f       	add	r24, r16
    c0ee:	0e 94 98 29 	call	0x5330	; 0x5330 <_Z8lcd_recthhhh>
						if (event == EVT_KEY_BREAK(KEY_MENU) || event == EVT_KEY_BREAK(BTN_RE)) {
    c0f2:	80 e2       	ldi	r24, 0x20	; 32
    c0f4:	a8 16       	cp	r10, r24
    c0f6:	19 f0       	breq	.+6      	; 0xc0fe <_Z14menuProcMixOneh+0x2ec>
    c0f8:	9e e2       	ldi	r25, 0x2E	; 46
    c0fa:	a9 12       	cpse	r10, r25
    c0fc:	0c c0       	rjmp	.+24     	; 0xc116 <_Z14menuProcMixOneh+0x304>
							md2->modeControl ^= b;
    c0fe:	89 85       	ldd	r24, Y+9	; 0x09
    c100:	96 2d       	mov	r25, r6
    c102:	98 27       	eor	r25, r24
    c104:	9f 71       	andi	r25, 0x1F	; 31
    c106:	80 7e       	andi	r24, 0xE0	; 224
    c108:	89 2b       	or	r24, r25
    c10a:	89 87       	std	Y+9, r24	; 0x09
							eeDirty (EE_MODEL);
    c10c:	82 e0       	ldi	r24, 0x02	; 2
    c10e:	0e 94 4e 20 	call	0x409c	; 0x409c <_Z7eeDirtyh>
							s_editMode = false;
    c112:	10 92 a5 0d 	sts	0x0DA5, r1
						}
					}
					b <<= 1;
    c116:	66 0c       	add	r6, r6

				if (attr) {
					Columns = &ProgColumns[COLUMNS_4];
				}

				for (uint8_t p = 0; p < MAX_MODES + 1; p++) {
    c118:	1f 5f       	subi	r17, 0xFF	; 255
    c11a:	09 5f       	subi	r16, 0xF9	; 249
    c11c:	15 30       	cpi	r17, 0x05	; 5
    c11e:	81 f6       	brne	.-96     	; 0xc0c0 <_Z14menuProcMixOneh+0x2ae>
    c120:	69 c0       	rjmp	.+210    	; 0xc1f4 <_Z14menuProcMixOneh+0x3e2>
				}
			}
				break;
			case 10:
//            lcd_puts_Pleft(  y,PSTR(STR_2WARNING));
				b = md2->mixWarn;
    c122:	1f 81       	ldd	r17, Y+7	; 0x07
    c124:	12 95       	swap	r17
    c126:	13 70       	andi	r17, 0x03	; 3
				if (b) lcd_outdezAtt (FW * 14, y, b, attr | LEFT);
    c128:	49 f0       	breq	.+18     	; 0xc13c <_Z14menuProcMixOneh+0x32a>
    c12a:	41 2f       	mov	r20, r17
    c12c:	50 e0       	ldi	r21, 0x00	; 0
    c12e:	2e 2d       	mov	r18, r14
    c130:	20 64       	ori	r18, 0x40	; 64
    c132:	6f 2d       	mov	r22, r15
    c134:	84 e5       	ldi	r24, 0x54	; 84
    c136:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
    c13a:	07 c0       	rjmp	.+14     	; 0xc14a <_Z14menuProcMixOneh+0x338>
				else lcd_putsAtt ( FW * 13, y, Str_OFF, attr);
    c13c:	2e 2d       	mov	r18, r14
    c13e:	4a ec       	ldi	r20, 0xCA	; 202
    c140:	52 e0       	ldi	r21, 0x02	; 2
    c142:	6f 2d       	mov	r22, r15
    c144:	8e e4       	ldi	r24, 0x4E	; 78
    c146:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>
				if (attr) {
    c14a:	ee 20       	and	r14, r14
    c14c:	09 f4       	brne	.+2      	; 0xc150 <_Z14menuProcMixOneh+0x33e>
    c14e:	52 c0       	rjmp	.+164    	; 0xc1f4 <_Z14menuProcMixOneh+0x3e2>
					CHECK_INCDEC_H_MODELVAR_0(b, 3);
    c150:	63 e0       	ldi	r22, 0x03	; 3
    c152:	81 2f       	mov	r24, r17
    c154:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
					md2->mixWarn = b;
    c158:	83 70       	andi	r24, 0x03	; 3
    c15a:	82 95       	swap	r24
    c15c:	80 7f       	andi	r24, 0xF0	; 240
    c15e:	9f 81       	ldd	r25, Y+7	; 0x07
    c160:	9f 7c       	andi	r25, 0xCF	; 207
    c162:	98 2b       	or	r25, r24
    c164:	9f 83       	std	Y+7, r25	; 0x07
    c166:	46 c0       	rjmp	.+140    	; 0xc1f4 <_Z14menuProcMixOneh+0x3e2>
				}
				break;
			case 11:
//            lcd_puts_Pleft(  y,PSTR(STR_2MULTIPLEX));
				lcd_putsAttIdx (13 * FW, y, PSTR(STR_ADD_MULT_REP), md2->mltpx, attr);
    c168:	2f 81       	ldd	r18, Y+7	; 0x07
    c16a:	26 95       	lsr	r18
    c16c:	23 70       	andi	r18, 0x03	; 3
    c16e:	0e 2d       	mov	r16, r14
    c170:	47 ee       	ldi	r20, 0xE7	; 231
    c172:	59 e1       	ldi	r21, 0x19	; 25
    c174:	6f 2d       	mov	r22, r15
    c176:	8e e4       	ldi	r24, 0x4E	; 78
    c178:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
//            lcd_putsAttIdx_right( y,PSTR(STR_ADD_MULT_REP),md2->mltpx,attr);
				if (attr)
    c17c:	ee 20       	and	r14, r14
    c17e:	d1 f1       	breq	.+116    	; 0xc1f4 <_Z14menuProcMixOneh+0x3e2>
				CHECK_INCDEC_H_MODELVAR_0(md2->mltpx, 2); //!! bitfield
    c180:	8f 81       	ldd	r24, Y+7	; 0x07
    c182:	86 95       	lsr	r24
    c184:	62 e0       	ldi	r22, 0x02	; 2
    c186:	83 70       	andi	r24, 0x03	; 3
    c188:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    c18c:	83 70       	andi	r24, 0x03	; 3
    c18e:	88 0f       	add	r24, r24
    c190:	9f 81       	ldd	r25, Y+7	; 0x07
    c192:	99 7f       	andi	r25, 0xF9	; 249
    c194:	e6 cf       	rjmp	.-52     	; 0xc162 <_Z14menuProcMixOneh+0x350>
				break;
			case 12:
				md2->delayDown = editSlowDelay (y, attr, md2->delayDown);
    c196:	4d 81       	ldd	r20, Y+5	; 0x05
    c198:	42 95       	swap	r20
    c19a:	4f 70       	andi	r20, 0x0F	; 15
    c19c:	6e 2d       	mov	r22, r14
    c19e:	8f 2d       	mov	r24, r15
    c1a0:	0e 94 bf 35 	call	0x6b7e	; 0x6b7e <_ZL13editSlowDelayhhh>
    c1a4:	82 95       	swap	r24
    c1a6:	80 7f       	andi	r24, 0xF0	; 240
    c1a8:	9d 81       	ldd	r25, Y+5	; 0x05
    c1aa:	9f 70       	andi	r25, 0x0F	; 15
    c1ac:	09 c0       	rjmp	.+18     	; 0xc1c0 <_Z14menuProcMixOneh+0x3ae>
				break;
			case 13:
				md2->delayUp = editSlowDelay (y, attr, md2->delayUp);
    c1ae:	4d 81       	ldd	r20, Y+5	; 0x05
    c1b0:	4f 70       	andi	r20, 0x0F	; 15
    c1b2:	6e 2d       	mov	r22, r14
    c1b4:	8f 2d       	mov	r24, r15
    c1b6:	0e 94 bf 35 	call	0x6b7e	; 0x6b7e <_ZL13editSlowDelayhhh>
    c1ba:	8f 70       	andi	r24, 0x0F	; 15
    c1bc:	9d 81       	ldd	r25, Y+5	; 0x05
    c1be:	90 7f       	andi	r25, 0xF0	; 240
    c1c0:	98 2b       	or	r25, r24
    c1c2:	9d 83       	std	Y+5, r25	; 0x05
				break;
    c1c4:	17 c0       	rjmp	.+46     	; 0xc1f4 <_Z14menuProcMixOneh+0x3e2>
			case 14:
				md2->speedDown = editSlowDelay (y, attr, md2->speedDown);
    c1c6:	4e 81       	ldd	r20, Y+6	; 0x06
    c1c8:	42 95       	swap	r20
    c1ca:	4f 70       	andi	r20, 0x0F	; 15
    c1cc:	6e 2d       	mov	r22, r14
    c1ce:	8f 2d       	mov	r24, r15
    c1d0:	0e 94 bf 35 	call	0x6b7e	; 0x6b7e <_ZL13editSlowDelayhhh>
    c1d4:	82 95       	swap	r24
    c1d6:	80 7f       	andi	r24, 0xF0	; 240
    c1d8:	9e 81       	ldd	r25, Y+6	; 0x06
    c1da:	9f 70       	andi	r25, 0x0F	; 15
    c1dc:	09 c0       	rjmp	.+18     	; 0xc1f0 <_Z14menuProcMixOneh+0x3de>
				break;
			case 15:
				md2->speedUp = editSlowDelay (y, attr, md2->speedUp);
    c1de:	4e 81       	ldd	r20, Y+6	; 0x06
    c1e0:	4f 70       	andi	r20, 0x0F	; 15
    c1e2:	6e 2d       	mov	r22, r14
    c1e4:	8f 2d       	mov	r24, r15
    c1e6:	0e 94 bf 35 	call	0x6b7e	; 0x6b7e <_ZL13editSlowDelayhhh>
    c1ea:	8f 70       	andi	r24, 0x0F	; 15
    c1ec:	9e 81       	ldd	r25, Y+6	; 0x06
    c1ee:	90 7f       	andi	r25, 0xF0	; 240
    c1f0:	98 2b       	or	r25, r24
    c1f2:	9e 83       	std	Y+6, r25	; 0x06
    c1f4:	b3 94       	inc	r11
    c1f6:	88 e0       	ldi	r24, 0x08	; 8
    c1f8:	f8 0e       	add	r15, r24
	lcd_puts_Pskip ( FH,
			PSTR(
					STR_2SOURCE"\037"STR_2WEIGHT"\037""\001"STR_OFFSET"\037"STR_2FIX_OFFSET "\037"STR_ENABLEEXPO"\037"STR_2TRIM"\037\037\037"STR_2SWITCH"\037""\001MODES""\037"STR_2WARNING "\037"STR_2MULTIPLEX"\037"STR_2DELAY_DOWN"\037"STR_2DELAY_UP"\037"STR_2SLOW_DOWN"\037"STR_2SLOW_UP "\037""SWCH Switch"),
			s_pgOfs);

	for (uint8_t k = 0; k < 7; k++) {
    c1fa:	90 e4       	ldi	r25, 0x40	; 64
    c1fc:	f9 12       	cpse	r15, r25
    c1fe:	45 ce       	rjmp	.-886    	; 0xbe8a <_Z14menuProcMixOneh+0x78>
			case 15:
				md2->speedUp = editSlowDelay (y, attr, md2->speedUp);
				break;
		}
	}
}
    c200:	df 91       	pop	r29
    c202:	cf 91       	pop	r28
    c204:	1f 91       	pop	r17
    c206:	0f 91       	pop	r16
    c208:	ff 90       	pop	r15
    c20a:	ef 90       	pop	r14
    c20c:	df 90       	pop	r13
    c20e:	cf 90       	pop	r12
    c210:	bf 90       	pop	r11
    c212:	af 90       	pop	r10
    c214:	9f 90       	pop	r9
    c216:	8f 90       	pop	r8
    c218:	7f 90       	pop	r7
    c21a:	6f 90       	pop	r6
    c21c:	5f 90       	pop	r5
    c21e:	08 95       	ret

0000c220 <_Z11menuProcMixh>:
	}
	s_moveMixIdx = s_currMixIdx;

}

void menuProcMix (uint8_t event) {
    c220:	2f 92       	push	r2
    c222:	3f 92       	push	r3
    c224:	4f 92       	push	r4
    c226:	5f 92       	push	r5
    c228:	6f 92       	push	r6
    c22a:	7f 92       	push	r7
    c22c:	8f 92       	push	r8
    c22e:	9f 92       	push	r9
    c230:	af 92       	push	r10
    c232:	bf 92       	push	r11
    c234:	cf 92       	push	r12
    c236:	df 92       	push	r13
    c238:	ef 92       	push	r14
    c23a:	ff 92       	push	r15
    c23c:	0f 93       	push	r16
    c23e:	1f 93       	push	r17
    c240:	cf 93       	push	r28
    c242:	df 93       	push	r29
    c244:	00 d0       	rcall	.+0      	; 0xc246 <_Z11menuProcMixh+0x26>
    c246:	00 d0       	rcall	.+0      	; 0xc248 <_Z11menuProcMixh+0x28>
    c248:	cd b7       	in	r28, 0x3d	; 61
    c24a:	de b7       	in	r29, 0x3e	; 62
    c24c:	38 2e       	mov	r3, r24
	TITLE(STR_MIXER);
    c24e:	83 e8       	ldi	r24, 0x83	; 131
    c250:	99 e1       	ldi	r25, 0x19	; 25
    c252:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>
	static MState2 mstate2;

	if (s_moveMode) {
    c256:	80 91 7a 0d 	lds	r24, 0x0D7A
    c25a:	88 23       	and	r24, r24
    c25c:	61 f0       	breq	.+24     	; 0xc276 <_Z11menuProcMixh+0x56>
		int8_t moveByRotary;
		moveByRotary = qRotary ();		// Do this now, check_simple destroys rotary data
    c25e:	0e 94 21 39 	call	0x7242	; 0x7242 <_Z7qRotaryv>
		if (moveByRotary) {
    c262:	88 23       	and	r24, r24
    c264:	41 f0       	breq	.+16     	; 0xc276 <_Z11menuProcMixh+0x56>
			if (moveByRotary > 0) {
    c266:	1c f0       	brlt	.+6      	; 0xc26e <_Z11menuProcMixh+0x4e>
				event = EVT_KEY_FIRST(KEY_DOWN);
    c268:	02 e6       	ldi	r16, 0x62	; 98
    c26a:	30 2e       	mov	r3, r16
    c26c:	02 c0       	rjmp	.+4      	; 0xc272 <_Z11menuProcMixh+0x52>
			} else {
				event = EVT_KEY_FIRST(KEY_UP);
    c26e:	13 e6       	ldi	r17, 0x63	; 99
    c270:	31 2e       	mov	r3, r17
			}
			Tevent = event;
    c272:	30 92 e1 01 	sts	0x01E1, r3
		}
	}

	if (!PopupData.PopupActive) {
    c276:	80 91 fc 0d 	lds	r24, 0x0DFC
    c27a:	81 11       	cpse	r24, r1
    c27c:	07 c0       	rjmp	.+14     	; 0xc28c <_Z11menuProcMixh+0x6c>
#ifdef MODEL_INDEX
//		if (SubMenuFromIndex)
//		{
		mstate2.check_columns (event, s_mixMaxSel);
    c27e:	40 91 7c 0d 	lds	r20, 0x0D7C
    c282:	63 2d       	mov	r22, r3
    c284:	87 e4       	ldi	r24, 0x47	; 71
    c286:	9e e0       	ldi	r25, 0x0E	; 14
    c288:	0e 94 07 3c 	call	0x780e	; 0x780e <_ZN7MState213check_columnsEhh>
#ifdef MODEL_INDEX
//		}
#endif
	}

	uint8_t sub = mstate2.m_posVert + 1;
    c28c:	50 90 47 0e 	lds	r5, 0x0E47
    c290:	53 94       	inc	r5
	uint8_t menulong = 0;

	switch (Tevent) {
    c292:	80 91 e1 01 	lds	r24, 0x01E1
    c296:	80 36       	cpi	r24, 0x60	; 96
    c298:	41 f0       	breq	.+16     	; 0xc2aa <_Z11menuProcMixh+0x8a>
    c29a:	8f 3b       	cpi	r24, 0xBF	; 191
    c29c:	19 f0       	breq	.+6      	; 0xc2a4 <_Z11menuProcMixh+0x84>
    c29e:	8e 32       	cpi	r24, 0x2E	; 46
    c2a0:	c1 f4       	brne	.+48     	; 0xc2d2 <_Z11menuProcMixh+0xb2>
    c2a2:	03 c0       	rjmp	.+6      	; 0xc2aa <_Z11menuProcMixh+0x8a>
		case EVT_ENTRY:
			s_moveMode = false;
    c2a4:	10 92 7a 0d 	sts	0x0D7A, r1
    c2a8:	14 c0       	rjmp	.+40     	; 0xc2d2 <_Z11menuProcMixh+0xb2>
			break;

		case EVT_KEY_FIRST(KEY_MENU):
		case EVT_KEY_BREAK(BTN_RE):
			if (s_moveMode) {
    c2aa:	90 91 7a 0d 	lds	r25, 0x0D7A
    c2ae:	99 23       	and	r25, r25
    c2b0:	29 f0       	breq	.+10     	; 0xc2bc <_Z11menuProcMixh+0x9c>
				s_moveMode = false;
    c2b2:	10 92 7a 0d 	sts	0x0D7A, r1
				RotaryState = ROTARY_MENU_UD;
    c2b6:	10 92 db 0d 	sts	0x0DDB, r1
    c2ba:	0b c0       	rjmp	.+22     	; 0xc2d2 <_Z11menuProcMixh+0xb2>
				break;
			}
			// Else fall through
			if (!PopupData.PopupActive) {
    c2bc:	90 91 fc 0d 	lds	r25, 0x0DFC
    c2c0:	91 11       	cpse	r25, r1
    c2c2:	07 c0       	rjmp	.+14     	; 0xc2d2 <_Z11menuProcMixh+0xb2>
				killEvents (Tevent);
    c2c4:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
				Tevent = 0;			// Prevent changing weight to/from Gvar
    c2c8:	10 92 e1 01 	sts	0x01E1, r1
//    	  if(sub<1) break;
				menulong = 1;
    c2cc:	44 24       	eor	r4, r4
    c2ce:	43 94       	inc	r4
    c2d0:	01 c0       	rjmp	.+2      	; 0xc2d4 <_Z11menuProcMixh+0xb4>
//		}
#endif
	}

	uint8_t sub = mstate2.m_posVert + 1;
	uint8_t menulong = 0;
    c2d2:	41 2c       	mov	r4, r1
			}
			break;
	}

//  if(sub==0) s_moveMode = false;
	uint8_t t_pgOfs = evalOffset (sub, 7);
    c2d4:	67 e0       	ldi	r22, 0x07	; 7
    c2d6:	85 2d       	mov	r24, r5
    c2d8:	9c db       	rcall	.-2248   	; 0xba12 <_Z10evalOffsetah>
    c2da:	89 83       	std	Y+1, r24	; 0x01

	if (PopupData.PopupActive) {
    c2dc:	80 91 fc 0d 	lds	r24, 0x0DFC
    c2e0:	81 11       	cpse	r24, r1
		Tevent = 0;
    c2e2:	10 92 e1 01 	sts	0x01E1, r1
	}

	uint8_t mix_index = 0;
	uint8_t current = 1;

	if (s_moveMode) {
    c2e6:	80 91 7a 0d 	lds	r24, 0x0D7A
    c2ea:	88 23       	and	r24, r24
    c2ec:	39 f0       	breq	.+14     	; 0xc2fc <_Z11menuProcMixh+0xdc>
		uint8_t dir;

		if ( (dir = (Tevent == EVT_KEY_FIRST(KEY_DOWN))) || Tevent == EVT_KEY_FIRST(KEY_UP)) {
    c2ee:	80 91 e1 01 	lds	r24, 0x01E1
    c2f2:	9e e9       	ldi	r25, 0x9E	; 158
    c2f4:	98 0f       	add	r25, r24
    c2f6:	92 30       	cpi	r25, 0x02	; 2
    c2f8:	08 f4       	brcc	.+2      	; 0xc2fc <_Z11menuProcMixh+0xdc>
    c2fa:	7b c1       	rjmp	.+758    	; 0xc5f2 <_Z11menuProcMixh+0x3d2>
			moveMix (s_currMixIdx, dir); //true=inc=down false=dec=up - Issue 49
		}
	}

	for (uint8_t chan = 1; chan <= NUM_CHNOUT; chan += 1) {
    c2fc:	22 24       	eor	r2, r2
    c2fe:	23 94       	inc	r2
    c300:	11 e0       	ldi	r17, 0x01	; 1
    c302:	61 2c       	mov	r6, r1
		MixData *pmd;

		pmd = mixaddress (mix_index);

		if (t_pgOfs < current && current - t_pgOfs < 8) {
    c304:	89 81       	ldd	r24, Y+1	; 0x01
    c306:	a8 2e       	mov	r10, r24
    c308:	b1 2c       	mov	r11, r1
	}

	for (uint8_t chan = 1; chan <= NUM_CHNOUT; chan += 1) {
		MixData *pmd;

		pmd = mixaddress (mix_index);
    c30a:	86 2d       	mov	r24, r6
    c30c:	0e 94 87 10 	call	0x210e	; 0x210e <_Z10mixaddressh>
    c310:	7c 01       	movw	r14, r24

		if (t_pgOfs < current && current - t_pgOfs < 8) {
    c312:	99 81       	ldd	r25, Y+1	; 0x01
    c314:	91 17       	cp	r25, r17
    c316:	78 f4       	brcc	.+30     	; 0xc336 <_Z11menuProcMixh+0x116>
    c318:	61 2f       	mov	r22, r17
    c31a:	70 e0       	ldi	r23, 0x00	; 0
    c31c:	6a 19       	sub	r22, r10
    c31e:	7b 09       	sbc	r23, r11
    c320:	68 30       	cpi	r22, 0x08	; 8
    c322:	71 05       	cpc	r23, r1
    c324:	44 f4       	brge	.+16     	; 0xc336 <_Z11menuProcMixh+0x116>
			putsChn (0, (current - t_pgOfs) * FH, chan, 0); // show CHx
    c326:	66 0f       	add	r22, r22
    c328:	66 0f       	add	r22, r22
    c32a:	66 0f       	add	r22, r22
    c32c:	20 e0       	ldi	r18, 0x00	; 0
    c32e:	42 2d       	mov	r20, r2
    c330:	80 e0       	ldi	r24, 0x00	; 0
    c332:	0e 94 c3 10 	call	0x2186	; 0x2186 <_Z7putsChnhhhh>
		}

		uint8_t firstMix = mix_index;

		if (mix_index < MAX_MIXERS && /* pmd->srcRaw && */pmd->destCh == chan) {
    c336:	ef e1       	ldi	r30, 0x1F	; 31
    c338:	e6 15       	cp	r30, r6
    c33a:	08 f4       	brcc	.+2      	; 0xc33e <_Z11menuProcMixh+0x11e>
    c33c:	ca c0       	rjmp	.+404    	; 0xc4d2 <_Z11menuProcMixh+0x2b2>
    c33e:	f7 01       	movw	r30, r14
    c340:	f0 81       	ld	r31, Z
    c342:	fa 83       	std	Y+2, r31	; 0x02
    c344:	f2 11       	cpse	r31, r2
    c346:	c5 c0       	rjmp	.+394    	; 0xc4d2 <_Z11menuProcMixh+0x2b2>
    c348:	c7 01       	movw	r24, r14
    c34a:	0a 96       	adiw	r24, 0x0a	; 10
    c34c:	9c 83       	std	Y+4, r25	; 0x04
    c34e:	8b 83       	std	Y+3, r24	; 0x03
    c350:	f6 2c       	mov	r15, r6
    c352:	cb 80       	ldd	r12, Y+3	; 0x03
    c354:	dc 80       	ldd	r13, Y+4	; 0x04
    c356:	9a e0       	ldi	r25, 0x0A	; 10
    c358:	c9 1a       	sub	r12, r25
    c35a:	d1 08       	sbc	r13, r1
			do {
				if (t_pgOfs < current) {
    c35c:	e9 81       	ldd	r30, Y+1	; 0x01
    c35e:	e1 17       	cp	r30, r17
    c360:	08 f0       	brcs	.+2      	; 0xc364 <_Z11menuProcMixh+0x144>
    c362:	a5 c0       	rjmp	.+330    	; 0xc4ae <_Z11menuProcMixh+0x28e>
					if (current - t_pgOfs < 8) {
    c364:	81 2f       	mov	r24, r17
    c366:	90 e0       	ldi	r25, 0x00	; 0
    c368:	8a 19       	sub	r24, r10
    c36a:	9b 09       	sbc	r25, r11
    c36c:	88 30       	cpi	r24, 0x08	; 8
    c36e:	91 05       	cpc	r25, r1
    c370:	0c f0       	brlt	.+2      	; 0xc374 <_Z11menuProcMixh+0x154>
    c372:	8e c0       	rjmp	.+284    	; 0xc490 <_Z11menuProcMixh+0x270>
						uint8_t y = (current - t_pgOfs) * FH;
    c374:	78 2e       	mov	r7, r24
    c376:	77 0c       	add	r7, r7
    c378:	77 0c       	add	r7, r7
    c37a:	77 0c       	add	r7, r7
						uint8_t attr = 0;

						if (!s_moveMode && (sub == current)) {
    c37c:	80 91 7a 0d 	lds	r24, 0x0D7A
    c380:	81 11       	cpse	r24, r1
    c382:	14 c0       	rjmp	.+40     	; 0xc3ac <_Z11menuProcMixh+0x18c>
    c384:	51 12       	cpse	r5, r17
    c386:	12 c0       	rjmp	.+36     	; 0xc3ac <_Z11menuProcMixh+0x18c>
							s_currMixIdx = mix_index;
    c388:	f0 92 53 0e 	sts	0x0E53, r15
							s_currDestCh = chan;		// For insert
    c38c:	fa 81       	ldd	r31, Y+2	; 0x02
    c38e:	f0 93 51 0e 	sts	0x0E51, r31
							if (menulong) {
    c392:	44 20       	and	r4, r4
    c394:	31 f0       	breq	.+12     	; 0xc3a2 <_Z11menuProcMixh+0x182>
								PopupData.PopupIdx = 0;
    c396:	10 92 fd 0d 	sts	0x0DFD, r1
								PopupData.PopupActive = 1;
    c39a:	81 e0       	ldi	r24, 0x01	; 1
    c39c:	80 93 fc 0d 	sts	0x0DFC, r24
								event = 0;		// Kill this off
    c3a0:	31 2c       	mov	r3, r1
							}
							if (PopupData.PopupActive == 0) {
    c3a2:	ee 24       	eor	r14, r14
    c3a4:	e3 94       	inc	r14
    c3a6:	80 91 fc 0d 	lds	r24, 0x0DFC
    c3aa:	81 11       	cpse	r24, r1
		if (mix_index < MAX_MIXERS && /* pmd->srcRaw && */pmd->destCh == chan) {
			do {
				if (t_pgOfs < current) {
					if (current - t_pgOfs < 8) {
						uint8_t y = (current - t_pgOfs) * FH;
						uint8_t attr = 0;
    c3ac:	e1 2c       	mov	r14, r1
							}
							if (PopupData.PopupActive == 0) {
								attr = INVERS;
							}
						}
						if (firstMix != mix_index) //show prefix only if not first mix
    c3ae:	6f 14       	cp	r6, r15
    c3b0:	59 f0       	breq	.+22     	; 0xc3c8 <_Z11menuProcMixh+0x1a8>
						lcd_putsAttIdx (3 * FW + 1, y, PSTR("\001+*R"), pmd->mltpx, 0);
    c3b2:	f6 01       	movw	r30, r12
    c3b4:	27 81       	ldd	r18, Z+7	; 0x07
    c3b6:	26 95       	lsr	r18
    c3b8:	23 70       	andi	r18, 0x03	; 3
    c3ba:	00 e0       	ldi	r16, 0x00	; 0
    c3bc:	4e e7       	ldi	r20, 0x7E	; 126
    c3be:	59 e1       	ldi	r21, 0x19	; 25
    c3c0:	67 2d       	mov	r22, r7
    c3c2:	83 e1       	ldi	r24, 0x13	; 19
    c3c4:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>

						putsChnOpRaw (8 * FW, y, pmd, 0);
    c3c8:	20 e0       	ldi	r18, 0x00	; 0
    c3ca:	a6 01       	movw	r20, r12
    c3cc:	67 2d       	mov	r22, r7
    c3ce:	80 e3       	ldi	r24, 0x30	; 48
    c3d0:	0e 94 ae 3f 	call	0x7f5c	; 0x7f5c <_Z12putsChnOpRawhhP9t_MixDatah>

#if GVARS
						pmd->weight = gvarMenuItem (7 * FW + FW / 2, y, pmd->weight, -125, 125,
								attr);
    c3d4:	0d e7       	ldi	r16, 0x7D	; 125
    c3d6:	23 e8       	ldi	r18, 0x83	; 131
    c3d8:	8b 80       	ldd	r8, Y+3	; 0x03
    c3da:	9c 80       	ldd	r9, Y+4	; 0x04
    c3dc:	f8 e0       	ldi	r31, 0x08	; 8
    c3de:	8f 1a       	sub	r8, r31
    c3e0:	91 08       	sbc	r9, r1
    c3e2:	f4 01       	movw	r30, r8
    c3e4:	40 81       	ld	r20, Z
    c3e6:	67 2d       	mov	r22, r7
    c3e8:	8d e2       	ldi	r24, 0x2D	; 45
    c3ea:	0e 94 93 38 	call	0x7126	; 0x7126 <_Z12gvarMenuItemhhaaah>
    c3ee:	f4 01       	movw	r30, r8
    c3f0:	80 83       	st	Z, r24
    c3f2:	eb 81       	ldd	r30, Y+3	; 0x03
    c3f4:	fc 81       	ldd	r31, Y+4	; 0x04
    c3f6:	37 97       	sbiw	r30, 0x07	; 7
//						{
//							lcd_char_inverse( 0, y, 12*FW, 0 ) ;
//						}

//    	  	  lcd_putcAtt(    7*FW+FW/2, y, '%', 0 ) ; //tattr);
						if (pmd->swtch) putsDrSwitches (12 * FW, y, pmd->swtch, 0); //tattr);
    c3f8:	40 81       	ld	r20, Z
    c3fa:	44 23       	and	r20, r20
    c3fc:	29 f0       	breq	.+10     	; 0xc408 <_Z11menuProcMixh+0x1e8>
    c3fe:	20 e0       	ldi	r18, 0x00	; 0
    c400:	67 2d       	mov	r22, r7
    c402:	88 e4       	ldi	r24, 0x48	; 72
    c404:	0e 94 c9 10 	call	0x2192	; 0x2192 <_Z14putsDrSwitcheshhah>
    c408:	eb 81       	ldd	r30, Y+3	; 0x03
    c40a:	fc 81       	ldd	r31, Y+4	; 0x04
    c40c:	36 97       	sbiw	r30, 0x06	; 6
						if (pmd->curve) {
    c40e:	40 81       	ld	r20, Z
    c410:	44 23       	and	r20, r20
    c412:	b1 f0       	breq	.+44     	; 0xc440 <_Z11menuProcMixh+0x220>
							if (pmd->differential) lcd_putcAtt (16 * FW, y, CHR_d, 0);
    c414:	f6 01       	movw	r30, r12
    c416:	87 81       	ldd	r24, Z+7	; 0x07
    c418:	87 ff       	sbrs	r24, 7
    c41a:	03 c0       	rjmp	.+6      	; 0xc422 <_Z11menuProcMixh+0x202>
    c41c:	20 e0       	ldi	r18, 0x00	; 0
    c41e:	44 e6       	ldi	r20, 0x64	; 100
    c420:	0b c0       	rjmp	.+22     	; 0xc438 <_Z11menuProcMixh+0x218>
							else {
								if ( (pmd->curve > -28) && (pmd->curve <= 27)) {
    c422:	8b e1       	ldi	r24, 0x1B	; 27
    c424:	84 0f       	add	r24, r20
									put_curve (16 * FW, y, pmd->curve, 0);
    c426:	20 e0       	ldi	r18, 0x00	; 0
//    	  	  lcd_putcAtt(    7*FW+FW/2, y, '%', 0 ) ; //tattr);
						if (pmd->swtch) putsDrSwitches (12 * FW, y, pmd->swtch, 0); //tattr);
						if (pmd->curve) {
							if (pmd->differential) lcd_putcAtt (16 * FW, y, CHR_d, 0);
							else {
								if ( (pmd->curve > -28) && (pmd->curve <= 27)) {
    c428:	87 33       	cpi	r24, 0x37	; 55
    c42a:	28 f4       	brcc	.+10     	; 0xc436 <_Z11menuProcMixh+0x216>
									put_curve (16 * FW, y, pmd->curve, 0);
    c42c:	67 2d       	mov	r22, r7
    c42e:	80 e6       	ldi	r24, 0x60	; 96
    c430:	0e 94 38 3f 	call	0x7e70	; 0x7e70 <_Z9put_curvehhah>
    c434:	05 c0       	rjmp	.+10     	; 0xc440 <_Z11menuProcMixh+0x220>
								} else {
									lcd_putcAtt (16 * FW, y, 'E', 0);
    c436:	45 e4       	ldi	r20, 0x45	; 69
    c438:	67 2d       	mov	r22, r7
    c43a:	80 e6       	ldi	r24, 0x60	; 96
    c43c:	0e 94 31 26 	call	0x4c62	; 0x4c62 <_Z11lcd_putcAtthhch>
								}
							}
						}
						char cs = ' ';
						if (pmd->speedDown || pmd->speedUp) cs = CHR_S;
    c440:	f6 01       	movw	r30, r12
    c442:	86 81       	ldd	r24, Z+6	; 0x06
    c444:	81 11       	cpse	r24, r1
    c446:	02 c0       	rjmp	.+4      	; 0xc44c <_Z11menuProcMixh+0x22c>
								} else {
									lcd_putcAtt (16 * FW, y, 'E', 0);
								}
							}
						}
						char cs = ' ';
    c448:	40 e2       	ldi	r20, 0x20	; 32
    c44a:	01 c0       	rjmp	.+2      	; 0xc44e <_Z11menuProcMixh+0x22e>
						if (pmd->speedDown || pmd->speedUp) cs = CHR_S;
    c44c:	43 e5       	ldi	r20, 0x53	; 83
						if ( (pmd->delayUp || pmd->delayDown)) cs = (cs == CHR_S ? '*' : CHR_D);
    c44e:	f6 01       	movw	r30, r12
    c450:	85 81       	ldd	r24, Z+5	; 0x05
    c452:	88 23       	and	r24, r24
    c454:	29 f0       	breq	.+10     	; 0xc460 <_Z11menuProcMixh+0x240>
    c456:	43 35       	cpi	r20, 0x53	; 83
    c458:	11 f4       	brne	.+4      	; 0xc45e <_Z11menuProcMixh+0x23e>
    c45a:	4a e2       	ldi	r20, 0x2A	; 42
    c45c:	01 c0       	rjmp	.+2      	; 0xc460 <_Z11menuProcMixh+0x240>
    c45e:	44 e4       	ldi	r20, 0x44	; 68
						lcd_putc (20 * FW + 1, y, cs);
    c460:	67 2d       	mov	r22, r7
    c462:	89 e7       	ldi	r24, 0x79	; 121
    c464:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <_Z8lcd_putchhc>

						if (s_moveMode) {
    c468:	80 91 7a 0d 	lds	r24, 0x0D7A
    c46c:	88 23       	and	r24, r24
    c46e:	f9 f0       	breq	.+62     	; 0xc4ae <_Z11menuProcMixh+0x28e>
							if (s_moveMixIdx == mix_index) {
    c470:	80 91 52 0e 	lds	r24, 0x0E52
    c474:	8f 11       	cpse	r24, r15
    c476:	1b c0       	rjmp	.+54     	; 0xc4ae <_Z11menuProcMixh+0x28e>
								lcd_char_inverse (4 * FW, y, 17 * FW, 0);
    c478:	20 e0       	ldi	r18, 0x00	; 0
    c47a:	46 e6       	ldi	r20, 0x66	; 102
    c47c:	67 2d       	mov	r22, r7
    c47e:	88 e1       	ldi	r24, 0x18	; 24
    c480:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <_Z16lcd_char_inversehhhh>
								s_currMixIdx = mix_index;
    c484:	f0 92 53 0e 	sts	0x0E53, r15
								sub = mstate2.m_posVert = current;
    c488:	10 93 47 0e 	sts	0x0E47, r17
    c48c:	51 2e       	mov	r5, r17
    c48e:	0f c0       	rjmp	.+30     	; 0xc4ae <_Z11menuProcMixh+0x28e>
							}
						}
					} else {
						if (current - t_pgOfs == 8) {
    c490:	08 97       	sbiw	r24, 0x08	; 8
    c492:	69 f4       	brne	.+26     	; 0xc4ae <_Z11menuProcMixh+0x28e>
							if (s_moveMode) {
    c494:	80 91 7a 0d 	lds	r24, 0x0D7A
    c498:	88 23       	and	r24, r24
    c49a:	49 f0       	breq	.+18     	; 0xc4ae <_Z11menuProcMixh+0x28e>
								if (s_moveMixIdx == mix_index) {
    c49c:	80 91 52 0e 	lds	r24, 0x0E52
    c4a0:	8f 11       	cpse	r24, r15
    c4a2:	05 c0       	rjmp	.+10     	; 0xc4ae <_Z11menuProcMixh+0x28e>
									mstate2.m_posVert += 1;
    c4a4:	80 91 47 0e 	lds	r24, 0x0E47
    c4a8:	8f 5f       	subi	r24, 0xFF	; 255
    c4aa:	80 93 47 0e 	sts	0x0E47, r24
								}
							}
						}
					}
				}
				current += 1;
    c4ae:	1f 5f       	subi	r17, 0xFF	; 255
				mix_index += 1;
    c4b0:	f3 94       	inc	r15
		}

		uint8_t firstMix = mix_index;

		if (mix_index < MAX_MIXERS && /* pmd->srcRaw && */pmd->destCh == chan) {
			do {
    c4b2:	f0 e2       	ldi	r31, 0x20	; 32
    c4b4:	ff 16       	cp	r15, r31
    c4b6:	91 f1       	breq	.+100    	; 0xc51c <_Z11menuProcMixh+0x2fc>
    c4b8:	8b 81       	ldd	r24, Y+3	; 0x03
    c4ba:	9c 81       	ldd	r25, Y+4	; 0x04
    c4bc:	0a 96       	adiw	r24, 0x0a	; 10
    c4be:	9c 83       	std	Y+4, r25	; 0x04
    c4c0:	8b 83       	std	Y+3, r24	; 0x03
    c4c2:	fc 01       	movw	r30, r24
    c4c4:	3a 97       	sbiw	r30, 0x0a	; 10
					}
				}
				current += 1;
				mix_index += 1;
				pmd += 1;  // mixCnt += 1 ;
			} while ( (mix_index < MAX_MIXERS && /* pmd->srcRaw && */pmd->destCh == chan));
    c4c6:	80 81       	ld	r24, Z
    c4c8:	9a 81       	ldd	r25, Y+2	; 0x02
    c4ca:	89 17       	cp	r24, r25
    c4cc:	09 f4       	brne	.+2      	; 0xc4d0 <_Z11menuProcMixh+0x2b0>
    c4ce:	41 cf       	rjmp	.-382    	; 0xc352 <_Z11menuProcMixh+0x132>
    c4d0:	25 c0       	rjmp	.+74     	; 0xc51c <_Z11menuProcMixh+0x2fc>
		} else {
			if (sub == current) {
    c4d2:	51 12       	cpse	r5, r17
    c4d4:	21 c0       	rjmp	.+66     	; 0xc518 <_Z11menuProcMixh+0x2f8>
				s_currDestCh = chan;		// For insert
    c4d6:	20 92 51 0e 	sts	0x0E51, r2
				s_currMixIdx = mix_index;
    c4da:	60 92 53 0e 	sts	0x0E53, r6
				lcd_rect (0, (current - t_pgOfs) * FH - 1, 25, 9);
    c4de:	61 2f       	mov	r22, r17
    c4e0:	6a 19       	sub	r22, r10
    c4e2:	66 0f       	add	r22, r22
    c4e4:	66 0f       	add	r22, r22
    c4e6:	66 0f       	add	r22, r22
    c4e8:	61 50       	subi	r22, 0x01	; 1
    c4ea:	29 e0       	ldi	r18, 0x09	; 9
    c4ec:	49 e1       	ldi	r20, 0x19	; 25
    c4ee:	80 e0       	ldi	r24, 0x00	; 0
    c4f0:	0e 94 98 29 	call	0x5330	; 0x5330 <_Z8lcd_recthhhh>
//				s_moveMode = 0 ;		// Can't move this
				if (menulong)		// Must need to insert here
    c4f4:	44 20       	and	r4, r4
    c4f6:	81 f0       	breq	.+32     	; 0xc518 <_Z11menuProcMixh+0x2f8>
				{
					if (!reachMixerCountLimit ()) {
    c4f8:	0e 94 26 40 	call	0x804c	; 0x804c <_Z20reachMixerCountLimitv>
    c4fc:	81 11       	cpse	r24, r1
    c4fe:	0c c0       	rjmp	.+24     	; 0xc518 <_Z11menuProcMixh+0x2f8>
//						s_currMixInsMode = 1 ;
						insertMix (s_currMixIdx, 0);
    c500:	60 e0       	ldi	r22, 0x00	; 0
    c502:	80 91 53 0e 	lds	r24, 0x0E53
    c506:	0e 94 de 35 	call	0x6bbc	; 0x6bbc <_ZL9insertMixhh>
						s_moveMode = false;
    c50a:	10 92 7a 0d 	sts	0x0D7A, r1
						pushMenu (menuProcMixOne);
    c50e:	89 e0       	ldi	r24, 0x09	; 9
    c510:	9f e5       	ldi	r25, 0x5F	; 95
    c512:	0e 94 ab 18 	call	0x3156	; 0x3156 <_Z8pushMenuPFvhE>
						break;
    c516:	08 c0       	rjmp	.+16     	; 0xc528 <_Z11menuProcMixh+0x308>
//						return ;
					}
				}
			}
			current += 1;
    c518:	1f 5f       	subi	r17, 0xFF	; 255
    c51a:	f6 2c       	mov	r15, r6
		if ( (dir = (Tevent == EVT_KEY_FIRST(KEY_DOWN))) || Tevent == EVT_KEY_FIRST(KEY_UP)) {
			moveMix (s_currMixIdx, dir); //true=inc=down false=dec=up - Issue 49
		}
	}

	for (uint8_t chan = 1; chan <= NUM_CHNOUT; chan += 1) {
    c51c:	23 94       	inc	r2
    c51e:	e1 e1       	ldi	r30, 0x11	; 17
    c520:	2e 16       	cp	r2, r30
    c522:	11 f0       	breq	.+4      	; 0xc528 <_Z11menuProcMixh+0x308>
    c524:	6f 2c       	mov	r6, r15
    c526:	f1 ce       	rjmp	.-542    	; 0xc30a <_Z11menuProcMixh+0xea>
			}
		}
	}
#endif
#endif
	if (PopupData.PopupActive) {
    c528:	80 91 fc 0d 	lds	r24, 0x0DFC
    c52c:	88 23       	and	r24, r24
    c52e:	09 f4       	brne	.+2      	; 0xc532 <_Z11menuProcMixh+0x312>
    c530:	46 c0       	rjmp	.+140    	; 0xc5be <_Z11menuProcMixh+0x39e>
		Tevent = event;
    c532:	30 92 e1 01 	sts	0x01E1, r3
	PopupData.PopupSel = popTranslate (popidx, mask);
	return popaction;
}

static void mixpopup () {
	uint8_t popaction = doPopup (MixPopList, 0x1F, 8);
    c536:	48 e0       	ldi	r20, 0x08	; 8
    c538:	6f e1       	ldi	r22, 0x1F	; 31
    c53a:	80 e4       	ldi	r24, 0x40	; 64
    c53c:	9c e1       	ldi	r25, 0x1C	; 28
    c53e:	0e 94 bb 40 	call	0x8176	; 0x8176 <_Z7doPopupPKchh>

//	uint8_t popaction = popupProcess( 4 ) ;
	uint8_t popidx = PopupData.PopupSel;
    c542:	90 91 fe 0d 	lds	r25, 0x0DFE
//	lcd_char_inverse( 4*FW, (popidx+1)*FH, 6*FW, 0 ) ;

	if (popaction == POPUP_SELECT) {
    c546:	81 30       	cpi	r24, 0x01	; 1
    c548:	a1 f5       	brne	.+104    	; 0xc5b2 <_Z11menuProcMixh+0x392>
		if (popidx == 1) {
    c54a:	91 30       	cpi	r25, 0x01	; 1
    c54c:	79 f4       	brne	.+30     	; 0xc56c <_Z11menuProcMixh+0x34c>
			if (!reachMixerCountLimit ()) {
    c54e:	0e 94 26 40 	call	0x804c	; 0x804c <_Z20reachMixerCountLimitv>
    c552:	81 11       	cpse	r24, r1
    c554:	0d c0       	rjmp	.+26     	; 0xc570 <_Z11menuProcMixh+0x350>
//				s_currMixInsMode = 1 ;
				insertMix (++s_currMixIdx, 0);
    c556:	80 91 53 0e 	lds	r24, 0x0E53
    c55a:	8f 5f       	subi	r24, 0xFF	; 255
    c55c:	80 93 53 0e 	sts	0x0E53, r24
    c560:	60 e0       	ldi	r22, 0x00	; 0
    c562:	0e 94 de 35 	call	0x6bbc	; 0x6bbc <_ZL9insertMixhh>
				s_moveMode = false;
    c566:	10 92 7a 0d 	sts	0x0D7A, r1
    c56a:	02 c0       	rjmp	.+4      	; 0xc570 <_Z11menuProcMixh+0x350>
			}
		}
		if (popidx < 2) {
    c56c:	92 30       	cpi	r25, 0x02	; 2
    c56e:	18 f4       	brcc	.+6      	; 0xc576 <_Z11menuProcMixh+0x356>
			pushMenu (menuProcMixOne);
    c570:	89 e0       	ldi	r24, 0x09	; 9
    c572:	9f e5       	ldi	r25, 0x5F	; 95
    c574:	0e c0       	rjmp	.+28     	; 0xc592 <_Z11menuProcMixh+0x372>
    c576:	80 91 53 0e 	lds	r24, 0x0E53
		} else if (popidx == 4)		// Delete
    c57a:	94 30       	cpi	r25, 0x04	; 4
    c57c:	69 f4       	brne	.+26     	; 0xc598 <_Z11menuProcMixh+0x378>
				{
			mixToDelete = s_currMixIdx;
    c57e:	80 93 7b 0d 	sts	0x0D7B, r24
			killEvents (Tevent);
    c582:	80 91 e1 01 	lds	r24, 0x01E1
    c586:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
			Tevent = 0;
    c58a:	10 92 e1 01 	sts	0x01E1, r1
			pushMenu (menuDeleteMix);
    c58e:	89 e3       	ldi	r24, 0x39	; 57
    c590:	90 e4       	ldi	r25, 0x40	; 64
    c592:	0e 94 ab 18 	call	0x3156	; 0x3156 <_Z8pushMenuPFvhE>
    c596:	0b c0       	rjmp	.+22     	; 0xc5ae <_Z11menuProcMixh+0x38e>
		} else {
			if (popidx == 2)	// copy
    c598:	92 30       	cpi	r25, 0x02	; 2
    c59a:	31 f4       	brne	.+12     	; 0xc5a8 <_Z11menuProcMixh+0x388>
					{
				insertMix (++s_currMixIdx, 1);
    c59c:	8f 5f       	subi	r24, 0xFF	; 255
    c59e:	80 93 53 0e 	sts	0x0E53, r24
    c5a2:	61 e0       	ldi	r22, 0x01	; 1
    c5a4:	0e 94 de 35 	call	0x6bbc	; 0x6bbc <_ZL9insertMixhh>
			}
			// PopupIdx == 2 or 3, copy or move
			s_moveMode = 1;
    c5a8:	81 e0       	ldi	r24, 0x01	; 1
    c5aa:	80 93 7a 0d 	sts	0x0D7A, r24
		}
		PopupData.PopupActive = 0;
    c5ae:	10 92 fc 0d 	sts	0x0DFC, r1
	}
	s_moveMixIdx = s_currMixIdx;
    c5b2:	80 91 53 0e 	lds	r24, 0x0E53
    c5b6:	80 93 52 0e 	sts	0x0E52, r24
#endif
#endif
	if (PopupData.PopupActive) {
		Tevent = event;
		mixpopup ();
		s_editMode = false;
    c5ba:	10 92 a5 0d 	sts	0x0DA5, r1
	s_mixMaxSel = current - 1;
#else
	s_mixMaxSel = current - 2;
#endif
#else
	s_mixMaxSel = current - 2;
    c5be:	12 50       	subi	r17, 0x02	; 2
    c5c0:	10 93 7c 0d 	sts	0x0D7C, r17
#endif
}
    c5c4:	0f 90       	pop	r0
    c5c6:	0f 90       	pop	r0
    c5c8:	0f 90       	pop	r0
    c5ca:	0f 90       	pop	r0
    c5cc:	df 91       	pop	r29
    c5ce:	cf 91       	pop	r28
    c5d0:	1f 91       	pop	r17
    c5d2:	0f 91       	pop	r16
    c5d4:	ff 90       	pop	r15
    c5d6:	ef 90       	pop	r14
    c5d8:	df 90       	pop	r13
    c5da:	cf 90       	pop	r12
    c5dc:	bf 90       	pop	r11
    c5de:	af 90       	pop	r10
    c5e0:	9f 90       	pop	r9
    c5e2:	8f 90       	pop	r8
    c5e4:	7f 90       	pop	r7
    c5e6:	6f 90       	pop	r6
    c5e8:	5f 90       	pop	r5
    c5ea:	4f 90       	pop	r4
    c5ec:	3f 90       	pop	r3
    c5ee:	2f 90       	pop	r2
    c5f0:	08 95       	ret
	uint8_t current = 1;

	if (s_moveMode) {
		uint8_t dir;

		if ( (dir = (Tevent == EVT_KEY_FIRST(KEY_DOWN))) || Tevent == EVT_KEY_FIRST(KEY_UP)) {
    c5f2:	61 e0       	ldi	r22, 0x01	; 1
    c5f4:	82 36       	cpi	r24, 0x62	; 98
    c5f6:	09 f0       	breq	.+2      	; 0xc5fa <_Z11menuProcMixh+0x3da>
    c5f8:	60 e0       	ldi	r22, 0x00	; 0
			moveMix (s_currMixIdx, dir); //true=inc=down false=dec=up - Issue 49
    c5fa:	80 91 53 0e 	lds	r24, 0x0E53
    c5fe:	0e 94 db 3f 	call	0x7fb6	; 0x7fb6 <_Z7moveMixhh>
    c602:	7c ce       	rjmp	.-776    	; 0xc2fc <_Z11menuProcMixh+0xdc>

0000c604 <_Z18menuProcVoiceAlarmh>:
}
#endif

#ifdef VOICE_ALARMS

void menuProcVoiceAlarm (uint8_t event) {
    c604:	af 92       	push	r10
    c606:	bf 92       	push	r11
    c608:	cf 92       	push	r12
    c60a:	df 92       	push	r13
    c60c:	ef 92       	push	r14
    c60e:	ff 92       	push	r15
    c610:	0f 93       	push	r16
    c612:	1f 93       	push	r17
    c614:	cf 93       	push	r28
    c616:	df 93       	push	r29
    c618:	c8 2f       	mov	r28, r24
//  SUBMENU("Voice Alarms", NUM_VOICE_ALARMS, {0} ) ;
	TITLE("Voice Alarms");
    c61a:	80 e2       	ldi	r24, 0x20	; 32
    c61c:	95 e1       	ldi	r25, 0x15	; 21
    c61e:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>
	static MState2 mstate2;
	mstate2.check_columns (event, NUM_VOICE_ALARMS);
    c622:	48 e0       	ldi	r20, 0x08	; 8
    c624:	6c 2f       	mov	r22, r28
    c626:	89 e3       	ldi	r24, 0x39	; 57
    c628:	9e e0       	ldi	r25, 0x0E	; 14
    c62a:	0e 94 07 3c 	call	0x780e	; 0x780e <_ZN7MState213check_columnsEhh>

	int8_t sub = mstate2.m_posVert;
    c62e:	c0 90 39 0e 	lds	r12, 0x0E39

	uint8_t t_pgOfs = evalOffset (sub, 6);
    c632:	66 e0       	ldi	r22, 0x06	; 6
    c634:	8c 2d       	mov	r24, r12
    c636:	ed d9       	rcall	.-3110   	; 0xba12 <_Z10evalOffsetah>
    c638:	b8 2e       	mov	r11, r24

	switch (event) {
    c63a:	ce 32       	cpi	r28, 0x2E	; 46
    c63c:	11 f0       	breq	.+4      	; 0xc642 <_Z18menuProcVoiceAlarmh+0x3e>
    c63e:	c0 36       	cpi	r28, 0x60	; 96
    c640:	49 f4       	brne	.+18     	; 0xc654 <_Z18menuProcVoiceAlarmh+0x50>
		case EVT_KEY_FIRST(KEY_MENU):
		case EVT_KEY_BREAK(BTN_RE):
			s_currIdx = sub;
    c642:	c0 92 58 0e 	sts	0x0E58, r12
			killEvents (event);
    c646:	8c 2f       	mov	r24, r28
    c648:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
			pushMenu (menuProcVoiceOne);
    c64c:	8e e6       	ldi	r24, 0x6E	; 110
    c64e:	9d e3       	ldi	r25, 0x3D	; 61
    c650:	0e 94 ab 18 	call	0x3156	; 0x3156 <_Z8pushMenuPFvhE>
}
#endif

#ifdef VOICE_ALARMS

void menuProcVoiceAlarm (uint8_t event) {
    c654:	18 e0       	ldi	r17, 0x08	; 8
	}

	uint8_t y = 1 * FH;
	for (uint8_t i = 0; i < NUM_VOICE_ALARMS; i += 1) {
		uint8_t k = i + t_pgOfs;
		uint8_t attr = sub == k ? INVERS : 0;
    c656:	dd 24       	eor	r13, r13
    c658:	c7 fc       	sbrc	r12, 7
    c65a:	d0 94       	com	r13
		VoiceAlarmData *pvad = &g_model.vad[k];
    c65c:	89 e0       	ldi	r24, 0x09	; 9
    c65e:	a8 2e       	mov	r10, r24
	}

	uint8_t y = 1 * FH;
	for (uint8_t i = 0; i < NUM_VOICE_ALARMS; i += 1) {
		uint8_t k = i + t_pgOfs;
		uint8_t attr = sub == k ? INVERS : 0;
    c660:	eb 2c       	mov	r14, r11
    c662:	f1 2c       	mov	r15, r1
		VoiceAlarmData *pvad = &g_model.vad[k];
    c664:	ae 9c       	mul	r10, r14
    c666:	e0 01       	movw	r28, r0
    c668:	af 9c       	mul	r10, r15
    c66a:	d0 0d       	add	r29, r0
    c66c:	11 24       	eor	r1, r1
    c66e:	c6 56       	subi	r28, 0x66	; 102
    c670:	da 4f       	sbci	r29, 0xFA	; 250

		if (y > 7 * FH) break;
    c672:	10 34       	cpi	r17, 0x40	; 64
    c674:	09 f4       	brne	.+2      	; 0xc678 <_Z18menuProcVoiceAlarmh+0x74>
    c676:	4a c0       	rjmp	.+148    	; 0xc70c <_Z18menuProcVoiceAlarmh+0x108>

#if (NUM_VOICE_ALARMS<10)
		lcd_xlabel_decimal (y, PSTR("VA"), k + 1, 0, FW * 3 - 1);
    c678:	01 e1       	ldi	r16, 0x11	; 17
    c67a:	20 e0       	ldi	r18, 0x00	; 0
    c67c:	a7 01       	movw	r20, r14
    c67e:	4f 5f       	subi	r20, 0xFF	; 255
    c680:	5f 4f       	sbci	r21, 0xFF	; 255
    c682:	6d e1       	ldi	r22, 0x1D	; 29
    c684:	75 e1       	ldi	r23, 0x15	; 21
    c686:	81 2f       	mov	r24, r17
    c688:	0e 94 1b 3a 	call	0x7436	; 0x7436 <_Z18lcd_xlabel_decimalhPKcjhh>
#else
		lcd_xlabel_decimal( y, PSTR("VA"), k+1, 0, (k<9) ? FW*3-1 : FW*4-2 );
#endif
		putsChnRaw (5 * FW, y, pvad->source, 0);
    c68c:	20 e0       	ldi	r18, 0x00	; 0
    c68e:	48 81       	ld	r20, Y
    c690:	61 2f       	mov	r22, r17
    c692:	8e e1       	ldi	r24, 0x1E	; 30
    c694:	0e 94 95 10 	call	0x212a	; 0x212a <_Z10putsChnRawhhhh>
		putsDrSwitches (9 * FW, y, pvad->swtch, 0);
    c698:	20 e0       	ldi	r18, 0x00	; 0
    c69a:	4a 81       	ldd	r20, Y+2	; 0x02
    c69c:	61 2f       	mov	r22, r17
    c69e:	86 e3       	ldi	r24, 0x36	; 54
    c6a0:	0e 94 c9 10 	call	0x2192	; 0x2192 <_Z14putsDrSwitcheshhah>
		if (pvad->rate < 3) {
    c6a4:	2b 81       	ldd	r18, Y+3	; 0x03
    c6a6:	23 30       	cpi	r18, 0x03	; 3
    c6a8:	40 f4       	brcc	.+16     	; 0xc6ba <_Z18menuProcVoiceAlarmh+0xb6>
			lcd_putsAttIdx (13 * FW, y, Str_On_Off_Both, pvad->rate, 0);
    c6aa:	00 e0       	ldi	r16, 0x00	; 0
    c6ac:	4a ea       	ldi	r20, 0xAA	; 170
    c6ae:	5d e1       	ldi	r21, 0x1D	; 29
    c6b0:	61 2f       	mov	r22, r17
    c6b2:	8e e4       	ldi	r24, 0x4E	; 78
    c6b4:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
    c6b8:	08 c0       	rjmp	.+16     	; 0xc6ca <_Z18menuProcVoiceAlarmh+0xc6>
		} else {
			lcd_outdez (FW * 16, y, pvad->rate - 2);
    c6ba:	42 2f       	mov	r20, r18
    c6bc:	50 e0       	ldi	r21, 0x00	; 0
    c6be:	42 50       	subi	r20, 0x02	; 2
    c6c0:	51 09       	sbc	r21, r1
    c6c2:	61 2f       	mov	r22, r17
    c6c4:	80 e6       	ldi	r24, 0x60	; 96
    c6c6:	0e 94 47 29 	call	0x528e	; 0x528e <_Z10lcd_outdezhhi>
		}

		uint8_t type = pvad->fnameType;
    c6ca:	9c 81       	ldd	r25, Y+4	; 0x04
    c6cc:	97 70       	andi	r25, 0x07	; 7
		switch (type) {
    c6ce:	91 30       	cpi	r25, 0x01	; 1
    c6d0:	21 f0       	breq	.+8      	; 0xc6da <_Z18menuProcVoiceAlarmh+0xd6>
    c6d2:	92 30       	cpi	r25, 0x02	; 2
    c6d4:	39 f4       	brne	.+14     	; 0xc6e4 <_Z18menuProcVoiceAlarmh+0xe0>
//			break ;
			case 1:
				lcd_putc (19 * FW, y, '#');
				break;
			case 2:
				lcd_putc (19 * FW, y, 'A');
    c6d6:	41 e4       	ldi	r20, 0x41	; 65
    c6d8:	01 c0       	rjmp	.+2      	; 0xc6dc <_Z18menuProcVoiceAlarmh+0xd8>
		switch (type) {
//			case 1 :
//				lcd_putc( 19*FW, y, 'N' ) ;
//			break ;
			case 1:
				lcd_putc (19 * FW, y, '#');
    c6da:	43 e2       	ldi	r20, 0x23	; 35
				break;
			case 2:
				lcd_putc (19 * FW, y, 'A');
    c6dc:	61 2f       	mov	r22, r17
    c6de:	82 e7       	ldi	r24, 0x72	; 114
    c6e0:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <_Z8lcd_putchhc>
				break;
		}

		if (pvad->haptic) {
    c6e4:	8c 81       	ldd	r24, Y+4	; 0x04
    c6e6:	88 71       	andi	r24, 0x18	; 24
    c6e8:	29 f0       	breq	.+10     	; 0xc6f4 <_Z18menuProcVoiceAlarmh+0xf0>
			lcd_putc (20 * FW, y, 'H');
    c6ea:	48 e4       	ldi	r20, 0x48	; 72
    c6ec:	61 2f       	mov	r22, r17
    c6ee:	88 e7       	ldi	r24, 0x78	; 120
    c6f0:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <_Z8lcd_putchhc>
		}
		if (attr) {
    c6f4:	ce 14       	cp	r12, r14
    c6f6:	df 04       	cpc	r13, r15
    c6f8:	31 f4       	brne	.+12     	; 0xc706 <_Z18menuProcVoiceAlarmh+0x102>
			lcd_char_inverse (0, y, 20 * FW, 0);
    c6fa:	20 e0       	ldi	r18, 0x00	; 0
    c6fc:	48 e7       	ldi	r20, 0x78	; 120
    c6fe:	61 2f       	mov	r22, r17
    c700:	80 e0       	ldi	r24, 0x00	; 0
    c702:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <_Z16lcd_char_inversehhhh>
		}

		y += FH;
    c706:	18 5f       	subi	r17, 0xF8	; 248
    c708:	b3 94       	inc	r11
    c70a:	aa cf       	rjmp	.-172    	; 0xc660 <_Z18menuProcVoiceAlarmh+0x5c>
	}

}
    c70c:	df 91       	pop	r29
    c70e:	cf 91       	pop	r28
    c710:	1f 91       	pop	r17
    c712:	0f 91       	pop	r16
    c714:	ff 90       	pop	r15
    c716:	ef 90       	pop	r14
    c718:	df 90       	pop	r13
    c71a:	cf 90       	pop	r12
    c71c:	bf 90       	pop	r11
    c71e:	af 90       	pop	r10
    c720:	08 95       	ret

0000c722 <_Z18menuProcModelIndexh>:
// STR_EXPO_DR
#ifdef VOICE_ALARMS
const prog_char APM Str_Voice[] = "Voice";
#endif // 128/2561

void menuProcModelIndex (uint8_t event) {
    c722:	4f 92       	push	r4
    c724:	5f 92       	push	r5
    c726:	6f 92       	push	r6
    c728:	7f 92       	push	r7
    c72a:	8f 92       	push	r8
    c72c:	9f 92       	push	r9
    c72e:	af 92       	push	r10
    c730:	bf 92       	push	r11
    c732:	cf 92       	push	r12
    c734:	df 92       	push	r13
    c736:	ef 92       	push	r14
    c738:	ff 92       	push	r15
    c73a:	0f 93       	push	r16
    c73c:	1f 93       	push	r17
    c73e:	cf 93       	push	r28
    c740:	df 93       	push	r29
	static MState2 mstate;

	event = indexProcess (event, &mstate, MODEL_EXTRA);
    c742:	46 e0       	ldi	r20, 0x06	; 6
    c744:	68 e3       	ldi	r22, 0x38	; 56
    c746:	7e e0       	ldi	r23, 0x0E	; 14
    c748:	0e 94 5e 35 	call	0x6abc	; 0x6abc <_ZL12indexProcesshP7MState2h>
    c74c:	e8 2e       	mov	r14, r24
	mstate.check (event, Columns, 0, IlinesCount - 1);
    c74e:	00 91 5b 0e 	lds	r16, 0x0E5B
    c752:	01 50       	subi	r16, 0x01	; 1
    c754:	40 91 56 0e 	lds	r20, 0x0E56
    c758:	50 91 57 0e 	lds	r21, 0x0E57
    c75c:	20 e0       	ldi	r18, 0x00	; 0
    c75e:	68 2f       	mov	r22, r24
    c760:	88 e3       	ldi	r24, 0x38	; 56
    c762:	9e e0       	ldi	r25, 0x0E	; 14
    c764:	0e 94 3a 3a 	call	0x7474	; 0x7474 <_ZN7MState25checkEhPKhhh>

	switch (SubmenuIndex) {
    c768:	80 91 5c 0e 	lds	r24, 0x0E5C
    c76c:	86 30       	cpi	r24, 0x06	; 6
    c76e:	91 f0       	breq	.+36     	; 0xc794 <_Z18menuProcModelIndexh+0x72>
    c770:	38 f4       	brcc	.+14     	; 0xc780 <_Z18menuProcModelIndexh+0x5e>
    c772:	81 30       	cpi	r24, 0x01	; 1
    c774:	61 f0       	breq	.+24     	; 0xc78e <_Z18menuProcModelIndexh+0x6c>
    c776:	85 30       	cpi	r24, 0x05	; 5
    c778:	a1 f4       	brne	.+40     	; 0xc7a2 <_Z18menuProcModelIndexh+0x80>
			break;
//		case M_SWITCHES :
//      pushMenu(menuProcSwitches) ;
//		break ;
		case M_MODES:
			pushMenu (menuModelPhases);
    c77a:	80 ef       	ldi	r24, 0xF0	; 240
    c77c:	94 e4       	ldi	r25, 0x44	; 68
    c77e:	0f c0       	rjmp	.+30     	; 0xc79e <_Z18menuProcModelIndexh+0x7c>
	static MState2 mstate;

	event = indexProcess (event, &mstate, MODEL_EXTRA);
	mstate.check (event, Columns, 0, IlinesCount - 1);

	switch (SubmenuIndex) {
    c780:	89 30       	cpi	r24, 0x09	; 9
    c782:	59 f0       	breq	.+22     	; 0xc79a <_Z18menuProcModelIndexh+0x78>
    c784:	8a 30       	cpi	r24, 0x0A	; 10
    c786:	69 f4       	brne	.+26     	; 0xc7a2 <_Z18menuProcModelIndexh+0x80>
		case M_GLOBALS:
			pushMenu (menuProcGlobals);
			break;
#ifdef VOICE_ALARMS
		case M_VOICE:
			pushMenu (menuProcVoiceAlarm);
    c788:	82 e0       	ldi	r24, 0x02	; 2
    c78a:	93 e6       	ldi	r25, 0x63	; 99
    c78c:	08 c0       	rjmp	.+16     	; 0xc79e <_Z18menuProcModelIndexh+0x7c>
	event = indexProcess (event, &mstate, MODEL_EXTRA);
	mstate.check (event, Columns, 0, IlinesCount - 1);

	switch (SubmenuIndex) {
		case M_MIXER:
			pushMenu (menuProcMix);
    c78e:	80 e1       	ldi	r24, 0x10	; 16
    c790:	91 e6       	ldi	r25, 0x61	; 97
    c792:	05 c0       	rjmp	.+10     	; 0xc79e <_Z18menuProcModelIndexh+0x7c>
//		break ;
		case M_MODES:
			pushMenu (menuModelPhases);
			break;
		case M_CURVES:
			pushMenu (menuProcCurve);
    c794:	81 e2       	ldi	r24, 0x21	; 33
    c796:	9d e5       	ldi	r25, 0x5D	; 93
    c798:	02 c0       	rjmp	.+4      	; 0xc79e <_Z18menuProcModelIndexh+0x7c>
//		break ;
//		case M_LIMITS :
//      pushMenu(menuProcLimits) ;
//		break ;
		case M_GLOBALS:
			pushMenu (menuProcGlobals);
    c79a:	81 e1       	ldi	r24, 0x11	; 17
    c79c:	9c e3       	ldi	r25, 0x3C	; 60
			break;
#ifdef VOICE_ALARMS
		case M_VOICE:
			pushMenu (menuProcVoiceAlarm);
    c79e:	0e 94 ab 18 	call	0x3156	; 0x3156 <_Z8pushMenuPFvhE>
//			SubMenuFromIndex = 0 ;
//		break ;
	}

//	Columns = &ProgColumns[COLUMNS_0] ;
	uint8_t sub = mstate.m_posVert;
    c7a2:	f0 90 38 0e 	lds	r15, 0x0E38
	uint8_t y = FH;
	uint8_t subN = 0;
	uint8_t blink = InverseBlink;
    c7a6:	10 91 9f 0d 	lds	r17, 0x0D9F

	switch (SubmenuIndex) {
    c7aa:	40 91 5c 0e 	lds	r20, 0x0E5C
    c7ae:	50 e0       	ldi	r21, 0x00	; 0
    c7b0:	4e 30       	cpi	r20, 0x0E	; 14
    c7b2:	51 05       	cpc	r21, r1
    c7b4:	10 f0       	brcs	.+4      	; 0xc7ba <_Z18menuProcModelIndexh+0x98>
    c7b6:	0c 94 d1 6d 	jmp	0xdba2	; 0xdba2 <_Z18menuProcModelIndexh+0x1480>
    c7ba:	fa 01       	movw	r30, r20
    c7bc:	e5 54       	subi	r30, 0x45	; 69
    c7be:	ff 4f       	sbci	r31, 0xFF	; 255
    c7c0:	0c 94 3b 72 	jmp	0xe476	; 0xe476 <__tablejump2__>
		case M_MINDEX:
			TITLEP (Str_Model_Setup);
    c7c4:	82 e6       	ldi	r24, 0x62	; 98
    c7c6:	9d e1       	ldi	r25, 0x1D	; 29
    c7c8:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>
			IlinesCount = MODEL_ITEMS;
    c7cc:	8d e0       	ldi	r24, 0x0D	; 13
    c7ce:	80 93 5b 0e 	sts	0x0E5B, r24
			sub += 1;
    c7d2:	41 e0       	ldi	r20, 0x01	; 1
    c7d4:	4f 0d       	add	r20, r15
#ifdef VOICE_ALARMS
					Str_Voice,
#endif // 128/2561
					Str_Timer, Str_General, Str_Protocol };

			displayIndex (n_Strings, MODEL_EXTRA, 7, sub);
    c7d6:	66 e0       	ldi	r22, 0x06	; 6
    c7d8:	83 e0       	ldi	r24, 0x03	; 3
    c7da:	95 e1       	ldi	r25, 0x15	; 21
    c7dc:	0e 94 1a 36 	call	0x6c34	; 0x6c34 <_ZL12displayIndexPKPKchhh.constprop.5>
			break;
    c7e0:	0c 94 d1 6d 	jmp	0xdba2	; 0xdba2 <_Z18menuProcModelIndexh+0x1480>

		case M_MGENERAL: {
			TITLEP (Str_General);
    c7e4:	89 ee       	ldi	r24, 0xE9	; 233
    c7e6:	9b e1       	ldi	r25, 0x1B	; 27
    c7e8:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>
			if (sub < 12) {
    c7ec:	2b e0       	ldi	r18, 0x0B	; 11
    c7ee:	2f 15       	cp	r18, r15
    c7f0:	10 f0       	brcs	.+4      	; 0xc7f6 <_Z18menuProcModelIndexh+0xd4>
				displayNext ();
    c7f2:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <_Z11displayNextv>
			}
			IlinesCount = 15;
    c7f6:	8f e0       	ldi	r24, 0x0F	; 15
    c7f8:	80 93 5b 0e 	sts	0x0E5B, r24

			if (sub < 6) {
    c7fc:	85 e0       	ldi	r24, 0x05	; 5
    c7fe:	8f 15       	cp	r24, r15
    c800:	08 f4       	brcc	.+2      	; 0xc804 <_Z18menuProcModelIndexh+0xe2>
    c802:	b1 c0       	rjmp	.+354    	; 0xc966 <_Z18menuProcModelIndexh+0x244>
				if (sub == 0) {
    c804:	f1 10       	cpse	r15, r1
    c806:	08 c0       	rjmp	.+16     	; 0xc818 <_Z18menuProcModelIndexh+0xf6>
					Columns = &ProgColumns[COLUMNS_9];
    c808:	88 e0       	ldi	r24, 0x08	; 8
    c80a:	9d e1       	ldi	r25, 0x1D	; 29
    c80c:	90 93 57 0e 	sts	0x0E57, r25
    c810:	80 93 56 0e 	sts	0x0E56, r24
				}
				editName (g_posHorz, y, (uint8_t *) g_model.name, sizeof (g_model.name),
						sub == subN ? EE_MODEL : 0);
    c814:	02 e0       	ldi	r16, 0x02	; 2
    c816:	01 c0       	rjmp	.+2      	; 0xc81a <_Z18menuProcModelIndexh+0xf8>
    c818:	00 e0       	ldi	r16, 0x00	; 0
    c81a:	2a e0       	ldi	r18, 0x0A	; 10
    c81c:	41 e2       	ldi	r20, 0x21	; 33
    c81e:	52 e0       	ldi	r21, 0x02	; 2
    c820:	68 e0       	ldi	r22, 0x08	; 8
    c822:	80 91 7e 0d 	lds	r24, 0x0D7E
    c826:	0e 94 77 43 	call	0x86ee	; 0x86ee <_Z8editNamehhPhhh>
				y += FH;
				subN += 1;

				uint8_t attr = 0;
				if (sub == subN) {
    c82a:	91 e0       	ldi	r25, 0x01	; 1
    c82c:	f9 12       	cpse	r15, r25
    c82e:	10 c0       	rjmp	.+32     	; 0xc850 <_Z18menuProcModelIndexh+0x12e>
					if (event == EVT_KEY_FIRST(KEY_MENU)) {
    c830:	e0 e6       	ldi	r30, 0x60	; 96
    c832:	ee 12       	cpse	r14, r30
    c834:	04 c0       	rjmp	.+8      	; 0xc83e <_Z18menuProcModelIndexh+0x11c>
						putVoiceQueueUpper (g_model.modelVoice);
    c836:	80 91 2b 02 	lds	r24, 0x022B
    c83a:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <_Z18putVoiceQueueUpperh>
					}
					attr = blink;
					CHECK_INCDEC_H_MODELVAR_0(g_model.modelVoice, 49);
    c83e:	61 e3       	ldi	r22, 0x31	; 49
    c840:	80 91 2b 02 	lds	r24, 0x022B
    c844:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    c848:	80 93 2b 02 	sts	0x022B, r24
				uint8_t attr = 0;
				if (sub == subN) {
					if (event == EVT_KEY_FIRST(KEY_MENU)) {
						putVoiceQueueUpper (g_model.modelVoice);
					}
					attr = blink;
    c84c:	21 2f       	mov	r18, r17
    c84e:	01 c0       	rjmp	.+2      	; 0xc852 <_Z18menuProcModelIndexh+0x130>
				editName (g_posHorz, y, (uint8_t *) g_model.name, sizeof (g_model.name),
						sub == subN ? EE_MODEL : 0);
				y += FH;
				subN += 1;

				uint8_t attr = 0;
    c850:	20 e0       	ldi	r18, 0x00	; 0
						putVoiceQueueUpper (g_model.modelVoice);
					}
					attr = blink;
					CHECK_INCDEC_H_MODELVAR_0(g_model.modelVoice, 49);
				}
				lcd_xlabel_decimal (y, PSTR(STR_VOICE_INDEX), (int16_t) g_model.modelVoice + 260,
    c852:	40 91 2b 02 	lds	r20, 0x022B
    c856:	50 e0       	ldi	r21, 0x00	; 0
    c858:	4c 5f       	subi	r20, 0xFC	; 252
    c85a:	5e 4f       	sbci	r21, 0xFE	; 254
						attr, 15 * FW - 2);
    c85c:	08 e5       	ldi	r16, 0x58	; 88
    c85e:	62 ef       	ldi	r22, 0xF2	; 242
    c860:	74 e1       	ldi	r23, 0x14	; 20
    c862:	80 e1       	ldi	r24, 0x10	; 16
    c864:	0e 94 1b 3a 	call	0x7436	; 0x7436 <_Z18lcd_xlabel_decimalhPKcjhh>
				y += FH;
				subN += 1;

				lcd_puts_Pleft (y, PSTR(STR_DEAFULT_SW_PAGE));
    c868:	6b eb       	ldi	r22, 0xBB	; 187
    c86a:	74 e1       	ldi	r23, 0x14	; 20
    c86c:	88 e1       	ldi	r24, 0x18	; 24
    c86e:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
    c872:	c2 e9       	ldi	r28, 0x92	; 146
    c874:	de e1       	ldi	r29, 0x1E	; 30
    c876:	a2 e4       	ldi	r26, 0x42	; 66
    c878:	da 2e       	mov	r13, r26
//      	lcd_puts_Pleft(    y, PSTR(STR_DEAFULT_SW));
				for (uint8_t i = 0, q = 1; i < 8; q <<= 1, i++) {
    c87a:	cc 24       	eor	r12, r12
    c87c:	c3 94       	inc	r12
					lcd_putsnAtt ( (11 + i) * FW, y, Str_TRE012AG + i, 1,
							( ((uint8_t) g_model.switchWarningStates & q) ? INVERS : 0));
    c87e:	80 91 d0 04 	lds	r24, 0x04D0
    c882:	8c 21       	and	r24, r12
    c884:	01 e0       	ldi	r16, 0x01	; 1
    c886:	09 f4       	brne	.+2      	; 0xc88a <_Z18menuProcModelIndexh+0x168>
    c888:	00 e0       	ldi	r16, 0x00	; 0
    c88a:	21 e0       	ldi	r18, 0x01	; 1
    c88c:	ae 01       	movw	r20, r28
    c88e:	68 e1       	ldi	r22, 0x18	; 24
    c890:	8d 2d       	mov	r24, r13
    c892:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <_Z12lcd_putsnAtthhPKchh>
				y += FH;
				subN += 1;

				lcd_puts_Pleft (y, PSTR(STR_DEAFULT_SW_PAGE));
//      	lcd_puts_Pleft(    y, PSTR(STR_DEAFULT_SW));
				for (uint8_t i = 0, q = 1; i < 8; q <<= 1, i++) {
    c896:	cc 0c       	add	r12, r12
    c898:	f6 e0       	ldi	r31, 0x06	; 6
    c89a:	df 0e       	add	r13, r31
    c89c:	21 96       	adiw	r28, 0x01	; 1
    c89e:	22 e7       	ldi	r18, 0x72	; 114
    c8a0:	d2 12       	cpse	r13, r18
    c8a2:	ed cf       	rjmp	.-38     	; 0xc87e <_Z18menuProcModelIndexh+0x15c>
					lcd_putsnAtt ( (11 + i) * FW, y, Str_TRE012AG + i, 1,
							( ((uint8_t) g_model.switchWarningStates & q) ? INVERS : 0));
				}
				if (sub == subN) {
    c8a4:	82 e0       	ldi	r24, 0x02	; 2
    c8a6:	f8 12       	cpse	r15, r24
    c8a8:	18 c0       	rjmp	.+48     	; 0xc8da <_Z18menuProcModelIndexh+0x1b8>
					lcd_rect (11 * FW - 1, y - 1, 8 * FW + 2, 9);
    c8aa:	29 e0       	ldi	r18, 0x09	; 9
    c8ac:	42 e3       	ldi	r20, 0x32	; 50
    c8ae:	67 e1       	ldi	r22, 0x17	; 23
    c8b0:	81 e4       	ldi	r24, 0x41	; 65
    c8b2:	0e 94 98 29 	call	0x5330	; 0x5330 <_Z8lcd_recthhhh>
					if (event == EVT_KEY_FIRST(KEY_MENU) || event == EVT_KEY_BREAK(BTN_RE)) {
    c8b6:	90 e6       	ldi	r25, 0x60	; 96
    c8b8:	e9 16       	cp	r14, r25
    c8ba:	19 f0       	breq	.+6      	; 0xc8c2 <_Z18menuProcModelIndexh+0x1a0>
    c8bc:	ee e2       	ldi	r30, 0x2E	; 46
    c8be:	ee 12       	cpse	r14, r30
    c8c0:	0c c0       	rjmp	.+24     	; 0xc8da <_Z18menuProcModelIndexh+0x1b8>
						killEvents (event);
    c8c2:	8e 2d       	mov	r24, r14
    c8c4:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
						g_model.switchWarningStates = getCurrentSwitchStates ();
    c8c8:	0e 94 e6 11 	call	0x23cc	; 0x23cc <_Z22getCurrentSwitchStatesv>
    c8cc:	80 93 d0 04 	sts	0x04D0, r24
						s_editMode = false;
    c8d0:	10 92 a5 0d 	sts	0x0DA5, r1
						STORE_MODELVARS;
    c8d4:	82 e0       	ldi	r24, 0x02	; 2
    c8d6:	0e 94 4e 20 	call	0x409c	; 0x409c <_Z7eeDirtyh>
				}
				y += FH;
				subN += 1;

				g_model.useCustomStickNames = onoffItem_m (g_model.useCustomStickNames, y,
						sub == subN);
    c8da:	41 e0       	ldi	r20, 0x01	; 1
    c8dc:	f3 e0       	ldi	r31, 0x03	; 3
    c8de:	ff 12       	cpse	r15, r31
    c8e0:	40 e0       	ldi	r20, 0x00	; 0
    c8e2:	80 91 92 05 	lds	r24, 0x0592
	if (condition) value = checkIncDec (value, 0, 1, flags);
	return value;
}

static uint8_t onoffItem_m (uint8_t value, uint8_t y, uint8_t condition) {
	return onoffItem (value, y, condition, EE_MODEL);
    c8e6:	60 e2       	ldi	r22, 0x20	; 32
    c8e8:	82 95       	swap	r24
    c8ea:	81 70       	andi	r24, 0x01	; 1
    c8ec:	0e 94 dc 39 	call	0x73b8	; 0x73b8 <_ZL9onoffItemhhhh.constprop.7>
				}
				y += FH;
				subN += 1;

				g_model.useCustomStickNames = onoffItem_m (g_model.useCustomStickNames, y,
						sub == subN);
    c8f0:	90 91 92 05 	lds	r25, 0x0592
    c8f4:	80 fb       	bst	r24, 0
    c8f6:	94 f9       	bld	r25, 4
    c8f8:	90 93 92 05 	sts	0x0592, r25
				y += FH;
				subN += 1;

				attr = PREC1;
				if (sub == subN) {
    c8fc:	24 e0       	ldi	r18, 0x04	; 4
    c8fe:	f2 12       	cpse	r15, r18
    c900:	0a c0       	rjmp	.+20     	; 0xc916 <_Z18menuProcModelIndexh+0x1f4>
					attr |= blink;
    c902:	c1 2f       	mov	r28, r17
    c904:	c0 62       	ori	r28, 0x20	; 32
					CHECK_INCDEC_H_MODELVAR_0(g_model.sub_trim_limit, 100);
    c906:	64 e6       	ldi	r22, 0x64	; 100
    c908:	80 91 d1 04 	lds	r24, 0x04D1
    c90c:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    c910:	80 93 d1 04 	sts	0x04D1, r24
    c914:	01 c0       	rjmp	.+2      	; 0xc918 <_Z18menuProcModelIndexh+0x1f6>
				g_model.useCustomStickNames = onoffItem_m (g_model.useCustomStickNames, y,
						sub == subN);
				y += FH;
				subN += 1;

				attr = PREC1;
    c916:	c0 e2       	ldi	r28, 0x20	; 32
				if (sub == subN) {
					attr |= blink;
					CHECK_INCDEC_H_MODELVAR_0(g_model.sub_trim_limit, 100);
				}
				lcd_outdezAtt (20 * FW, y, g_model.sub_trim_limit, attr);
    c918:	40 91 d1 04 	lds	r20, 0x04D1
    c91c:	50 e0       	ldi	r21, 0x00	; 0
    c91e:	2c 2f       	mov	r18, r28
    c920:	68 e2       	ldi	r22, 0x28	; 40
    c922:	88 e7       	ldi	r24, 0x78	; 120
    c924:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
				y += FH;
				subN += 1;

				attr = 0;
//  	  	lcd_puts_Pleft( y, PSTR("Throttle Default") ) ;
				uint8_t tidle = g_model.throttleIdle;
    c928:	80 91 92 05 	lds	r24, 0x0592
    c92c:	82 95       	swap	r24
    c92e:	86 95       	lsr	r24
    c930:	83 70       	andi	r24, 0x03	; 3
				if (sub == subN) {
    c932:	95 e0       	ldi	r25, 0x05	; 5
    c934:	f9 12       	cpse	r15, r25
    c936:	0f c0       	rjmp	.+30     	; 0xc956 <_Z18menuProcModelIndexh+0x234>
					attr = blink;
					CHECK_INCDEC_H_MODELVAR_0(tidle, 1);
    c938:	61 e0       	ldi	r22, 0x01	; 1
    c93a:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
					g_model.throttleIdle = tidle;
    c93e:	28 2f       	mov	r18, r24
    c940:	23 70       	andi	r18, 0x03	; 3
    c942:	22 95       	swap	r18
    c944:	22 0f       	add	r18, r18
    c946:	20 7e       	andi	r18, 0xE0	; 224
    c948:	90 91 92 05 	lds	r25, 0x0592
    c94c:	9f 79       	andi	r25, 0x9F	; 159
    c94e:	92 2b       	or	r25, r18
    c950:	90 93 92 05 	sts	0x0592, r25
    c954:	01 c0       	rjmp	.+2      	; 0xc958 <_Z18menuProcModelIndexh+0x236>
				lcd_outdezAtt (20 * FW, y, g_model.sub_trim_limit, attr);
//				lcd_xlabel_decimal( y, PSTR(STR_AUTO_LIMITS), g_model.sub_trim_limit, attr, 20*FW ) ;
				y += FH;
				subN += 1;

				attr = 0;
    c956:	10 e0       	ldi	r17, 0x00	; 0
				if (sub == subN) {
					attr = blink;
					CHECK_INCDEC_H_MODELVAR_0(tidle, 1);
					g_model.throttleIdle = tidle;
				}
				lcd_putsAttIdx (16 * FW, y, PSTR("\005-100%   0%"), tidle, attr);
    c958:	01 2f       	mov	r16, r17
    c95a:	28 2f       	mov	r18, r24
    c95c:	4f ea       	ldi	r20, 0xAF	; 175
    c95e:	54 e1       	ldi	r21, 0x14	; 20
    c960:	60 e3       	ldi	r22, 0x30	; 48
    c962:	80 e6       	ldi	r24, 0x60	; 96
    c964:	8c c4       	rjmp	.+2328   	; 0xd27e <_Z18menuProcModelIndexh+0xb5c>

			} else if (sub < 12) {
    c966:	eb e0       	ldi	r30, 0x0B	; 11
    c968:	ef 15       	cp	r30, r15
    c96a:	08 f4       	brcc	.+2      	; 0xc96e <_Z18menuProcModelIndexh+0x24c>
    c96c:	7a c0       	rjmp	.+244    	; 0xca62 <_Z18menuProcModelIndexh+0x340>
				subN = 6;
				lcd_puts_Pleft (y, PSTR(STR_VOL_PAGE));
    c96e:	67 e7       	ldi	r22, 0x77	; 119
    c970:	74 e1       	ldi	r23, 0x14	; 20
    c972:	88 e0       	ldi	r24, 0x08	; 8
    c974:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
				uint8_t attr = 0;
				uint8_t tvol = g_model.anaVolume;
    c978:	80 91 9d 04 	lds	r24, 0x049D
    c97c:	82 95       	swap	r24
    c97e:	86 95       	lsr	r24
    c980:	87 70       	andi	r24, 0x07	; 7
				if (sub == subN) {
    c982:	f6 e0       	ldi	r31, 0x06	; 6
    c984:	ff 12       	cpse	r15, r31
    c986:	0f c0       	rjmp	.+30     	; 0xc9a6 <_Z18menuProcModelIndexh+0x284>
					attr = blink;
					CHECK_INCDEC_H_MODELVAR_0(tvol, 7);
    c988:	67 e0       	ldi	r22, 0x07	; 7
    c98a:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
					g_model.anaVolume = tvol;
    c98e:	28 2f       	mov	r18, r24
    c990:	22 95       	swap	r18
    c992:	22 0f       	add	r18, r18
    c994:	20 7e       	andi	r18, 0xE0	; 224
    c996:	90 91 9d 04 	lds	r25, 0x049D
    c99a:	9f 71       	andi	r25, 0x1F	; 31
    c99c:	92 2b       	or	r25, r18
    c99e:	90 93 9d 04 	sts	0x049D, r25
				subN = 6;
				lcd_puts_Pleft (y, PSTR(STR_VOL_PAGE));
				uint8_t attr = 0;
				uint8_t tvol = g_model.anaVolume;
				if (sub == subN) {
					attr = blink;
    c9a2:	01 2f       	mov	r16, r17
    c9a4:	01 c0       	rjmp	.+2      	; 0xc9a8 <_Z18menuProcModelIndexh+0x286>
				lcd_putsAttIdx (16 * FW, y, PSTR("\005-100%   0%"), tidle, attr);

			} else if (sub < 12) {
				subN = 6;
				lcd_puts_Pleft (y, PSTR(STR_VOL_PAGE));
				uint8_t attr = 0;
    c9a6:	00 e0       	ldi	r16, 0x00	; 0
				if (sub == subN) {
					attr = blink;
					CHECK_INCDEC_H_MODELVAR_0(tvol, 7);
					g_model.anaVolume = tvol;
				}
				lcd_putsAttIdx (17 * FW, y, PSTR("\003---P1 P2 P3 GV4GV5GV6GV7"), tvol, attr);
    c9a8:	28 2f       	mov	r18, r24
    c9aa:	4d e5       	ldi	r20, 0x5D	; 93
    c9ac:	54 e1       	ldi	r21, 0x14	; 20
    c9ae:	68 e0       	ldi	r22, 0x08	; 8
    c9b0:	86 e6       	ldi	r24, 0x66	; 102
    c9b2:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
				y += FH;
				subN += 1;

				g_model.extendedLimits = onoffItem_m (g_model.extendedLimits, y, sub == subN);
    c9b6:	41 e0       	ldi	r20, 0x01	; 1
    c9b8:	27 e0       	ldi	r18, 0x07	; 7
    c9ba:	f2 12       	cpse	r15, r18
    c9bc:	40 e0       	ldi	r20, 0x00	; 0
    c9be:	80 91 37 02 	lds	r24, 0x0237
	if (condition) value = checkIncDec (value, 0, 1, flags);
	return value;
}

static uint8_t onoffItem_m (uint8_t value, uint8_t y, uint8_t condition) {
	return onoffItem (value, y, condition, EE_MODEL);
    c9c2:	60 e1       	ldi	r22, 0x10	; 16
    c9c4:	86 95       	lsr	r24
    c9c6:	81 70       	andi	r24, 0x01	; 1
    c9c8:	0e 94 dc 39 	call	0x73b8	; 0x73b8 <_ZL9onoffItemhhhh.constprop.7>
				}
				lcd_putsAttIdx (17 * FW, y, PSTR("\003---P1 P2 P3 GV4GV5GV6GV7"), tvol, attr);
				y += FH;
				subN += 1;

				g_model.extendedLimits = onoffItem_m (g_model.extendedLimits, y, sub == subN);
    c9cc:	90 91 37 02 	lds	r25, 0x0237
    c9d0:	80 fb       	bst	r24, 0
    c9d2:	91 f9       	bld	r25, 1
    c9d4:	90 93 37 02 	sts	0x0237, r25
				y += FH;
				subN += 1;

				g_model.traineron = onoffItem_m (g_model.traineron, y, sub == subN);
    c9d8:	41 e0       	ldi	r20, 0x01	; 1
    c9da:	88 e0       	ldi	r24, 0x08	; 8
    c9dc:	f8 12       	cpse	r15, r24
    c9de:	40 e0       	ldi	r20, 0x00	; 0
    c9e0:	80 91 2d 02 	lds	r24, 0x022D
	if (condition) value = checkIncDec (value, 0, 1, flags);
	return value;
}

static uint8_t onoffItem_m (uint8_t value, uint8_t y, uint8_t condition) {
	return onoffItem (value, y, condition, EE_MODEL);
    c9e4:	68 e1       	ldi	r22, 0x18	; 24
    c9e6:	86 95       	lsr	r24
    c9e8:	81 70       	andi	r24, 0x01	; 1
    c9ea:	0e 94 dc 39 	call	0x73b8	; 0x73b8 <_ZL9onoffItemhhhh.constprop.7>

				g_model.extendedLimits = onoffItem_m (g_model.extendedLimits, y, sub == subN);
				y += FH;
				subN += 1;

				g_model.traineron = onoffItem_m (g_model.traineron, y, sub == subN);
    c9ee:	90 91 2d 02 	lds	r25, 0x022D
    c9f2:	80 fb       	bst	r24, 0
    c9f4:	91 f9       	bld	r25, 1
    c9f6:	90 93 2d 02 	sts	0x022D, r25
				y += FH;
				subN += 1;

				g_model.thrTrim = onoffItem_m (g_model.thrTrim, y, sub == subN);
    c9fa:	41 e0       	ldi	r20, 0x01	; 1
    c9fc:	99 e0       	ldi	r25, 0x09	; 9
    c9fe:	f9 12       	cpse	r15, r25
    ca00:	40 e0       	ldi	r20, 0x00	; 0
    ca02:	80 91 32 02 	lds	r24, 0x0232
	if (condition) value = checkIncDec (value, 0, 1, flags);
	return value;
}

static uint8_t onoffItem_m (uint8_t value, uint8_t y, uint8_t condition) {
	return onoffItem (value, y, condition, EE_MODEL);
    ca06:	60 e2       	ldi	r22, 0x20	; 32
    ca08:	81 70       	andi	r24, 0x01	; 1
    ca0a:	0e 94 dc 39 	call	0x73b8	; 0x73b8 <_ZL9onoffItemhhhh.constprop.7>

				g_model.traineron = onoffItem_m (g_model.traineron, y, sub == subN);
				y += FH;
				subN += 1;

				g_model.thrTrim = onoffItem_m (g_model.thrTrim, y, sub == subN);
    ca0e:	90 91 32 02 	lds	r25, 0x0232
    ca12:	80 fb       	bst	r24, 0
    ca14:	90 f9       	bld	r25, 0
    ca16:	90 93 32 02 	sts	0x0232, r25
				y += FH;
				subN += 1;

				g_model.thrExpo = onoffItem_m (g_model.thrExpo, y, sub == subN);
    ca1a:	41 e0       	ldi	r20, 0x01	; 1
    ca1c:	ea e0       	ldi	r30, 0x0A	; 10
    ca1e:	fe 12       	cpse	r15, r30
    ca20:	40 e0       	ldi	r20, 0x00	; 0
    ca22:	80 91 32 02 	lds	r24, 0x0232
	if (condition) value = checkIncDec (value, 0, 1, flags);
	return value;
}

static uint8_t onoffItem_m (uint8_t value, uint8_t y, uint8_t condition) {
	return onoffItem (value, y, condition, EE_MODEL);
    ca26:	68 e2       	ldi	r22, 0x28	; 40
    ca28:	82 95       	swap	r24
    ca2a:	81 70       	andi	r24, 0x01	; 1
    ca2c:	0e 94 dc 39 	call	0x73b8	; 0x73b8 <_ZL9onoffItemhhhh.constprop.7>

				g_model.thrTrim = onoffItem_m (g_model.thrTrim, y, sub == subN);
				y += FH;
				subN += 1;

				g_model.thrExpo = onoffItem_m (g_model.thrExpo, y, sub == subN);
    ca30:	90 91 32 02 	lds	r25, 0x0232
    ca34:	80 fb       	bst	r24, 0
    ca36:	94 f9       	bld	r25, 4
    ca38:	90 93 32 02 	sts	0x0232, r25
				y += FH;
				subN += 1;

//	  	  lcd_puts_Pleft(    y, PSTR(STR_TRIM_INC));
				attr = 0;
				uint8_t tinc = g_model.trimInc;
    ca3c:	80 91 33 02 	lds	r24, 0x0233
				if (sub == subN) {
    ca40:	fb e0       	ldi	r31, 0x0B	; 11
    ca42:	ff 12       	cpse	r15, r31
    ca44:	06 c0       	rjmp	.+12     	; 0xca52 <_Z18menuProcModelIndexh+0x330>
					attr = blink;
					CHECK_INCDEC_H_MODELVAR_0(tinc, 4);
    ca46:	64 e0       	ldi	r22, 0x04	; 4
    ca48:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
					g_model.trimInc = tinc;
    ca4c:	80 93 33 02 	sts	0x0233, r24
    ca50:	01 c0       	rjmp	.+2      	; 0xca54 <_Z18menuProcModelIndexh+0x332>
				g_model.thrExpo = onoffItem_m (g_model.thrExpo, y, sub == subN);
				y += FH;
				subN += 1;

//	  	  lcd_puts_Pleft(    y, PSTR(STR_TRIM_INC));
				attr = 0;
    ca52:	10 e0       	ldi	r17, 0x00	; 0
				if (sub == subN) {
					attr = blink;
					CHECK_INCDEC_H_MODELVAR_0(tinc, 4);
					g_model.trimInc = tinc;
				}
				lcd_putsAttIdx (14 * FW, y, PSTR(STR_TRIM_OPTIONS), tinc, attr);
    ca54:	01 2f       	mov	r16, r17
    ca56:	28 2f       	mov	r18, r24
    ca58:	4d e3       	ldi	r20, 0x3D	; 61
    ca5a:	54 e1       	ldi	r21, 0x14	; 20
    ca5c:	60 e3       	ldi	r22, 0x30	; 48
    ca5e:	84 e5       	ldi	r24, 0x54	; 84
    ca60:	0e c4       	rjmp	.+2076   	; 0xd27e <_Z18menuProcModelIndexh+0xb5c>

			} else {
				subN = 12;
				lcd_puts_Pleft (y, PSTR(STR_TRIM_PAGE));
    ca62:	6a e1       	ldi	r22, 0x1A	; 26
    ca64:	74 e1       	ldi	r23, 0x14	; 20
    ca66:	88 e0       	ldi	r24, 0x08	; 8
    ca68:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
				uint8_t attr = 0;
				if (sub == subN) {
    ca6c:	2c e0       	ldi	r18, 0x0C	; 12
    ca6e:	f2 12       	cpse	r15, r18
    ca70:	04 c0       	rjmp	.+8      	; 0xca7a <_Z18menuProcModelIndexh+0x358>
					attr = blink;
				}
				g_model.trimSw = edit_dr_switch (17 * FW, y, g_model.trimSw, attr,
						attr ? EDIT_DR_SWITCH_EDIT : 0);
    ca72:	01 e0       	ldi	r16, 0x01	; 1
    ca74:	11 11       	cpse	r17, r1
    ca76:	03 c0       	rjmp	.+6      	; 0xca7e <_Z18menuProcModelIndexh+0x35c>
    ca78:	01 c0       	rjmp	.+2      	; 0xca7c <_Z18menuProcModelIndexh+0x35a>
				lcd_putsAttIdx (14 * FW, y, PSTR(STR_TRIM_OPTIONS), tinc, attr);

			} else {
				subN = 12;
				lcd_puts_Pleft (y, PSTR(STR_TRIM_PAGE));
				uint8_t attr = 0;
    ca7a:	10 e0       	ldi	r17, 0x00	; 0
				if (sub == subN) {
					attr = blink;
				}
				g_model.trimSw = edit_dr_switch (17 * FW, y, g_model.trimSw, attr,
						attr ? EDIT_DR_SWITCH_EDIT : 0);
    ca7c:	00 e0       	ldi	r16, 0x00	; 0
    ca7e:	21 2f       	mov	r18, r17
    ca80:	40 91 35 02 	lds	r20, 0x0235
    ca84:	68 e0       	ldi	r22, 0x08	; 8
    ca86:	86 e6       	ldi	r24, 0x66	; 102
    ca88:	0e 94 96 3f 	call	0x7f2c	; 0x7f2c <_Z14edit_dr_switchhhahh>
    ca8c:	80 93 35 02 	sts	0x0235, r24
				y += FH;
				subN += 1;

				g_model.mixTime = onoffItem_m (g_model.mixTime, y, sub == subN);
    ca90:	41 e0       	ldi	r20, 0x01	; 1
    ca92:	8d e0       	ldi	r24, 0x0D	; 13
    ca94:	f8 12       	cpse	r15, r24
    ca96:	40 e0       	ldi	r20, 0x00	; 0
    ca98:	80 91 32 02 	lds	r24, 0x0232
	if (condition) value = checkIncDec (value, 0, 1, flags);
	return value;
}

static uint8_t onoffItem_m (uint8_t value, uint8_t y, uint8_t condition) {
	return onoffItem (value, y, condition, EE_MODEL);
    ca9c:	60 e1       	ldi	r22, 0x10	; 16
    ca9e:	83 fb       	bst	r24, 3
    caa0:	88 27       	eor	r24, r24
    caa2:	80 f9       	bld	r24, 0
    caa4:	0e 94 dc 39 	call	0x73b8	; 0x73b8 <_ZL9onoffItemhhhh.constprop.7>
				g_model.trimSw = edit_dr_switch (17 * FW, y, g_model.trimSw, attr,
						attr ? EDIT_DR_SWITCH_EDIT : 0);
				y += FH;
				subN += 1;

				g_model.mixTime = onoffItem_m (g_model.mixTime, y, sub == subN);
    caa8:	90 91 32 02 	lds	r25, 0x0232
    caac:	80 fb       	bst	r24, 0
    caae:	93 f9       	bld	r25, 3
    cab0:	90 93 32 02 	sts	0x0232, r25
    cab4:	e2 e1       	ldi	r30, 0x12	; 18
    cab6:	ae 2e       	mov	r10, r30
    cab8:	e4 e1       	ldi	r30, 0x14	; 20
    caba:	be 2e       	mov	r11, r30
    cabc:	e5 01       	movw	r28, r10
    cabe:	1f e3       	ldi	r17, 0x3F	; 63
				y += FH;
				subN += 1;

//	  	  lcd_puts_Pleft(    y, PSTR(STR_BEEP_CENTRE));
				uint8_t b = 1;
    cac0:	01 e0       	ldi	r16, 0x01	; 1
				for (uint8_t i = 0; i < 7; i++) {
					uint8_t z = g_model.beepANACenter;
					lcd_putcAtt ( (9 + i) * (FW + 1), y, pgm_read_byte(&PSTR(STR_RETA123)[i]),
							(z & b) ? INVERS : 0);
					if (sub == subN) {
						Columns = &ProgColumns[COLUMNS_6];
    cac2:	f7 e0       	ldi	r31, 0x07	; 7
    cac4:	cf 2e       	mov	r12, r31
    cac6:	fd e1       	ldi	r31, 0x1D	; 29
    cac8:	df 2e       	mov	r13, r31
    caca:	9c 2e       	mov	r9, r28
    cacc:	9a 18       	sub	r9, r10

//	  	  lcd_puts_Pleft(    y, PSTR(STR_BEEP_CENTRE));
				uint8_t b = 1;
				for (uint8_t i = 0; i < 7; i++) {
					uint8_t z = g_model.beepANACenter;
					lcd_putcAtt ( (9 + i) * (FW + 1), y, pgm_read_byte(&PSTR(STR_RETA123)[i]),
    cace:	fe 01       	movw	r30, r28
    cad0:	44 91       	lpm	r20, Z
							(z & b) ? INVERS : 0);
    cad2:	80 91 36 02 	lds	r24, 0x0236
    cad6:	80 23       	and	r24, r16
    cad8:	21 e0       	ldi	r18, 0x01	; 1
    cada:	09 f4       	brne	.+2      	; 0xcade <_Z18menuProcModelIndexh+0x3bc>
    cadc:	20 e0       	ldi	r18, 0x00	; 0
    cade:	68 e1       	ldi	r22, 0x18	; 24
    cae0:	81 2f       	mov	r24, r17
    cae2:	0e 94 31 26 	call	0x4c62	; 0x4c62 <_Z11lcd_putcAtthhch>
					if (sub == subN) {
    cae6:	fe e0       	ldi	r31, 0x0E	; 14
    cae8:	ff 12       	cpse	r15, r31
    caea:	1f c0       	rjmp	.+62     	; 0xcb2a <_Z18menuProcModelIndexh+0x408>
						Columns = &ProgColumns[COLUMNS_6];
    caec:	d0 92 57 0e 	sts	0x0E57, r13
    caf0:	c0 92 56 0e 	sts	0x0E56, r12
						if (g_posHorz == i) {
    caf4:	80 91 7e 0d 	lds	r24, 0x0D7E
    caf8:	89 11       	cpse	r24, r9
    cafa:	17 c0       	rjmp	.+46     	; 0xcb2a <_Z18menuProcModelIndexh+0x408>
							lcd_rect ( (9 + i) * (FW + 1) - 1, y - 1, FW + 2, 9);
    cafc:	29 e0       	ldi	r18, 0x09	; 9
    cafe:	48 e0       	ldi	r20, 0x08	; 8
    cb00:	67 e1       	ldi	r22, 0x17	; 23
    cb02:	8f ef       	ldi	r24, 0xFF	; 255
    cb04:	81 0f       	add	r24, r17
    cb06:	0e 94 98 29 	call	0x5330	; 0x5330 <_Z8lcd_recthhhh>
							if (event == EVT_KEY_BREAK(KEY_MENU) || event == EVT_KEY_BREAK(BTN_RE)) {
    cb0a:	20 e2       	ldi	r18, 0x20	; 32
    cb0c:	e2 16       	cp	r14, r18
    cb0e:	19 f0       	breq	.+6      	; 0xcb16 <_Z18menuProcModelIndexh+0x3f4>
    cb10:	8e e2       	ldi	r24, 0x2E	; 46
    cb12:	e8 12       	cpse	r14, r24
    cb14:	0a c0       	rjmp	.+20     	; 0xcb2a <_Z18menuProcModelIndexh+0x408>
								g_model.beepANACenter ^= b;
    cb16:	80 91 36 02 	lds	r24, 0x0236
    cb1a:	80 27       	eor	r24, r16
    cb1c:	80 93 36 02 	sts	0x0236, r24
								eeDirty (EE_MODEL);
    cb20:	82 e0       	ldi	r24, 0x02	; 2
    cb22:	0e 94 4e 20 	call	0x409c	; 0x409c <_Z7eeDirtyh>
								s_editMode = false;
    cb26:	10 92 a5 0d 	sts	0x0DA5, r1
							}
						}
					}
					b <<= 1;
    cb2a:	00 0f       	add	r16, r16
    cb2c:	21 96       	adiw	r28, 0x01	; 1
    cb2e:	19 5f       	subi	r17, 0xF9	; 249
				y += FH;
				subN += 1;

//	  	  lcd_puts_Pleft(    y, PSTR(STR_BEEP_CENTRE));
				uint8_t b = 1;
				for (uint8_t i = 0; i < 7; i++) {
    cb30:	10 37       	cpi	r17, 0x70	; 112
    cb32:	59 f6       	brne	.-106    	; 0xcaca <_Z18menuProcModelIndexh+0x3a8>
    cb34:	0c 94 d1 6d 	jmp	0xdba2	; 0xdba2 <_Z18menuProcModelIndexh+0x1480>
			}
		}
			break;

		case M_TIMERS: {
			TITLEP (Str_Timer);
    cb38:	8c e8       	ldi	r24, 0x8C	; 140
    cb3a:	9e e1       	ldi	r25, 0x1E	; 30
    cb3c:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>
			IlinesCount = 10;
    cb40:	8a e0       	ldi	r24, 0x0A	; 10
    cb42:	80 93 5b 0e 	sts	0x0E5B, r24
#endif

static void editTimer (uint8_t sub) {
	uint8_t subN;
	uint8_t timer;
	if (sub < 5) {
    cb46:	94 e0       	ldi	r25, 0x04	; 4
    cb48:	9f 15       	cp	r25, r15
    cb4a:	28 f0       	brcs	.+10     	; 0xcb56 <_Z18menuProcModelIndexh+0x434>
		displayNext ();
    cb4c:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <_Z11displayNextv>
		subN = 0;
		timer = 0;
    cb50:	e1 2c       	mov	r14, r1
static void editTimer (uint8_t sub) {
	uint8_t subN;
	uint8_t timer;
	if (sub < 5) {
		displayNext ();
		subN = 0;
    cb52:	10 e0       	ldi	r17, 0x00	; 0
    cb54:	03 c0       	rjmp	.+6      	; 0xcb5c <_Z18menuProcModelIndexh+0x43a>
		timer = 0;
	} else {
		subN = 5;
		timer = 1;
    cb56:	ee 24       	eor	r14, r14
    cb58:	e3 94       	inc	r14
	if (sub < 5) {
		displayNext ();
		subN = 0;
		timer = 0;
	} else {
		subN = 5;
    cb5a:	15 e0       	ldi	r17, 0x05	; 5
		timer = 1;
	}
	TimerMode *ptConfig = &TimerConfig[timer];
    cb5c:	e5 e0       	ldi	r30, 0x05	; 5
    cb5e:	ee 9e       	mul	r14, r30
    cb60:	e0 01       	movw	r28, r0
    cb62:	11 24       	eor	r1, r1
    cb64:	c9 52       	subi	r28, 0x29	; 41
    cb66:	de 4f       	sbci	r29, 0xFE	; 254
	FORCE_INDIRECT(ptConfig);
	uint8_t y = FH;
	uint8_t blink = InverseBlink;
    cb68:	d0 90 9f 0d 	lds	r13, 0x0D9F
//  uint8_t t_pgOfs = s_pgOfs ;

//		if(t_pgOfs<subN)
//		{
//  	  lcd_puts_Pleft( y, Str_Timer) ;
	lcd_puts_Pleft (y, PSTR(STR_TIMER_TEXT));
    cb6c:	64 e8       	ldi	r22, 0x84	; 132
    cb6e:	72 e1       	ldi	r23, 0x12	; 18
    cb70:	88 e0       	ldi	r24, 0x08	; 8
    cb72:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
	lcd_putc (5 * FW, y, '1' + timer);
    cb76:	41 e3       	ldi	r20, 0x31	; 49
    cb78:	4e 0d       	add	r20, r14
    cb7a:	68 e0       	ldi	r22, 0x08	; 8
    cb7c:	8e e1       	ldi	r24, 0x1E	; 30
    cb7e:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <_Z8lcd_putchhc>
	putsTime (12 * FW - 1, y, ptConfig->tmrVal, (sub == subN ? blink : 0),
			(sub == subN ? blink : 0));
    cb82:	f1 12       	cpse	r15, r17
    cb84:	02 c0       	rjmp	.+4      	; 0xcb8a <_Z18menuProcModelIndexh+0x468>
		timer = 1;
	}
	TimerMode *ptConfig = &TimerConfig[timer];
	FORCE_INDIRECT(ptConfig);
	uint8_t y = FH;
	uint8_t blink = InverseBlink;
    cb86:	2d 2d       	mov	r18, r13
    cb88:	01 c0       	rjmp	.+2      	; 0xcb8c <_Z18menuProcModelIndexh+0x46a>
//		{
//  	  lcd_puts_Pleft( y, Str_Timer) ;
	lcd_puts_Pleft (y, PSTR(STR_TIMER_TEXT));
	lcd_putc (5 * FW, y, '1' + timer);
	putsTime (12 * FW - 1, y, ptConfig->tmrVal, (sub == subN ? blink : 0),
			(sub == subN ? blink : 0));
    cb8a:	20 e0       	ldi	r18, 0x00	; 0
    cb8c:	48 81       	ld	r20, Y
    cb8e:	59 81       	ldd	r21, Y+1	; 0x01
    cb90:	02 2f       	mov	r16, r18
    cb92:	68 e0       	ldi	r22, 0x08	; 8
    cb94:	87 e4       	ldi	r24, 0x47	; 71
    cb96:	0e 94 57 29 	call	0x52ae	; 0x52ae <_Z8putsTimehhihh>
//    	putsTime(12*FW-1, y, ptConfig->tmrVal,(sub==subN && subSub==0 ? InverseBlink:0),(sub==subN && subSub==1 ? InverseBlink:0) );

#ifndef NOPOTSCROLL
//	    if(sub==subN && (s_editing	) )	// Use s_editing???
	if (sub == subN)	// Use s_editing???
    cb9a:	f1 12       	cpse	r15, r17
    cb9c:	14 c0       	rjmp	.+40     	; 0xcbc6 <_Z18menuProcModelIndexh+0x4a4>
//	    if(sub==subN && s_editMode )
			if(sub==subN)
#endif
			{
		int16_t temp = 0;
		StepSize = 60;
    cb9e:	8c e3       	ldi	r24, 0x3C	; 60
    cba0:	80 93 6d 01 	sts	0x016D, r24
		CHECK_INCDEC_H_MODELVAR(temp, -60, 60);
    cba4:	4c e3       	ldi	r20, 0x3C	; 60
    cba6:	64 ec       	ldi	r22, 0xC4	; 196
    cba8:	80 e0       	ldi	r24, 0x00	; 0
    cbaa:	0e 94 86 13 	call	0x270c	; 0x270c <_Z14checkIncDec_hmaaa>
		ptConfig->tmrVal += temp;
    cbae:	48 81       	ld	r20, Y
    cbb0:	59 81       	ldd	r21, Y+1	; 0x01
    cbb2:	48 0f       	add	r20, r24
    cbb4:	51 1d       	adc	r21, r1
    cbb6:	87 fd       	sbrc	r24, 7
    cbb8:	5a 95       	dec	r21
    cbba:	59 83       	std	Y+1, r21	; 0x01
    cbbc:	48 83       	st	Y, r20
		if ((int16_t) ptConfig->tmrVal < 0) ptConfig->tmrVal = 0;
    cbbe:	57 ff       	sbrs	r21, 7
    cbc0:	02 c0       	rjmp	.+4      	; 0xcbc6 <_Z18menuProcModelIndexh+0x4a4>
    cbc2:	19 82       	std	Y+1, r1	; 0x01
    cbc4:	18 82       	st	Y, r1

	}
	y += FH;
//   		if((y+=FH)>7*FH) return y ;
//		}
	subN++;
    cbc6:	81 e0       	ldi	r24, 0x01	; 1
    cbc8:	81 0f       	add	r24, r17

//		if(t_pgOfs<subN) { //timer trigger source -> off, abs, stk, stk%, sw/!sw, !m_sw/!m_sw, chx(value > or < than tmrChVal), ch%
	uint8_t attr = 0;
	if (sub == subN) {
    cbca:	f8 12       	cpse	r15, r24
    cbcc:	08 c0       	rjmp	.+16     	; 0xcbde <_Z18menuProcModelIndexh+0x4bc>
		attr = INVERS;
		CHECK_INCDEC_MODELSWITCH(ptConfig->tmrModeA, 0, 1 + 2 + 16);
    cbce:	43 e1       	ldi	r20, 0x13	; 19
    cbd0:	60 e0       	ldi	r22, 0x00	; 0
    cbd2:	8a 81       	ldd	r24, Y+2	; 0x02
    cbd4:	0e 94 86 13 	call	0x270c	; 0x270c <_Z14checkIncDec_hmaaa>
    cbd8:	8a 83       	std	Y+2, r24	; 0x02
	subN++;

//		if(t_pgOfs<subN) { //timer trigger source -> off, abs, stk, stk%, sw/!sw, !m_sw/!m_sw, chx(value > or < than tmrChVal), ch%
	uint8_t attr = 0;
	if (sub == subN) {
		attr = INVERS;
    cbda:	41 e0       	ldi	r20, 0x01	; 1
    cbdc:	01 c0       	rjmp	.+2      	; 0xcbe0 <_Z18menuProcModelIndexh+0x4be>
//   		if((y+=FH)>7*FH) return y ;
//		}
	subN++;

//		if(t_pgOfs<subN) { //timer trigger source -> off, abs, stk, stk%, sw/!sw, !m_sw/!m_sw, chx(value > or < than tmrChVal), ch%
	uint8_t attr = 0;
    cbde:	40 e0       	ldi	r20, 0x00	; 0
	if (sub == subN) {
		attr = INVERS;
		CHECK_INCDEC_MODELSWITCH(ptConfig->tmrModeA, 0, 1 + 2 + 16);
	}
	putsTmrMode (10 * FW, y, attr, (timer == 0) ? 1 : 0x81);
    cbe0:	e1 10       	cpse	r14, r1
    cbe2:	02 c0       	rjmp	.+4      	; 0xcbe8 <_Z18menuProcModelIndexh+0x4c6>
    cbe4:	21 e0       	ldi	r18, 0x01	; 1
    cbe6:	01 c0       	rjmp	.+2      	; 0xcbea <_Z18menuProcModelIndexh+0x4c8>
    cbe8:	21 e8       	ldi	r18, 0x81	; 129
    cbea:	60 e1       	ldi	r22, 0x10	; 16
    cbec:	8c e3       	ldi	r24, 0x3C	; 60
    cbee:	0e 94 15 11 	call	0x222a	; 0x222a <_Z11putsTmrModehhhh>
	y += FH;
//   		if((y+=FH)>7*FH) return y ;
//		}
	subN++;
    cbf2:	82 e0       	ldi	r24, 0x02	; 2
    cbf4:	81 0f       	add	r24, r17

//		if(t_pgOfs<subN) { //timer trigger source -> none, sw/!sw
//  	  lcd_puts_Pleft(    y, PSTR(STR_TRIGGERB));
	attr = 0;
	if (sub == subN) {
    cbf6:	f8 12       	cpse	r15, r24
    cbf8:	05 c0       	rjmp	.+10     	; 0xcc04 <_Z18menuProcModelIndexh+0x4e2>
		attr = blink;
	}
	uint8_t doedit = attr ? EDIT_DR_SWITCH_MOMENT | EDIT_DR_SWITCH_EDIT : EDIT_DR_SWITCH_MOMENT;
    cbfa:	dd 20       	and	r13, r13
    cbfc:	19 f0       	breq	.+6      	; 0xcc04 <_Z18menuProcModelIndexh+0x4e2>
    cbfe:	2d 2d       	mov	r18, r13
    cc00:	03 e0       	ldi	r16, 0x03	; 3
    cc02:	02 c0       	rjmp	.+4      	; 0xcc08 <_Z18menuProcModelIndexh+0x4e6>
    cc04:	20 e0       	ldi	r18, 0x00	; 0
    cc06:	02 e0       	ldi	r16, 0x02	; 2
	ptConfig->tmrModeB = edit_dr_switch (15 * FW, y, ptConfig->tmrModeB, attr, doedit);
    cc08:	4b 81       	ldd	r20, Y+3	; 0x03
    cc0a:	68 e1       	ldi	r22, 0x18	; 24
    cc0c:	8a e5       	ldi	r24, 0x5A	; 90
    cc0e:	0e 94 96 3f 	call	0x7f2c	; 0x7f2c <_Z14edit_dr_switchhhahh>
    cc12:	8b 83       	std	Y+3, r24	; 0x03
	y += FH;
//   		if((y+=FH)>7*FH) return y ;
//  	}
	subN++;
    cc14:	83 e0       	ldi	r24, 0x03	; 3
    cc16:	81 0f       	add	r24, r17

//		if(t_pgOfs<subN)
//		{
//  	  lcd_puts_Pleft( y, Str_Timer);
	attr = 0;
	if (sub == subN) {
    cc18:	f8 12       	cpse	r15, r24
    cc1a:	07 c0       	rjmp	.+14     	; 0xcc2a <_Z18menuProcModelIndexh+0x508>
		attr = INVERS;
		CHECK_INCDEC_H_MODELVAR_0(ptConfig->tmrDir, 1);
    cc1c:	61 e0       	ldi	r22, 0x01	; 1
    cc1e:	8c 81       	ldd	r24, Y+4	; 0x04
    cc20:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    cc24:	8c 83       	std	Y+4, r24	; 0x04
//		if(t_pgOfs<subN)
//		{
//  	  lcd_puts_Pleft( y, Str_Timer);
	attr = 0;
	if (sub == subN) {
		attr = INVERS;
    cc26:	01 e0       	ldi	r16, 0x01	; 1
    cc28:	01 c0       	rjmp	.+2      	; 0xcc2c <_Z18menuProcModelIndexh+0x50a>
	subN++;

//		if(t_pgOfs<subN)
//		{
//  	  lcd_puts_Pleft( y, Str_Timer);
	attr = 0;
    cc2a:	00 e0       	ldi	r16, 0x00	; 0
	if (sub == subN) {
		attr = INVERS;
		CHECK_INCDEC_H_MODELVAR_0(ptConfig->tmrDir, 1);
	}
	lcd_putsAttIdx (10 * FW, y, PSTR(STR_COUNT_DOWN_UP), ptConfig->tmrDir, attr);
    cc2c:	2c 81       	ldd	r18, Y+4	; 0x04
    cc2e:	4e e6       	ldi	r20, 0x6E	; 110
    cc30:	52 e1       	ldi	r21, 0x12	; 18
    cc32:	60 e2       	ldi	r22, 0x20	; 32
    cc34:	8c e3       	ldi	r24, 0x3C	; 60
    cc36:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
//  	  lcd_putsAttIdx_right( y, PSTR(STR_COUNT_DOWN_UP), ptConfig->tmrDir, attr ) ;
	y += FH;
//   		if((y+=FH)>7*FH) return y ;
//		}
	subN++;
    cc3a:	1c 5f       	subi	r17, 0xFC	; 252

//		if(t_pgOfs<subN)
//		{
//  	  lcd_puts_Pleft( y, PSTR("Reset Switch"));
	attr = 0;
	if (sub == subN) {
    cc3c:	f1 12       	cpse	r15, r17
#endif

//		if(t_pgOfs<subN)
//		{
//  	  lcd_puts_Pleft( y, PSTR("Reset Switch"));
	attr = 0;
    cc3e:	d1 2c       	mov	r13, r1
	if (sub == subN) {
		attr = blink;
	}

	int16_t sw = (timer == 0) ? g_model.timer1RstSw : g_model.timer2RstSw;
    cc40:	e1 10       	cpse	r14, r1
    cc42:	03 c0       	rjmp	.+6      	; 0xcc4a <_Z18menuProcModelIndexh+0x528>
    cc44:	40 91 90 05 	lds	r20, 0x0590
    cc48:	02 c0       	rjmp	.+4      	; 0xcc4e <_Z18menuProcModelIndexh+0x52c>
    cc4a:	40 91 91 05 	lds	r20, 0x0591
	doedit = attr ? EDIT_DR_SWITCH_MOMENT | EDIT_DR_SWITCH_EDIT : EDIT_DR_SWITCH_MOMENT;
    cc4e:	dd 20       	and	r13, r13
    cc50:	11 f0       	breq	.+4      	; 0xcc56 <_Z18menuProcModelIndexh+0x534>
    cc52:	03 e0       	ldi	r16, 0x03	; 3
    cc54:	01 c0       	rjmp	.+2      	; 0xcc58 <_Z18menuProcModelIndexh+0x536>
    cc56:	02 e0       	ldi	r16, 0x02	; 2
	sw = edit_dr_switch (15 * FW, y, sw, attr, doedit);
    cc58:	2d 2d       	mov	r18, r13
    cc5a:	68 e2       	ldi	r22, 0x28	; 40
    cc5c:	8a e5       	ldi	r24, 0x5A	; 90
    cc5e:	0e 94 96 3f 	call	0x7f2c	; 0x7f2c <_Z14edit_dr_switchhhahh>
	if (timer == 0) {
    cc62:	e1 10       	cpse	r14, r1
    cc64:	03 c0       	rjmp	.+6      	; 0xcc6c <_Z18menuProcModelIndexh+0x54a>
		g_model.timer1RstSw = sw;
    cc66:	80 93 90 05 	sts	0x0590, r24
    cc6a:	02 c0       	rjmp	.+4      	; 0xcc70 <_Z18menuProcModelIndexh+0x54e>
	} else {
		g_model.timer2RstSw = sw;
    cc6c:	80 93 91 05 	sts	0x0591, r24
			TITLEP (Str_Timer);
			IlinesCount = 10;

			editTimer (sub);
			TimerMode *ptConfig = &TimerConfig[0];
			FORCE_INDIRECT(ptConfig);
    cc70:	e7 ed       	ldi	r30, 0xD7	; 215
    cc72:	f1 e0       	ldi	r31, 0x01	; 1
			g_model.tmrVal = ptConfig->tmrVal;
    cc74:	80 81       	ld	r24, Z
    cc76:	91 81       	ldd	r25, Z+1	; 0x01
    cc78:	90 93 2f 02 	sts	0x022F, r25
    cc7c:	80 93 2e 02 	sts	0x022E, r24
			g_model.tmrMode = ptConfig->tmrModeA;
    cc80:	82 81       	ldd	r24, Z+2	; 0x02
    cc82:	80 93 2c 02 	sts	0x022C, r24
			g_model.tmrModeB = ptConfig->tmrModeB;
    cc86:	83 81       	ldd	r24, Z+3	; 0x03
    cc88:	80 93 9c 04 	sts	0x049C, r24
			g_model.tmrDir = ptConfig->tmrDir;
    cc8c:	80 91 2d 02 	lds	r24, 0x022D
    cc90:	94 81       	ldd	r25, Z+4	; 0x04
    cc92:	90 fb       	bst	r25, 0
    cc94:	80 f9       	bld	r24, 0
    cc96:	80 93 2d 02 	sts	0x022D, r24
			ptConfig += 1;
			g_model.tmr2Val = ptConfig->tmrVal;
    cc9a:	85 81       	ldd	r24, Z+5	; 0x05
    cc9c:	96 81       	ldd	r25, Z+6	; 0x06
    cc9e:	90 93 cd 04 	sts	0x04CD, r25
    cca2:	80 93 cc 04 	sts	0x04CC, r24
			g_model.tmr2Mode = ptConfig->tmrModeA;
    cca6:	87 81       	ldd	r24, Z+7	; 0x07
    cca8:	80 93 ce 04 	sts	0x04CE, r24
			g_model.tmr2ModeB = ptConfig->tmrModeB;
    ccac:	80 85       	ldd	r24, Z+8	; 0x08
    ccae:	80 93 cf 04 	sts	0x04CF, r24
			g_model.tmr2Dir = ptConfig->tmrDir;
    ccb2:	80 91 92 05 	lds	r24, 0x0592
    ccb6:	91 85       	ldd	r25, Z+9	; 0x09
    ccb8:	90 fb       	bst	r25, 0
    ccba:	87 f9       	bld	r24, 7
    ccbc:	80 93 92 05 	sts	0x0592, r24
		}
			break;
    ccc0:	70 c7       	rjmp	.+3808   	; 0xdba2 <_Z18menuProcModelIndexh+0x1480>

		case M_HELI: {
			TITLEP (Str_heli_setup);
    ccc2:	83 e4       	ldi	r24, 0x43	; 67
    ccc4:	9d e1       	ldi	r25, 0x1D	; 29
    ccc6:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>
			IlinesCount = 6;
    ccca:	86 e0       	ldi	r24, 0x06	; 6
    cccc:	80 93 5b 0e 	sts	0x0E5B, r24

			uint8_t b;
			uint8_t attr;
			uint8_t blink = InverseBlink;
    ccd0:	c0 91 9f 0d 	lds	r28, 0x0D9F

			uint8_t subN = 0;
			b = g_model.swashType;
    ccd4:	d0 91 37 02 	lds	r29, 0x0237
    ccd8:	d2 95       	swap	r29
    ccda:	d6 95       	lsr	r29
    ccdc:	d7 70       	andi	r29, 0x07	; 7
			lcd_puts_Pleft (y, PSTR(STR_HELI_TEXT));
    ccde:	67 ec       	ldi	r22, 0xC7	; 199
    cce0:	73 e1       	ldi	r23, 0x13	; 19
    cce2:	88 e0       	ldi	r24, 0x08	; 8
    cce4:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
			attr = 0;
			if (sub == subN) {
    cce8:	ff 20       	and	r15, r15
    ccea:	19 f0       	breq	.+6      	; 0xccf2 <_Z18menuProcModelIndexh+0x5d0>
			uint8_t b;
			uint8_t attr;
			uint8_t blink = InverseBlink;

			uint8_t subN = 0;
			b = g_model.swashType;
    ccec:	8d 2f       	mov	r24, r29
			lcd_puts_Pleft (y, PSTR(STR_HELI_TEXT));
			attr = 0;
    ccee:	00 e0       	ldi	r16, 0x00	; 0
    ccf0:	0f c0       	rjmp	.+30     	; 0xcd10 <_Z18menuProcModelIndexh+0x5ee>
			if (sub == subN) {
				attr = blink;
				CHECK_INCDEC_H_MODELVAR_0(b, SWASH_TYPE_NUM);
    ccf2:	64 e0       	ldi	r22, 0x04	; 4
    ccf4:	8d 2f       	mov	r24, r29
    ccf6:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
				g_model.swashType = b;
    ccfa:	28 2f       	mov	r18, r24
    ccfc:	22 95       	swap	r18
    ccfe:	22 0f       	add	r18, r18
    cd00:	20 7e       	andi	r18, 0xE0	; 224
    cd02:	90 91 37 02 	lds	r25, 0x0237
    cd06:	9f 71       	andi	r25, 0x1F	; 31
    cd08:	92 2b       	or	r25, r18
    cd0a:	90 93 37 02 	sts	0x0237, r25
			uint8_t subN = 0;
			b = g_model.swashType;
			lcd_puts_Pleft (y, PSTR(STR_HELI_TEXT));
			attr = 0;
			if (sub == subN) {
				attr = blink;
    cd0e:	0c 2f       	mov	r16, r28
				CHECK_INCDEC_H_MODELVAR_0(b, SWASH_TYPE_NUM);
				g_model.swashType = b;
			}
			lcd_putsAttIdx (17 * FW, y, PSTR(SWASH_TYPE_STR), b, attr);
    cd10:	28 2f       	mov	r18, r24
    cd12:	41 eb       	ldi	r20, 0xB1	; 177
    cd14:	53 e1       	ldi	r21, 0x13	; 19
    cd16:	68 e0       	ldi	r22, 0x08	; 8
    cd18:	86 e6       	ldi	r24, 0x66	; 102
    cd1a:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
			y += FH;
			subN++;

			attr = 0;
			if (sub == subN) {
    cd1e:	f1 e0       	ldi	r31, 0x01	; 1
    cd20:	ff 12       	cpse	r15, r31
    cd22:	09 c0       	rjmp	.+18     	; 0xcd36 <_Z18menuProcModelIndexh+0x614>
				attr = blink;
				CHECK_INCDEC_H_MODELVAR_0(g_model.swashCollectiveSource, NUM_XCHNRAW);
    cd24:	64 e2       	ldi	r22, 0x24	; 36
    cd26:	80 91 38 02 	lds	r24, 0x0238
    cd2a:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    cd2e:	80 93 38 02 	sts	0x0238, r24
			y += FH;
			subN++;

			attr = 0;
			if (sub == subN) {
				attr = blink;
    cd32:	2c 2f       	mov	r18, r28
    cd34:	01 c0       	rjmp	.+2      	; 0xcd38 <_Z18menuProcModelIndexh+0x616>
			}
			lcd_putsAttIdx (17 * FW, y, PSTR(SWASH_TYPE_STR), b, attr);
			y += FH;
			subN++;

			attr = 0;
    cd36:	20 e0       	ldi	r18, 0x00	; 0
			if (sub == subN) {
				attr = blink;
				CHECK_INCDEC_H_MODELVAR_0(g_model.swashCollectiveSource, NUM_XCHNRAW);
			}
			putsChnRaw (17 * FW, y, g_model.swashCollectiveSource, attr);
    cd38:	40 91 38 02 	lds	r20, 0x0238
    cd3c:	60 e1       	ldi	r22, 0x10	; 16
    cd3e:	86 e6       	ldi	r24, 0x66	; 102
    cd40:	0e 94 95 10 	call	0x212a	; 0x212a <_Z10putsChnRawhhhh>
			y += FH;
			subN++;

			attr = 0;
			if (sub == subN) {
    cd44:	22 e0       	ldi	r18, 0x02	; 2
    cd46:	f2 12       	cpse	r15, r18
    cd48:	08 c0       	rjmp	.+16     	; 0xcd5a <_Z18menuProcModelIndexh+0x638>
				attr = blink;
				CHECK_INCDEC_H_MODELVAR_0(g_model.swashRingValue, 100);
    cd4a:	64 e6       	ldi	r22, 0x64	; 100
    cd4c:	80 91 39 02 	lds	r24, 0x0239
    cd50:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    cd54:	80 93 39 02 	sts	0x0239, r24
    cd58:	01 c0       	rjmp	.+2      	; 0xcd5c <_Z18menuProcModelIndexh+0x63a>
			}
			putsChnRaw (17 * FW, y, g_model.swashCollectiveSource, attr);
			y += FH;
			subN++;

			attr = 0;
    cd5a:	c0 e0       	ldi	r28, 0x00	; 0
			if (sub == subN) {
				attr = blink;
				CHECK_INCDEC_H_MODELVAR_0(g_model.swashRingValue, 100);
			}
			lcd_outdezAtt (17 * FW, y, g_model.swashRingValue, attr);
    cd5c:	40 91 39 02 	lds	r20, 0x0239
    cd60:	50 e0       	ldi	r21, 0x00	; 0
    cd62:	2c 2f       	mov	r18, r28
    cd64:	68 e1       	ldi	r22, 0x18	; 24
    cd66:	86 e6       	ldi	r24, 0x66	; 102
    cd68:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
			y += FH;
			subN++;

			g_model.swashInvertELE = hyphinvMenuItem_m (g_model.swashInvertELE, y, sub == subN);
    cd6c:	41 e0       	ldi	r20, 0x01	; 1
    cd6e:	83 e0       	ldi	r24, 0x03	; 3
    cd70:	f8 12       	cpse	r15, r24
    cd72:	40 e0       	ldi	r20, 0x00	; 0
    cd74:	80 91 37 02 	lds	r24, 0x0237
    cd78:	60 e2       	ldi	r22, 0x20	; 32
    cd7a:	82 fb       	bst	r24, 2
    cd7c:	88 27       	eor	r24, r24
    cd7e:	80 f9       	bld	r24, 0
    cd80:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <_Z17hyphinvMenuItem_mhhh>
    cd84:	90 91 37 02 	lds	r25, 0x0237
    cd88:	80 fb       	bst	r24, 0
    cd8a:	92 f9       	bld	r25, 2
    cd8c:	90 93 37 02 	sts	0x0237, r25
			y += FH;
			subN++;

			g_model.swashInvertAIL = hyphinvMenuItem_m (g_model.swashInvertAIL, y, sub == subN);
    cd90:	41 e0       	ldi	r20, 0x01	; 1
    cd92:	94 e0       	ldi	r25, 0x04	; 4
    cd94:	f9 12       	cpse	r15, r25
    cd96:	40 e0       	ldi	r20, 0x00	; 0
    cd98:	80 91 37 02 	lds	r24, 0x0237
    cd9c:	68 e2       	ldi	r22, 0x28	; 40
    cd9e:	83 fb       	bst	r24, 3
    cda0:	88 27       	eor	r24, r24
    cda2:	80 f9       	bld	r24, 0
    cda4:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <_Z17hyphinvMenuItem_mhhh>
    cda8:	90 91 37 02 	lds	r25, 0x0237
    cdac:	80 fb       	bst	r24, 0
    cdae:	93 f9       	bld	r25, 3
    cdb0:	90 93 37 02 	sts	0x0237, r25
			y += FH;
			subN++;

			g_model.swashInvertCOL = hyphinvMenuItem_m (g_model.swashInvertCOL, y, sub == subN);
    cdb4:	41 e0       	ldi	r20, 0x01	; 1
    cdb6:	e5 e0       	ldi	r30, 0x05	; 5
    cdb8:	fe 12       	cpse	r15, r30
    cdba:	40 e0       	ldi	r20, 0x00	; 0
    cdbc:	80 91 37 02 	lds	r24, 0x0237
    cdc0:	60 e3       	ldi	r22, 0x30	; 48
    cdc2:	82 95       	swap	r24
    cdc4:	81 70       	andi	r24, 0x01	; 1
    cdc6:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <_Z17hyphinvMenuItem_mhhh>
    cdca:	90 91 37 02 	lds	r25, 0x0237
    cdce:	80 fb       	bst	r24, 0
    cdd0:	94 f9       	bld	r25, 4
    cdd2:	90 93 37 02 	sts	0x0237, r25

		}
			break;
    cdd6:	e5 c6       	rjmp	.+3530   	; 0xdba2 <_Z18menuProcModelIndexh+0x1480>

		case M_EXPO: {
			TITLEP (Str_Expo);
    cdd8:	8b e3       	ldi	r24, 0x3B	; 59
    cdda:	9d e1       	ldi	r25, 0x1D	; 29
    cddc:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>
			IlinesCount = 5;
    cde0:	85 e0       	ldi	r24, 0x05	; 5
    cde2:	80 93 5b 0e 	sts	0x0E5B, r24

			uint8_t stkVal;
			StickScrollAllowed = 0;
    cde6:	10 92 85 01 	sts	0x0185, r1

			uint8_t l_expoChan = s_expoChan;
    cdea:	d0 91 54 0e 	lds	r29, 0x0E54
			{
				uint8_t attr = 0;
				if (sub == 0) {
					s_expoChan = l_expoChan = checkIncDec (l_expoChan, 0, 3, 0);
    cdee:	20 e0       	ldi	r18, 0x00	; 0
			StickScrollAllowed = 0;

			uint8_t l_expoChan = s_expoChan;
			{
				uint8_t attr = 0;
				if (sub == 0) {
    cdf0:	f1 10       	cpse	r15, r1
    cdf2:	09 c0       	rjmp	.+18     	; 0xce06 <_Z18menuProcModelIndexh+0x6e4>
					s_expoChan = l_expoChan = checkIncDec (l_expoChan, 0, 3, 0);
    cdf4:	43 e0       	ldi	r20, 0x03	; 3
    cdf6:	60 e0       	ldi	r22, 0x00	; 0
    cdf8:	8d 2f       	mov	r24, r29
    cdfa:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <_Z11checkIncDecaaah>
    cdfe:	d8 2f       	mov	r29, r24
    ce00:	80 93 54 0e 	sts	0x0E54, r24
					attr = INVERS;
    ce04:	21 e0       	ldi	r18, 0x01	; 1
				}
				putsChnRaw (0, FH, l_expoChan + 1, attr);
    ce06:	41 e0       	ldi	r20, 0x01	; 1
    ce08:	4d 0f       	add	r20, r29
    ce0a:	68 e0       	ldi	r22, 0x08	; 8
    ce0c:	80 e0       	ldi	r24, 0x00	; 0
    ce0e:	0e 94 95 10 	call	0x212a	; 0x212a <_Z10putsChnRawhhhh>
			}

			uint8_t expoDrOn = get_dr_state (l_expoChan);
    ce12:	8d 2f       	mov	r24, r29
    ce14:	0e 94 d9 38 	call	0x71b2	; 0x71b2 <_Z12get_dr_stateh>
    ce18:	18 2f       	mov	r17, r24

			lcd_putsAttIdx (0, FH, PSTR(STR_4DR_HIMIDLO), expoDrOn, 0);
    ce1a:	00 e0       	ldi	r16, 0x00	; 0
    ce1c:	28 2f       	mov	r18, r24
    ce1e:	4a e9       	ldi	r20, 0x9A	; 154
    ce20:	53 e1       	ldi	r21, 0x13	; 19
    ce22:	68 e0       	ldi	r22, 0x08	; 8
    ce24:	80 e0       	ldi	r24, 0x00	; 0
    ce26:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>

			lcd_puts_Pleft (2 * FH, PSTR(STR_EXPO_TEXT));
    ce2a:	6e e7       	ldi	r22, 0x7E	; 126
    ce2c:	73 e1       	ldi	r23, 0x13	; 19
    ce2e:	80 e1       	ldi	r24, 0x10	; 16
    ce30:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>

			stkVal = DR_BOTH;
			if (calibratedStick[l_expoChan] > 100) stkVal = DR_RIGHT;
    ce34:	ed 2f       	mov	r30, r29
    ce36:	f0 e0       	ldi	r31, 0x00	; 0
    ce38:	ee 0f       	add	r30, r30
    ce3a:	ff 1f       	adc	r31, r31
    ce3c:	e9 53       	subi	r30, 0x39	; 57
    ce3e:	f2 4f       	sbci	r31, 0xF2	; 242
    ce40:	40 81       	ld	r20, Z
    ce42:	51 81       	ldd	r21, Z+1	; 0x01
    ce44:	45 36       	cpi	r20, 0x65	; 101
    ce46:	51 05       	cpc	r21, r1
    ce48:	2c f4       	brge	.+10     	; 0xce54 <_Z18menuProcModelIndexh+0x732>
			if (calibratedStick[l_expoChan] < -100) stkVal = DR_LEFT;
    ce4a:	4c 39       	cpi	r20, 0x9C	; 156
    ce4c:	5f 4f       	sbci	r21, 0xFF	; 255
    ce4e:	24 f0       	brlt	.+8      	; 0xce58 <_Z18menuProcModelIndexh+0x736>

			lcd_putsAttIdx (0, FH, PSTR(STR_4DR_HIMIDLO), expoDrOn, 0);

			lcd_puts_Pleft (2 * FH, PSTR(STR_EXPO_TEXT));

			stkVal = DR_BOTH;
    ce50:	c2 e0       	ldi	r28, 0x02	; 2
    ce52:	03 c0       	rjmp	.+6      	; 0xce5a <_Z18menuProcModelIndexh+0x738>
			if (calibratedStick[l_expoChan] > 100) stkVal = DR_RIGHT;
    ce54:	c0 e0       	ldi	r28, 0x00	; 0
    ce56:	01 c0       	rjmp	.+2      	; 0xce5a <_Z18menuProcModelIndexh+0x738>
			if (calibratedStick[l_expoChan] < -100) stkVal = DR_LEFT;
    ce58:	c1 e0       	ldi	r28, 0x01	; 1
			if (IS_EXPO_THROTTLE (l_expoChan)) stkVal = DR_RIGHT;
    ce5a:	8d 2f       	mov	r24, r29
    ce5c:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <_Z16IS_EXPO_THROTTLEh>
    ce60:	81 11       	cpse	r24, r1
    ce62:	06 c0       	rjmp	.+12     	; 0xce70 <_Z18menuProcModelIndexh+0x74e>

			editExpoVals ( (stkVal != DR_RIGHT) && (sub == 1), 4 * FW, 3 * FH, expoDrOn, DR_EXPO,
    ce64:	cc 23       	and	r28, r28
    ce66:	29 f0       	breq	.+10     	; 0xce72 <_Z18menuProcModelIndexh+0x750>
    ce68:	81 e0       	ldi	r24, 0x01	; 1
    ce6a:	f8 12       	cpse	r15, r24
    ce6c:	02 c0       	rjmp	.+4      	; 0xce72 <_Z18menuProcModelIndexh+0x750>
    ce6e:	02 c0       	rjmp	.+4      	; 0xce74 <_Z18menuProcModelIndexh+0x752>
			lcd_puts_Pleft (2 * FH, PSTR(STR_EXPO_TEXT));

			stkVal = DR_BOTH;
			if (calibratedStick[l_expoChan] > 100) stkVal = DR_RIGHT;
			if (calibratedStick[l_expoChan] < -100) stkVal = DR_LEFT;
			if (IS_EXPO_THROTTLE (l_expoChan)) stkVal = DR_RIGHT;
    ce70:	c0 e0       	ldi	r28, 0x00	; 0

			editExpoVals ( (stkVal != DR_RIGHT) && (sub == 1), 4 * FW, 3 * FH, expoDrOn, DR_EXPO,
    ce72:	80 e0       	ldi	r24, 0x00	; 0
			DR_LEFT);
    ce74:	ee 24       	eor	r14, r14
    ce76:	e3 94       	inc	r14
    ce78:	00 e0       	ldi	r16, 0x00	; 0
    ce7a:	21 2f       	mov	r18, r17
    ce7c:	48 e1       	ldi	r20, 0x18	; 24
    ce7e:	68 e1       	ldi	r22, 0x18	; 24
    ce80:	0e 94 15 43 	call	0x862a	; 0x862a <_Z12editExpoValshhhhhh>
			editExpoVals ( (stkVal != DR_LEFT) && (sub == 1), 8 * FW, 3 * FH, expoDrOn, DR_EXPO,
    ce84:	c1 30       	cpi	r28, 0x01	; 1
    ce86:	11 f0       	breq	.+4      	; 0xce8c <_Z18menuProcModelIndexh+0x76a>
    ce88:	81 e0       	ldi	r24, 0x01	; 1
    ce8a:	f8 12       	cpse	r15, r24
    ce8c:	80 e0       	ldi	r24, 0x00	; 0
			DR_RIGHT);
    ce8e:	e1 2c       	mov	r14, r1
    ce90:	00 e0       	ldi	r16, 0x00	; 0
    ce92:	21 2f       	mov	r18, r17
    ce94:	48 e1       	ldi	r20, 0x18	; 24
    ce96:	60 e3       	ldi	r22, 0x30	; 48
    ce98:	0e 94 15 43 	call	0x862a	; 0x862a <_Z12editExpoValshhhhhh>

			editExpoVals ( (stkVal != DR_RIGHT) && (sub == 2), 4 * FW, 5 * FH, expoDrOn, DR_WEIGHT,
    ce9c:	cc 23       	and	r28, r28
    ce9e:	19 f0       	breq	.+6      	; 0xcea6 <_Z18menuProcModelIndexh+0x784>
    cea0:	81 e0       	ldi	r24, 0x01	; 1
    cea2:	22 e0       	ldi	r18, 0x02	; 2
    cea4:	f2 12       	cpse	r15, r18
    cea6:	80 e0       	ldi	r24, 0x00	; 0
			DR_LEFT);
    cea8:	ee 24       	eor	r14, r14
    ceaa:	e3 94       	inc	r14
    ceac:	01 e0       	ldi	r16, 0x01	; 1
    ceae:	21 2f       	mov	r18, r17
    ceb0:	48 e2       	ldi	r20, 0x28	; 40
    ceb2:	68 e1       	ldi	r22, 0x18	; 24
    ceb4:	0e 94 15 43 	call	0x862a	; 0x862a <_Z12editExpoValshhhhhh>
			editExpoVals ( (stkVal != DR_LEFT) && (sub == 2), 8 * FW, 5 * FH, expoDrOn, DR_WEIGHT,
    ceb8:	c1 30       	cpi	r28, 0x01	; 1
    ceba:	19 f0       	breq	.+6      	; 0xcec2 <_Z18menuProcModelIndexh+0x7a0>
    cebc:	81 e0       	ldi	r24, 0x01	; 1
    cebe:	92 e0       	ldi	r25, 0x02	; 2
    cec0:	f9 12       	cpse	r15, r25
    cec2:	80 e0       	ldi	r24, 0x00	; 0
			DR_RIGHT);
    cec4:	e1 2c       	mov	r14, r1
    cec6:	01 e0       	ldi	r16, 0x01	; 1
    cec8:	21 2f       	mov	r18, r17
    ceca:	48 e2       	ldi	r20, 0x28	; 40
    cecc:	60 e3       	ldi	r22, 0x30	; 48
    cece:	0e 94 15 43 	call	0x862a	; 0x862a <_Z12editExpoValshhhhhh>

			editExpoVals (sub == 3, 5 * FW, 6 * FH, DR_DRSW1, 0, 0);
    ced2:	81 e0       	ldi	r24, 0x01	; 1
    ced4:	e3 e0       	ldi	r30, 0x03	; 3
    ced6:	fe 12       	cpse	r15, r30
    ced8:	80 e0       	ldi	r24, 0x00	; 0
    ceda:	e1 2c       	mov	r14, r1
    cedc:	00 e0       	ldi	r16, 0x00	; 0
    cede:	23 e6       	ldi	r18, 0x63	; 99
    cee0:	40 e3       	ldi	r20, 0x30	; 48
    cee2:	6e e1       	ldi	r22, 0x1E	; 30
    cee4:	0e 94 15 43 	call	0x862a	; 0x862a <_Z12editExpoValshhhhhh>
			editExpoVals (sub == 4, 5 * FW, 7 * FH, DR_DRSW2, 0, 0);
    cee8:	81 e0       	ldi	r24, 0x01	; 1
    ceea:	f4 e0       	ldi	r31, 0x04	; 4
    ceec:	ff 12       	cpse	r15, r31
    ceee:	80 e0       	ldi	r24, 0x00	; 0
    cef0:	e1 2c       	mov	r14, r1
    cef2:	00 e0       	ldi	r16, 0x00	; 0
    cef4:	22 e6       	ldi	r18, 0x62	; 98
    cef6:	48 e3       	ldi	r20, 0x38	; 56
    cef8:	6e e1       	ldi	r22, 0x1E	; 30
    cefa:	0e 94 15 43 	call	0x862a	; 0x862a <_Z12editExpoValshhhhhh>

			lcd_vline (XD - (IS_EXPO_THROTTLE (s_expoChan) ? WCHART : 0), Y0 - WCHART, WCHART * 2);
    cefe:	80 91 54 0e 	lds	r24, 0x0E54
    cf02:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <_Z16IS_EXPO_THROTTLEh>
    cf06:	88 23       	and	r24, r24
    cf08:	11 f0       	breq	.+4      	; 0xcf0e <_Z18menuProcModelIndexh+0x7ec>
    cf0a:	8c e3       	ldi	r24, 0x3C	; 60
    cf0c:	01 c0       	rjmp	.+2      	; 0xcf10 <_Z18menuProcModelIndexh+0x7ee>
    cf0e:	8c e5       	ldi	r24, 0x5C	; 92
    cf10:	40 e4       	ldi	r20, 0x40	; 64
    cf12:	60 e0       	ldi	r22, 0x00	; 0
    cf14:	0e 94 d5 27 	call	0x4faa	; 0x4faa <_Z9lcd_vlinehha>

			plotType = PLOT_BLACK;
    cf18:	81 e0       	ldi	r24, 0x01	; 1
    cf1a:	80 93 cd 06 	sts	0x06CD, r24

			drawFunction ( XD, GRAPH_FUNCTION_EXPO);
    cf1e:	61 e0       	ldi	r22, 0x01	; 1
    cf20:	8c e5       	ldi	r24, 0x5C	; 92
    cf22:	0e 94 ff 4e 	call	0x9dfe	; 0x9dfe <_Z12drawFunctionhh>

			int16_t x512 = calibratedStick[s_expoChan];
    cf26:	80 91 54 0e 	lds	r24, 0x0E54
    cf2a:	e8 2f       	mov	r30, r24
    cf2c:	f0 e0       	ldi	r31, 0x00	; 0
    cf2e:	ee 0f       	add	r30, r30
    cf30:	ff 1f       	adc	r31, r31
    cf32:	e9 53       	subi	r30, 0x39	; 57
    cf34:	f2 4f       	sbci	r31, 0xF2	; 242
    cf36:	c0 81       	ld	r28, Z
    cf38:	d1 81       	ldd	r29, Z+1	; 0x01
			int16_t y512 = calcExpo (s_expoChan, x512);
    cf3a:	be 01       	movw	r22, r28
    cf3c:	0e 94 8b 4e 	call	0x9d16	; 0x9d16 <_Z8calcExpohi>
    cf40:	8c 01       	movw	r16, r24

			lcd_outdez (19 * FW, 6 * FH, x512 * 25 / ((signed) RESXu / 4));
    cf42:	89 e1       	ldi	r24, 0x19	; 25
    cf44:	8c 9f       	mul	r24, r28
    cf46:	90 01       	movw	r18, r0
    cf48:	8d 9f       	mul	r24, r29
    cf4a:	30 0d       	add	r19, r0
    cf4c:	11 24       	eor	r1, r1
    cf4e:	37 ff       	sbrs	r19, 7
    cf50:	02 c0       	rjmp	.+4      	; 0xcf56 <_Z18menuProcModelIndexh+0x834>
    cf52:	21 50       	subi	r18, 0x01	; 1
    cf54:	3f 4f       	sbci	r19, 0xFF	; 255
    cf56:	53 2f       	mov	r21, r19
    cf58:	55 0f       	add	r21, r21
    cf5a:	55 0b       	sbc	r21, r21
    cf5c:	43 2f       	mov	r20, r19
    cf5e:	60 e3       	ldi	r22, 0x30	; 48
    cf60:	82 e7       	ldi	r24, 0x72	; 114
    cf62:	0e 94 47 29 	call	0x528e	; 0x528e <_Z10lcd_outdezhhi>
			lcd_outdez (14 * FW, 1 * FH, y512 * 25 / ((signed) RESXu / 4));
    cf66:	89 e1       	ldi	r24, 0x19	; 25
    cf68:	80 9f       	mul	r24, r16
    cf6a:	90 01       	movw	r18, r0
    cf6c:	81 9f       	mul	r24, r17
    cf6e:	30 0d       	add	r19, r0
    cf70:	11 24       	eor	r1, r1
    cf72:	37 ff       	sbrs	r19, 7
    cf74:	02 c0       	rjmp	.+4      	; 0xcf7a <_Z18menuProcModelIndexh+0x858>
    cf76:	21 50       	subi	r18, 0x01	; 1
    cf78:	3f 4f       	sbci	r19, 0xFF	; 255
    cf7a:	53 2f       	mov	r21, r19
    cf7c:	55 0f       	add	r21, r21
    cf7e:	55 0b       	sbc	r21, r21
    cf80:	43 2f       	mov	r20, r19
    cf82:	68 e0       	ldi	r22, 0x08	; 8
    cf84:	84 e5       	ldi	r24, 0x54	; 84
    cf86:	0e 94 47 29 	call	0x528e	; 0x528e <_Z10lcd_outdezhhi>

			int8_t xv = (x512 * WCHART + RESX / 2) / RESX + XD;
    cf8a:	ce 01       	movw	r24, r28
    cf8c:	40 96       	adiw	r24, 0x10	; 16
    cf8e:	97 fd       	sbrc	r25, 7
    cf90:	4f 96       	adiw	r24, 0x1f	; 31
    cf92:	7c 01       	movw	r14, r24
    cf94:	55 e0       	ldi	r21, 0x05	; 5
    cf96:	f5 94       	asr	r15
    cf98:	e7 94       	ror	r14
    cf9a:	5a 95       	dec	r21
    cf9c:	e1 f7       	brne	.-8      	; 0xcf96 <_Z18menuProcModelIndexh+0x874>
			int8_t yv = Y0 - (y512 * WCHART + RESX / 2) / RESX;
    cf9e:	e8 01       	movw	r28, r16
    cfa0:	60 96       	adiw	r28, 0x10	; 16
    cfa2:	d7 fd       	sbrc	r29, 7
    cfa4:	6f 96       	adiw	r28, 0x1f	; 31
    cfa6:	45 e0       	ldi	r20, 0x05	; 5
    cfa8:	d5 95       	asr	r29
    cfaa:	c7 95       	ror	r28
    cfac:	4a 95       	dec	r20
    cfae:	e1 f7       	brne	.-8      	; 0xcfa8 <_Z18menuProcModelIndexh+0x886>
    cfb0:	d1 95       	neg	r29
    cfb2:	c1 95       	neg	r28
    cfb4:	d1 09       	sbc	r29, r1

			lcd_vline (xv, yv - 3, 7);
    cfb6:	6c 2f       	mov	r22, r28
    cfb8:	63 5e       	subi	r22, 0xE3	; 227
    cfba:	47 e0       	ldi	r20, 0x07	; 7
    cfbc:	8c e5       	ldi	r24, 0x5C	; 92
    cfbe:	8e 0d       	add	r24, r14
    cfc0:	0e 94 d5 27 	call	0x4faa	; 0x4faa <_Z9lcd_vlinehha>

			lcd_outdez (19 * FW, 6 * FH, x512 * 25 / ((signed) RESXu / 4));
			lcd_outdez (14 * FW, 1 * FH, y512 * 25 / ((signed) RESXu / 4));

			int8_t xv = (x512 * WCHART + RESX / 2) / RESX + XD;
			int8_t yv = Y0 - (y512 * WCHART + RESX / 2) / RESX;
    cfc4:	6c 2f       	mov	r22, r28
    cfc6:	60 5e       	subi	r22, 0xE0	; 224

			lcd_vline (xv, yv - 3, 7);
			lcd_hline (xv - 3, yv, 7);
    cfc8:	47 e0       	ldi	r20, 0x07	; 7
    cfca:	89 e5       	ldi	r24, 0x59	; 89
    cfcc:	8e 0d       	add	r24, r14
    cfce:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <_Z9lcd_hlinehha>

			plotType = PLOT_XOR;
    cfd2:	10 92 cd 06 	sts	0x06CD, r1

		}
			break;
    cfd6:	e5 c5       	rjmp	.+3018   	; 0xdba2 <_Z18menuProcModelIndexh+0x1480>

		case M_PROTOCOL: {
			uint8_t dataItems = 4;
			if (g_model.protocol == PROTO_PXX) {
    cfd8:	80 91 30 02 	lds	r24, 0x0230
    cfdc:	8f 70       	andi	r24, 0x0F	; 15
    cfde:	81 30       	cpi	r24, 0x01	; 1
    cfe0:	21 f0       	breq	.+8      	; 0xcfea <_Z18menuProcModelIndexh+0x8c8>
				dataItems = 6;
			}
			if (g_model.protocol == PROTO_DSM2) {
    cfe2:	82 30       	cpi	r24, 0x02	; 2
    cfe4:	21 f0       	breq	.+8      	; 0xcfee <_Z18menuProcModelIndexh+0x8cc>

		}
			break;

		case M_PROTOCOL: {
			uint8_t dataItems = 4;
    cfe6:	c4 e0       	ldi	r28, 0x04	; 4
    cfe8:	03 c0       	rjmp	.+6      	; 0xcff0 <_Z18menuProcModelIndexh+0x8ce>
			if (g_model.protocol == PROTO_PXX) {
				dataItems = 6;
    cfea:	c6 e0       	ldi	r28, 0x06	; 6
    cfec:	01 c0       	rjmp	.+2      	; 0xcff0 <_Z18menuProcModelIndexh+0x8ce>
			}
			if (g_model.protocol == PROTO_DSM2) {
				dataItems = 3;
    cfee:	c3 e0       	ldi	r28, 0x03	; 3
			}

			TITLEP (Str_Protocol);
    cff0:	8f e0       	ldi	r24, 0x0F	; 15
    cff2:	9d e1       	ldi	r25, 0x1D	; 29
    cff4:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>
			IlinesCount = dataItems;
    cff8:	c0 93 5b 0e 	sts	0x0E5B, r28

			uint8_t blink = InverseBlink;
    cffc:	10 91 9f 0d 	lds	r17, 0x0D9F
			uint8_t subSub = g_posHorz;
    d000:	d0 91 7e 0d 	lds	r29, 0x0D7E
			uint8_t subN = 0;

			uint8_t attr = 0;
			lcd_puts_Pleft (y, PSTR(STR_1ST_CHAN_PROTO));
    d004:	6f e6       	ldi	r22, 0x6F	; 111
    d006:	73 e1       	ldi	r23, 0x13	; 19
    d008:	88 e0       	ldi	r24, 0x08	; 8
    d00a:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
			if (sub == subN) {
    d00e:	f1 10       	cpse	r15, r1
    d010:	13 c0       	rjmp	.+38     	; 0xd038 <_Z18menuProcModelIndexh+0x916>
				attr = INVERS;
				CHECK_INCDEC_H_MODELVAR_0(g_model.ppmStart, 7);
    d012:	80 91 32 02 	lds	r24, 0x0232
    d016:	67 e0       	ldi	r22, 0x07	; 7
    d018:	82 95       	swap	r24
    d01a:	86 95       	lsr	r24
    d01c:	87 70       	andi	r24, 0x07	; 7
    d01e:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    d022:	82 95       	swap	r24
    d024:	88 0f       	add	r24, r24
    d026:	80 7e       	andi	r24, 0xE0	; 224
    d028:	90 91 32 02 	lds	r25, 0x0232
    d02c:	9f 71       	andi	r25, 0x1F	; 31
    d02e:	98 2b       	or	r25, r24
    d030:	90 93 32 02 	sts	0x0232, r25
			uint8_t subN = 0;

			uint8_t attr = 0;
			lcd_puts_Pleft (y, PSTR(STR_1ST_CHAN_PROTO));
			if (sub == subN) {
				attr = INVERS;
    d034:	21 e0       	ldi	r18, 0x01	; 1
    d036:	01 c0       	rjmp	.+2      	; 0xd03a <_Z18menuProcModelIndexh+0x918>

			uint8_t blink = InverseBlink;
			uint8_t subSub = g_posHorz;
			uint8_t subN = 0;

			uint8_t attr = 0;
    d038:	20 e0       	ldi	r18, 0x00	; 0
			lcd_puts_Pleft (y, PSTR(STR_1ST_CHAN_PROTO));
			if (sub == subN) {
				attr = INVERS;
				CHECK_INCDEC_H_MODELVAR_0(g_model.ppmStart, 7);
			}
			lcd_putcAtt (19 * FW, y, '1' + g_model.ppmStart, attr);
    d03a:	40 91 32 02 	lds	r20, 0x0232
    d03e:	42 95       	swap	r20
    d040:	46 95       	lsr	r20
    d042:	47 70       	andi	r20, 0x07	; 7
    d044:	4f 5c       	subi	r20, 0xCF	; 207
    d046:	68 e0       	ldi	r22, 0x08	; 8
    d048:	82 e7       	ldi	r24, 0x72	; 114
    d04a:	0e 94 31 26 	call	0x4c62	; 0x4c62 <_Z11lcd_putcAtthhch>
			y += FH;
			subN++;

			uint8_t protocol = g_model.protocol;
    d04e:	c0 91 30 02 	lds	r28, 0x0230
    d052:	cf 70       	andi	r28, 0x0F	; 15
			uint8_t cols = 0;
			lcd_putsAttIdx (6 * FW, y, PSTR(PROT_STR), protocol,
					(sub == subN && subSub == 0 ? blink : 0));
    d054:	21 e0       	ldi	r18, 0x01	; 1
    d056:	f2 12       	cpse	r15, r18
    d058:	02 c0       	rjmp	.+4      	; 0xd05e <_Z18menuProcModelIndexh+0x93c>
    d05a:	dd 23       	and	r29, r29
    d05c:	11 f0       	breq	.+4      	; 0xd062 <_Z18menuProcModelIndexh+0x940>
    d05e:	00 e0       	ldi	r16, 0x00	; 0
    d060:	01 c0       	rjmp	.+2      	; 0xd064 <_Z18menuProcModelIndexh+0x942>
    d062:	01 2f       	mov	r16, r17
    d064:	2c 2f       	mov	r18, r28
    d066:	4f e4       	ldi	r20, 0x4F	; 79
    d068:	53 e1       	ldi	r21, 0x13	; 19
    d06a:	60 e1       	ldi	r22, 0x10	; 16
    d06c:	84 e2       	ldi	r24, 0x24	; 36
    d06e:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
			if ( (protocol == PROTO_PPM) || (protocol == PROTO_PPM16)
    d072:	cc 23       	and	r28, r28
    d074:	29 f0       	breq	.+10     	; 0xd080 <_Z18menuProcModelIndexh+0x95e>
    d076:	8d e0       	ldi	r24, 0x0D	; 13
    d078:	8c 0f       	add	r24, r28
    d07a:	8f 70       	andi	r24, 0x0F	; 15
    d07c:	82 30       	cpi	r24, 0x02	; 2
    d07e:	60 f5       	brcc	.+88     	; 0xd0d8 <_Z18menuProcModelIndexh+0x9b6>
					|| (protocol == PROTO_PPMSIM)) {
				uint8_t x;
				cols = 2;
				lcd_puts_Pleft (y, PSTR(STR_23_US));
    d080:	6b e4       	ldi	r22, 0x4B	; 75
    d082:	73 e1       	ldi	r23, 0x13	; 19
    d084:	80 e1       	ldi	r24, 0x10	; 16
    d086:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
				x = 12 * FW;
				lcd_putsAttIdx (x, y, PSTR(STR_PPMCHANNELS), (g_model.ppmNCH + 2),
						(sub == subN && subSub == 1 ? blink : 0));
    d08a:	81 e0       	ldi	r24, 0x01	; 1
    d08c:	f8 12       	cpse	r15, r24
    d08e:	02 c0       	rjmp	.+4      	; 0xd094 <_Z18menuProcModelIndexh+0x972>
    d090:	d1 30       	cpi	r29, 0x01	; 1
    d092:	11 f0       	breq	.+4      	; 0xd098 <_Z18menuProcModelIndexh+0x976>
    d094:	00 e0       	ldi	r16, 0x00	; 0
    d096:	01 c0       	rjmp	.+2      	; 0xd09a <_Z18menuProcModelIndexh+0x978>
    d098:	01 2f       	mov	r16, r17
    d09a:	20 91 31 02 	lds	r18, 0x0231
    d09e:	2e 5f       	subi	r18, 0xFE	; 254
    d0a0:	4d e2       	ldi	r20, 0x2D	; 45
    d0a2:	53 e1       	ldi	r21, 0x13	; 19
    d0a4:	60 e1       	ldi	r22, 0x10	; 16
    d0a6:	88 e4       	ldi	r24, 0x48	; 72
    d0a8:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
				lcd_outdezAtt (x + 7 * FW - 2, y, (g_model.ppmDelay * 50) + 300,
						(sub == subN && subSub == 2 ? blink : 0));
    d0ac:	91 e0       	ldi	r25, 0x01	; 1
    d0ae:	f9 12       	cpse	r15, r25
    d0b0:	02 c0       	rjmp	.+4      	; 0xd0b6 <_Z18menuProcModelIndexh+0x994>
    d0b2:	d2 30       	cpi	r29, 0x02	; 2
    d0b4:	11 f0       	breq	.+4      	; 0xd0ba <_Z18menuProcModelIndexh+0x998>
    d0b6:	20 e0       	ldi	r18, 0x00	; 0
    d0b8:	01 c0       	rjmp	.+2      	; 0xd0bc <_Z18menuProcModelIndexh+0x99a>
    d0ba:	21 2f       	mov	r18, r17
				cols = 2;
				lcd_puts_Pleft (y, PSTR(STR_23_US));
				x = 12 * FW;
				lcd_putsAttIdx (x, y, PSTR(STR_PPMCHANNELS), (g_model.ppmNCH + 2),
						(sub == subN && subSub == 1 ? blink : 0));
				lcd_outdezAtt (x + 7 * FW - 2, y, (g_model.ppmDelay * 50) + 300,
    d0bc:	40 91 34 02 	lds	r20, 0x0234
    d0c0:	e2 e3       	ldi	r30, 0x32	; 50
    d0c2:	4e 02       	muls	r20, r30
    d0c4:	a0 01       	movw	r20, r0
    d0c6:	11 24       	eor	r1, r1
						(sub == subN && subSub == 2 ? blink : 0));
    d0c8:	44 5d       	subi	r20, 0xD4	; 212
    d0ca:	5e 4f       	sbci	r21, 0xFE	; 254
    d0cc:	60 e1       	ldi	r22, 0x10	; 16
    d0ce:	80 e7       	ldi	r24, 0x70	; 112
    d0d0:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
			lcd_putsAttIdx (6 * FW, y, PSTR(PROT_STR), protocol,
					(sub == subN && subSub == 0 ? blink : 0));
			if ( (protocol == PROTO_PPM) || (protocol == PROTO_PPM16)
					|| (protocol == PROTO_PPMSIM)) {
				uint8_t x;
				cols = 2;
    d0d4:	42 e0       	ldi	r20, 0x02	; 2
				lcd_puts_Pleft (y, PSTR(STR_23_US));
				x = 12 * FW;
				lcd_putsAttIdx (x, y, PSTR(STR_PPMCHANNELS), (g_model.ppmNCH + 2),
						(sub == subN && subSub == 1 ? blink : 0));
				lcd_outdezAtt (x + 7 * FW - 2, y, (g_model.ppmDelay * 50) + 300,
						(sub == subN && subSub == 2 ? blink : 0));
    d0d6:	14 c0       	rjmp	.+40     	; 0xd100 <_Z18menuProcModelIndexh+0x9de>
			} else // if (protocol == PROTO_PXX) || DSM2
			{
				cols = 1;
				lcd_xlabel_decimal (y, PSTR(STR_13_RXNUM), g_model.ppmNCH,
						(sub == subN && subSub == 1 ? blink : 0), 21 * FW);
    d0d8:	f1 e0       	ldi	r31, 0x01	; 1
    d0da:	ff 12       	cpse	r15, r31
    d0dc:	02 c0       	rjmp	.+4      	; 0xd0e2 <_Z18menuProcModelIndexh+0x9c0>
    d0de:	d1 30       	cpi	r29, 0x01	; 1
    d0e0:	11 f0       	breq	.+4      	; 0xd0e6 <_Z18menuProcModelIndexh+0x9c4>
    d0e2:	20 e0       	ldi	r18, 0x00	; 0
    d0e4:	01 c0       	rjmp	.+2      	; 0xd0e8 <_Z18menuProcModelIndexh+0x9c6>
    d0e6:	21 2f       	mov	r18, r17
    d0e8:	40 91 31 02 	lds	r20, 0x0231
    d0ec:	55 27       	eor	r21, r21
    d0ee:	47 fd       	sbrc	r20, 7
    d0f0:	50 95       	com	r21
    d0f2:	0e e7       	ldi	r16, 0x7E	; 126
    d0f4:	66 e2       	ldi	r22, 0x26	; 38
    d0f6:	73 e1       	ldi	r23, 0x13	; 19
    d0f8:	80 e1       	ldi	r24, 0x10	; 16
    d0fa:	0e 94 1b 3a 	call	0x7436	; 0x7436 <_Z18lcd_xlabel_decimalhPKcjhh>
						(sub == subN && subSub == 1 ? blink : 0));
				lcd_outdezAtt (x + 7 * FW - 2, y, (g_model.ppmDelay * 50) + 300,
						(sub == subN && subSub == 2 ? blink : 0));
			} else // if (protocol == PROTO_PXX) || DSM2
			{
				cols = 1;
    d0fe:	41 e0       	ldi	r20, 0x01	; 1
				lcd_xlabel_decimal (y, PSTR(STR_13_RXNUM), g_model.ppmNCH,
						(sub == subN && subSub == 1 ? blink : 0), 21 * FW);
			}

			if (sub == subN) {
    d100:	21 e0       	ldi	r18, 0x01	; 1
    d102:	f2 12       	cpse	r15, r18
    d104:	51 c0       	rjmp	.+162    	; 0xd1a8 <_Z18menuProcModelIndexh+0xa86>
				Columns = &ProgColumns[cols];
    d106:	50 e0       	ldi	r21, 0x00	; 0
    d108:	4d 5f       	subi	r20, 0xFD	; 253
    d10a:	52 4e       	sbci	r21, 0xE2	; 226
    d10c:	50 93 57 0e 	sts	0x0E57, r21
    d110:	40 93 56 0e 	sts	0x0E56, r20
				if (s_editing) {
    d114:	80 91 a4 0d 	lds	r24, 0x0DA4
    d118:	88 23       	and	r24, r24
    d11a:	09 f4       	brne	.+2      	; 0xd11e <_Z18menuProcModelIndexh+0x9fc>
    d11c:	45 c0       	rjmp	.+138    	; 0xd1a8 <_Z18menuProcModelIndexh+0xa86>
					uint8_t prot_max = PROT_MAX;

					if (g_eeGeneral.enablePpmsim == 0) {
    d11e:	80 91 2e 06 	lds	r24, 0x062E
    d122:	85 ff       	sbrs	r24, 5
    d124:	02 c0       	rjmp	.+4      	; 0xd12a <_Z18menuProcModelIndexh+0xa08>
			}

			if (sub == subN) {
				Columns = &ProgColumns[cols];
				if (s_editing) {
					uint8_t prot_max = PROT_MAX;
    d126:	64 e0       	ldi	r22, 0x04	; 4
    d128:	01 c0       	rjmp	.+2      	; 0xd12c <_Z18menuProcModelIndexh+0xa0a>

					if (g_eeGeneral.enablePpmsim == 0) {
						prot_max -= 1;
    d12a:	63 e0       	ldi	r22, 0x03	; 3
					}
					switch (subSub) {
    d12c:	d1 30       	cpi	r29, 0x01	; 1
    d12e:	89 f0       	breq	.+34     	; 0xd152 <_Z18menuProcModelIndexh+0xa30>
    d130:	18 f0       	brcs	.+6      	; 0xd138 <_Z18menuProcModelIndexh+0xa16>
    d132:	d2 30       	cpi	r29, 0x02	; 2
    d134:	21 f1       	breq	.+72     	; 0xd17e <_Z18menuProcModelIndexh+0xa5c>
    d136:	32 c0       	rjmp	.+100    	; 0xd19c <_Z18menuProcModelIndexh+0xa7a>
						case 0:
							CHECK_INCDEC_H_MODELVAR_0(g_model.protocol, prot_max);
    d138:	80 91 30 02 	lds	r24, 0x0230
    d13c:	8f 70       	andi	r24, 0x0F	; 15
    d13e:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    d142:	8f 70       	andi	r24, 0x0F	; 15
    d144:	90 91 30 02 	lds	r25, 0x0230
    d148:	90 7f       	andi	r25, 0xF0	; 240
    d14a:	98 2b       	or	r25, r24
    d14c:	90 93 30 02 	sts	0x0230, r25
							break;
    d150:	25 c0       	rjmp	.+74     	; 0xd19c <_Z18menuProcModelIndexh+0xa7a>
						case 1:
							if ( (protocol == PROTO_PPM) || (protocol == PROTO_PPM16)
    d152:	cc 23       	and	r28, r28
    d154:	29 f0       	breq	.+10     	; 0xd160 <_Z18menuProcModelIndexh+0xa3e>
    d156:	8d e0       	ldi	r24, 0x0D	; 13
    d158:	8c 0f       	add	r24, r28
    d15a:	8f 70       	andi	r24, 0x0F	; 15
    d15c:	82 30       	cpi	r24, 0x02	; 2
    d15e:	38 f4       	brcc	.+14     	; 0xd16e <_Z18menuProcModelIndexh+0xa4c>
									|| (protocol == PROTO_PPMSIM))
							CHECK_INCDEC_H_MODELVAR(g_model.ppmNCH, -2, 4);
    d160:	44 e0       	ldi	r20, 0x04	; 4
    d162:	6e ef       	ldi	r22, 0xFE	; 254
    d164:	80 91 31 02 	lds	r24, 0x0231
    d168:	0e 94 86 13 	call	0x270c	; 0x270c <_Z14checkIncDec_hmaaa>
    d16c:	05 c0       	rjmp	.+10     	; 0xd178 <_Z18menuProcModelIndexh+0xa56>
							else
							// if (protocol == PROTO_PXX) || DSM2
							CHECK_INCDEC_H_MODELVAR_0(g_model.ppmNCH, 124);
    d16e:	6c e7       	ldi	r22, 0x7C	; 124
    d170:	80 91 31 02 	lds	r24, 0x0231
    d174:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    d178:	80 93 31 02 	sts	0x0231, r24
    d17c:	0f c0       	rjmp	.+30     	; 0xd19c <_Z18menuProcModelIndexh+0xa7a>
							break;
						case 2:
							if ( (protocol == PROTO_PPM) || (protocol == PROTO_PPM16)
    d17e:	cc 23       	and	r28, r28
    d180:	29 f0       	breq	.+10     	; 0xd18c <_Z18menuProcModelIndexh+0xa6a>
    d182:	8d e0       	ldi	r24, 0x0D	; 13
    d184:	8c 0f       	add	r24, r28
    d186:	8f 70       	andi	r24, 0x0F	; 15
    d188:	82 30       	cpi	r24, 0x02	; 2
    d18a:	40 f4       	brcc	.+16     	; 0xd19c <_Z18menuProcModelIndexh+0xa7a>
									|| (protocol == PROTO_PPMSIM))
							CHECK_INCDEC_H_MODELVAR(g_model.ppmDelay, -4, 10);
    d18c:	4a e0       	ldi	r20, 0x0A	; 10
    d18e:	6c ef       	ldi	r22, 0xFC	; 252
    d190:	80 91 34 02 	lds	r24, 0x0234
    d194:	0e 94 86 13 	call	0x270c	; 0x270c <_Z14checkIncDec_hmaaa>
    d198:	80 93 34 02 	sts	0x0234, r24
							break;
					}
					if (g_model.protocol != protocol) // if change - reset ppmNCH
    d19c:	80 91 30 02 	lds	r24, 0x0230
    d1a0:	8f 70       	andi	r24, 0x0F	; 15
    d1a2:	8c 13       	cpse	r24, r28
					g_model.ppmNCH = 0;
    d1a4:	10 92 31 02 	sts	0x0231, r1
				}
			}
			y += FH;
			subN++;

			if ( (protocol == PROTO_PPM) || (protocol == PROTO_PPM16)
    d1a8:	cc 23       	and	r28, r28
    d1aa:	29 f0       	breq	.+10     	; 0xd1b6 <_Z18menuProcModelIndexh+0xa94>
    d1ac:	8d e0       	ldi	r24, 0x0D	; 13
    d1ae:	8c 0f       	add	r24, r28
    d1b0:	8f 70       	andi	r24, 0x0F	; 15
    d1b2:	82 30       	cpi	r24, 0x02	; 2
    d1b4:	e8 f5       	brcc	.+122    	; 0xd230 <_Z18menuProcModelIndexh+0xb0e>
					|| (protocol == PROTO_PPMSIM)) {
				uint8_t attr = PREC1;
				if (sub == subN) {
    d1b6:	82 e0       	ldi	r24, 0x02	; 2
    d1b8:	f8 12       	cpse	r15, r24
    d1ba:	0a c0       	rjmp	.+20     	; 0xd1d0 <_Z18menuProcModelIndexh+0xaae>
					attr = INVERS | PREC1;
					CHECK_INCDEC_H_MODELVAR(g_model.ppmFrameLength, -20, 20);
    d1bc:	44 e1       	ldi	r20, 0x14	; 20
    d1be:	6c ee       	ldi	r22, 0xEC	; 236
    d1c0:	80 91 3a 02 	lds	r24, 0x023A
    d1c4:	0e 94 86 13 	call	0x270c	; 0x270c <_Z14checkIncDec_hmaaa>
    d1c8:	80 93 3a 02 	sts	0x023A, r24

			if ( (protocol == PROTO_PPM) || (protocol == PROTO_PPM16)
					|| (protocol == PROTO_PPMSIM)) {
				uint8_t attr = PREC1;
				if (sub == subN) {
					attr = INVERS | PREC1;
    d1cc:	21 e2       	ldi	r18, 0x21	; 33
    d1ce:	01 c0       	rjmp	.+2      	; 0xd1d2 <_Z18menuProcModelIndexh+0xab0>
			y += FH;
			subN++;

			if ( (protocol == PROTO_PPM) || (protocol == PROTO_PPM16)
					|| (protocol == PROTO_PPMSIM)) {
				uint8_t attr = PREC1;
    d1d0:	20 e2       	ldi	r18, 0x20	; 32
				if (sub == subN) {
					attr = INVERS | PREC1;
					CHECK_INCDEC_H_MODELVAR(g_model.ppmFrameLength, -20, 20);
				}
				lcd_xlabel_decimal (y, PSTR(STR_PPMFRAME_MSEC),
						(int16_t) g_model.ppmFrameLength * 5 + 225, attr, 13 * FW - 2);
    d1d2:	40 91 3a 02 	lds	r20, 0x023A
    d1d6:	95 e0       	ldi	r25, 0x05	; 5
    d1d8:	49 02       	muls	r20, r25
    d1da:	a0 01       	movw	r20, r0
    d1dc:	11 24       	eor	r1, r1
    d1de:	4f 51       	subi	r20, 0x1F	; 31
    d1e0:	5f 4f       	sbci	r21, 0xFF	; 255
    d1e2:	0c e4       	ldi	r16, 0x4C	; 76
    d1e4:	67 e1       	ldi	r22, 0x17	; 23
    d1e6:	73 e1       	ldi	r23, 0x13	; 19
    d1e8:	88 e1       	ldi	r24, 0x18	; 24
    d1ea:	0e 94 1b 3a 	call	0x7436	; 0x7436 <_Z18lcd_xlabel_decimalhPKcjhh>
				y += FH;
				subN++;

				attr = 0;
				lcd_puts_Pleft (y, PSTR(STR_SHIFT_SEL));
    d1ee:	6d e0       	ldi	r22, 0x0D	; 13
    d1f0:	73 e1       	ldi	r23, 0x13	; 19
    d1f2:	80 e2       	ldi	r24, 0x20	; 32
    d1f4:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
				uint8_t ppol = g_model.pulsePol;
    d1f8:	80 91 37 02 	lds	r24, 0x0237
    d1fc:	81 70       	andi	r24, 0x01	; 1
				if (sub == subN) {
    d1fe:	e3 e0       	ldi	r30, 0x03	; 3
    d200:	fe 12       	cpse	r15, r30
    d202:	0b c0       	rjmp	.+22     	; 0xd21a <_Z18menuProcModelIndexh+0xaf8>
					attr = INVERS;
					CHECK_INCDEC_H_MODELVAR_0(ppol, 1);
    d204:	61 e0       	ldi	r22, 0x01	; 1
    d206:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
					g_model.pulsePol = ppol;
    d20a:	90 91 37 02 	lds	r25, 0x0237
    d20e:	80 fb       	bst	r24, 0
    d210:	90 f9       	bld	r25, 0
    d212:	90 93 37 02 	sts	0x0237, r25

				attr = 0;
				lcd_puts_Pleft (y, PSTR(STR_SHIFT_SEL));
				uint8_t ppol = g_model.pulsePol;
				if (sub == subN) {
					attr = INVERS;
    d216:	01 e0       	ldi	r16, 0x01	; 1
    d218:	01 c0       	rjmp	.+2      	; 0xd21c <_Z18menuProcModelIndexh+0xafa>
				lcd_xlabel_decimal (y, PSTR(STR_PPMFRAME_MSEC),
						(int16_t) g_model.ppmFrameLength * 5 + 225, attr, 13 * FW - 2);
				y += FH;
				subN++;

				attr = 0;
    d21a:	00 e0       	ldi	r16, 0x00	; 0
				if (sub == subN) {
					attr = INVERS;
					CHECK_INCDEC_H_MODELVAR_0(ppol, 1);
					g_model.pulsePol = ppol;
				}
				lcd_putsAttIdx (17 * FW, y, PSTR(STR_POS_NEG), ppol, attr);
    d21c:	28 2f       	mov	r18, r24
    d21e:	45 e0       	ldi	r20, 0x05	; 5
    d220:	53 e1       	ldi	r21, 0x13	; 19
    d222:	60 e2       	ldi	r22, 0x20	; 32
    d224:	86 e6       	ldi	r24, 0x66	; 102
    d226:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
				y += FH;
				subN++;
    d22a:	14 e0       	ldi	r17, 0x04	; 4
					attr = INVERS;
					CHECK_INCDEC_H_MODELVAR_0(ppol, 1);
					g_model.pulsePol = ppol;
				}
				lcd_putsAttIdx (17 * FW, y, PSTR(STR_POS_NEG), ppol, attr);
				y += FH;
    d22c:	d8 e2       	ldi	r29, 0x28	; 40
    d22e:	02 c0       	rjmp	.+4      	; 0xd234 <_Z18menuProcModelIndexh+0xb12>
					if (g_model.protocol != protocol) // if change - reset ppmNCH
					g_model.ppmNCH = 0;
				}
			}
			y += FH;
			subN++;
    d230:	12 e0       	ldi	r17, 0x02	; 2
					}
					if (g_model.protocol != protocol) // if change - reset ppmNCH
					g_model.ppmNCH = 0;
				}
			}
			y += FH;
    d232:	d8 e1       	ldi	r29, 0x18	; 24
				}
				lcd_putsAttIdx (17 * FW, y, PSTR(STR_POS_NEG), ppol, attr);
				y += FH;
				subN++;
			}
			if (protocol == PROTO_DSM2) {
    d234:	c2 30       	cpi	r28, 0x02	; 2
    d236:	31 f5       	brne	.+76     	; 0xd284 <_Z18menuProcModelIndexh+0xb62>
				uint8_t attr = 0;
				lcd_puts_Pleft (y, PSTR(STR_DSM_TYPE));
    d238:	6c ef       	ldi	r22, 0xFC	; 252
    d23a:	72 e1       	ldi	r23, 0x12	; 18
    d23c:	8d 2f       	mov	r24, r29
    d23e:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
				uint8_t ltype = g_model.sub_protocol;
    d242:	80 91 30 02 	lds	r24, 0x0230
    d246:	82 95       	swap	r24
    d248:	86 95       	lsr	r24
    d24a:	86 95       	lsr	r24
    d24c:	83 70       	andi	r24, 0x03	; 3
				if (sub == subN) {
    d24e:	f1 12       	cpse	r15, r17
    d250:	05 c0       	rjmp	.+10     	; 0xd25c <_Z18menuProcModelIndexh+0xb3a>
					attr = INVERS;
					CHECK_INCDEC_H_MODELVAR_0(ltype, 2);
    d252:	62 e0       	ldi	r22, 0x02	; 2
    d254:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
			if (protocol == PROTO_DSM2) {
				uint8_t attr = 0;
				lcd_puts_Pleft (y, PSTR(STR_DSM_TYPE));
				uint8_t ltype = g_model.sub_protocol;
				if (sub == subN) {
					attr = INVERS;
    d258:	01 e0       	ldi	r16, 0x01	; 1
    d25a:	01 c0       	rjmp	.+2      	; 0xd25e <_Z18menuProcModelIndexh+0xb3c>
				lcd_putsAttIdx (17 * FW, y, PSTR(STR_POS_NEG), ppol, attr);
				y += FH;
				subN++;
			}
			if (protocol == PROTO_DSM2) {
				uint8_t attr = 0;
    d25c:	00 e0       	ldi	r16, 0x00	; 0
				uint8_t ltype = g_model.sub_protocol;
				if (sub == subN) {
					attr = INVERS;
					CHECK_INCDEC_H_MODELVAR_0(ltype, 2);
				}
				g_model.sub_protocol = ltype;
    d25e:	28 2f       	mov	r18, r24
    d260:	22 95       	swap	r18
    d262:	22 0f       	add	r18, r18
    d264:	22 0f       	add	r18, r18
    d266:	20 7c       	andi	r18, 0xC0	; 192
    d268:	90 91 30 02 	lds	r25, 0x0230
    d26c:	9f 73       	andi	r25, 0x3F	; 63
    d26e:	92 2b       	or	r25, r18
    d270:	90 93 30 02 	sts	0x0230, r25
				lcd_putsAttIdx (10 * FW, y, PSTR(DSM2_STR), ltype, attr);
    d274:	28 2f       	mov	r18, r24
    d276:	4f ed       	ldi	r20, 0xDF	; 223
    d278:	52 e1       	ldi	r21, 0x12	; 18
    d27a:	6d 2f       	mov	r22, r29
    d27c:	8c e3       	ldi	r24, 0x3C	; 60
    d27e:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
    d282:	8f c4       	rjmp	.+2334   	; 0xdba2 <_Z18menuProcModelIndexh+0x1480>
				y += FH;
				subN++;
			}

			if (protocol == PROTO_PXX) {
    d284:	c1 30       	cpi	r28, 0x01	; 1
    d286:	09 f0       	breq	.+2      	; 0xd28a <_Z18menuProcModelIndexh+0xb68>
    d288:	8c c4       	rjmp	.+2328   	; 0xdba2 <_Z18menuProcModelIndexh+0x1480>
				lcd_puts_Pleft (y, PSTR(" Type\037 Country\037Bind\037Range"));
    d28a:	65 ec       	ldi	r22, 0xC5	; 197
    d28c:	72 e1       	ldi	r23, 0x12	; 18
    d28e:	8d 2f       	mov	r24, r29
    d290:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>

				uint8_t attr = 0;
				uint8_t ltype = g_model.sub_protocol;
    d294:	80 91 30 02 	lds	r24, 0x0230
    d298:	82 95       	swap	r24
    d29a:	86 95       	lsr	r24
    d29c:	86 95       	lsr	r24
    d29e:	83 70       	andi	r24, 0x03	; 3
				if (sub == subN) {
    d2a0:	f1 12       	cpse	r15, r17
    d2a2:	05 c0       	rjmp	.+10     	; 0xd2ae <_Z18menuProcModelIndexh+0xb8c>
					attr = INVERS;
					CHECK_INCDEC_H_MODELVAR_0(ltype, 2);
    d2a4:	62 e0       	ldi	r22, 0x02	; 2
    d2a6:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
				lcd_puts_Pleft (y, PSTR(" Type\037 Country\037Bind\037Range"));

				uint8_t attr = 0;
				uint8_t ltype = g_model.sub_protocol;
				if (sub == subN) {
					attr = INVERS;
    d2aa:	01 e0       	ldi	r16, 0x01	; 1
    d2ac:	01 c0       	rjmp	.+2      	; 0xd2b0 <_Z18menuProcModelIndexh+0xb8e>
			}

			if (protocol == PROTO_PXX) {
				lcd_puts_Pleft (y, PSTR(" Type\037 Country\037Bind\037Range"));

				uint8_t attr = 0;
    d2ae:	00 e0       	ldi	r16, 0x00	; 0
				uint8_t ltype = g_model.sub_protocol;
				if (sub == subN) {
					attr = INVERS;
					CHECK_INCDEC_H_MODELVAR_0(ltype, 2);
				}
				g_model.sub_protocol = ltype;
    d2b0:	28 2f       	mov	r18, r24
    d2b2:	22 95       	swap	r18
    d2b4:	22 0f       	add	r18, r18
    d2b6:	22 0f       	add	r18, r18
    d2b8:	20 7c       	andi	r18, 0xC0	; 192
    d2ba:	90 91 30 02 	lds	r25, 0x0230
    d2be:	9f 73       	andi	r25, 0x3F	; 63
    d2c0:	92 2b       	or	r25, r18
    d2c2:	90 93 30 02 	sts	0x0230, r25
				lcd_putsAttIdx (10 * FW, y, PSTR("\003D16D8 LRP"), ltype, attr);
    d2c6:	28 2f       	mov	r18, r24
    d2c8:	4a eb       	ldi	r20, 0xBA	; 186
    d2ca:	52 e1       	ldi	r21, 0x12	; 18
    d2cc:	6d 2f       	mov	r22, r29
    d2ce:	8c e3       	ldi	r24, 0x3C	; 60
    d2d0:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
				y += FH;
    d2d4:	c8 e0       	ldi	r28, 0x08	; 8
    d2d6:	cd 0f       	add	r28, r29
				subN++;

				attr = 0;
				uint8_t lcountry = g_model.country;
    d2d8:	80 91 30 02 	lds	r24, 0x0230
    d2dc:	82 95       	swap	r24
    d2de:	83 70       	andi	r24, 0x03	; 3
					CHECK_INCDEC_H_MODELVAR_0(ltype, 2);
				}
				g_model.sub_protocol = ltype;
				lcd_putsAttIdx (10 * FW, y, PSTR("\003D16D8 LRP"), ltype, attr);
				y += FH;
				subN++;
    d2e0:	91 e0       	ldi	r25, 0x01	; 1
    d2e2:	91 0f       	add	r25, r17

				attr = 0;
				uint8_t lcountry = g_model.country;
				if (sub == subN) {
    d2e4:	f9 12       	cpse	r15, r25
    d2e6:	05 c0       	rjmp	.+10     	; 0xd2f2 <_Z18menuProcModelIndexh+0xbd0>
					attr = INVERS;
					CHECK_INCDEC_H_MODELVAR_0(lcountry, 2);
    d2e8:	62 e0       	ldi	r22, 0x02	; 2
    d2ea:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
				subN++;

				attr = 0;
				uint8_t lcountry = g_model.country;
				if (sub == subN) {
					attr = INVERS;
    d2ee:	01 e0       	ldi	r16, 0x01	; 1
    d2f0:	01 c0       	rjmp	.+2      	; 0xd2f4 <_Z18menuProcModelIndexh+0xbd2>
				g_model.sub_protocol = ltype;
				lcd_putsAttIdx (10 * FW, y, PSTR("\003D16D8 LRP"), ltype, attr);
				y += FH;
				subN++;

				attr = 0;
    d2f2:	00 e0       	ldi	r16, 0x00	; 0
				uint8_t lcountry = g_model.country;
				if (sub == subN) {
					attr = INVERS;
					CHECK_INCDEC_H_MODELVAR_0(lcountry, 2);
				}
				g_model.country = lcountry;
    d2f4:	28 2f       	mov	r18, r24
    d2f6:	23 70       	andi	r18, 0x03	; 3
    d2f8:	22 95       	swap	r18
    d2fa:	20 7f       	andi	r18, 0xF0	; 240
    d2fc:	90 91 30 02 	lds	r25, 0x0230
    d300:	9f 7c       	andi	r25, 0xCF	; 207
    d302:	92 2b       	or	r25, r18
    d304:	90 93 30 02 	sts	0x0230, r25
				lcd_putsAttIdx (10 * FW, y, PSTR("\003AmeJapEur"), lcountry, attr);
    d308:	28 2f       	mov	r18, r24
    d30a:	4f ea       	ldi	r20, 0xAF	; 175
    d30c:	52 e1       	ldi	r21, 0x12	; 18
    d30e:	6c 2f       	mov	r22, r28
    d310:	8c e3       	ldi	r24, 0x3C	; 60
    d312:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
				y += FH;
				subN++;
    d316:	82 e0       	ldi	r24, 0x02	; 2
    d318:	81 0f       	add	r24, r17

				if (sub == subN) {
    d31a:	f8 12       	cpse	r15, r24
    d31c:	13 c0       	rjmp	.+38     	; 0xd344 <_Z18menuProcModelIndexh+0xc22>
					uint8_t newFlag = 0;
					lcd_char_inverse (0, y, 4 * FW, 0);
    d31e:	20 e0       	ldi	r18, 0x00	; 0
    d320:	48 e1       	ldi	r20, 0x18	; 24
    d322:	60 e1       	ldi	r22, 0x10	; 16
    d324:	6d 0f       	add	r22, r29
    d326:	80 e0       	ldi	r24, 0x00	; 0
    d328:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <_Z16lcd_char_inversehhhh>
					newFlag = PXX_BIND;
					if (event == EVT_KEY_LONG(KEY_MENU)) {
    d32c:	f0 e8       	ldi	r31, 0x80	; 128
    d32e:	ef 12       	cpse	r14, r31
    d330:	07 c0       	rjmp	.+14     	; 0xd340 <_Z18menuProcModelIndexh+0xc1e>
						pxxFlag = newFlag;		    	//send bind code or range check code
    d332:	81 e0       	ldi	r24, 0x01	; 1
    d334:	80 93 0b 0b 	sts	0x0B0B, r24
						pushMenu (menuRangeBind);
    d338:	8e e3       	ldi	r24, 0x3E	; 62
    d33a:	95 e3       	ldi	r25, 0x35	; 53
    d33c:	0e 94 ab 18 	call	0x3156	; 0x3156 <_Z8pushMenuPFvhE>
					}
					s_editMode = 0;
    d340:	10 92 a5 0d 	sts	0x0DA5, r1
				}
				y += FH;
				subN++;
    d344:	1d 5f       	subi	r17, 0xFD	; 253

				if (sub == subN) {
    d346:	f1 12       	cpse	r15, r17
    d348:	2c c4       	rjmp	.+2136   	; 0xdba2 <_Z18menuProcModelIndexh+0x1480>
						pxxFlag = newFlag;		    	//send bind code or range check code
						pushMenu (menuRangeBind);
					}
					s_editMode = 0;
				}
				y += FH;
    d34a:	68 e1       	ldi	r22, 0x18	; 24
    d34c:	6d 0f       	add	r22, r29
				subN++;

				if (sub == subN) {
					uint8_t newFlag = 0;
					lcd_char_inverse (0, y, 5 * FW, 0);
    d34e:	20 e0       	ldi	r18, 0x00	; 0
    d350:	4e e1       	ldi	r20, 0x1E	; 30
    d352:	80 e0       	ldi	r24, 0x00	; 0
    d354:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <_Z16lcd_char_inversehhhh>
					newFlag = PXX_RANGE_CHECK;
					if (event == EVT_KEY_LONG(KEY_MENU)) {
    d358:	20 e8       	ldi	r18, 0x80	; 128
    d35a:	e2 12       	cpse	r14, r18
    d35c:	07 c0       	rjmp	.+14     	; 0xd36c <_Z18menuProcModelIndexh+0xc4a>
						pxxFlag = newFlag;		    	//send bind code or range check code
    d35e:	80 e2       	ldi	r24, 0x20	; 32
    d360:	80 93 0b 0b 	sts	0x0B0B, r24
						pushMenu (menuRangeBind);
    d364:	8e e3       	ldi	r24, 0x3E	; 62
    d366:	95 e3       	ldi	r25, 0x35	; 53
    d368:	0e 94 ab 18 	call	0x3156	; 0x3156 <_Z8pushMenuPFvhE>
					}
					s_editMode = 0;
    d36c:	10 92 a5 0d 	sts	0x0DA5, r1
    d370:	18 c4       	rjmp	.+2096   	; 0xdba2 <_Z18menuProcModelIndexh+0x1480>
	}
}

static void menuProcSwitches (uint8_t sub)  //Issue 78
		{
	TITLEP (PSTR(STR_CUST_SWITCH));
    d372:	8d e5       	ldi	r24, 0x5D	; 93
    d374:	92 e1       	ldi	r25, 0x12	; 18
    d376:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>

#if defined(CPUM128) || defined(CPUM2561)
	IlinesCount = NUM_CSW+EXTRA_CSW+1-1;
#else
	IlinesCount = NUM_CSW + 1 - 1;
    d37a:	8c e0       	ldi	r24, 0x0C	; 12
    d37c:	80 93 5b 0e 	sts	0x0E5B, r24
#endif
	Columns = &ProgColumns[COLUMNS_3];
    d380:	85 e0       	ldi	r24, 0x05	; 5
    d382:	9d e1       	ldi	r25, 0x1D	; 29
    d384:	90 93 57 0e 	sts	0x0E57, r25
    d388:	80 93 56 0e 	sts	0x0E56, r24
	uint8_t y = 0;
	uint8_t k = 0;
	uint8_t subSub = g_posHorz;
    d38c:	d0 90 7e 0d 	lds	r13, 0x0D7E
	uint8_t t_pgOfs;

	t_pgOfs = evalOffset (sub, 6);
    d390:	66 e0       	ldi	r22, 0x06	; 6
    d392:	8f 2d       	mov	r24, r15
    d394:	0e 94 09 5d 	call	0xba12	; 0xba12 <_Z10evalOffsetah>
    d398:	b8 2e       	mov	r11, r24
    d39a:	18 e0       	ldi	r17, 0x08	; 8
	for (uint8_t i = 0; i < 7; i++) {
		y = (i + 1) * FH;
		k = i + t_pgOfs;

		uint8_t attr = (sub == k ? InverseBlink : 0);
    d39c:	fb 10       	cpse	r15, r11
    d39e:	03 c0       	rjmp	.+6      	; 0xd3a6 <_Z18menuProcModelIndexh+0xc84>
    d3a0:	a0 90 9f 0d 	lds	r10, 0x0D9F
    d3a4:	01 c0       	rjmp	.+2      	; 0xd3a8 <_Z18menuProcModelIndexh+0xc86>
    d3a6:	a1 2c       	mov	r10, r1

		lcd_putc (0, y, 'L');
    d3a8:	4c e4       	ldi	r20, 0x4C	; 76
    d3aa:	61 2f       	mov	r22, r17
    d3ac:	80 e0       	ldi	r24, 0x00	; 0
    d3ae:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <_Z8lcd_putchhc>
		lcd_putc ( FW - 1, y, k + (k > 8 ? 'A' - 9 : '1'));
    d3b2:	88 e0       	ldi	r24, 0x08	; 8
    d3b4:	8b 15       	cp	r24, r11
    d3b6:	10 f4       	brcc	.+4      	; 0xd3bc <_Z18menuProcModelIndexh+0xc9a>
    d3b8:	48 e3       	ldi	r20, 0x38	; 56
    d3ba:	01 c0       	rjmp	.+2      	; 0xd3be <_Z18menuProcModelIndexh+0xc9c>
    d3bc:	41 e3       	ldi	r20, 0x31	; 49
    d3be:	4b 0d       	add	r20, r11
    d3c0:	61 2f       	mov	r22, r17
    d3c2:	85 e0       	ldi	r24, 0x05	; 5
    d3c4:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <_Z8lcd_putchhc>
			continue;
		}

#endif

		uint8_t att1 = subSub == 1 ? attr : 0;
    d3c8:	91 e0       	ldi	r25, 0x01	; 1
    d3ca:	d9 16       	cp	r13, r25
    d3cc:	29 f0       	breq	.+10     	; 0xd3d8 <_Z18menuProcModelIndexh+0xcb6>
		uint8_t att2 = subSub == 2 ? attr : 0;
    d3ce:	e2 e0       	ldi	r30, 0x02	; 2
    d3d0:	de 16       	cp	r13, r30
    d3d2:	29 f0       	breq	.+10     	; 0xd3de <_Z18menuProcModelIndexh+0xcbc>
			continue;
		}

#endif

		uint8_t att1 = subSub == 1 ? attr : 0;
    d3d4:	81 2c       	mov	r8, r1
    d3d6:	01 c0       	rjmp	.+2      	; 0xd3da <_Z18menuProcModelIndexh+0xcb8>
    d3d8:	8a 2c       	mov	r8, r10
		uint8_t att2 = subSub == 2 ? attr : 0;
    d3da:	c1 2c       	mov	r12, r1
    d3dc:	02 c0       	rjmp	.+4      	; 0xd3e2 <_Z18menuProcModelIndexh+0xcc0>
    d3de:	ca 2c       	mov	r12, r10
			continue;
		}

#endif

		uint8_t att1 = subSub == 1 ? attr : 0;
    d3e0:	81 2c       	mov	r8, r1
		uint8_t att2 = subSub == 2 ? attr : 0;
		CSwData *cs = &g_model.customSw[k];
    d3e2:	4b 2d       	mov	r20, r11
    d3e4:	50 e0       	ldi	r21, 0x00	; 0
    d3e6:	ea 01       	movw	r28, r20
    d3e8:	cc 0f       	add	r28, r28
    d3ea:	dd 1f       	adc	r29, r29
    d3ec:	c4 0f       	add	r28, r20
    d3ee:	d5 1f       	adc	r29, r21
    d3f0:	c9 58       	subi	r28, 0x89	; 137
    d3f2:	db 4f       	sbci	r29, 0xFB	; 251

		lcd_putsAttIdx (2 * FW + 1, y, Str_Cswitch, cs->func, subSub == 0 ? attr : 0);
    d3f4:	dd 20       	and	r13, r13
    d3f6:	11 f0       	breq	.+4      	; 0xd3fc <_Z18menuProcModelIndexh+0xcda>
    d3f8:	00 e0       	ldi	r16, 0x00	; 0
    d3fa:	01 c0       	rjmp	.+2      	; 0xd3fe <_Z18menuProcModelIndexh+0xcdc>
    d3fc:	0a 2d       	mov	r16, r10
    d3fe:	2a 81       	ldd	r18, Y+2	; 0x02
    d400:	2f 70       	andi	r18, 0x0F	; 15
    d402:	48 eb       	ldi	r20, 0xB8	; 184
    d404:	5d e1       	ldi	r21, 0x1D	; 29
    d406:	61 2f       	mov	r22, r17
    d408:	8d e0       	ldi	r24, 0x0D	; 13
    d40a:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>

		uint8_t cstate = CS_STATE (cs->func);
    d40e:	8a 81       	ldd	r24, Y+2	; 0x02
    d410:	8f 70       	andi	r24, 0x0F	; 15
    d412:	0e 94 81 10 	call	0x2102	; 0x2102 <_Z8CS_STATEh>
    d416:	98 2e       	mov	r9, r24

		if (cstate == CS_VOFS) {
    d418:	81 11       	cpse	r24, r1
    d41a:	1c c0       	rjmp	.+56     	; 0xd454 <_Z18menuProcModelIndexh+0xd32>
			if (cs->v1 > CHOUT_BASE + NUM_CHNOUT) {
    d41c:	88 81       	ld	r24, Y
    d41e:	85 32       	cpi	r24, 0x25	; 37
    d420:	7c f0       	brlt	.+30     	; 0xd440 <_Z18menuProcModelIndexh+0xd1e>
				int16_t value = convertTelemConstant (cs->v1 - CHOUT_BASE - NUM_CHNOUT - 1, cs->v2);
    d422:	69 81       	ldd	r22, Y+1	; 0x01
    d424:	85 52       	subi	r24, 0x25	; 37
    d426:	0e 94 13 37 	call	0x6e26	; 0x6e26 <_Z20convertTelemConstantha>
				putsTelemetryChannel (18 * FW - 8, y, cs->v1 - CHOUT_BASE - NUM_CHNOUT - 1, value,
						att2, TELEM_UNIT | TELEM_CONSTANT);
    d42a:	48 81       	ld	r20, Y
    d42c:	45 52       	subi	r20, 0x25	; 37
    d42e:	22 e8       	ldi	r18, 0x82	; 130
    d430:	e2 2e       	mov	r14, r18
    d432:	0c 2d       	mov	r16, r12
    d434:	9c 01       	movw	r18, r24
    d436:	61 2f       	mov	r22, r17
    d438:	84 e6       	ldi	r24, 0x64	; 100
    d43a:	0e 94 be 37 	call	0x6f7c	; 0x6f7c <_Z20putsTelemetryChannelhhaihh>
    d43e:	23 c0       	rjmp	.+70     	; 0xd486 <_Z18menuProcModelIndexh+0xd64>
			} else {
				lcd_outdezAtt (18 * FW - 9, y, cs->v2, att2);
    d440:	49 81       	ldd	r20, Y+1	; 0x01
    d442:	55 27       	eor	r21, r21
    d444:	47 fd       	sbrc	r20, 7
    d446:	50 95       	com	r21
    d448:	2c 2d       	mov	r18, r12
    d44a:	61 2f       	mov	r22, r17
    d44c:	83 e6       	ldi	r24, 0x63	; 99
    d44e:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
    d452:	19 c0       	rjmp	.+50     	; 0xd486 <_Z18menuProcModelIndexh+0xd64>
			}
			putsChnRaw (10 * FW - 6, y, cs->v1, att1);
		} else if (cstate == CS_VBOOL) {
    d454:	f1 e0       	ldi	r31, 0x01	; 1
    d456:	8f 13       	cpse	r24, r31
    d458:	0d c0       	rjmp	.+26     	; 0xd474 <_Z18menuProcModelIndexh+0xd52>
			putsDrSwitches (10 * FW - 6, y, cs->v1, att1);
    d45a:	28 2d       	mov	r18, r8
    d45c:	48 81       	ld	r20, Y
    d45e:	61 2f       	mov	r22, r17
    d460:	86 e3       	ldi	r24, 0x36	; 54
    d462:	0e 94 c9 10 	call	0x2192	; 0x2192 <_Z14putsDrSwitcheshhah>
			putsDrSwitches (14 * FW - 7, y, cs->v2, att2);
    d466:	2c 2d       	mov	r18, r12
    d468:	49 81       	ldd	r20, Y+1	; 0x01
    d46a:	61 2f       	mov	r22, r17
    d46c:	8d e4       	ldi	r24, 0x4D	; 77
    d46e:	0e 94 c9 10 	call	0x2192	; 0x2192 <_Z14putsDrSwitcheshhah>
    d472:	34 c0       	rjmp	.+104    	; 0xd4dc <_Z18menuProcModelIndexh+0xdba>
		} else if (cstate == CS_VCOMP) {
    d474:	22 e0       	ldi	r18, 0x02	; 2
    d476:	82 13       	cpse	r24, r18
    d478:	0d c0       	rjmp	.+26     	; 0xd494 <_Z18menuProcModelIndexh+0xd72>
			putsChnRaw (14 * FW - 4, y, cs->v2, att2);
    d47a:	2c 2d       	mov	r18, r12
    d47c:	49 81       	ldd	r20, Y+1	; 0x01
    d47e:	61 2f       	mov	r22, r17
    d480:	80 e5       	ldi	r24, 0x50	; 80
    d482:	0e 94 95 10 	call	0x212a	; 0x212a <_Z10putsChnRawhhhh>
			putsChnRaw (10 * FW - 6, y, cs->v1, att1);
    d486:	28 2d       	mov	r18, r8
    d488:	48 81       	ld	r20, Y
    d48a:	61 2f       	mov	r22, r17
    d48c:	86 e3       	ldi	r24, 0x36	; 54
    d48e:	0e 94 95 10 	call	0x212a	; 0x212a <_Z10putsChnRawhhhh>
    d492:	24 c0       	rjmp	.+72     	; 0xd4dc <_Z18menuProcModelIndexh+0xdba>
		} else // cstate == CS_TIMER
		{
			int8_t x;
			uint8_t att = att1;
			x = cs->v1;
    d494:	48 81       	ld	r20, Y
			if (x < 0) {
    d496:	47 ff       	sbrs	r20, 7
    d498:	04 c0       	rjmp	.+8      	; 0xd4a2 <_Z18menuProcModelIndexh+0xd80>
				x = -x - 1;
    d49a:	40 95       	com	r20
				att |= PREC1;
    d49c:	88 2d       	mov	r24, r8
    d49e:	80 62       	ori	r24, 0x20	; 32
    d4a0:	88 2e       	mov	r8, r24
			}
			lcd_xlabel_decimal (y, PSTR(STR_15_ON), x + 1, att, 13 * FW - 5);
    d4a2:	55 27       	eor	r21, r21
    d4a4:	47 fd       	sbrc	r20, 7
    d4a6:	50 95       	com	r21
    d4a8:	4f 5f       	subi	r20, 0xFF	; 255
    d4aa:	5f 4f       	sbci	r21, 0xFF	; 255
    d4ac:	09 e4       	ldi	r16, 0x49	; 73
    d4ae:	28 2d       	mov	r18, r8
    d4b0:	69 e5       	ldi	r22, 0x59	; 89
    d4b2:	72 e1       	ldi	r23, 0x12	; 18
    d4b4:	81 2f       	mov	r24, r17
    d4b6:	0e 94 1b 3a 	call	0x7436	; 0x7436 <_Z18lcd_xlabel_decimalhPKcjhh>
			att = att2;
			x = cs->v2;
    d4ba:	49 81       	ldd	r20, Y+1	; 0x01
			if (x < 0) {
    d4bc:	47 ff       	sbrs	r20, 7
    d4be:	04 c0       	rjmp	.+8      	; 0xd4c8 <_Z18menuProcModelIndexh+0xda6>
				x = -x - 1;
    d4c0:	40 95       	com	r20
				att |= PREC1;
    d4c2:	9c 2d       	mov	r25, r12
    d4c4:	90 62       	ori	r25, 0x20	; 32
    d4c6:	c9 2e       	mov	r12, r25
			}
			lcd_outdezAtt (18 * FW - 1, y, x + 1, att);
    d4c8:	55 27       	eor	r21, r21
    d4ca:	47 fd       	sbrc	r20, 7
    d4cc:	50 95       	com	r21
    d4ce:	4f 5f       	subi	r20, 0xFF	; 255
    d4d0:	5f 4f       	sbci	r21, 0xFF	; 255
    d4d2:	2c 2d       	mov	r18, r12
    d4d4:	61 2f       	mov	r22, r17
    d4d6:	8b e6       	ldi	r24, 0x6B	; 107
    d4d8:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
		}
		{
			int8_t as;
			as = cs->andsw;
    d4dc:	4a 81       	ldd	r20, Y+2	; 0x02
    d4de:	42 95       	swap	r20
    d4e0:	4f 70       	andi	r20, 0x0F	; 15
			if (as > 8) {
    d4e2:	49 30       	cpi	r20, 0x09	; 9
    d4e4:	0c f0       	brlt	.+2      	; 0xd4e8 <_Z18menuProcModelIndexh+0xdc6>
				as += 1;
    d4e6:	4f 5f       	subi	r20, 0xFF	; 255
			}
			putsDrSwitches (17 * FW + 2, y, as, (subSub == 3 ? attr : 0));
    d4e8:	e3 e0       	ldi	r30, 0x03	; 3
    d4ea:	de 16       	cp	r13, r30
    d4ec:	11 f0       	breq	.+4      	; 0xd4f2 <_Z18menuProcModelIndexh+0xdd0>
    d4ee:	20 e0       	ldi	r18, 0x00	; 0
    d4f0:	01 c0       	rjmp	.+2      	; 0xd4f4 <_Z18menuProcModelIndexh+0xdd2>
    d4f2:	2a 2d       	mov	r18, r10
    d4f4:	61 2f       	mov	r22, r17
    d4f6:	88 e6       	ldi	r24, 0x68	; 104
    d4f8:	0e 94 c9 10 	call	0x2192	; 0x2192 <_Z14putsDrSwitcheshhah>
		}

#ifndef NOPOTSCROLL
		if ( (s_editing) && attr)	// Use s_editing???
    d4fc:	80 91 a4 0d 	lds	r24, 0x0DA4
    d500:	88 23       	and	r24, r24
    d502:	09 f4       	brne	.+2      	; 0xd506 <_Z18menuProcModelIndexh+0xde4>
    d504:	63 c0       	rjmp	.+198    	; 0xd5cc <_Z18menuProcModelIndexh+0xeaa>
    d506:	aa 20       	and	r10, r10
    d508:	09 f4       	brne	.+2      	; 0xd50c <_Z18menuProcModelIndexh+0xdea>
    d50a:	60 c0       	rjmp	.+192    	; 0xd5cc <_Z18menuProcModelIndexh+0xeaa>
#else		
				if( s_editMode && attr)
#endif
				{
			switch (subSub) {
    d50c:	f1 e0       	ldi	r31, 0x01	; 1
    d50e:	df 16       	cp	r13, r31
    d510:	31 f1       	breq	.+76     	; 0xd55e <_Z18menuProcModelIndexh+0xe3c>
    d512:	df 16       	cp	r13, r31
    d514:	98 f0       	brcs	.+38     	; 0xd53c <_Z18menuProcModelIndexh+0xe1a>
    d516:	22 e0       	ldi	r18, 0x02	; 2
    d518:	d2 16       	cp	r13, r18
    d51a:	d9 f1       	breq	.+118    	; 0xd592 <_Z18menuProcModelIndexh+0xe70>
    d51c:	83 e0       	ldi	r24, 0x03	; 3
    d51e:	d8 12       	cpse	r13, r24
    d520:	55 c0       	rjmp	.+170    	; 0xd5cc <_Z18menuProcModelIndexh+0xeaa>
						default:
							break;
					}
					break;
				case 3:
					CHECK_INCDEC_H_MODELVAR_0(cs->andsw, 15);
    d522:	8a 81       	ldd	r24, Y+2	; 0x02
    d524:	6f e0       	ldi	r22, 0x0F	; 15
    d526:	82 95       	swap	r24
    d528:	8f 70       	andi	r24, 0x0F	; 15
    d52a:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    d52e:	82 95       	swap	r24
    d530:	80 7f       	andi	r24, 0xF0	; 240
    d532:	9a 81       	ldd	r25, Y+2	; 0x02
    d534:	9f 70       	andi	r25, 0x0F	; 15
    d536:	98 2b       	or	r25, r24
    d538:	9a 83       	std	Y+2, r25	; 0x02
    d53a:	48 c0       	rjmp	.+144    	; 0xd5cc <_Z18menuProcModelIndexh+0xeaa>
				if( s_editMode && attr)
#endif
				{
			switch (subSub) {
				case 0:
					CHECK_INCDEC_H_MODELVAR_0(cs->func, CS_MAXF);
    d53c:	8a 81       	ldd	r24, Y+2	; 0x02
    d53e:	6e e0       	ldi	r22, 0x0E	; 14
    d540:	8f 70       	andi	r24, 0x0F	; 15
    d542:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    d546:	8f 70       	andi	r24, 0x0F	; 15
    d548:	9a 81       	ldd	r25, Y+2	; 0x02
    d54a:	90 7f       	andi	r25, 0xF0	; 240
    d54c:	98 2b       	or	r25, r24
    d54e:	9a 83       	std	Y+2, r25	; 0x02
					if (cstate != CS_STATE (cs->func)) {
    d550:	0e 94 81 10 	call	0x2102	; 0x2102 <_Z8CS_STATEh>
    d554:	98 16       	cp	r9, r24
    d556:	d1 f1       	breq	.+116    	; 0xd5cc <_Z18menuProcModelIndexh+0xeaa>
						cs->v1 = 0;
    d558:	18 82       	st	Y, r1
						cs->v2 = 0;
    d55a:	19 82       	std	Y+1, r1	; 0x01
    d55c:	37 c0       	rjmp	.+110    	; 0xd5cc <_Z18menuProcModelIndexh+0xeaa>
					}
					break;

				case 1:
					switch (cstate) {
    d55e:	91 e0       	ldi	r25, 0x01	; 1
    d560:	99 16       	cp	r9, r25
    d562:	59 f0       	breq	.+22     	; 0xd57a <_Z18menuProcModelIndexh+0xe58>
    d564:	99 16       	cp	r9, r25
    d566:	80 f0       	brcs	.+32     	; 0xd588 <_Z18menuProcModelIndexh+0xe66>
    d568:	e2 e0       	ldi	r30, 0x02	; 2
    d56a:	9e 16       	cp	r9, r30
    d56c:	69 f0       	breq	.+26     	; 0xd588 <_Z18menuProcModelIndexh+0xe66>
    d56e:	f3 e0       	ldi	r31, 0x03	; 3
    d570:	9f 12       	cpse	r9, r31
    d572:	2c c0       	rjmp	.+88     	; 0xd5cc <_Z18menuProcModelIndexh+0xeaa>
							break;
						case (CS_VCOMP ):
							CHECK_INCDEC_H_MODELVAR_0(cs->v1, NUM_XCHNRAW+NUM_TELEM_ITEMS);
							break;
						case (CS_TIMER ):
							CHECK_INCDEC_H_MODELVAR(cs->v1, -50, 99);
    d574:	43 e6       	ldi	r20, 0x63	; 99
    d576:	6e ec       	ldi	r22, 0xCE	; 206
    d578:	02 c0       	rjmp	.+4      	; 0xd57e <_Z18menuProcModelIndexh+0xe5c>
					switch (cstate) {
						case (CS_VOFS ):
							CHECK_INCDEC_H_MODELVAR_0(cs->v1, NUM_XCHNRAW+NUM_TELEM_ITEMS);
							break;
						case (CS_VBOOL ):
							CHECK_INCDEC_MODELSWITCH(cs->v1, -MAX_DRSWITCH, MAX_DRSWITCH);
    d57a:	46 e1       	ldi	r20, 0x16	; 22
    d57c:	6a ee       	ldi	r22, 0xEA	; 234
    d57e:	88 81       	ld	r24, Y
    d580:	0e 94 86 13 	call	0x270c	; 0x270c <_Z14checkIncDec_hmaaa>
    d584:	88 83       	st	Y, r24
    d586:	22 c0       	rjmp	.+68     	; 0xd5cc <_Z18menuProcModelIndexh+0xeaa>
							break;
						case (CS_VCOMP ):
							CHECK_INCDEC_H_MODELVAR_0(cs->v1, NUM_XCHNRAW+NUM_TELEM_ITEMS);
    d588:	6e e2       	ldi	r22, 0x2E	; 46
    d58a:	88 81       	ld	r24, Y
    d58c:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    d590:	f9 cf       	rjmp	.-14     	; 0xd584 <_Z18menuProcModelIndexh+0xe62>
							break;
					}
					break;

				case 2:
					switch (cstate) {
    d592:	21 e0       	ldi	r18, 0x01	; 1
    d594:	92 16       	cp	r9, r18
    d596:	71 f0       	breq	.+28     	; 0xd5b4 <_Z18menuProcModelIndexh+0xe92>
    d598:	92 16       	cp	r9, r18
    d59a:	48 f0       	brcs	.+18     	; 0xd5ae <_Z18menuProcModelIndexh+0xe8c>
    d59c:	82 e0       	ldi	r24, 0x02	; 2
    d59e:	98 16       	cp	r9, r24
    d5a0:	61 f0       	breq	.+24     	; 0xd5ba <_Z18menuProcModelIndexh+0xe98>
    d5a2:	93 e0       	ldi	r25, 0x03	; 3
    d5a4:	99 12       	cpse	r9, r25
    d5a6:	12 c0       	rjmp	.+36     	; 0xd5cc <_Z18menuProcModelIndexh+0xeaa>
							break;
						case (CS_VCOMP ):
							CHECK_INCDEC_H_MODELVAR_0(cs->v2, NUM_XCHNRAW+NUM_TELEM_ITEMS);
							break;
						case (CS_TIMER ):
							CHECK_INCDEC_H_MODELVAR(cs->v2, -50, 99);
    d5a8:	43 e6       	ldi	r20, 0x63	; 99
    d5aa:	6e ec       	ldi	r22, 0xCE	; 206
    d5ac:	0b c0       	rjmp	.+22     	; 0xd5c4 <_Z18menuProcModelIndexh+0xea2>
					break;

				case 2:
					switch (cstate) {
						case (CS_VOFS ):
							CHECK_INCDEC_H_MODELVAR(cs->v2, -125, 125);
    d5ae:	4d e7       	ldi	r20, 0x7D	; 125
    d5b0:	63 e8       	ldi	r22, 0x83	; 131
    d5b2:	08 c0       	rjmp	.+16     	; 0xd5c4 <_Z18menuProcModelIndexh+0xea2>
							break;
						case (CS_VBOOL ):
							CHECK_INCDEC_MODELSWITCH(cs->v2, -MAX_DRSWITCH, MAX_DRSWITCH);
    d5b4:	46 e1       	ldi	r20, 0x16	; 22
    d5b6:	6a ee       	ldi	r22, 0xEA	; 234
    d5b8:	05 c0       	rjmp	.+10     	; 0xd5c4 <_Z18menuProcModelIndexh+0xea2>
							break;
						case (CS_VCOMP ):
							CHECK_INCDEC_H_MODELVAR_0(cs->v2, NUM_XCHNRAW+NUM_TELEM_ITEMS);
    d5ba:	6e e2       	ldi	r22, 0x2E	; 46
    d5bc:	89 81       	ldd	r24, Y+1	; 0x01
    d5be:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    d5c2:	03 c0       	rjmp	.+6      	; 0xd5ca <_Z18menuProcModelIndexh+0xea8>
							break;
						case (CS_TIMER ):
							CHECK_INCDEC_H_MODELVAR(cs->v2, -50, 99);
    d5c4:	89 81       	ldd	r24, Y+1	; 0x01
    d5c6:	0e 94 86 13 	call	0x270c	; 0x270c <_Z14checkIncDec_hmaaa>
    d5ca:	89 83       	std	Y+1, r24	; 0x01
    d5cc:	b3 94       	inc	r11
    d5ce:	18 5f       	subi	r17, 0xF8	; 248
	uint8_t k = 0;
	uint8_t subSub = g_posHorz;
	uint8_t t_pgOfs;

	t_pgOfs = evalOffset (sub, 6);
	for (uint8_t i = 0; i < 7; i++) {
    d5d0:	10 34       	cpi	r17, 0x40	; 64
    d5d2:	09 f0       	breq	.+2      	; 0xd5d6 <_Z18menuProcModelIndexh+0xeb4>
    d5d4:	e3 ce       	rjmp	.-570    	; 0xd39c <_Z18menuProcModelIndexh+0xc7a>
    d5d6:	e5 c2       	rjmp	.+1482   	; 0xdba2 <_Z18menuProcModelIndexh+0x1480>
	audioDefevent (AU_WARNING2);
}

static void menuProcLimits (uint8_t sub) {

	TITLEP (Str_limits);
    d5d8:	8e e4       	ldi	r24, 0x4E	; 78
    d5da:	9d e1       	ldi	r25, 0x1D	; 29
    d5dc:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>

	IlinesCount = NUM_CHNOUT + 2 - 1;
    d5e0:	81 e1       	ldi	r24, 0x11	; 17
    d5e2:	80 93 5b 0e 	sts	0x0E5B, r24
	Columns = &ProgColumns[COLUMNS_3];
    d5e6:	85 e0       	ldi	r24, 0x05	; 5
    d5e8:	9d e1       	ldi	r25, 0x1D	; 29
    d5ea:	90 93 57 0e 	sts	0x0E57, r25
    d5ee:	80 93 56 0e 	sts	0x0E56, r24
	uint8_t y = 0;
	uint8_t k = 0;
//uint8_t  sub    = mstate2.m_posVert ;
//uint8_t  sub    = mstate2.m_posVert - 1;
	uint8_t subSub = g_posHorz;
    d5f2:	e0 90 7e 0d 	lds	r14, 0x0D7E
	uint8_t t_pgOfs;

	t_pgOfs = evalOffset (sub, 6);
    d5f6:	66 e0       	ldi	r22, 0x06	; 6
    d5f8:	8f 2d       	mov	r24, r15
    d5fa:	0e 94 09 5d 	call	0xba12	; 0xba12 <_Z10evalOffsetah>
    d5fe:	98 2e       	mov	r9, r24

	if (sub < NUM_CHNOUT) {
    d600:	ef e0       	ldi	r30, 0x0F	; 15
    d602:	ef 15       	cp	r30, r15
    d604:	a0 f0       	brcs	.+40     	; 0xd62e <_Z18menuProcModelIndexh+0xf0c>
		lcd_outdez (13 * FW, 0, g_chans512[sub] / 2 + 1500);
    d606:	ef 2d       	mov	r30, r15
    d608:	f0 e0       	ldi	r31, 0x00	; 0
    d60a:	ee 0f       	add	r30, r30
    d60c:	ff 1f       	adc	r31, r31
    d60e:	e1 58       	subi	r30, 0x81	; 129
    d610:	f2 4f       	sbci	r31, 0xF2	; 242
    d612:	40 81       	ld	r20, Z
    d614:	51 81       	ldd	r21, Z+1	; 0x01
    d616:	57 ff       	sbrs	r21, 7
    d618:	02 c0       	rjmp	.+4      	; 0xd61e <_Z18menuProcModelIndexh+0xefc>
    d61a:	4f 5f       	subi	r20, 0xFF	; 255
    d61c:	5f 4f       	sbci	r21, 0xFF	; 255
    d61e:	55 95       	asr	r21
    d620:	47 95       	ror	r20
    d622:	44 52       	subi	r20, 0x24	; 36
    d624:	5a 4f       	sbci	r21, 0xFA	; 250
    d626:	60 e0       	ldi	r22, 0x00	; 0
    d628:	8e e4       	ldi	r24, 0x4E	; 78
    d62a:	0e 94 47 29 	call	0x528e	; 0x528e <_Z10lcd_outdezhhi>
	}

	switch (Tevent) {
    d62e:	80 91 e1 01 	lds	r24, 0x01E1
    d632:	80 38       	cpi	r24, 0x80	; 128
    d634:	29 f5       	brne	.+74     	; 0xd680 <_Z18menuProcModelIndexh+0xf5e>
		case EVT_KEY_LONG(KEY_MENU):
			if (sub >= 0 && sub < NUM_CHNOUT) {
    d636:	ff e0       	ldi	r31, 0x0F	; 15
    d638:	ff 15       	cp	r31, r15
    d63a:	40 f1       	brcs	.+80     	; 0xd68c <_Z18menuProcModelIndexh+0xf6a>
				int16_t v = g_chans512[sub - t_pgOfs];
    d63c:	4f 2d       	mov	r20, r15
    d63e:	50 e0       	ldi	r21, 0x00	; 0
    d640:	fa 01       	movw	r30, r20
    d642:	e9 19       	sub	r30, r9
    d644:	f1 09       	sbc	r31, r1
    d646:	ee 0f       	add	r30, r30
    d648:	ff 1f       	adc	r31, r31
    d64a:	e1 58       	subi	r30, 0x81	; 129
    d64c:	f2 4f       	sbci	r31, 0xF2	; 242
    d64e:	20 81       	ld	r18, Z
    d650:	31 81       	ldd	r19, Z+1	; 0x01
				LimitData *ld = &g_model.limitData[sub];
				if (subSub == 0) {
    d652:	e1 10       	cpse	r14, r1
    d654:	15 c0       	rjmp	.+42     	; 0xd680 <_Z18menuProcModelIndexh+0xf5e>

	switch (Tevent) {
		case EVT_KEY_LONG(KEY_MENU):
			if (sub >= 0 && sub < NUM_CHNOUT) {
				int16_t v = g_chans512[sub - t_pgOfs];
				LimitData *ld = &g_model.limitData[sub];
    d656:	85 e0       	ldi	r24, 0x05	; 5
    d658:	84 9f       	mul	r24, r20
    d65a:	f0 01       	movw	r30, r0
    d65c:	85 9f       	mul	r24, r21
    d65e:	f0 0d       	add	r31, r0
    d660:	11 24       	eor	r1, r1
    d662:	e5 58       	subi	r30, 0x85	; 133
    d664:	fc 4f       	sbci	r31, 0xFC	; 252
				if (subSub == 0) {
					ld->offset = (ld->reverse) ? -v : v;
    d666:	82 81       	ldd	r24, Z+2	; 0x02
    d668:	88 23       	and	r24, r24
    d66a:	19 f0       	breq	.+6      	; 0xd672 <_Z18menuProcModelIndexh+0xf50>
    d66c:	31 95       	neg	r19
    d66e:	21 95       	neg	r18
    d670:	31 09       	sbc	r19, r1
    d672:	34 83       	std	Z+4, r19	; 0x04
    d674:	23 83       	std	Z+3, r18	; 0x03
					STORE_MODELVARS;
    d676:	82 e0       	ldi	r24, 0x02	; 2
    d678:	0e 94 4e 20 	call	0x409c	; 0x409c <_Z7eeDirtyh>
					eeWaitComplete ();
    d67c:	0e 94 4c 21 	call	0x4298	; 0x4298 <_Z14eeWaitCompletev>
		case EVT_KEY_LONG(KEY_MENU):
			if (sub >= 0 && sub < NUM_CHNOUT) {
				int16_t v = g_chans512[sub - t_pgOfs];
				LimitData *ld = &g_model.limitData[sub];
				if (subSub == 0) {
					ld->offset = (ld->reverse) ? -v : v;
    d680:	b8 e0       	ldi	r27, 0x08	; 8
    d682:	bb 2e       	mov	r11, r27
					} else if (t < -g_model.sub_trim_limit) {
						t = -g_model.sub_trim_limit;
					}
				}
			}
			value = t / 10;
    d684:	ca e0       	ldi	r28, 0x0A	; 10
    d686:	cc 2e       	mov	r12, r28
    d688:	d1 2c       	mov	r13, r1
    d68a:	8f c0       	rjmp	.+286    	; 0xd7aa <_Z18menuProcModelIndexh+0x1088>
				if (subSub == 0) {
					ld->offset = (ld->reverse) ? -v : v;
					STORE_MODELVARS;
					eeWaitComplete ();
				}
			} else if (sub == NUM_CHNOUT) {
    d68c:	20 e1       	ldi	r18, 0x10	; 16
    d68e:	f2 12       	cpse	r15, r18
    d690:	f7 cf       	rjmp	.-18     	; 0xd680 <_Z18menuProcModelIndexh+0xf5e>
				s_noHi = NO_HI_LEN;
    d692:	89 e1       	ldi	r24, 0x19	; 25
    d694:	80 93 a3 0d 	sts	0x0DA3, r24
				killEvents (Tevent);
    d698:	80 e8       	ldi	r24, 0x80	; 128
    d69a:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <_Z10killEventsh>
				setStickCenter (); //if highlighted and menu pressed - copy trims
    d69e:	0e 94 1c 59 	call	0xb238	; 0xb238 <_Z14setStickCenterv>
    d6a2:	ee cf       	rjmp	.-36     	; 0xd680 <_Z18menuProcModelIndexh+0xf5e>
//  lcd_puts_P( 4*FW, 1*FH,PSTR("subT min  max inv"));
	for (uint8_t i = 0; i < 7; i++) {
		y = (i + 1) * FH;
		k = i + t_pgOfs;
		if (k == NUM_CHNOUT) break;
		LimitData *ld = limitaddress (k);
    d6a4:	89 2d       	mov	r24, r9
    d6a6:	0e 94 8e 10 	call	0x211c	; 0x211c <_Z12limitaddressh>
    d6aa:	ec 01       	movw	r28, r24
		int16_t v = g_chans512[k] - ( (ld->reverse) ? -ld->offset : ld->offset);
    d6ac:	e9 2d       	mov	r30, r9
    d6ae:	f0 e0       	ldi	r31, 0x00	; 0
    d6b0:	ee 0f       	add	r30, r30
    d6b2:	ff 1f       	adc	r31, r31
    d6b4:	e1 58       	subi	r30, 0x81	; 129
    d6b6:	f2 4f       	sbci	r31, 0xF2	; 242
    d6b8:	80 81       	ld	r24, Z
    d6ba:	91 81       	ldd	r25, Z+1	; 0x01
    d6bc:	4a 81       	ldd	r20, Y+2	; 0x02
    d6be:	2b 81       	ldd	r18, Y+3	; 0x03
    d6c0:	3c 81       	ldd	r19, Y+4	; 0x04
    d6c2:	44 23       	and	r20, r20
    d6c4:	19 f0       	breq	.+6      	; 0xd6cc <_Z18menuProcModelIndexh+0xfaa>
    d6c6:	31 95       	neg	r19
    d6c8:	21 95       	neg	r18
    d6ca:	31 09       	sbc	r19, r1
    d6cc:	82 1b       	sub	r24, r18
    d6ce:	93 0b       	sbc	r25, r19

		char swVal = '-';  // '-', '<', '>'
		if (v > 50) swVal = (ld->reverse ? 127 : 126);	// Switch to raw inputs?  - remove trim!
    d6d0:	83 33       	cpi	r24, 0x33	; 51
    d6d2:	91 05       	cpc	r25, r1
    d6d4:	0c f0       	brlt	.+2      	; 0xd6d8 <_Z18menuProcModelIndexh+0xfb6>
    d6d6:	6d c0       	rjmp	.+218    	; 0xd7b2 <_Z18menuProcModelIndexh+0x1090>
		if (v < -50) swVal = (ld->reverse ? 126 : 127);
    d6d8:	8e 3c       	cpi	r24, 0xCE	; 206
    d6da:	9f 4f       	sbci	r25, 0xFF	; 255
    d6dc:	0c f4       	brge	.+2      	; 0xd6e0 <_Z18menuProcModelIndexh+0xfbe>
    d6de:	6c c0       	rjmp	.+216    	; 0xd7b8 <_Z18menuProcModelIndexh+0x1096>
		k = i + t_pgOfs;
		if (k == NUM_CHNOUT) break;
		LimitData *ld = limitaddress (k);
		int16_t v = g_chans512[k] - ( (ld->reverse) ? -ld->offset : ld->offset);

		char swVal = '-';  // '-', '<', '>'
    d6e0:	1d e2       	ldi	r17, 0x2D	; 45
    d6e2:	66 24       	eor	r6, r6
    d6e4:	63 94       	inc	r6
    d6e6:	69 0c       	add	r6, r9
		if (v > 50) swVal = (ld->reverse ? 127 : 126);	// Switch to raw inputs?  - remove trim!
		if (v < -50) swVal = (ld->reverse ? 126 : 127);
		putsChn (0, y, k + 1, 0);
    d6e8:	20 e0       	ldi	r18, 0x00	; 0
    d6ea:	46 2d       	mov	r20, r6
    d6ec:	6b 2d       	mov	r22, r11
    d6ee:	80 e0       	ldi	r24, 0x00	; 0
    d6f0:	0e 94 c3 10 	call	0x2186	; 0x2186 <_Z7putsChnhhhh>
		lcd_putc (12 * FW + FW / 2, y, swVal); //'<' : '>'
    d6f4:	41 2f       	mov	r20, r17
    d6f6:	6b 2d       	mov	r22, r11
    d6f8:	8b e4       	ldi	r24, 0x4B	; 75
    d6fa:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <_Z8lcd_putchhc>

		int8_t limit = (g_model.extendedLimits ? 125 : 100);
    d6fe:	80 91 37 02 	lds	r24, 0x0237
    d702:	81 ff       	sbrs	r24, 1
    d704:	5d c0       	rjmp	.+186    	; 0xd7c0 <_Z18menuProcModelIndexh+0x109e>
    d706:	7d e7       	ldi	r23, 0x7D	; 125
    d708:	77 2e       	mov	r7, r23
		for (uint8_t j = 0; j < 4; j++) {
    d70a:	a1 2c       	mov	r10, r1
    d70c:	55 24       	eor	r5, r5
    d70e:	5a 94       	dec	r5
    d710:	5b 0c       	add	r5, r11
					if (value < -125) {
						value = -125;
					}
					lcd_outdezAtt (12 * FW, y, value, attr);
					if (active) {
						CHECK_INCDEC_H_MODELVAR(temp, -limit, 25);
    d712:	47 2c       	mov	r4, r7
    d714:	41 94       	neg	r4
		putsChn (0, y, k + 1, 0);
		lcd_putc (12 * FW + FW / 2, y, swVal); //'<' : '>'

		int8_t limit = (g_model.extendedLimits ? 125 : 100);
		for (uint8_t j = 0; j < 4; j++) {
			uint8_t attr = ( (sub == k && subSub == j) ? InverseBlink : 0);
    d716:	f9 10       	cpse	r15, r9
    d718:	56 c0       	rjmp	.+172    	; 0xd7c6 <_Z18menuProcModelIndexh+0x10a4>
    d71a:	ea 10       	cpse	r14, r10
    d71c:	54 c0       	rjmp	.+168    	; 0xd7c6 <_Z18menuProcModelIndexh+0x10a4>
    d71e:	20 91 9f 0d 	lds	r18, 0x0D9F
#ifndef NOPOTSCROLL
			uint8_t active = attr;	// (attr && s_editing) ;
			if (s_editing == 0) {
    d722:	80 91 a4 0d 	lds	r24, 0x0DA4
    d726:	88 23       	and	r24, r24
    d728:	09 f4       	brne	.+2      	; 0xd72c <_Z18menuProcModelIndexh+0x100a>
    d72a:	4f c0       	rjmp	.+158    	; 0xd7ca <_Z18menuProcModelIndexh+0x10a8>
			}
//				uint8_t active = (attr && s_editing) ;
#else
			uint8_t active = (attr && s_editMode);
#endif
			if (active) {
    d72c:	22 23       	and	r18, r18
    d72e:	09 f4       	brne	.+2      	; 0xd732 <_Z18menuProcModelIndexh+0x1010>
    d730:	4c c0       	rjmp	.+152    	; 0xd7ca <_Z18menuProcModelIndexh+0x10a8>
				StickScrollAllowed = 0;		// Block while editing
    d732:	10 92 85 01 	sts	0x0185, r1
    d736:	82 2e       	mov	r8, r18
			}
			int16_t value;
			int16_t t = 0;
			if (g_model.sub_trim_limit) {
    d738:	80 91 d1 04 	lds	r24, 0x04D1
    d73c:	88 23       	and	r24, r24
    d73e:	09 f4       	brne	.+2      	; 0xd742 <_Z18menuProcModelIndexh+0x1020>
    d740:	52 c0       	rjmp	.+164    	; 0xd7e6 <_Z18menuProcModelIndexh+0x10c4>
				if ( (t = ld->offset)) {
    d742:	0b 81       	ldd	r16, Y+3	; 0x03
    d744:	1c 81       	ldd	r17, Y+4	; 0x04
    d746:	01 15       	cp	r16, r1
    d748:	11 05       	cpc	r17, r1
    d74a:	09 f0       	breq	.+2      	; 0xd74e <_Z18menuProcModelIndexh+0x102c>
    d74c:	40 c0       	rjmp	.+128    	; 0xd7ce <_Z18menuProcModelIndexh+0x10ac>
					} else if (t < -g_model.sub_trim_limit) {
						t = -g_model.sub_trim_limit;
					}
				}
			}
			value = t / 10;
    d74e:	c8 01       	movw	r24, r16
    d750:	b6 01       	movw	r22, r12
    d752:	40 d6       	rcall	.+3200   	; 0xe3d4 <__divmodhi4>
			switch (j) {
    d754:	f2 e0       	ldi	r31, 0x02	; 2
    d756:	af 16       	cp	r10, r31
    d758:	09 f4       	brne	.+2      	; 0xd75c <_Z18menuProcModelIndexh+0x103a>
    d75a:	66 c0       	rjmp	.+204    	; 0xd828 <_Z18menuProcModelIndexh+0x1106>
    d75c:	83 e0       	ldi	r24, 0x03	; 3
    d75e:	a8 16       	cp	r10, r24
    d760:	09 f4       	brne	.+2      	; 0xd764 <_Z18menuProcModelIndexh+0x1042>
    d762:	86 c0       	rjmp	.+268    	; 0xd870 <_Z18menuProcModelIndexh+0x114e>
    d764:	91 e0       	ldi	r25, 0x01	; 1
    d766:	a9 16       	cp	r10, r25
    d768:	09 f4       	brne	.+2      	; 0xd76c <_Z18menuProcModelIndexh+0x104a>
    d76a:	42 c0       	rjmp	.+132    	; 0xd7f0 <_Z18menuProcModelIndexh+0x10ce>
				case 0:
					lcd_outdezAtt (7 * FW + 3, y, ld->offset, attr | PREC1);
    d76c:	20 62       	ori	r18, 0x20	; 32
    d76e:	4b 81       	ldd	r20, Y+3	; 0x03
    d770:	5c 81       	ldd	r21, Y+4	; 0x04
    d772:	6b 2d       	mov	r22, r11
    d774:	8d e2       	ldi	r24, 0x2D	; 45
    d776:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
					if (active) {
    d77a:	88 20       	and	r8, r8
    d77c:	59 f0       	breq	.+22     	; 0xd794 <_Z18menuProcModelIndexh+0x1072>
						ld->offset = checkIncDec16 (ld->offset, -1000, 1000, EE_MODEL);
    d77e:	22 e0       	ldi	r18, 0x02	; 2
    d780:	48 ee       	ldi	r20, 0xE8	; 232
    d782:	53 e0       	ldi	r21, 0x03	; 3
    d784:	68 e1       	ldi	r22, 0x18	; 24
    d786:	7c ef       	ldi	r23, 0xFC	; 252
    d788:	8b 81       	ldd	r24, Y+3	; 0x03
    d78a:	9c 81       	ldd	r25, Y+4	; 0x04
    d78c:	0e 94 b7 12 	call	0x256e	; 0x256e <_Z13checkIncDec16iiih>
    d790:	9c 83       	std	Y+4, r25	; 0x04
    d792:	8b 83       	std	Y+3, r24	; 0x03
		if (v < -50) swVal = (ld->reverse ? 126 : 127);
		putsChn (0, y, k + 1, 0);
		lcd_putc (12 * FW + FW / 2, y, swVal); //'<' : '>'

		int8_t limit = (g_model.extendedLimits ? 125 : 100);
		for (uint8_t j = 0; j < 4; j++) {
    d794:	a3 94       	inc	r10
    d796:	f4 e0       	ldi	r31, 0x04	; 4
    d798:	af 12       	cpse	r10, r31
    d79a:	bd cf       	rjmp	.-134    	; 0xd716 <_Z18menuProcModelIndexh+0xff4>
    d79c:	88 e0       	ldi	r24, 0x08	; 8
    d79e:	8b 0d       	add	r24, r11
				setStickCenter (); //if highlighted and menu pressed - copy trims
			}
			break;
	}
//  lcd_puts_P( 4*FW, 1*FH,PSTR("subT min  max inv"));
	for (uint8_t i = 0; i < 7; i++) {
    d7a0:	80 34       	cpi	r24, 0x40	; 64
    d7a2:	09 f4       	brne	.+2      	; 0xd7a6 <_Z18menuProcModelIndexh+0x1084>
    d7a4:	85 c0       	rjmp	.+266    	; 0xd8b0 <_Z18menuProcModelIndexh+0x118e>
    d7a6:	b8 2e       	mov	r11, r24
    d7a8:	96 2c       	mov	r9, r6
		y = (i + 1) * FH;
		k = i + t_pgOfs;
		if (k == NUM_CHNOUT) break;
    d7aa:	80 e1       	ldi	r24, 0x10	; 16
    d7ac:	98 12       	cpse	r9, r24
    d7ae:	7a cf       	rjmp	.-268    	; 0xd6a4 <_Z18menuProcModelIndexh+0xf82>
    d7b0:	71 c0       	rjmp	.+226    	; 0xd894 <_Z18menuProcModelIndexh+0x1172>
		LimitData *ld = limitaddress (k);
		int16_t v = g_chans512[k] - ( (ld->reverse) ? -ld->offset : ld->offset);

		char swVal = '-';  // '-', '<', '>'
		if (v > 50) swVal = (ld->reverse ? 127 : 126);	// Switch to raw inputs?  - remove trim!
    d7b2:	41 11       	cpse	r20, r1
    d7b4:	03 c0       	rjmp	.+6      	; 0xd7bc <_Z18menuProcModelIndexh+0x109a>
    d7b6:	06 c2       	rjmp	.+1036   	; 0xdbc4 <_Z18menuProcModelIndexh+0x14a2>
		if (v < -50) swVal = (ld->reverse ? 126 : 127);
    d7b8:	41 11       	cpse	r20, r1
    d7ba:	04 c2       	rjmp	.+1032   	; 0xdbc4 <_Z18menuProcModelIndexh+0x14a2>
    d7bc:	1f e7       	ldi	r17, 0x7F	; 127
    d7be:	91 cf       	rjmp	.-222    	; 0xd6e2 <_Z18menuProcModelIndexh+0xfc0>
		putsChn (0, y, k + 1, 0);
		lcd_putc (12 * FW + FW / 2, y, swVal); //'<' : '>'

		int8_t limit = (g_model.extendedLimits ? 125 : 100);
    d7c0:	64 e6       	ldi	r22, 0x64	; 100
    d7c2:	76 2e       	mov	r7, r22
    d7c4:	a2 cf       	rjmp	.-188    	; 0xd70a <_Z18menuProcModelIndexh+0xfe8>
		for (uint8_t j = 0; j < 4; j++) {
			uint8_t attr = ( (sub == k && subSub == j) ? InverseBlink : 0);
    d7c6:	20 e0       	ldi	r18, 0x00	; 0
    d7c8:	ac cf       	rjmp	.-168    	; 0xd722 <_Z18menuProcModelIndexh+0x1000>
			}
//				uint8_t active = (attr && s_editing) ;
#else
			uint8_t active = (attr && s_editMode);
#endif
			if (active) {
    d7ca:	81 2c       	mov	r8, r1
    d7cc:	b5 cf       	rjmp	.-150    	; 0xd738 <_Z18menuProcModelIndexh+0x1016>
			}
			int16_t value;
			int16_t t = 0;
			if (g_model.sub_trim_limit) {
				if ( (t = ld->offset)) {
					if (t > g_model.sub_trim_limit) {
    d7ce:	90 e0       	ldi	r25, 0x00	; 0
    d7d0:	80 17       	cp	r24, r16
    d7d2:	91 07       	cpc	r25, r17
    d7d4:	5c f0       	brlt	.+22     	; 0xd7ec <_Z18menuProcModelIndexh+0x10ca>
						t = g_model.sub_trim_limit;
					} else if (t < -g_model.sub_trim_limit) {
    d7d6:	91 95       	neg	r25
    d7d8:	81 95       	neg	r24
    d7da:	91 09       	sbc	r25, r1
    d7dc:	08 17       	cp	r16, r24
    d7de:	19 07       	cpc	r17, r25
    d7e0:	0c f0       	brlt	.+2      	; 0xd7e4 <_Z18menuProcModelIndexh+0x10c2>
    d7e2:	b5 cf       	rjmp	.-150    	; 0xd74e <_Z18menuProcModelIndexh+0x102c>
    d7e4:	03 c0       	rjmp	.+6      	; 0xd7ec <_Z18menuProcModelIndexh+0x10ca>
#endif
			if (active) {
				StickScrollAllowed = 0;		// Block while editing
			}
			int16_t value;
			int16_t t = 0;
    d7e6:	00 e0       	ldi	r16, 0x00	; 0
    d7e8:	10 e0       	ldi	r17, 0x00	; 0
    d7ea:	b1 cf       	rjmp	.-158    	; 0xd74e <_Z18menuProcModelIndexh+0x102c>
			if (g_model.sub_trim_limit) {
				if ( (t = ld->offset)) {
					if (t > g_model.sub_trim_limit) {
    d7ec:	8c 01       	movw	r16, r24
    d7ee:	af cf       	rjmp	.-162    	; 0xd74e <_Z18menuProcModelIndexh+0x102c>
					if (active) {
						ld->offset = checkIncDec16 (ld->offset, -1000, 1000, EE_MODEL);
					}
					break;
				case 1: {
					int8_t temp = ld->min - 100;
    d7f0:	18 81       	ld	r17, Y
    d7f2:	14 56       	subi	r17, 0x64	; 100

					value += temp;
    d7f4:	ab 01       	movw	r20, r22
    d7f6:	41 0f       	add	r20, r17
    d7f8:	51 1d       	adc	r21, r1
    d7fa:	17 fd       	sbrc	r17, 7
    d7fc:	5a 95       	dec	r21
    d7fe:	43 38       	cpi	r20, 0x83	; 131
    d800:	ef ef       	ldi	r30, 0xFF	; 255
    d802:	5e 07       	cpc	r21, r30
    d804:	14 f4       	brge	.+4      	; 0xd80a <_Z18menuProcModelIndexh+0x10e8>
    d806:	43 e8       	ldi	r20, 0x83	; 131
    d808:	5f ef       	ldi	r21, 0xFF	; 255
					if (value < -125) {
						value = -125;
					}
					lcd_outdezAtt (12 * FW, y, value, attr);
    d80a:	6b 2d       	mov	r22, r11
    d80c:	88 e4       	ldi	r24, 0x48	; 72
    d80e:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
					if (active) {
    d812:	88 20       	and	r8, r8
    d814:	09 f4       	brne	.+2      	; 0xd818 <_Z18menuProcModelIndexh+0x10f6>
    d816:	be cf       	rjmp	.-132    	; 0xd794 <_Z18menuProcModelIndexh+0x1072>
						CHECK_INCDEC_H_MODELVAR(temp, -limit, 25);
    d818:	49 e1       	ldi	r20, 0x19	; 25
    d81a:	64 2d       	mov	r22, r4
    d81c:	81 2f       	mov	r24, r17
    d81e:	0e 94 86 13 	call	0x270c	; 0x270c <_Z14checkIncDec_hmaaa>
						ld->min = temp + 100;
    d822:	8c 59       	subi	r24, 0x9C	; 156
    d824:	88 83       	st	Y, r24
    d826:	b6 cf       	rjmp	.-148    	; 0xd794 <_Z18menuProcModelIndexh+0x1072>
					}
				}
					break;
				case 2: {
					value += (int8_t) (ld->max + 100);
    d828:	89 81       	ldd	r24, Y+1	; 0x01
    d82a:	8c 59       	subi	r24, 0x9C	; 156
    d82c:	ab 01       	movw	r20, r22
    d82e:	48 0f       	add	r20, r24
    d830:	51 1d       	adc	r21, r1
    d832:	87 fd       	sbrc	r24, 7
    d834:	5a 95       	dec	r21
    d836:	4e 37       	cpi	r20, 0x7E	; 126
    d838:	51 05       	cpc	r21, r1
    d83a:	14 f0       	brlt	.+4      	; 0xd840 <_Z18menuProcModelIndexh+0x111e>
    d83c:	4d e7       	ldi	r20, 0x7D	; 125
    d83e:	50 e0       	ldi	r21, 0x00	; 0
					if (value > 125) {
						value = 125;
					}
					lcd_outdezAtt (17 * FW, y, value, attr);
    d840:	6b 2d       	mov	r22, r11
    d842:	86 e6       	ldi	r24, 0x66	; 102
    d844:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
					if (t) {
    d848:	01 2b       	or	r16, r17
    d84a:	31 f0       	breq	.+12     	; 0xd858 <_Z18menuProcModelIndexh+0x1136>
//						plotType = PLOT_BLACK ;
						lcd_rect (9 * FW - 4, y - 1, 56, 9);
    d84c:	29 e0       	ldi	r18, 0x09	; 9
    d84e:	48 e3       	ldi	r20, 0x38	; 56
    d850:	65 2d       	mov	r22, r5
    d852:	82 e3       	ldi	r24, 0x32	; 50
    d854:	0e 94 98 29 	call	0x5330	; 0x5330 <_Z8lcd_recthhhh>
//						plotType = PLOT_XOR ;
					}
					if (active) {
    d858:	88 20       	and	r8, r8
    d85a:	09 f4       	brne	.+2      	; 0xd85e <_Z18menuProcModelIndexh+0x113c>
    d85c:	9b cf       	rjmp	.-202    	; 0xd794 <_Z18menuProcModelIndexh+0x1072>
						int8_t temp = ld->max + 100;
    d85e:	89 81       	ldd	r24, Y+1	; 0x01
						CHECK_INCDEC_H_MODELVAR(temp, -25, limit);
    d860:	47 2d       	mov	r20, r7
    d862:	67 ee       	ldi	r22, 0xE7	; 231
    d864:	8c 59       	subi	r24, 0x9C	; 156
    d866:	0e 94 86 13 	call	0x270c	; 0x270c <_Z14checkIncDec_hmaaa>
						ld->max = temp - 100;
    d86a:	84 56       	subi	r24, 0x64	; 100
    d86c:	89 83       	std	Y+1, r24	; 0x01
    d86e:	92 cf       	rjmp	.-220    	; 0xd794 <_Z18menuProcModelIndexh+0x1072>
					}
				}
					break;
				case 3:
					menu_lcd_HYPHINV (18 * FW, y, ld->reverse, attr);
    d870:	4a 81       	ldd	r20, Y+2	; 0x02
    d872:	6b 2d       	mov	r22, r11
    d874:	8c e6       	ldi	r24, 0x6C	; 108
    d876:	0e 94 0d 3a 	call	0x741a	; 0x741a <_Z16menu_lcd_HYPHINVhhhh>
//            lcd_putsnAtt(   18*FW, y, PSTR("---INV")+ld->reverse*3,3,attr);
					if (active) {
    d87a:	88 20       	and	r8, r8
    d87c:	09 f4       	brne	.+2      	; 0xd880 <_Z18menuProcModelIndexh+0x115e>
    d87e:	8a cf       	rjmp	.-236    	; 0xd794 <_Z18menuProcModelIndexh+0x1072>
						CHECK_INCDEC_H_MODELVAR_0(ld->reverse, 1);
    d880:	61 e0       	ldi	r22, 0x01	; 1
    d882:	8a 81       	ldd	r24, Y+2	; 0x02
    d884:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    d888:	91 e0       	ldi	r25, 0x01	; 1
    d88a:	81 11       	cpse	r24, r1
    d88c:	01 c0       	rjmp	.+2      	; 0xd890 <_Z18menuProcModelIndexh+0x116e>
    d88e:	90 e0       	ldi	r25, 0x00	; 0
    d890:	9a 83       	std	Y+2, r25	; 0x02
    d892:	80 cf       	rjmp	.-256    	; 0xd794 <_Z18menuProcModelIndexh+0x1072>
			}
		}
	}
	if (k == NUM_CHNOUT) {
		//last line available - add the "copy trim menu" line
		uint8_t attr = (sub == NUM_CHNOUT) ? INVERS : 0;
    d894:	21 e0       	ldi	r18, 0x01	; 1
    d896:	f0 e1       	ldi	r31, 0x10	; 16
    d898:	ff 12       	cpse	r15, r31
    d89a:	20 e0       	ldi	r18, 0x00	; 0
//		mstate2.m_posHorz = 0 ;
		lcd_putsAtt (3 * FW, y, PSTR(STR_COPY_TRIM), s_noHi ? 0 : attr);
    d89c:	80 91 a3 0d 	lds	r24, 0x0DA3
    d8a0:	81 11       	cpse	r24, r1
    d8a2:	92 c1       	rjmp	.+804    	; 0xdbc8 <_Z18menuProcModelIndexh+0x14a6>
    d8a4:	48 e4       	ldi	r20, 0x48	; 72
    d8a6:	52 e1       	ldi	r21, 0x12	; 18
    d8a8:	6b 2d       	mov	r22, r11
    d8aa:	82 e1       	ldi	r24, 0x12	; 18
    d8ac:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>
//        s_noHi = NO_HI_LEN;
//        killEvents(event);
//        setStickCenter(); //if highlighted and menu pressed - copy trims
//    }
	}
	asm("");
    d8b0:	78 c1       	rjmp	.+752    	; 0xdba2 <_Z18menuProcModelIndexh+0x1480>
}
#endif

static void menuProcSafetySwitches (uint8_t sub) {

	TITLEP (PSTR(STR_SAFETY_SW));
    d8b2:	88 e3       	ldi	r24, 0x38	; 56
    d8b4:	92 e1       	ldi	r25, 0x12	; 18
    d8b6:	0e 94 2d 39 	call	0x725a	; 0x725a <_Z6TITLEPPKc>

	IlinesCount = NUM_CHNOUT + 1 + 1 + EXTRA_VOICE_SW - 1;
    d8ba:	89 e1       	ldi	r24, 0x19	; 25
    d8bc:	80 93 5b 0e 	sts	0x0E5B, r24
	Columns = &ProgColumns[COLUMNS_2];
    d8c0:	84 e0       	ldi	r24, 0x04	; 4
    d8c2:	9d e1       	ldi	r25, 0x1D	; 29
    d8c4:	90 93 57 0e 	sts	0x0E57, r25
    d8c8:	80 93 56 0e 	sts	0x0E56, r24
	uint8_t y = 0;
	uint8_t k = 0;
	uint8_t subSub = g_posHorz;
    d8cc:	d0 90 7e 0d 	lds	r13, 0x0D7E
	uint8_t t_pgOfs;

	t_pgOfs = evalOffset (sub, 6);
    d8d0:	66 e0       	ldi	r22, 0x06	; 6
    d8d2:	8f 2d       	mov	r24, r15
    d8d4:	0e 94 09 5d 	call	0xba12	; 0xba12 <_Z10evalOffsetah>
    d8d8:	e8 2e       	mov	r14, r24
    d8da:	18 e0       	ldi	r17, 0x08	; 8
			}

			lcd_xlabel_decimal (y, PSTR(STR_NUM_VOICE_SW), g_model.numVoice + 8, attr, 18 * FW);
		} else // if(k<NUM_CHNOUT+1)
		{
			uint8_t numSafety = 16 - g_model.numVoice;
    d8dc:	50 e1       	ldi	r21, 0x10	; 16
    d8de:	c5 2e       	mov	r12, r21
    d8e0:	80 91 9d 04 	lds	r24, 0x049D

	t_pgOfs = evalOffset (sub, 6);
	for (uint8_t i = 0; i < 7; i++) {
		y = (i + 1) * FH;
		k = i + t_pgOfs;
		if (k == 0) {
    d8e4:	e1 10       	cpse	r14, r1
    d8e6:	1f c0       	rjmp	.+62     	; 0xd926 <_Z18menuProcModelIndexh+0x1204>

			uint8_t attr = 0;
			if (sub == k) {
    d8e8:	f1 10       	cpse	r15, r1
    d8ea:	0e c0       	rjmp	.+28     	; 0xd908 <_Z18menuProcModelIndexh+0x11e6>
				attr = InverseBlink;
    d8ec:	c0 91 9f 0d 	lds	r28, 0x0D9F
				CHECK_INCDEC_H_MODELVAR_0(g_model.numVoice, 16);
    d8f0:	60 e1       	ldi	r22, 0x10	; 16
    d8f2:	8f 71       	andi	r24, 0x1F	; 31
    d8f4:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    d8f8:	8f 71       	andi	r24, 0x1F	; 31
    d8fa:	90 91 9d 04 	lds	r25, 0x049D
    d8fe:	90 7e       	andi	r25, 0xE0	; 224
    d900:	98 2b       	or	r25, r24
    d902:	90 93 9d 04 	sts	0x049D, r25
    d906:	01 c0       	rjmp	.+2      	; 0xd90a <_Z18menuProcModelIndexh+0x11e8>
	for (uint8_t i = 0; i < 7; i++) {
		y = (i + 1) * FH;
		k = i + t_pgOfs;
		if (k == 0) {

			uint8_t attr = 0;
    d908:	c0 e0       	ldi	r28, 0x00	; 0
			if (sub == k) {
				attr = InverseBlink;
				CHECK_INCDEC_H_MODELVAR_0(g_model.numVoice, 16);
			}

			lcd_xlabel_decimal (y, PSTR(STR_NUM_VOICE_SW), g_model.numVoice + 8, attr, 18 * FW);
    d90a:	40 91 9d 04 	lds	r20, 0x049D
    d90e:	4f 71       	andi	r20, 0x1F	; 31
    d910:	50 e0       	ldi	r21, 0x00	; 0
    d912:	48 5f       	subi	r20, 0xF8	; 248
    d914:	5f 4f       	sbci	r21, 0xFF	; 255
    d916:	0c e6       	ldi	r16, 0x6C	; 108
    d918:	2c 2f       	mov	r18, r28
    d91a:	68 e2       	ldi	r22, 0x28	; 40
    d91c:	72 e1       	ldi	r23, 0x12	; 18
    d91e:	81 2f       	mov	r24, r17
    d920:	0e 94 1b 3a 	call	0x7436	; 0x7436 <_Z18lcd_xlabel_decimalhPKcjhh>
    d924:	39 c1       	rjmp	.+626    	; 0xdb98 <_Z18menuProcModelIndexh+0x1476>
		} else // if(k<NUM_CHNOUT+1)
		{
			uint8_t numSafety = 16 - g_model.numVoice;
    d926:	8f 71       	andi	r24, 0x1F	; 31
    d928:	bc 2c       	mov	r11, r12
    d92a:	b8 1a       	sub	r11, r24

			SafetySwData *sd = &g_model.safetySw[k - 1];
    d92c:	ce 2d       	mov	r28, r14
    d92e:	d0 e0       	ldi	r29, 0x00	; 0

			if (k - 1 >= NUM_CHNOUT) {
    d930:	c1 31       	cpi	r28, 0x11	; 17
    d932:	d1 05       	cpc	r29, r1
    d934:	2c f4       	brge	.+10     	; 0xd940 <_Z18menuProcModelIndexh+0x121e>
			lcd_xlabel_decimal (y, PSTR(STR_NUM_VOICE_SW), g_model.numVoice + 8, attr, 18 * FW);
		} else // if(k<NUM_CHNOUT+1)
		{
			uint8_t numSafety = 16 - g_model.numVoice;

			SafetySwData *sd = &g_model.safetySw[k - 1];
    d936:	cc 0f       	add	r28, r28
    d938:	dd 1f       	adc	r29, r29
    d93a:	c4 56       	subi	r28, 0x64	; 100
    d93c:	db 4f       	sbci	r29, 0xFB	; 251
    d93e:	04 c0       	rjmp	.+8      	; 0xd948 <_Z18menuProcModelIndexh+0x1226>

			if (k - 1 >= NUM_CHNOUT) {
				sd = &g_model.xvoiceSw[k - 1 - NUM_CHNOUT];
    d940:	cc 0f       	add	r28, r28
    d942:	dd 1f       	adc	r29, r29
    d944:	c0 50       	subi	r28, 0x00	; 0
    d946:	db 4f       	sbci	r29, 0xFB	; 251
			}

			for (uint8_t j = 0; j < 3; j++) {
    d948:	a1 2c       	mov	r10, r1
				uint8_t attr = ( (sub == k && subSub == j) ? InverseBlink : 0);
    d94a:	fe 10       	cpse	r15, r14
    d94c:	05 c0       	rjmp	.+10     	; 0xd958 <_Z18menuProcModelIndexh+0x1236>
    d94e:	da 10       	cpse	r13, r10
    d950:	03 c0       	rjmp	.+6      	; 0xd958 <_Z18menuProcModelIndexh+0x1236>
    d952:	00 91 9f 0d 	lds	r16, 0x0D9F
    d956:	01 c0       	rjmp	.+2      	; 0xd95a <_Z18menuProcModelIndexh+0x1238>
    d958:	00 e0       	ldi	r16, 0x00	; 0

#ifndef NOPOTSCROLL
				uint8_t active = attr;	// (attr && s_editing) ;
				if (s_editing == 0) {
    d95a:	80 91 a4 0d 	lds	r24, 0x0DA4
    d95e:	88 23       	and	r24, r24
    d960:	11 f0       	breq	.+4      	; 0xd966 <_Z18menuProcModelIndexh+0x1244>

			for (uint8_t j = 0; j < 3; j++) {
				uint8_t attr = ( (sub == k && subSub == j) ? InverseBlink : 0);

#ifndef NOPOTSCROLL
				uint8_t active = attr;	// (attr && s_editing) ;
    d962:	90 2e       	mov	r9, r16
    d964:	01 c0       	rjmp	.+2      	; 0xd968 <_Z18menuProcModelIndexh+0x1246>
				if (s_editing == 0) {
					active = 0;
    d966:	91 2c       	mov	r9, r1
				}
#else
				uint8_t active = (attr && s_editMode);
#endif
				if (k <= numSafety) {
    d968:	be 14       	cp	r11, r14
    d96a:	08 f4       	brcc	.+2      	; 0xd96e <_Z18menuProcModelIndexh+0x124c>
    d96c:	a7 c0       	rjmp	.+334    	; 0xdabc <_Z18menuProcModelIndexh+0x139a>
					if (j == 0) {
    d96e:	a1 10       	cpse	r10, r1
    d970:	23 c0       	rjmp	.+70     	; 0xd9b8 <_Z18menuProcModelIndexh+0x1296>
						putsChn (0, y, k, 0);
    d972:	20 e0       	ldi	r18, 0x00	; 0
    d974:	4e 2d       	mov	r20, r14
    d976:	61 2f       	mov	r22, r17
    d978:	80 e0       	ldi	r24, 0x00	; 0
    d97a:	0e 94 c3 10 	call	0x2186	; 0x2186 <_Z7putsChnhhhh>
						lcd_putsAttIdx (5 * FW, y, PSTR("\001SAVX"), sd->opt.ss.mode, attr);
    d97e:	28 81       	ld	r18, Y
    d980:	22 95       	swap	r18
    d982:	26 95       	lsr	r18
    d984:	26 95       	lsr	r18
    d986:	23 70       	andi	r18, 0x03	; 3
    d988:	42 e2       	ldi	r20, 0x22	; 34
    d98a:	52 e1       	ldi	r21, 0x12	; 18
    d98c:	61 2f       	mov	r22, r17
    d98e:	8e e1       	ldi	r24, 0x1E	; 30
    d990:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
						if (active) {
    d994:	99 20       	and	r9, r9
    d996:	09 f4       	brne	.+2      	; 0xd99a <_Z18menuProcModelIndexh+0x1278>
    d998:	fb c0       	rjmp	.+502    	; 0xdb90 <_Z18menuProcModelIndexh+0x146e>
							CHECK_INCDEC_H_MODELVAR_0(sd->opt.ss.mode, 3);
    d99a:	88 81       	ld	r24, Y
    d99c:	63 e0       	ldi	r22, 0x03	; 3
    d99e:	82 95       	swap	r24
    d9a0:	86 95       	lsr	r24
    d9a2:	86 95       	lsr	r24
    d9a4:	83 70       	andi	r24, 0x03	; 3
    d9a6:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    d9aa:	82 95       	swap	r24
    d9ac:	88 0f       	add	r24, r24
    d9ae:	88 0f       	add	r24, r24
    d9b0:	80 7c       	andi	r24, 0xC0	; 192
    d9b2:	98 81       	ld	r25, Y
    d9b4:	9f 73       	andi	r25, 0x3F	; 63
    d9b6:	31 c0       	rjmp	.+98     	; 0xda1a <_Z18menuProcModelIndexh+0x12f8>
    d9b8:	88 81       	ld	r24, Y
						}
					} else if (j == 1) {
    d9ba:	21 e0       	ldi	r18, 0x01	; 1
						int8_t max = MAX_DRSWITCH;
#ifndef NOSAFETY_A_OR_V					
						if (sd->opt.ss.mode == 2) {
    d9bc:	98 2f       	mov	r25, r24
    d9be:	90 7c       	andi	r25, 0xC0	; 192
						putsChn (0, y, k, 0);
						lcd_putsAttIdx (5 * FW, y, PSTR("\001SAVX"), sd->opt.ss.mode, attr);
						if (active) {
							CHECK_INCDEC_H_MODELVAR_0(sd->opt.ss.mode, 3);
						}
					} else if (j == 1) {
    d9c0:	a2 12       	cpse	r10, r18
    d9c2:	2e c0       	rjmp	.+92     	; 0xda20 <_Z18menuProcModelIndexh+0x12fe>
						int8_t max = MAX_DRSWITCH;
#ifndef NOSAFETY_A_OR_V					
						if (sd->opt.ss.mode == 2) {
    d9c4:	90 38       	cpi	r25, 0x80	; 128
    d9c6:	19 f0       	breq	.+6      	; 0xd9ce <_Z18menuProcModelIndexh+0x12ac>
						lcd_putsAttIdx (5 * FW, y, PSTR("\001SAVX"), sd->opt.ss.mode, attr);
						if (active) {
							CHECK_INCDEC_H_MODELVAR_0(sd->opt.ss.mode, 3);
						}
					} else if (j == 1) {
						int8_t max = MAX_DRSWITCH;
    d9c8:	26 e1       	ldi	r18, 0x16	; 22
    d9ca:	82 2e       	mov	r8, r18
    d9cc:	02 c0       	rjmp	.+4      	; 0xd9d2 <_Z18menuProcModelIndexh+0x12b0>
#ifndef NOSAFETY_A_OR_V					
						if (sd->opt.ss.mode == 2) {
							max = MAX_DRSWITCH + 3;
    d9ce:	99 e1       	ldi	r25, 0x19	; 25
    d9d0:	89 2e       	mov	r8, r25
						}
						if (sd->opt.ss.swtch > MAX_DRSWITCH) {
    d9d2:	48 2f       	mov	r20, r24
    d9d4:	44 0f       	add	r20, r20
    d9d6:	44 0f       	add	r20, r20
    d9d8:	45 95       	asr	r20
    d9da:	45 95       	asr	r20
    d9dc:	47 31       	cpi	r20, 0x17	; 23
    d9de:	4c f0       	brlt	.+18     	; 0xd9f2 <_Z18menuProcModelIndexh+0x12d0>
							lcd_putsAttIdx (7 * FW, y, PSTR(STR_V_OPT1),
									sd->opt.ss.swtch - MAX_DRSWITCH - 1, attr);
    d9e0:	29 ee       	ldi	r18, 0xE9	; 233
    d9e2:	24 0f       	add	r18, r20
    d9e4:	4b e0       	ldi	r20, 0x0B	; 11
    d9e6:	52 e1       	ldi	r21, 0x12	; 18
    d9e8:	61 2f       	mov	r22, r17
    d9ea:	8a e2       	ldi	r24, 0x2A	; 42
    d9ec:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
    d9f0:	05 c0       	rjmp	.+10     	; 0xd9fc <_Z18menuProcModelIndexh+0x12da>
						} else {
#endif
							putsDrSwitches (7 * FW, y, sd->opt.ss.swtch, attr);
    d9f2:	20 2f       	mov	r18, r16
    d9f4:	61 2f       	mov	r22, r17
    d9f6:	8a e2       	ldi	r24, 0x2A	; 42
    d9f8:	0e 94 c9 10 	call	0x2192	; 0x2192 <_Z14putsDrSwitcheshhah>
#ifndef NOSAFETY_A_OR_V					
						}
#endif
						if (active) {
    d9fc:	99 20       	and	r9, r9
    d9fe:	09 f4       	brne	.+2      	; 0xda02 <_Z18menuProcModelIndexh+0x12e0>
    da00:	c7 c0       	rjmp	.+398    	; 0xdb90 <_Z18menuProcModelIndexh+0x146e>
							CHECK_INCDEC_MODELSWITCH(sd->opt.ss.swtch, -MAX_DRSWITCH, max);
    da02:	88 81       	ld	r24, Y
    da04:	88 0f       	add	r24, r24
    da06:	88 0f       	add	r24, r24
    da08:	48 2d       	mov	r20, r8
    da0a:	6a ee       	ldi	r22, 0xEA	; 234
    da0c:	85 95       	asr	r24
    da0e:	85 95       	asr	r24
    da10:	0e 94 86 13 	call	0x270c	; 0x270c <_Z14checkIncDec_hmaaa>
    da14:	8f 73       	andi	r24, 0x3F	; 63
    da16:	98 81       	ld	r25, Y
    da18:	90 7c       	andi	r25, 0xC0	; 192
    da1a:	98 2b       	or	r25, r24
    da1c:	98 83       	st	Y, r25
    da1e:	b8 c0       	rjmp	.+368    	; 0xdb90 <_Z18menuProcModelIndexh+0x146e>
    da20:	49 81       	ldd	r20, Y+1	; 0x01
						}
					} else {
						int8_t min, max;
#ifndef NOSAFETY_A_OR_V					
						if (sd->opt.ss.mode == 1) {
    da22:	90 34       	cpi	r25, 0x40	; 64
    da24:	91 f4       	brne	.+36     	; 0xda4a <_Z18menuProcModelIndexh+0x1328>
    da26:	47 fd       	sbrc	r20, 7
    da28:	03 c0       	rjmp	.+6      	; 0xda30 <_Z18menuProcModelIndexh+0x130e>
#define DIM(arr) (sizeof((arr))/sizeof((arr)[0]))

/// liefert Betrag des Arguments
template<class t> inline t abs(t a){ return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> inline t min(t a, t b){ return a<b?a:b; }
    da2a:	4f 30       	cpi	r20, 0x0F	; 15
    da2c:	24 f4       	brge	.+8      	; 0xda36 <_Z18menuProcModelIndexh+0x1314>
    da2e:	01 c0       	rjmp	.+2      	; 0xda32 <_Z18menuProcModelIndexh+0x1310>
/// liefert das Maximum der Argumente
template<class t> inline t max(t a, t b){ return a>b?a:b; }
    da30:	40 e0       	ldi	r20, 0x00	; 0
    da32:	24 2f       	mov	r18, r20
    da34:	01 c0       	rjmp	.+2      	; 0xda38 <_Z18menuProcModelIndexh+0x1316>
#define DIM(arr) (sizeof((arr))/sizeof((arr)[0]))

/// liefert Betrag des Arguments
template<class t> inline t abs(t a){ return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> inline t min(t a, t b){ return a<b?a:b; }
    da36:	2f e0       	ldi	r18, 0x0F	; 15
							min = 0;
							max = 15;
							sd->opt.ss.val = limit (min, sd->opt.ss.val, max);
    da38:	29 83       	std	Y+1, r18	; 0x01
							lcd_putsAttIdx (16 * FW, y, Str_Sounds, sd->opt.ss.val, attr);
    da3a:	4a e2       	ldi	r20, 0x2A	; 42
    da3c:	5e e1       	ldi	r21, 0x1E	; 30
    da3e:	61 2f       	mov	r22, r17
    da40:	80 e6       	ldi	r24, 0x60	; 96
    da42:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
					} else {
						int8_t min, max;
#ifndef NOSAFETY_A_OR_V					
						if (sd->opt.ss.mode == 1) {
							min = 0;
							max = 15;
    da46:	4f e0       	ldi	r20, 0x0F	; 15
    da48:	15 c0       	rjmp	.+42     	; 0xda74 <_Z18menuProcModelIndexh+0x1352>
							sd->opt.ss.val = limit (min, sd->opt.ss.val, max);
							lcd_putsAttIdx (16 * FW, y, Str_Sounds, sd->opt.ss.val, attr);
//         							lcd_putsAttIdx_right( y, Str_Sounds, sd->opt.ss.val,attr);
						} else if (sd->opt.ss.mode == 2) {
    da4a:	90 38       	cpi	r25, 0x80	; 128
    da4c:	31 f5       	brne	.+76     	; 0xda9a <_Z18menuProcModelIndexh+0x1378>
							if (sd->opt.ss.swtch > MAX_DRSWITCH) {
    da4e:	88 0f       	add	r24, r24
    da50:	88 0f       	add	r24, r24
    da52:	89 35       	cpi	r24, 0x59	; 89
    da54:	8c f0       	brlt	.+34     	; 0xda78 <_Z18menuProcModelIndexh+0x1356>
/// liefert das Maximum der Argumente
template<class t> inline t max(t a, t b){ return a>b?a:b; }
    da56:	47 fd       	sbrc	r20, 7
    da58:	04 c0       	rjmp	.+8      	; 0xda62 <_Z18menuProcModelIndexh+0x1340>
#define DIM(arr) (sizeof((arr))/sizeof((arr)[0]))

/// liefert Betrag des Arguments
template<class t> inline t abs(t a){ return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> inline t min(t a, t b){ return a<b?a:b; }
    da5a:	49 30       	cpi	r20, 0x09	; 9
    da5c:	1c f0       	brlt	.+6      	; 0xda64 <_Z18menuProcModelIndexh+0x1342>
    da5e:	49 e0       	ldi	r20, 0x09	; 9
    da60:	01 c0       	rjmp	.+2      	; 0xda64 <_Z18menuProcModelIndexh+0x1342>
/// liefert das Maximum der Argumente
template<class t> inline t max(t a, t b){ return a>b?a:b; }
    da62:	40 e0       	ldi	r20, 0x00	; 0
								min = 0;
								max = NUM_TELEM_ITEMS - 1;
								sd->opt.ss.val = limit (min, sd->opt.ss.val, max);
    da64:	49 83       	std	Y+1, r20	; 0x01
								putsAttIdxTelemItems (16 * FW, y, sd->opt.ss.val + 1, attr);
    da66:	4f 5f       	subi	r20, 0xFF	; 255
    da68:	20 2f       	mov	r18, r16
    da6a:	61 2f       	mov	r22, r17
    da6c:	80 e6       	ldi	r24, 0x60	; 96
    da6e:	0e 94 60 36 	call	0x6cc0	; 0x6cc0 <_Z20putsAttIdxTelemItemshhhh>
							lcd_putsAttIdx (16 * FW, y, Str_Sounds, sd->opt.ss.val, attr);
//         							lcd_putsAttIdx_right( y, Str_Sounds, sd->opt.ss.val,attr);
						} else if (sd->opt.ss.mode == 2) {
							if (sd->opt.ss.swtch > MAX_DRSWITCH) {
								min = 0;
								max = NUM_TELEM_ITEMS - 1;
    da72:	49 e0       	ldi	r20, 0x09	; 9
							sd->opt.ss.val = limit (min, sd->opt.ss.val, max);
							lcd_putsAttIdx (16 * FW, y, Str_Sounds, sd->opt.ss.val, attr);
//         							lcd_putsAttIdx_right( y, Str_Sounds, sd->opt.ss.val,attr);
						} else if (sd->opt.ss.mode == 2) {
							if (sd->opt.ss.swtch > MAX_DRSWITCH) {
								min = 0;
    da74:	60 e0       	ldi	r22, 0x00	; 0
    da76:	1b c0       	rjmp	.+54     	; 0xdaae <_Z18menuProcModelIndexh+0x138c>
#define DIM(arr) (sizeof((arr))/sizeof((arr)[0]))

/// liefert Betrag des Arguments
template<class t> inline t abs(t a){ return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> inline t min(t a, t b){ return a<b?a:b; }
    da78:	4f 36       	cpi	r20, 0x6F	; 111
    da7a:	0c f0       	brlt	.+2      	; 0xda7e <_Z18menuProcModelIndexh+0x135c>
    da7c:	4f e6       	ldi	r20, 0x6F	; 111
								putsAttIdxTelemItems (16 * FW, y, sd->opt.ss.val + 1, attr);
//  							lcd_putsAttIdx( 16*FW, y, Str_telemItems, sd->opt.ss.val+1, attr ) ;
							} else {
								min = -128;
								max = 111;
								sd->opt.ss.val = limit (min, sd->opt.ss.val, max);
    da7e:	49 83       	std	Y+1, r20	; 0x01
								lcd_outdezAtt (16 * FW, y, sd->opt.ss.val + 128, attr);
    da80:	55 27       	eor	r21, r21
    da82:	47 fd       	sbrc	r20, 7
    da84:	50 95       	com	r21
    da86:	40 58       	subi	r20, 0x80	; 128
    da88:	5f 4f       	sbci	r21, 0xFF	; 255
    da8a:	20 2f       	mov	r18, r16
    da8c:	61 2f       	mov	r22, r17
    da8e:	80 e6       	ldi	r24, 0x60	; 96
    da90:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
								sd->opt.ss.val = limit (min, sd->opt.ss.val, max);
								putsAttIdxTelemItems (16 * FW, y, sd->opt.ss.val + 1, attr);
//  							lcd_putsAttIdx( 16*FW, y, Str_telemItems, sd->opt.ss.val+1, attr ) ;
							} else {
								min = -128;
								max = 111;
    da94:	4f e6       	ldi	r20, 0x6F	; 111
								max = NUM_TELEM_ITEMS - 1;
								sd->opt.ss.val = limit (min, sd->opt.ss.val, max);
								putsAttIdxTelemItems (16 * FW, y, sd->opt.ss.val + 1, attr);
//  							lcd_putsAttIdx( 16*FW, y, Str_telemItems, sd->opt.ss.val+1, attr ) ;
							} else {
								min = -128;
    da96:	60 e8       	ldi	r22, 0x80	; 128
    da98:	0a c0       	rjmp	.+20     	; 0xdaae <_Z18menuProcModelIndexh+0x138c>
						}
#endif
						else {
							min = -125;
							max = 125;
							lcd_outdezAtt (16 * FW, y, sd->opt.ss.val, attr);
    da9a:	55 27       	eor	r21, r21
    da9c:	47 fd       	sbrc	r20, 7
    da9e:	50 95       	com	r21
    daa0:	20 2f       	mov	r18, r16
    daa2:	61 2f       	mov	r22, r17
    daa4:	80 e6       	ldi	r24, 0x60	; 96
    daa6:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
							}
						}
#endif
						else {
							min = -125;
							max = 125;
    daaa:	4d e7       	ldi	r20, 0x7D	; 125
								lcd_outdezAtt (16 * FW, y, sd->opt.ss.val + 128, attr);
							}
						}
#endif
						else {
							min = -125;
    daac:	63 e8       	ldi	r22, 0x83	; 131
							max = 125;
							lcd_outdezAtt (16 * FW, y, sd->opt.ss.val, attr);
						}
						if (active) {
    daae:	99 20       	and	r9, r9
    dab0:	09 f4       	brne	.+2      	; 0xdab4 <_Z18menuProcModelIndexh+0x1392>
    dab2:	6e c0       	rjmp	.+220    	; 0xdb90 <_Z18menuProcModelIndexh+0x146e>
							CHECK_INCDEC_H_MODELVAR(sd->opt.ss.val, min, max);
    dab4:	89 81       	ldd	r24, Y+1	; 0x01
    dab6:	0e 94 86 13 	call	0x270c	; 0x270c <_Z14checkIncDec_hmaaa>
    daba:	69 c0       	rjmp	.+210    	; 0xdb8e <_Z18menuProcModelIndexh+0x146c>
						}
					}
				} else {
					if (j == 0) {
    dabc:	a1 10       	cpse	r10, r1
    dabe:	20 c0       	rjmp	.+64     	; 0xdb00 <_Z18menuProcModelIndexh+0x13de>
						lcd_puts_Pleft (y, PSTR(STR_VS));
    dac0:	68 e0       	ldi	r22, 0x08	; 8
    dac2:	72 e1       	ldi	r23, 0x12	; 18
    dac4:	81 2f       	mov	r24, r17
    dac6:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <_Z14lcd_puts_PlefthPKc>
						lcd_2_digits (22, y, k, 0);
    daca:	20 e0       	ldi	r18, 0x00	; 0
    dacc:	4e 2d       	mov	r20, r14
    dace:	61 2f       	mov	r22, r17
    dad0:	86 e1       	ldi	r24, 0x16	; 22
    dad2:	0e 94 49 29 	call	0x5292	; 0x5292 <_Z12lcd_2_digitshhhh>
						if (active) {
    dad6:	99 20       	and	r9, r9
    dad8:	59 f0       	breq	.+22     	; 0xdaf0 <_Z18menuProcModelIndexh+0x13ce>
							CHECK_INCDEC_MODELSWITCH(sd->opt.vs.vswtch, 0, MAX_DRSWITCH-1);
    dada:	88 81       	ld	r24, Y
    dadc:	45 e1       	ldi	r20, 0x15	; 21
    dade:	60 e0       	ldi	r22, 0x00	; 0
    dae0:	8f 71       	andi	r24, 0x1F	; 31
    dae2:	0e 94 86 13 	call	0x270c	; 0x270c <_Z14checkIncDec_hmaaa>
    dae6:	8f 71       	andi	r24, 0x1F	; 31
    dae8:	98 81       	ld	r25, Y
    daea:	90 7e       	andi	r25, 0xE0	; 224
    daec:	98 2b       	or	r25, r24
    daee:	98 83       	st	Y, r25
						}
						putsDrSwitches (5 * FW, y, sd->opt.vs.vswtch, attr);
    daf0:	48 81       	ld	r20, Y
    daf2:	4f 71       	andi	r20, 0x1F	; 31
    daf4:	20 2f       	mov	r18, r16
    daf6:	61 2f       	mov	r22, r17
    daf8:	8e e1       	ldi	r24, 0x1E	; 30
    dafa:	0e 94 c9 10 	call	0x2192	; 0x2192 <_Z14putsDrSwitcheshhah>
    dafe:	48 c0       	rjmp	.+144    	; 0xdb90 <_Z18menuProcModelIndexh+0x146e>
    db00:	88 81       	ld	r24, Y
					} else if (j == 1) {
    db02:	91 e0       	ldi	r25, 0x01	; 1
    db04:	a9 12       	cpse	r10, r25
    db06:	1a c0       	rjmp	.+52     	; 0xdb3c <_Z18menuProcModelIndexh+0x141a>
						if (active) {
    db08:	99 20       	and	r9, r9
    db0a:	69 f0       	breq	.+26     	; 0xdb26 <_Z18menuProcModelIndexh+0x1404>
							CHECK_INCDEC_H_MODELVAR_0(sd->opt.vs.vmode, 6);
    db0c:	66 e0       	ldi	r22, 0x06	; 6
    db0e:	82 95       	swap	r24
    db10:	86 95       	lsr	r24
    db12:	87 70       	andi	r24, 0x07	; 7
    db14:	0e 94 88 13 	call	0x2710	; 0x2710 <_Z15checkIncDec_hm0aa>
    db18:	82 95       	swap	r24
    db1a:	88 0f       	add	r24, r24
    db1c:	80 7e       	andi	r24, 0xE0	; 224
    db1e:	98 81       	ld	r25, Y
    db20:	9f 71       	andi	r25, 0x1F	; 31
    db22:	98 2b       	or	r25, r24
    db24:	98 83       	st	Y, r25
						}
						lcd_putsAttIdx (10 * FW, y, PSTR(STR_VOICE_OPT), sd->opt.vs.vmode, attr);
    db26:	28 81       	ld	r18, Y
    db28:	22 95       	swap	r18
    db2a:	26 95       	lsr	r18
    db2c:	27 70       	andi	r18, 0x07	; 7
    db2e:	4c ed       	ldi	r20, 0xDC	; 220
    db30:	51 e1       	ldi	r21, 0x11	; 17
    db32:	61 2f       	mov	r22, r17
    db34:	8c e3       	ldi	r24, 0x3C	; 60
    db36:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <_Z14lcd_putsAttIdxhhPKchh>
    db3a:	2a c0       	rjmp	.+84     	; 0xdb90 <_Z18menuProcModelIndexh+0x146e>
					} else {
						uint8_t max;
						if (sd->opt.vs.vmode > 5) {
    db3c:	82 95       	swap	r24
    db3e:	86 95       	lsr	r24
    db40:	87 70       	andi	r24, 0x07	; 7
    db42:	90 e0       	ldi	r25, 0x00	; 0
    db44:	49 81       	ldd	r20, Y+1	; 0x01
    db46:	06 97       	sbiw	r24, 0x06	; 6
    db48:	64 f0       	brlt	.+24     	; 0xdb62 <_Z18menuProcModelIndexh+0x1440>
    db4a:	49 30       	cpi	r20, 0x09	; 9
    db4c:	08 f0       	brcs	.+2      	; 0xdb50 <_Z18menuProcModelIndexh+0x142e>
    db4e:	49 e0       	ldi	r20, 0x09	; 9
							max = NUM_TELEM_ITEMS - 1;
							sd->opt.vs.vval = limit ((uint8_t) 0, sd->opt.vs.vval, max);
    db50:	49 83       	std	Y+1, r20	; 0x01
							putsAttIdxTelemItems (16 * FW, y, sd->opt.vs.vval + 1, attr);
    db52:	4f 5f       	subi	r20, 0xFF	; 255
    db54:	20 2f       	mov	r18, r16
    db56:	61 2f       	mov	r22, r17
    db58:	80 e6       	ldi	r24, 0x60	; 96
    db5a:	0e 94 60 36 	call	0x6cc0	; 0x6cc0 <_Z20putsAttIdxTelemItemshhhh>
						}
						lcd_putsAttIdx (10 * FW, y, PSTR(STR_VOICE_OPT), sd->opt.vs.vmode, attr);
					} else {
						uint8_t max;
						if (sd->opt.vs.vmode > 5) {
							max = NUM_TELEM_ITEMS - 1;
    db5e:	69 e0       	ldi	r22, 0x09	; 9
    db60:	10 c0       	rjmp	.+32     	; 0xdb82 <_Z18menuProcModelIndexh+0x1460>
//						lcd_putsAttIdx( 16*FW, y, Str_telemItems, sd->opt.vs.vval+1, attr ) ;
						} else {
							// Allow 251-255 to represent GVAR3-GVAR7
							max = 255;
//						sd->opt.vs.vval = limit( (uint8_t)0, sd->opt.vs.vval, max) ;
							if (sd->opt.vs.vval <= 250) {
    db62:	4b 3f       	cpi	r20, 0xFB	; 251
    db64:	38 f4       	brcc	.+14     	; 0xdb74 <_Z18menuProcModelIndexh+0x1452>
								lcd_outdezAtt (17 * FW, y, sd->opt.vs.vval, attr);
    db66:	50 e0       	ldi	r21, 0x00	; 0
    db68:	20 2f       	mov	r18, r16
    db6a:	61 2f       	mov	r22, r17
    db6c:	86 e6       	ldi	r24, 0x66	; 102
    db6e:	0e 94 21 29 	call	0x5242	; 0x5242 <_Z13lcd_outdezAtthhih>
    db72:	06 c0       	rjmp	.+12     	; 0xdb80 <_Z18menuProcModelIndexh+0x145e>
							} else {
								dispGvar (14 * FW, y, sd->opt.vs.vval - 248, attr);
    db74:	48 5f       	subi	r20, 0xF8	; 248
    db76:	20 2f       	mov	r18, r16
    db78:	61 2f       	mov	r22, r17
    db7a:	84 e5       	ldi	r24, 0x54	; 84
    db7c:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <_Z8dispGvarhhhh>
							sd->opt.vs.vval = limit ((uint8_t) 0, sd->opt.vs.vval, max);
							putsAttIdxTelemItems (16 * FW, y, sd->opt.vs.vval + 1, attr);
//						lcd_putsAttIdx( 16*FW, y, Str_telemItems, sd->opt.vs.vval+1, attr ) ;
						} else {
							// Allow 251-255 to represent GVAR3-GVAR7
							max = 255;
    db80:	6f ef       	ldi	r22, 0xFF	; 255
								lcd_outdezAtt (17 * FW, y, sd->opt.vs.vval, attr);
							} else {
								dispGvar (14 * FW, y, sd->opt.vs.vval - 248, attr);
							}
						}
						if (active) {
    db82:	99 20       	and	r9, r9
    db84:	29 f0       	breq	.+10     	; 0xdb90 <_Z18menuProcModelIndexh+0x146e>
							sd->opt.vs.vval = checkIncDec_hmu0 (sd->opt.vs.vval, max);
    db86:	89 81       	ldd	r24, Y+1	; 0x01
    db88:	90 e0       	ldi	r25, 0x00	; 0
    db8a:	0e 94 8c 13 	call	0x2718	; 0x2718 <_Z16checkIncDec_hmu0ih>
    db8e:	89 83       	std	Y+1, r24	; 0x01

			if (k - 1 >= NUM_CHNOUT) {
				sd = &g_model.xvoiceSw[k - 1 - NUM_CHNOUT];
			}

			for (uint8_t j = 0; j < 3; j++) {
    db90:	a3 94       	inc	r10
    db92:	e3 e0       	ldi	r30, 0x03	; 3
    db94:	ae 12       	cpse	r10, r30
    db96:	d9 ce       	rjmp	.-590    	; 0xd94a <_Z18menuProcModelIndexh+0x1228>
    db98:	e3 94       	inc	r14
    db9a:	18 5f       	subi	r17, 0xF8	; 248
	uint8_t k = 0;
	uint8_t subSub = g_posHorz;
	uint8_t t_pgOfs;

	t_pgOfs = evalOffset (sub, 6);
	for (uint8_t i = 0; i < 7; i++) {
    db9c:	10 34       	cpi	r17, 0x40	; 64
    db9e:	09 f0       	breq	.+2      	; 0xdba2 <_Z18menuProcModelIndexh+0x1480>
    dba0:	9f ce       	rjmp	.-706    	; 0xd8e0 <_Z18menuProcModelIndexh+0x11be>
		case M_SAFETY:
			menuProcSafetySwitches (sub);
			break;
	}
	asm("");
}
    dba2:	df 91       	pop	r29
    dba4:	cf 91       	pop	r28
    dba6:	1f 91       	pop	r17
    dba8:	0f 91       	pop	r16
    dbaa:	ff 90       	pop	r15
    dbac:	ef 90       	pop	r14
    dbae:	df 90       	pop	r13
    dbb0:	cf 90       	pop	r12
    dbb2:	bf 90       	pop	r11
    dbb4:	af 90       	pop	r10
    dbb6:	9f 90       	pop	r9
    dbb8:	8f 90       	pop	r8
    dbba:	7f 90       	pop	r7
    dbbc:	6f 90       	pop	r6
    dbbe:	5f 90       	pop	r5
    dbc0:	4f 90       	pop	r4
    dbc2:	08 95       	ret
		if (k == NUM_CHNOUT) break;
		LimitData *ld = limitaddress (k);
		int16_t v = g_chans512[k] - ( (ld->reverse) ? -ld->offset : ld->offset);

		char swVal = '-';  // '-', '<', '>'
		if (v > 50) swVal = (ld->reverse ? 127 : 126);	// Switch to raw inputs?  - remove trim!
    dbc4:	1e e7       	ldi	r17, 0x7E	; 126
    dbc6:	8d cd       	rjmp	.-1254   	; 0xd6e2 <_Z18menuProcModelIndexh+0xfc0>
	}
	if (k == NUM_CHNOUT) {
		//last line available - add the "copy trim menu" line
		uint8_t attr = (sub == NUM_CHNOUT) ? INVERS : 0;
//		mstate2.m_posHorz = 0 ;
		lcd_putsAtt (3 * FW, y, PSTR(STR_COPY_TRIM), s_noHi ? 0 : attr);
    dbc8:	20 e0       	ldi	r18, 0x00	; 0
    dbca:	6c ce       	rjmp	.-808    	; 0xd8a4 <_Z18menuProcModelIndexh+0x1182>

0000dbcc <_Z12Check_ELERESv>:


/*------------------------------------------------------------------------*//**
* \brief Called every 10 mS in interrupt routine
*//*-------------------------------------------------------------------------*/
void Check_ELERES(void){
    dbcc:	cf 93       	push	r28
    dbce:	df 93       	push	r29
    dbd0:	cd e5       	ldi	r28, 0x5D	; 93
    dbd2:	de e0       	ldi	r29, 0x0E	; 14
    dbd4:	8e e5       	ldi	r24, 0x5E	; 94
    dbd6:	9e e0       	ldi	r25, 0x0E	; 14

	for(uint8_t i = 0; i < SIZE_DT;i++){

		if(DT[i].count_no_frame >= MAX_COUNT_NO_FRAME){
			memcpy(DT[i].value,"??\0\0\0\0\0\0",8);
    dbd8:	38 e0       	ldi	r19, 0x08	; 8
*//*-------------------------------------------------------------------------*/
void Check_ELERES(void){

	for(uint8_t i = 0; i < SIZE_DT;i++){

		if(DT[i].count_no_frame >= MAX_COUNT_NO_FRAME){
    dbda:	28 81       	ld	r18, Y
    dbdc:	24 36       	cpi	r18, 0x64	; 100
    dbde:	60 f0       	brcs	.+24     	; 0xdbf8 <_Z12Check_ELERESv+0x2c>
			memcpy(DT[i].value,"??\0\0\0\0\0\0",8);
    dbe0:	e0 e2       	ldi	r30, 0x20	; 32
    dbe2:	f1 e0       	ldi	r31, 0x01	; 1
    dbe4:	de 01       	movw	r26, r28
    dbe6:	12 96       	adiw	r26, 0x02	; 2
    dbe8:	23 2f       	mov	r18, r19
    dbea:	01 90       	ld	r0, Z+
    dbec:	0d 92       	st	X+, r0
    dbee:	2a 95       	dec	r18
    dbf0:	e1 f7       	brne	.-8      	; 0xdbea <_Z12Check_ELERESv+0x1e>
			DT[i].status = no_date;
    dbf2:	fc 01       	movw	r30, r24
    dbf4:	10 82       	st	Z, r1
    dbf6:	02 c0       	rjmp	.+4      	; 0xdbfc <_Z12Check_ELERESv+0x30>
		}else{
			DT[i].count_no_frame++;
    dbf8:	2f 5f       	subi	r18, 0xFF	; 255
    dbfa:	28 83       	st	Y, r18
    dbfc:	2e 96       	adiw	r28, 0x0e	; 14
    dbfe:	0e 96       	adiw	r24, 0x0e	; 14
/*------------------------------------------------------------------------*//**
* \brief Called every 10 mS in interrupt routine
*//*-------------------------------------------------------------------------*/
void Check_ELERES(void){

	for(uint8_t i = 0; i < SIZE_DT;i++){
    dc00:	ff e0       	ldi	r31, 0x0F	; 15
    dc02:	cf 39       	cpi	r28, 0x9F	; 159
    dc04:	df 07       	cpc	r29, r31
    dc06:	49 f7       	brne	.-46     	; 0xdbda <_Z12Check_ELERESv+0xe>
			DT[i].status = no_date;
		}else{
			DT[i].count_no_frame++;
		}
	}
}
    dc08:	df 91       	pop	r29
    dc0a:	cf 91       	pop	r28
    dc0c:	08 95       	ret

0000dc0e <_Z7Find_IDPKc>:
* \brief Check frame form eLeReS
* \param pointer to finding string
*//*-------------------------------------------------------------------------*/
uint8_t Find_ID(const char *ptr){

	uint8_t len = strlen(ptr);
    dc0e:	fc 01       	movw	r30, r24
    dc10:	01 90       	ld	r0, Z+
    dc12:	00 20       	and	r0, r0
    dc14:	e9 f7       	brne	.-6      	; 0xdc10 <_Z7Find_IDPKc+0x2>
    dc16:	af 01       	movw	r20, r30
    dc18:	41 50       	subi	r20, 0x01	; 1
    dc1a:	51 09       	sbc	r21, r1
    dc1c:	48 1b       	sub	r20, r24
    dc1e:	59 0b       	sbc	r21, r25

	if( strncmp((char*)Rxbuff,ptr,len) == 0){
    dc20:	55 27       	eor	r21, r21
    dc22:	bc 01       	movw	r22, r24
    dc24:	82 ea       	ldi	r24, 0xA2	; 162
    dc26:	9f e0       	ldi	r25, 0x0F	; 15
    dc28:	98 d4       	rcall	.+2352   	; 0xe55a <strncmp>
    dc2a:	21 e0       	ldi	r18, 0x01	; 1
    dc2c:	89 2b       	or	r24, r25
    dc2e:	09 f0       	breq	.+2      	; 0xdc32 <_Z7Find_IDPKc+0x24>
    dc30:	20 e0       	ldi	r18, 0x00	; 0
		return 1;
	}
	return 0;
}
    dc32:	82 2f       	mov	r24, r18
    dc34:	08 95       	ret

0000dc36 <_Z10Check_Datev>:
	//Deb= 00000  00000  00000  00000

	char *ptr = (char*)&Rxbuff;
	//     0       8    14       22
	//RSSI=100 RCQ=100 U=01.5V T=13\0xb0C P=51007 F=01 I=00.0A
	if(Find_ID("RSSI")){
    dc36:	86 e3       	ldi	r24, 0x36	; 54
    dc38:	91 e0       	ldi	r25, 0x01	; 1
    dc3a:	e9 df       	rcall	.-46     	; 0xdc0e <_Z7Find_IDPKc>
    dc3c:	88 23       	and	r24, r24
    dc3e:	89 f1       	breq	.+98     	; 0xdca2 <_Z10Check_Datev+0x6c>

		memcpy(DT[RSSI].value,ptr+5,3);
    dc40:	80 91 a7 0f 	lds	r24, 0x0FA7
    dc44:	90 91 a8 0f 	lds	r25, 0x0FA8
    dc48:	a0 91 a9 0f 	lds	r26, 0x0FA9
    dc4c:	80 93 5f 0e 	sts	0x0E5F, r24
    dc50:	90 93 60 0e 	sts	0x0E60, r25
    dc54:	a0 93 61 0e 	sts	0x0E61, r26
		memcpy(DT[RCQ].value,ptr+13,3);
    dc58:	80 91 af 0f 	lds	r24, 0x0FAF
    dc5c:	90 91 b0 0f 	lds	r25, 0x0FB0
    dc60:	a0 91 b1 0f 	lds	r26, 0x0FB1
    dc64:	80 93 6d 0e 	sts	0x0E6D, r24
    dc68:	90 93 6e 0e 	sts	0x0E6E, r25
    dc6c:	a0 93 6f 0e 	sts	0x0E6F, r26
		DT[RCQ].value[3] = '%';
    dc70:	85 e2       	ldi	r24, 0x25	; 37
    dc72:	80 93 70 0e 	sts	0x0E70, r24
		memcpy(DT[VRX].value,ptr+19,5);
    dc76:	85 e0       	ldi	r24, 0x05	; 5
    dc78:	e5 eb       	ldi	r30, 0xB5	; 181
    dc7a:	ff e0       	ldi	r31, 0x0F	; 15
    dc7c:	ab e7       	ldi	r26, 0x7B	; 123
    dc7e:	be e0       	ldi	r27, 0x0E	; 14
    dc80:	01 90       	ld	r0, Z+
    dc82:	0d 92       	st	X+, r0
    dc84:	8a 95       	dec	r24
    dc86:	e1 f7       	brne	.-8      	; 0xdc80 <_Z10Check_Datev+0x4a>
    dc88:	ee e5       	ldi	r30, 0x5E	; 94
    dc8a:	fe e0       	ldi	r31, 0x0E	; 14
		//memcpy(DT[P].value,&Rxbuff[idx],5);
		//memcpy(DT[F].value,&Rxbuff[idx],2);

		for(uint8_t i = RSSI; i < Amp+1; i++){
			DT[i].count_no_frame = 0;
			DT[i].status = date_ok;
    dc8c:	81 e0       	ldi	r24, 0x01	; 1
    dc8e:	df 01       	movw	r26, r30
    dc90:	11 97       	sbiw	r26, 0x01	; 1
		//memcpy(DT[Temp].value,&Rxbuff[idx],2);
		//memcpy(DT[P].value,&Rxbuff[idx],5);
		//memcpy(DT[F].value,&Rxbuff[idx],2);

		for(uint8_t i = RSSI; i < Amp+1; i++){
			DT[i].count_no_frame = 0;
    dc92:	1c 92       	st	X, r1
			DT[i].status = date_ok;
    dc94:	80 83       	st	Z, r24
    dc96:	3e 96       	adiw	r30, 0x0e	; 14
		memcpy(DT[VRX].value,ptr+19,5);
		//memcpy(DT[Temp].value,&Rxbuff[idx],2);
		//memcpy(DT[P].value,&Rxbuff[idx],5);
		//memcpy(DT[F].value,&Rxbuff[idx],2);

		for(uint8_t i = RSSI; i < Amp+1; i++){
    dc98:	9e e0       	ldi	r25, 0x0E	; 14
    dc9a:	e0 3c       	cpi	r30, 0xC0	; 192
    dc9c:	f9 07       	cpc	r31, r25
    dc9e:	b9 f7       	brne	.-18     	; 0xdc8e <_Z10Check_Datev+0x58>
    dca0:	08 95       	ret
			DT[i].count_no_frame = 0;
			DT[i].status = date_ok;
		}

	}else //UTX=12.0V STX=092 TTX=38\0xb0C
		if( Find_ID("UTX")){
    dca2:	8b e3       	ldi	r24, 0x3B	; 59
    dca4:	91 e0       	ldi	r25, 0x01	; 1
    dca6:	b3 df       	rcall	.-154    	; 0xdc0e <_Z7Find_IDPKc>
    dca8:	88 23       	and	r24, r24
    dcaa:	91 f1       	breq	.+100    	; 0xdd10 <_Z10Check_Datev+0xda>

			memcpy(DT[VTX].value,ptr+3,4);
    dcac:	80 91 a5 0f 	lds	r24, 0x0FA5
    dcb0:	90 91 a6 0f 	lds	r25, 0x0FA6
    dcb4:	a0 91 a7 0f 	lds	r26, 0x0FA7
    dcb8:	b0 91 a8 0f 	lds	r27, 0x0FA8
    dcbc:	80 93 85 0f 	sts	0x0F85, r24
    dcc0:	90 93 86 0f 	sts	0x0F86, r25
    dcc4:	a0 93 87 0f 	sts	0x0F87, r26
    dcc8:	b0 93 88 0f 	sts	0x0F88, r27
			memcpy(DT[STX].value,ptr+10,3);
    dccc:	80 91 ac 0f 	lds	r24, 0x0FAC
    dcd0:	90 91 ad 0f 	lds	r25, 0x0FAD
    dcd4:	a0 91 ae 0f 	lds	r26, 0x0FAE
    dcd8:	80 93 93 0f 	sts	0x0F93, r24
    dcdc:	90 93 94 0f 	sts	0x0F94, r25
    dce0:	a0 93 95 0f 	sts	0x0F95, r26
			memcpy(DT[TTX].value,ptr+18,2);
    dce4:	80 91 b4 0f 	lds	r24, 0x0FB4
    dce8:	90 91 b5 0f 	lds	r25, 0x0FB5
    dcec:	90 93 a2 0f 	sts	0x0FA2, r25
    dcf0:	80 93 a1 0f 	sts	0x0FA1, r24
			for(uint8_t i = VTX; i < TTX+1; i++){
				DT[i].count_no_frame = 0;
    dcf4:	10 92 83 0f 	sts	0x0F83, r1
				DT[i].status = date_ok;
    dcf8:	81 e0       	ldi	r24, 0x01	; 1
    dcfa:	80 93 84 0f 	sts	0x0F84, r24

			memcpy(DT[VTX].value,ptr+3,4);
			memcpy(DT[STX].value,ptr+10,3);
			memcpy(DT[TTX].value,ptr+18,2);
			for(uint8_t i = VTX; i < TTX+1; i++){
				DT[i].count_no_frame = 0;
    dcfe:	10 92 91 0f 	sts	0x0F91, r1
				DT[i].status = date_ok;
    dd02:	80 93 92 0f 	sts	0x0F92, r24

			memcpy(DT[VTX].value,ptr+3,4);
			memcpy(DT[STX].value,ptr+10,3);
			memcpy(DT[TTX].value,ptr+18,2);
			for(uint8_t i = VTX; i < TTX+1; i++){
				DT[i].count_no_frame = 0;
    dd06:	10 92 9f 0f 	sts	0x0F9F, r1
				DT[i].status = date_ok;
    dd0a:	80 93 a0 0f 	sts	0x0FA0, r24
    dd0e:	08 95       	ret
			}

	}else//Pos=50.319569N, 019.153139E HD=00.0

		if( Find_ID("Pos") ){
    dd10:	8f e3       	ldi	r24, 0x3F	; 63
    dd12:	91 e0       	ldi	r25, 0x01	; 1
    dd14:	7c df       	rcall	.-264    	; 0xdc0e <_Z7Find_IDPKc>
    dd16:	88 23       	and	r24, r24
    dd18:	81 f1       	breq	.+96     	; 0xdd7a <_Z10Check_Datev+0x144>

			memcpy(DT[Pos_LAT].value,ptr+4,10);
    dd1a:	8a e0       	ldi	r24, 0x0A	; 10
    dd1c:	e6 ea       	ldi	r30, 0xA6	; 166
    dd1e:	ff e0       	ldi	r31, 0x0F	; 15
    dd20:	a7 e0       	ldi	r26, 0x07	; 7
    dd22:	bf e0       	ldi	r27, 0x0F	; 15
    dd24:	01 90       	ld	r0, Z+
    dd26:	0d 92       	st	X+, r0
    dd28:	8a 95       	dec	r24
    dd2a:	e1 f7       	brne	.-8      	; 0xdd24 <_Z10Check_Datev+0xee>
			memcpy(DT[Pos_LON].value,ptr+16,11);
    dd2c:	8b e0       	ldi	r24, 0x0B	; 11
    dd2e:	e2 eb       	ldi	r30, 0xB2	; 178
    dd30:	ff e0       	ldi	r31, 0x0F	; 15
    dd32:	a5 e1       	ldi	r26, 0x15	; 21
    dd34:	bf e0       	ldi	r27, 0x0F	; 15
    dd36:	01 90       	ld	r0, Z+
    dd38:	0d 92       	st	X+, r0
    dd3a:	8a 95       	dec	r24
    dd3c:	e1 f7       	brne	.-8      	; 0xdd36 <_Z10Check_Datev+0x100>
			memcpy(DT[HDOP].value,ptr+31,4);
    dd3e:	80 91 c1 0f 	lds	r24, 0x0FC1
    dd42:	90 91 c2 0f 	lds	r25, 0x0FC2
    dd46:	a0 91 c3 0f 	lds	r26, 0x0FC3
    dd4a:	b0 91 c4 0f 	lds	r27, 0x0FC4
    dd4e:	80 93 23 0f 	sts	0x0F23, r24
    dd52:	90 93 24 0f 	sts	0x0F24, r25
    dd56:	a0 93 25 0f 	sts	0x0F25, r26
    dd5a:	b0 93 26 0f 	sts	0x0F26, r27
			for(uint8_t i = Pos_LAT; i < HDOP+1; i++){
				DT[i].count_no_frame = 0;
    dd5e:	10 92 05 0f 	sts	0x0F05, r1
				DT[i].status = date_ok;
    dd62:	81 e0       	ldi	r24, 0x01	; 1
    dd64:	80 93 06 0f 	sts	0x0F06, r24

			memcpy(DT[Pos_LAT].value,ptr+4,10);
			memcpy(DT[Pos_LON].value,ptr+16,11);
			memcpy(DT[HDOP].value,ptr+31,4);
			for(uint8_t i = Pos_LAT; i < HDOP+1; i++){
				DT[i].count_no_frame = 0;
    dd68:	10 92 13 0f 	sts	0x0F13, r1
				DT[i].status = date_ok;
    dd6c:	80 93 14 0f 	sts	0x0F14, r24

			memcpy(DT[Pos_LAT].value,ptr+4,10);
			memcpy(DT[Pos_LON].value,ptr+16,11);
			memcpy(DT[HDOP].value,ptr+31,4);
			for(uint8_t i = Pos_LAT; i < HDOP+1; i++){
				DT[i].count_no_frame = 0;
    dd70:	10 92 21 0f 	sts	0x0F21, r1
				DT[i].status = date_ok;
    dd74:	80 93 22 0f 	sts	0x0F22, r24
    dd78:	08 95       	ret
			}

	}else//t=18:19:45 f=1 s=04 c=279 v=000 h=0273
		if( Find_ID("t=")){
    dd7a:	83 e4       	ldi	r24, 0x43	; 67
    dd7c:	91 e0       	ldi	r25, 0x01	; 1
    dd7e:	47 df       	rcall	.-370    	; 0xdc0e <_Z7Find_IDPKc>
    dd80:	88 23       	and	r24, r24
    dd82:	09 f4       	brne	.+2      	; 0xdd86 <_Z10Check_Datev+0x150>
    dd84:	4b c0       	rjmp	.+150    	; 0xde1c <_Z10Check_Datev+0x1e6>

			memcpy(DT[time].value,ptr+2,8);
    dd86:	88 e0       	ldi	r24, 0x08	; 8
    dd88:	e4 ea       	ldi	r30, 0xA4	; 164
    dd8a:	ff e0       	ldi	r31, 0x0F	; 15
    dd8c:	a1 e3       	ldi	r26, 0x31	; 49
    dd8e:	bf e0       	ldi	r27, 0x0F	; 15
    dd90:	01 90       	ld	r0, Z+
    dd92:	0d 92       	st	X+, r0
    dd94:	8a 95       	dec	r24
    dd96:	e1 f7       	brne	.-8      	; 0xdd90 <_Z10Check_Datev+0x15a>
			memcpy(DT[fix].value,ptr+13,1);DT[fix].value[1] = '\0';
    dd98:	80 91 af 0f 	lds	r24, 0x0FAF
    dd9c:	80 93 3f 0f 	sts	0x0F3F, r24
    dda0:	10 92 40 0f 	sts	0x0F40, r1
			memcpy(DT[sat].value,ptr+17,2);
    dda4:	80 91 b3 0f 	lds	r24, 0x0FB3
    dda8:	90 91 b4 0f 	lds	r25, 0x0FB4
    ddac:	90 93 4e 0f 	sts	0x0F4E, r25
    ddb0:	80 93 4d 0f 	sts	0x0F4D, r24
			memcpy(DT[course].value,ptr+22,3);
    ddb4:	80 91 b8 0f 	lds	r24, 0x0FB8
    ddb8:	90 91 b9 0f 	lds	r25, 0x0FB9
    ddbc:	a0 91 ba 0f 	lds	r26, 0x0FBA
    ddc0:	80 93 5b 0f 	sts	0x0F5B, r24
    ddc4:	90 93 5c 0f 	sts	0x0F5C, r25
    ddc8:	a0 93 5d 0f 	sts	0x0F5D, r26
			memcpy(DT[speed].value,ptr+28,3);
    ddcc:	80 91 be 0f 	lds	r24, 0x0FBE
    ddd0:	90 91 bf 0f 	lds	r25, 0x0FBF
    ddd4:	a0 91 c0 0f 	lds	r26, 0x0FC0
    ddd8:	80 93 69 0f 	sts	0x0F69, r24
    dddc:	90 93 6a 0f 	sts	0x0F6A, r25
    dde0:	a0 93 6b 0f 	sts	0x0F6B, r26
			memcpy(DT[alt].value,ptr+34,4);
    dde4:	80 91 c4 0f 	lds	r24, 0x0FC4
    dde8:	90 91 c5 0f 	lds	r25, 0x0FC5
    ddec:	a0 91 c6 0f 	lds	r26, 0x0FC6
    ddf0:	b0 91 c7 0f 	lds	r27, 0x0FC7
    ddf4:	80 93 77 0f 	sts	0x0F77, r24
    ddf8:	90 93 78 0f 	sts	0x0F78, r25
    ddfc:	a0 93 79 0f 	sts	0x0F79, r26
    de00:	b0 93 7a 0f 	sts	0x0F7A, r27
    de04:	e0 e3       	ldi	r30, 0x30	; 48
    de06:	ff e0       	ldi	r31, 0x0F	; 15

			for(uint8_t i = time; i < alt+1; i++){
				DT[i].count_no_frame = 0;
				DT[i].status = date_ok;
    de08:	81 e0       	ldi	r24, 0x01	; 1
    de0a:	df 01       	movw	r26, r30
    de0c:	11 97       	sbiw	r26, 0x01	; 1
			memcpy(DT[course].value,ptr+22,3);
			memcpy(DT[speed].value,ptr+28,3);
			memcpy(DT[alt].value,ptr+34,4);

			for(uint8_t i = time; i < alt+1; i++){
				DT[i].count_no_frame = 0;
    de0e:	1c 92       	st	X, r1
				DT[i].status = date_ok;
    de10:	80 83       	st	Z, r24
    de12:	3e 96       	adiw	r30, 0x0e	; 14
			memcpy(DT[sat].value,ptr+17,2);
			memcpy(DT[course].value,ptr+22,3);
			memcpy(DT[speed].value,ptr+28,3);
			memcpy(DT[alt].value,ptr+34,4);

			for(uint8_t i = time; i < alt+1; i++){
    de14:	9f e0       	ldi	r25, 0x0F	; 15
    de16:	e4 38       	cpi	r30, 0x84	; 132
    de18:	f9 07       	cpc	r31, r25
    de1a:	b9 f7       	brne	.-18     	; 0xde0a <_Z10Check_Datev+0x1d4>
    de1c:	08 95       	ret

0000de1e <__vector_18>:

}
/*------------------------------------------------------------------------*//**
* \brief Interrupt form USART0
*//*-------------------------------------------------------------------------*/
ISR (USART0_RX_vect){
    de1e:	1f 92       	push	r1
    de20:	0f 92       	push	r0
    de22:	0f b6       	in	r0, 0x3f	; 63
    de24:	0f 92       	push	r0
    de26:	11 24       	eor	r1, r1
    de28:	2f 93       	push	r18
    de2a:	3f 93       	push	r19
    de2c:	4f 93       	push	r20
    de2e:	5f 93       	push	r21
    de30:	6f 93       	push	r22
    de32:	7f 93       	push	r23
    de34:	8f 93       	push	r24
    de36:	9f 93       	push	r25
    de38:	af 93       	push	r26
    de3a:	bf 93       	push	r27
    de3c:	ef 93       	push	r30
    de3e:	ff 93       	push	r31

    uint8_t iostat;
    iostat = UCSR0A;
    de40:	8b b1       	in	r24, 0x0b	; 11

    if (iostat & ((1 << FE0) | (1 << DOR0) | (1 << UPE0))){
    de42:	8c 71       	andi	r24, 0x1C	; 28
    de44:	11 f0       	breq	.+4      	; 0xde4a <__vector_18+0x2c>
        Rx_count = 0;
    de46:	10 92 a1 0f 	sts	0x0FA1, r1
    }

    Rxbuff[Rx_count] = UDR0;
    de4a:	80 91 a1 0f 	lds	r24, 0x0FA1
    de4e:	e8 2f       	mov	r30, r24
    de50:	f0 e0       	ldi	r31, 0x00	; 0
    de52:	9c b1       	in	r25, 0x0c	; 12
    de54:	ee 55       	subi	r30, 0x5E	; 94
    de56:	f0 4f       	sbci	r31, 0xF0	; 240
    de58:	90 83       	st	Z, r25

    if(Rxbuff[Rx_count] == 0x0A && Rxbuff[Rx_count-1] == 0x0D){
    de5a:	9a 30       	cpi	r25, 0x0A	; 10
    de5c:	31 f4       	brne	.+12     	; 0xde6a <__vector_18+0x4c>
    de5e:	31 97       	sbiw	r30, 0x01	; 1
    de60:	90 81       	ld	r25, Z
    de62:	9d 30       	cpi	r25, 0x0D	; 13
    de64:	11 f4       	brne	.+4      	; 0xde6a <__vector_18+0x4c>
    	Check_Date();
    de66:	e7 de       	rcall	.-562    	; 0xdc36 <_Z10Check_Datev>
    de68:	06 c0       	rjmp	.+12     	; 0xde76 <__vector_18+0x58>
    	Rx_count = 0;
    }else if(++Rx_count >= RX_BUFF_SIZE){
    de6a:	8f 5f       	subi	r24, 0xFF	; 255
    de6c:	80 34       	cpi	r24, 0x40	; 64
    de6e:	18 f4       	brcc	.+6      	; 0xde76 <__vector_18+0x58>
    de70:	80 93 a1 0f 	sts	0x0FA1, r24
    de74:	02 c0       	rjmp	.+4      	; 0xde7a <__vector_18+0x5c>
    	Rx_count = 0;
    de76:	10 92 a1 0f 	sts	0x0FA1, r1
   	}

}
    de7a:	ff 91       	pop	r31
    de7c:	ef 91       	pop	r30
    de7e:	bf 91       	pop	r27
    de80:	af 91       	pop	r26
    de82:	9f 91       	pop	r25
    de84:	8f 91       	pop	r24
    de86:	7f 91       	pop	r23
    de88:	6f 91       	pop	r22
    de8a:	5f 91       	pop	r21
    de8c:	4f 91       	pop	r20
    de8e:	3f 91       	pop	r19
    de90:	2f 91       	pop	r18
    de92:	0f 90       	pop	r0
    de94:	0f be       	out	0x3f, r0	; 63
    de96:	0f 90       	pop	r0
    de98:	1f 90       	pop	r1
    de9a:	18 95       	reti

0000de9c <_Z11ELERES_Initv>:
/*------------------------------------------------------------------------*//**
* \brief Initialize port
*//*-------------------------------------------------------------------------*/
void ELERES_Init (void){

	stat_frame = 0;
    de9c:	10 92 a0 0f 	sts	0x0FA0, r1
    dea0:	10 92 9f 0f 	sts	0x0F9F, r1
    DDRE  &= ~(1 << DDE0);              // set RXD0 pin as input
    dea4:	10 98       	cbi	0x02, 0	; 2
    PORTE &= ~(1 << PORTE0);            // disable pullup on RXD0 pin
    dea6:	18 98       	cbi	0x03, 0	; 3

    #undef BAUD
    #define BAUD 58823
    #include <util/setbaud.h>

    UCSR0A &= ~(1 << U2X0); // disable double speed operation.
    dea8:	59 98       	cbi	0x0b, 1	; 11
    UBRR0L = UBRRL_VALUE;
    deaa:	80 e1       	ldi	r24, 0x10	; 16
    deac:	89 b9       	out	0x09, r24	; 9
    UBRR0H = UBRRH_VALUE;
    deae:	10 92 90 00 	sts	0x0090, r1

    // set 8N1
    UCSR0B = 0 | (0 << RXCIE0) | (0 << UDRIE0) | (0 << RXEN0) | (0 << UCSZ02);
    deb2:	1a b8       	out	0x0a, r1	; 10
    UCSR0C = 0 | (1 << UCSZ01) | (1 << UCSZ00);
    deb4:	86 e0       	ldi	r24, 0x06	; 6
    deb6:	80 93 95 00 	sts	0x0095, r24
    while (UCSR0A & (1 << RXC0)) UDR0; // flush receive buffer
    deba:	5f 9b       	sbis	0x0b, 7	; 11
    debc:	02 c0       	rjmp	.+4      	; 0xdec2 <_Z11ELERES_Initv+0x26>
    debe:	8c b1       	in	r24, 0x0c	; 12
    dec0:	fc cf       	rjmp	.-8      	; 0xdeba <_Z11ELERES_Initv+0x1e>
    stat_frame  |= 0x01;
    dec2:	80 91 9f 0f 	lds	r24, 0x0F9F
    dec6:	90 91 a0 0f 	lds	r25, 0x0FA0
    deca:	81 60       	ori	r24, 0x01	; 1
    decc:	90 93 a0 0f 	sts	0x0FA0, r25
    ded0:	80 93 9f 0f 	sts	0x0F9F, r24
    ded4:	08 95       	ret

0000ded6 <_Z17ELERES_DisableRXDv>:
/*------------------------------------------------------------------------*//**
* \brief OFF POrt
*//*-------------------------------------------------------------------------*/
void ELERES_DisableRXD (void){

    UCSR0B &= ~(1 << RXEN0);            // disable RX
    ded6:	54 98       	cbi	0x0a, 4	; 10
    UCSR0B &= ~(1 << RXCIE0);           // disable Interrupt
    ded8:	57 98       	cbi	0x0a, 7	; 10
    deda:	08 95       	ret

0000dedc <_Z16ELERES_EnableRXDv>:
/*------------------------------------------------------------------------*//**
* \brief On port USART and zeroing date
*//*-------------------------------------------------------------------------*/
void ELERES_EnableRXD (void){

    Rx_count  = 0;
    dedc:	10 92 a1 0f 	sts	0x0FA1, r1
    dee0:	8f e5       	ldi	r24, 0x5F	; 95
    dee2:	9e e0       	ldi	r25, 0x0E	; 14
    for(uint8_t i =0; i < SIZE_DT;i++){
    	memcpy(DT[i].value,"??\0\0\0\0\0\0\0\0\0\0",12);
    dee4:	2c e0       	ldi	r18, 0x0C	; 12
    dee6:	e9 e2       	ldi	r30, 0x29	; 41
    dee8:	f1 e0       	ldi	r31, 0x01	; 1
    deea:	dc 01       	movw	r26, r24
    deec:	32 2f       	mov	r19, r18
    deee:	01 90       	ld	r0, Z+
    def0:	0d 92       	st	X+, r0
    def2:	3a 95       	dec	r19
    def4:	e1 f7       	brne	.-8      	; 0xdeee <_Z16ELERES_EnableRXDv+0x12>
    def6:	fc 01       	movw	r30, r24
    def8:	31 97       	sbiw	r30, 0x01	; 1
    	DT[i].status = no_date;
    defa:	10 82       	st	Z, r1
    defc:	31 97       	sbiw	r30, 0x01	; 1
    	DT[i].count_no_frame = 0;
    defe:	10 82       	st	Z, r1
    df00:	0e 96       	adiw	r24, 0x0e	; 14
* \brief On port USART and zeroing date
*//*-------------------------------------------------------------------------*/
void ELERES_EnableRXD (void){

    Rx_count  = 0;
    for(uint8_t i =0; i < SIZE_DT;i++){
    df02:	3f e0       	ldi	r19, 0x0F	; 15
    df04:	81 3a       	cpi	r24, 0xA1	; 161
    df06:	93 07       	cpc	r25, r19
    df08:	71 f7       	brne	.-36     	; 0xdee6 <_Z16ELERES_EnableRXDv+0xa>
    	memcpy(DT[i].value,"??\0\0\0\0\0\0\0\0\0\0",12);
    	DT[i].status = no_date;
    	DT[i].count_no_frame = 0;
    }
    UCSR0B |=  (1 << RXEN0);		    // enable RX
    df0a:	54 9a       	sbi	0x0a, 4	; 10
    UCSR0B |=  (1 << RXCIE0);		    // enable Interrupt
    df0c:	57 9a       	sbi	0x0a, 7	; 10
    df0e:	08 95       	ret

0000df10 <_Z5titlec>:
}
/*------------------------------------------------------------------------*//**
* \brief Display title screen
* \param number screen
*//*-------------------------------------------------------------------------*/
void title(char x){
    df10:	cf 93       	push	r28
    df12:	df 93       	push	r29
    df14:	d8 2f       	mov	r29, r24

	uint8_t stat = 0;
	if(DT[RSSI].status == no_date){
    df16:	80 91 5e 0e 	lds	r24, 0x0E5E
    df1a:	88 23       	and	r24, r24
    df1c:	11 f0       	breq	.+4      	; 0xdf22 <_Z5titlec+0x12>
* \brief Display title screen
* \param number screen
*//*-------------------------------------------------------------------------*/
void title(char x){

	uint8_t stat = 0;
    df1e:	c0 e0       	ldi	r28, 0x00	; 0
    df20:	01 c0       	rjmp	.+2      	; 0xdf24 <_Z5titlec+0x14>
	if(DT[RSSI].status == no_date){
		stat = BLINK;
    df22:	c2 e0       	ldi	r28, 0x02	; 2
	}
    lcd_putsAtt (0, 0, PSTR(" eLeReS Telemetry ?/3"),stat);
    df24:	2c 2f       	mov	r18, r28
    df26:	42 e1       	ldi	r20, 0x12	; 18
    df28:	50 e2       	ldi	r21, 0x20	; 32
    df2a:	60 e0       	ldi	r22, 0x00	; 0
    df2c:	80 e0       	ldi	r24, 0x00	; 0
    df2e:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>
    lcd_putcAtt(18*FW, 0*FH, x, stat);
    df32:	2c 2f       	mov	r18, r28
    df34:	4d 2f       	mov	r20, r29
    df36:	60 e0       	ldi	r22, 0x00	; 0
    df38:	8c e6       	ldi	r24, 0x6C	; 108
    df3a:	0e 94 31 26 	call	0x4c62	; 0x4c62 <_Z11lcd_putcAtthhch>
    lcd_hline(0,0,128);
    df3e:	40 e8       	ldi	r20, 0x80	; 128
    df40:	60 e0       	ldi	r22, 0x00	; 0
    df42:	80 e0       	ldi	r24, 0x00	; 0
}
    df44:	df 91       	pop	r29
    df46:	cf 91       	pop	r28
	if(DT[RSSI].status == no_date){
		stat = BLINK;
	}
    lcd_putsAtt (0, 0, PSTR(" eLeReS Telemetry ?/3"),stat);
    lcd_putcAtt(18*FW, 0*FH, x, stat);
    lcd_hline(0,0,128);
    df48:	0c 94 d3 27 	jmp	0x4fa6	; 0x4fa6 <_Z9lcd_hlinehha>

0000df4c <_Z16menuProc_eleres1h>:
}
/*------------------------------------------------------------------------*//**
* \brief Display screen 1
* \param event key
*//*-------------------------------------------------------------------------*/
void menuProc_eleres1(uint8_t event){
    df4c:	0f 93       	push	r16
    switch(event)						// new event received, branch accordingly
    df4e:	82 36       	cpi	r24, 0x62	; 98
    df50:	59 f0       	breq	.+22     	; 0xdf68 <_Z16menuProc_eleres1h+0x1c>
    df52:	83 36       	cpi	r24, 0x63	; 99
    df54:	31 f0       	breq	.+12     	; 0xdf62 <_Z16menuProc_eleres1h+0x16>
    df56:	81 36       	cpi	r24, 0x61	; 97
    df58:	59 f4       	brne	.+22     	; 0xdf70 <_Z16menuProc_eleres1h+0x24>
        break;
    case EVT_KEY_FIRST(KEY_DOWN):
        chainMenu(menuProc_eleres2);
        break;
    case EVT_KEY_FIRST(KEY_EXIT):
        ELERES_DisableRXD();
    df5a:	bd df       	rcall	.-134    	; 0xded6 <_Z17ELERES_DisableRXDv>
        chainMenu(menuProc0);
    df5c:	89 ea       	ldi	r24, 0xA9	; 169
    df5e:	99 e5       	ldi	r25, 0x59	; 89
    df60:	05 c0       	rjmp	.+10     	; 0xdf6c <_Z16menuProc_eleres1h+0x20>
*//*-------------------------------------------------------------------------*/
void menuProc_eleres1(uint8_t event){
    switch(event)						// new event received, branch accordingly
    {
    case EVT_KEY_FIRST(KEY_UP):
        chainMenu(menuProc_eleres3);
    df62:	8b e3       	ldi	r24, 0x3B	; 59
    df64:	90 e7       	ldi	r25, 0x70	; 112
    df66:	02 c0       	rjmp	.+4      	; 0xdf6c <_Z16menuProc_eleres1h+0x20>
        break;
    case EVT_KEY_FIRST(KEY_DOWN):
        chainMenu(menuProc_eleres2);
    df68:	8f ee       	ldi	r24, 0xEF	; 239
    df6a:	9f e6       	ldi	r25, 0x6F	; 111
        break;
    case EVT_KEY_FIRST(KEY_EXIT):
        ELERES_DisableRXD();
        chainMenu(menuProc0);
    df6c:	0e 94 a2 13 	call	0x2744	; 0x2744 <_Z9chainMenuPFvhE>
        break;
    }


    title('1');
    df70:	81 e3       	ldi	r24, 0x31	; 49
    df72:	ce df       	rcall	.-100    	; 0xdf10 <_Z5titlec>
    lcd_img(0,2*FH,ant,0);
    df74:	20 e0       	ldi	r18, 0x00	; 0
    df76:	4e e6       	ldi	r20, 0x6E	; 110
    df78:	50 e2       	ldi	r21, 0x20	; 32
    df7a:	60 e1       	ldi	r22, 0x10	; 16
    df7c:	80 e0       	ldi	r24, 0x00	; 0
    df7e:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <_Z7lcd_imghhPKhh>
    lcd_putsAtt(10, 2*FH,DT[RSSI].value,BSS);
    df82:	20 e1       	ldi	r18, 0x10	; 16
    df84:	4f e5       	ldi	r20, 0x5F	; 95
    df86:	5e e0       	ldi	r21, 0x0E	; 14
    df88:	60 e1       	ldi	r22, 0x10	; 16
    df8a:	8a e0       	ldi	r24, 0x0A	; 10
    df8c:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>
    lcd_putsAtt(10, 3*FH,DT[RCQ].value,BSS);
    df90:	20 e1       	ldi	r18, 0x10	; 16
    df92:	4d e6       	ldi	r20, 0x6D	; 109
    df94:	5e e0       	ldi	r21, 0x0E	; 14
    df96:	68 e1       	ldi	r22, 0x18	; 24
    df98:	8a e0       	ldi	r24, 0x0A	; 10
    df9a:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>
    uint8_t per = 0;
    if(DT[RCQ].status == date_ok){
    df9e:	80 91 6c 0e 	lds	r24, 0x0E6C
    dfa2:	81 30       	cpi	r24, 0x01	; 1
    dfa4:	29 f4       	brne	.+10     	; 0xdfb0 <_Z16menuProc_eleres1h+0x64>
    	per = atoi(DT[RCQ].value);
    dfa6:	8d e6       	ldi	r24, 0x6D	; 109
    dfa8:	9e e0       	ldi	r25, 0x0E	; 14
    dfaa:	a2 d2       	rcall	.+1348   	; 0xe4f0 <atoi>
    dfac:	08 2f       	mov	r16, r24
    dfae:	01 c0       	rjmp	.+2      	; 0xdfb2 <_Z16menuProc_eleres1h+0x66>

    title('1');
    lcd_img(0,2*FH,ant,0);
    lcd_putsAtt(10, 2*FH,DT[RSSI].value,BSS);
    lcd_putsAtt(10, 3*FH,DT[RCQ].value,BSS);
    uint8_t per = 0;
    dfb0:	00 e0       	ldi	r16, 0x00	; 0
    if(DT[RCQ].status == date_ok){
    	per = atoi(DT[RCQ].value);
    }

    lcd_puts_P  (0*FW, 4*FH, PSTR("VRx:"));
    dfb2:	49 e6       	ldi	r20, 0x69	; 105
    dfb4:	50 e2       	ldi	r21, 0x20	; 32
    dfb6:	60 e2       	ldi	r22, 0x20	; 32
    dfb8:	80 e0       	ldi	r24, 0x00	; 0
    dfba:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <_Z10lcd_puts_PhhPKc>
    lcd_putsAtt(4*FW, 4*FH,DT[VRX].value,BSS);
    dfbe:	20 e1       	ldi	r18, 0x10	; 16
    dfc0:	4b e7       	ldi	r20, 0x7B	; 123
    dfc2:	5e e0       	ldi	r21, 0x0E	; 14
    dfc4:	60 e2       	ldi	r22, 0x20	; 32
    dfc6:	88 e1       	ldi	r24, 0x18	; 24
    dfc8:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>

    lcd_hbar( 35, 17, 90, 14, per);
    dfcc:	2e e0       	ldi	r18, 0x0E	; 14
    dfce:	4a e5       	ldi	r20, 0x5A	; 90
    dfd0:	61 e1       	ldi	r22, 0x11	; 17
    dfd2:	83 e2       	ldi	r24, 0x23	; 35
    dfd4:	0e 94 c5 29 	call	0x538a	; 0x538a <_Z8lcd_hbarhhhhh>

}
    dfd8:	0f 91       	pop	r16
    dfda:	08 95       	ret

0000dfdc <_Z14menuProceLeReSh>:
* \brief
* \param event key
*//*-------------------------------------------------------------------------*/
void menuProceLeReS(uint8_t event){

    menuProc_eleres1(event);
    dfdc:	b7 cf       	rjmp	.-146    	; 0xdf4c <_Z16menuProc_eleres1h>

0000dfde <_Z16menuProc_eleres2h>:
* \brief Display screen 2
* \param event key
*//*-------------------------------------------------------------------------*/
void menuProc_eleres2(uint8_t event)
{
    switch(event)
    dfde:	82 36       	cpi	r24, 0x62	; 98
    dfe0:	59 f0       	breq	.+22     	; 0xdff8 <_Z16menuProc_eleres2h+0x1a>
    dfe2:	83 36       	cpi	r24, 0x63	; 99
    dfe4:	31 f0       	breq	.+12     	; 0xdff2 <_Z16menuProc_eleres2h+0x14>
    dfe6:	81 36       	cpi	r24, 0x61	; 97
    dfe8:	59 f4       	brne	.+22     	; 0xe000 <_Z16menuProc_eleres2h+0x22>
        break;
    case EVT_KEY_FIRST(KEY_DOWN):
        chainMenu(menuProc_eleres3);
        break;
    case EVT_KEY_FIRST(KEY_EXIT):
        ELERES_DisableRXD();
    dfea:	75 df       	rcall	.-278    	; 0xded6 <_Z17ELERES_DisableRXDv>
        chainMenu(menuProc0);
    dfec:	89 ea       	ldi	r24, 0xA9	; 169
    dfee:	99 e5       	ldi	r25, 0x59	; 89
    dff0:	05 c0       	rjmp	.+10     	; 0xdffc <_Z16menuProc_eleres2h+0x1e>
void menuProc_eleres2(uint8_t event)
{
    switch(event)
    {
    case EVT_KEY_FIRST(KEY_UP):
        chainMenu(menuProc_eleres1);
    dff2:	86 ea       	ldi	r24, 0xA6	; 166
    dff4:	9f e6       	ldi	r25, 0x6F	; 111
    dff6:	02 c0       	rjmp	.+4      	; 0xdffc <_Z16menuProc_eleres2h+0x1e>
        break;
    case EVT_KEY_FIRST(KEY_DOWN):
        chainMenu(menuProc_eleres3);
    dff8:	8b e3       	ldi	r24, 0x3B	; 59
    dffa:	90 e7       	ldi	r25, 0x70	; 112
        break;
    case EVT_KEY_FIRST(KEY_EXIT):
        ELERES_DisableRXD();
        chainMenu(menuProc0);
    dffc:	0e 94 a2 13 	call	0x2744	; 0x2744 <_Z9chainMenuPFvhE>
        break;
    }
    //initval (0, PACK_RSSI, 1);
    //initval (1, PACK_RSSI, 3);
    title ('2');
    e000:	82 e3       	ldi	r24, 0x32	; 50
    e002:	86 df       	rcall	.-244    	; 0xdf10 <_Z5titlec>
    lcd_puts_P  (1*FW, 2*FH, PSTR("LATIT.:"));
    e004:	41 e6       	ldi	r20, 0x61	; 97
    e006:	50 e2       	ldi	r21, 0x20	; 32
    e008:	60 e1       	ldi	r22, 0x10	; 16
    e00a:	86 e0       	ldi	r24, 0x06	; 6
    e00c:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <_Z10lcd_puts_PhhPKc>
    lcd_putsAtt (10*FW, 2*FH, DT[Pos_LAT].value,BSS);
    e010:	20 e1       	ldi	r18, 0x10	; 16
    e012:	47 e0       	ldi	r20, 0x07	; 7
    e014:	5f e0       	ldi	r21, 0x0F	; 15
    e016:	60 e1       	ldi	r22, 0x10	; 16
    e018:	8c e3       	ldi	r24, 0x3C	; 60
    e01a:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>
    lcd_puts_P  (1*FW, 3*FH, PSTR("LONG. :"));
    e01e:	49 e5       	ldi	r20, 0x59	; 89
    e020:	50 e2       	ldi	r21, 0x20	; 32
    e022:	68 e1       	ldi	r22, 0x18	; 24
    e024:	86 e0       	ldi	r24, 0x06	; 6
    e026:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <_Z10lcd_puts_PhhPKc>
    lcd_putsAtt (10*FW, 3*FH, DT[Pos_LON].value,BSS);
    e02a:	20 e1       	ldi	r18, 0x10	; 16
    e02c:	45 e1       	ldi	r20, 0x15	; 21
    e02e:	5f e0       	ldi	r21, 0x0F	; 15
    e030:	68 e1       	ldi	r22, 0x18	; 24
    e032:	8c e3       	ldi	r24, 0x3C	; 60
    e034:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>

    lcd_hline(0,25,128);
    e038:	40 e8       	ldi	r20, 0x80	; 128
    e03a:	69 e1       	ldi	r22, 0x19	; 25
    e03c:	80 e0       	ldi	r24, 0x00	; 0
    e03e:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <_Z9lcd_hlinehha>

    lcd_puts_P  (1*FW, 5*FH, PSTR("TIME:") );
    e042:	43 e5       	ldi	r20, 0x53	; 83
    e044:	50 e2       	ldi	r21, 0x20	; 32
    e046:	68 e2       	ldi	r22, 0x28	; 40
    e048:	86 e0       	ldi	r24, 0x06	; 6
    e04a:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <_Z10lcd_puts_PhhPKc>
    lcd_putsAtt (7*FW, 5*FH, DT[time].value,BSS);
    e04e:	20 e1       	ldi	r18, 0x10	; 16
    e050:	41 e3       	ldi	r20, 0x31	; 49
    e052:	5f e0       	ldi	r21, 0x0F	; 15
    e054:	68 e2       	ldi	r22, 0x28	; 40
    e056:	8a e2       	ldi	r24, 0x2A	; 42
    e058:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>
    lcd_puts_P  (1*FW, 6*FH, PSTR("HDOP:"));
    e05c:	4d e4       	ldi	r20, 0x4D	; 77
    e05e:	50 e2       	ldi	r21, 0x20	; 32
    e060:	60 e3       	ldi	r22, 0x30	; 48
    e062:	86 e0       	ldi	r24, 0x06	; 6
    e064:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <_Z10lcd_puts_PhhPKc>
    lcd_putsAtt (7*FW, 6*FH, DT[HDOP].value,BSS);
    e068:	20 e1       	ldi	r18, 0x10	; 16
    e06a:	43 e2       	ldi	r20, 0x23	; 35
    e06c:	5f e0       	ldi	r21, 0x0F	; 15
    e06e:	60 e3       	ldi	r22, 0x30	; 48
    e070:	8a e2       	ldi	r24, 0x2A	; 42
    e072:	0c 94 fa 26 	jmp	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>

0000e076 <_Z16menuProc_eleres3h>:
* \param event key
*//*-------------------------------------------------------------------------*/
void menuProc_eleres3(uint8_t event)

{
    switch(event)
    e076:	82 36       	cpi	r24, 0x62	; 98
    e078:	59 f0       	breq	.+22     	; 0xe090 <_Z16menuProc_eleres3h+0x1a>
    e07a:	83 36       	cpi	r24, 0x63	; 99
    e07c:	31 f0       	breq	.+12     	; 0xe08a <_Z16menuProc_eleres3h+0x14>
    e07e:	81 36       	cpi	r24, 0x61	; 97
    e080:	59 f4       	brne	.+22     	; 0xe098 <_Z16menuProc_eleres3h+0x22>
        break;
    case EVT_KEY_FIRST(KEY_DOWN):
        chainMenu(menuProc_eleres1);
        break;
    case EVT_KEY_FIRST(KEY_EXIT):
        ELERES_DisableRXD();
    e082:	29 df       	rcall	.-430    	; 0xded6 <_Z17ELERES_DisableRXDv>
        chainMenu(menuProc0);
    e084:	89 ea       	ldi	r24, 0xA9	; 169
    e086:	99 e5       	ldi	r25, 0x59	; 89
    e088:	05 c0       	rjmp	.+10     	; 0xe094 <_Z16menuProc_eleres3h+0x1e>

{
    switch(event)
    {
    case EVT_KEY_FIRST(KEY_UP):
        chainMenu(menuProc_eleres2);
    e08a:	8f ee       	ldi	r24, 0xEF	; 239
    e08c:	9f e6       	ldi	r25, 0x6F	; 111
    e08e:	02 c0       	rjmp	.+4      	; 0xe094 <_Z16menuProc_eleres3h+0x1e>
        break;
    case EVT_KEY_FIRST(KEY_DOWN):
        chainMenu(menuProc_eleres1);
    e090:	86 ea       	ldi	r24, 0xA6	; 166
    e092:	9f e6       	ldi	r25, 0x6F	; 111
        break;
    case EVT_KEY_FIRST(KEY_EXIT):
        ELERES_DisableRXD();
        chainMenu(menuProc0);
    e094:	0e 94 a2 13 	call	0x2744	; 0x2744 <_Z9chainMenuPFvhE>
        break;
    }

	title ('3');
    e098:	83 e3       	ldi	r24, 0x33	; 51
    e09a:	3a df       	rcall	.-396    	; 0xdf10 <_Z5titlec>

    lcd_puts_P  (FW, 2*FH, PSTR(" FIX | SAT | COURSE"));
    e09c:	49 e3       	ldi	r20, 0x39	; 57
    e09e:	50 e2       	ldi	r21, 0x20	; 32
    e0a0:	60 e1       	ldi	r22, 0x10	; 16
    e0a2:	86 e0       	ldi	r24, 0x06	; 6
    e0a4:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <_Z10lcd_puts_PhhPKc>
    lcd_putsAtt  (3*FW, 3*FH, DT[fix].value,BSS);
    e0a8:	20 e1       	ldi	r18, 0x10	; 16
    e0aa:	4f e3       	ldi	r20, 0x3F	; 63
    e0ac:	5f e0       	ldi	r21, 0x0F	; 15
    e0ae:	68 e1       	ldi	r22, 0x18	; 24
    e0b0:	82 e1       	ldi	r24, 0x12	; 18
    e0b2:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>
    lcd_putsAtt  (8*FW, 3*FH, DT[sat].value,BSS);
    e0b6:	20 e1       	ldi	r18, 0x10	; 16
    e0b8:	4d e4       	ldi	r20, 0x4D	; 77
    e0ba:	5f e0       	ldi	r21, 0x0F	; 15
    e0bc:	68 e1       	ldi	r22, 0x18	; 24
    e0be:	80 e3       	ldi	r24, 0x30	; 48
    e0c0:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>
    lcd_putsAtt  (15*FW, 3*FH, DT[course].value,BSS);
    e0c4:	20 e1       	ldi	r18, 0x10	; 16
    e0c6:	4b e5       	ldi	r20, 0x5B	; 91
    e0c8:	5f e0       	ldi	r21, 0x0F	; 15
    e0ca:	68 e1       	ldi	r22, 0x18	; 24
    e0cc:	8a e5       	ldi	r24, 0x5A	; 90
    e0ce:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>

    lcd_hline(0,25,128);
    e0d2:	40 e8       	ldi	r20, 0x80	; 128
    e0d4:	69 e1       	ldi	r22, 0x19	; 25
    e0d6:	80 e0       	ldi	r24, 0x00	; 0
    e0d8:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <_Z9lcd_hlinehha>

    lcd_puts_P  (2*FW, 5*FH, PSTR("SPEED | ALTITUDE") );
    e0dc:	48 e2       	ldi	r20, 0x28	; 40
    e0de:	50 e2       	ldi	r21, 0x20	; 32
    e0e0:	68 e2       	ldi	r22, 0x28	; 40
    e0e2:	8c e0       	ldi	r24, 0x0C	; 12
    e0e4:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <_Z10lcd_puts_PhhPKc>
    lcd_putsAtt  (3*FW, 6*FH, DT[speed].value,BSS);
    e0e8:	20 e1       	ldi	r18, 0x10	; 16
    e0ea:	49 e6       	ldi	r20, 0x69	; 105
    e0ec:	5f e0       	ldi	r21, 0x0F	; 15
    e0ee:	60 e3       	ldi	r22, 0x30	; 48
    e0f0:	82 e1       	ldi	r24, 0x12	; 18
    e0f2:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>
    lcd_putsAtt  (12*FW, 6*FH, DT[alt].value,BSS);
    e0f6:	20 e1       	ldi	r18, 0x10	; 16
    e0f8:	47 e7       	ldi	r20, 0x77	; 119
    e0fa:	5f e0       	ldi	r21, 0x0F	; 15
    e0fc:	60 e3       	ldi	r22, 0x30	; 48
    e0fe:	88 e4       	ldi	r24, 0x48	; 72
    e100:	0c 94 fa 26 	jmp	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>

0000e104 <_Z7keyDownv>:
//#define CS_LESS      11
//#define CS_EGREATER  12
//#define CS_ELESS     13

inline uint8_t keyDown () {
	return (~PINB) & 0x7E;
    e104:	86 b3       	in	r24, 0x16	; 22
    e106:	80 95       	com	r24
}
    e108:	8e 77       	andi	r24, 0x7E	; 126
    e10a:	08 95       	ret

0000e10c <main>:
uint8_t SaveMcusr;
#endif

int main (void) {

	DDRA = 0xff;
    e10c:	8f ef       	ldi	r24, 0xFF	; 255
    e10e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
    e110:	1b ba       	out	0x1b, r1	; 27
	DDRB = 0x81;
    e112:	91 e8       	ldi	r25, 0x81	; 129
    e114:	97 bb       	out	0x17, r25	; 23
	PORTB = 0x7e; //pullups keys+nc
    e116:	9e e7       	ldi	r25, 0x7E	; 126
    e118:	98 bb       	out	0x18, r25	; 24
	DDRC = 0x3e;
    e11a:	9e e3       	ldi	r25, 0x3E	; 62
    e11c:	94 bb       	out	0x14, r25	; 20
	PORTC = 0xc1; //pullups nc
    e11e:	91 ec       	ldi	r25, 0xC1	; 193
    e120:	95 bb       	out	0x15, r25	; 21
	DDRD = 0x00;
    e122:	11 ba       	out	0x11, r1	; 17
	PORTD = 0xff; //all D inputs pullups keys
    e124:	82 bb       	out	0x12, r24	; 18
	DDRE = 0x08;
    e126:	88 e0       	ldi	r24, 0x08	; 8
    e128:	82 b9       	out	0x02, r24	; 2
	PORTE = 0xff - (1 << OUT_E_BUZZER); //pullups + buzzer 0
    e12a:	87 ef       	ldi	r24, 0xF7	; 247
    e12c:	83 b9       	out	0x03, r24	; 3
	DDRF = 0x00;
    e12e:	10 92 61 00 	sts	0x0061, r1
	PORTF = 0x00; //all F inputs anain - pullups are off
    e132:	10 92 62 00 	sts	0x0062, r1
	//DDRG = 0x10;  PORTG = 0xff; //pullups + SIM_CTL=1 = phonejack = ppm_in
	DDRG = 0x14;
    e136:	84 e1       	ldi	r24, 0x14	; 20
    e138:	80 93 64 00 	sts	0x0064, r24
	PORTG = 0xfB; //pullups + SIM_CTL=1 = phonejack = ppm_in, Haptic output and off (0)
    e13c:	8b ef       	ldi	r24, 0xFB	; 251
    e13e:	80 93 65 00 	sts	0x0065, r24
#ifdef CPUM2561
	uint8_t mcusr = MCUSR; // save the WDT (etc) flags
	SaveMcusr = mcusr;
	MCUSR = 0;// must be zeroed before disabling the WDT
#else
	uint8_t mcusr = MCUCSR;
    e142:	d4 b7       	in	r29, 0x34	; 52
	MCUCSR = 0;
    e144:	14 be       	out	0x34, r1	; 52
#ifdef ARDUPILOT
	ARDUPILOT_Init();
#endif

#ifdef ELERES
	ELERES_Init ();
    e146:	aa de       	rcall	.-684    	; 0xde9c <_Z11ELERES_Initv>

#ifdef NMEA
	NMEA_Init();
#endif

	ADMUX = ADC_VREF_TYPE;
    e148:	80 e4       	ldi	r24, 0x40	; 64
    e14a:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0x85;
    e14c:	85 e8       	ldi	r24, 0x85	; 133
    e14e:	86 b9       	out	0x06, r24	; 6
	TIMSK0 |= (1<<OCIE0A) | (1<<TOIE0);

	TCCR2B = (2 << CS00);//  Norm mode, clk/8
	TIMSK2 |= (1<<TOIE2);
#else
	TCCR0 = (7 << CS00);    //  Norm mode, clk/1024
    e150:	87 e0       	ldi	r24, 0x07	; 7
    e152:	83 bf       	out	0x33, r24	; 51
	OCR0 = 156;
    e154:	8c e9       	ldi	r24, 0x9C	; 156
    e156:	81 bf       	out	0x31, r24	; 49
	TCCR2 = (2 << CS00);    //  Norm mode, clk/8
    e158:	82 e0       	ldi	r24, 0x02	; 2
    e15a:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1 << OCIE0) | (1 << TOIE0) | (1 << TOIE2);
    e15c:	87 b7       	in	r24, 0x37	; 55
    e15e:	83 64       	ori	r24, 0x43	; 67
    e160:	87 bf       	out	0x37, r24	; 55
#endif
	// TCNT1 2MHz Pulse generator
	TCCR1A = (0 << WGM10);
    e162:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << WGM12) | (2 << CS10); // CTC OCR1A, 16MHz / 8
    e164:	8a e0       	ldi	r24, 0x0A	; 10
    e166:	8e bd       	out	0x2e, r24	; 46
	//TIMSK |= (1<<OCIE1A); enable immediately before mainloop

	TCCR3A = 0;
    e168:	10 92 8b 00 	sts	0x008B, r1
	TCCR3B = (1 << ICNC3) | (2 << CS30);      //ICNC3 16MHz / 8
    e16c:	82 e8       	ldi	r24, 0x82	; 130
    e16e:	80 93 8a 00 	sts	0x008A, r24
#ifdef CPUM2561
			TIMSK3 |= (1<<ICIE3);
#else
	ETIMSK |= (1 << TICIE3);
    e172:	80 91 7d 00 	lds	r24, 0x007D
    e176:	80 62       	ori	r24, 0x20	; 32
    e178:	80 93 7d 00 	sts	0x007D, r24
		{
			*p-- = 0x55;
		}
	}
#endif
	sei();
    e17c:	78 94       	sei
	//damit alert in eeReadGeneral() nicht haengt

	g_menuStack[0] = menuProc0;
    e17e:	89 ea       	ldi	r24, 0xA9	; 169
    e180:	99 e5       	ldi	r25, 0x59	; 89
    e182:	90 93 7b 01 	sts	0x017B, r25
    e186:	80 93 7a 01 	sts	0x017A, r24

	if (eeReadGeneral ()) {
    e18a:	0e 94 68 20 	call	0x40d0	; 0x40d0 <_Z13eeReadGeneralv>
    e18e:	88 23       	and	r24, r24
    e190:	19 f0       	breq	.+6      	; 0xe198 <main+0x8c>
		lcd_init ();   // initialize LCD module after reading eeprom
    e192:	0e 94 0c 2a 	call	0x5418	; 0x5418 <_Z8lcd_initv>
    e196:	06 c0       	rjmp	.+12     	; 0xe1a4 <main+0x98>
	} else {
		eeGeneralDefault (); // init g_eeGeneral with default values
    e198:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <_Z16eeGeneralDefaultv>
		lcd_init ();         // initialize LCD module for ALERT box
    e19c:	0e 94 0c 2a 	call	0x5418	; 0x5418 <_Z8lcd_initv>
		eeWriteGeneral ();   // format/write back to eeprom
    e1a0:	0e 94 2c 20 	call	0x4058	; 0x4058 <_Z14eeWriteGeneralv>
		((void (*)(void)) (0x7FFE))();	// Goes to 0xFFFC
#endif
	}
#endif

	uint8_t cModel = g_eeGeneral.currModel;
    e1a4:	d0 90 0f 06 	lds	r13, 0x060F
	eeLoadModel (cModel);
    e1a8:	8d 2d       	mov	r24, r13
    e1aa:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <_Z11eeLoadModelh>
#ifdef FRSKY
	FRSKY_Init(0);
#endif

#ifdef ELERES
	ELERES_Init();
    e1ae:	76 de       	rcall	.-788    	; 0xde9c <_Z11ELERES_Initv>
}
#endif

#ifndef SIMU
static void checkQuickSelect () {
	uint8_t i = keyDown (); //check for keystate
    e1b0:	a9 df       	rcall	.-174    	; 0xe104 <_Z7keyDownv>
	uint8_t j;

	for (j = 0; j < 6; j++) {
    e1b2:	c0 e0       	ldi	r28, 0x00	; 0
		if (i & 0x02) break;
    e1b4:	81 fd       	sbrc	r24, 1
    e1b6:	05 c0       	rjmp	.+10     	; 0xe1c2 <main+0xb6>
		i >>= 1;
    e1b8:	86 95       	lsr	r24
#ifndef SIMU
static void checkQuickSelect () {
	uint8_t i = keyDown (); //check for keystate
	uint8_t j;

	for (j = 0; j < 6; j++) {
    e1ba:	cf 5f       	subi	r28, 0xFF	; 255
    e1bc:	c6 30       	cpi	r28, 0x06	; 6
    e1be:	d1 f7       	brne	.-12     	; 0xe1b4 <main+0xa8>
    e1c0:	1d c0       	rjmp	.+58     	; 0xe1fc <main+0xf0>
//    for(j=1; j<8; j++)
//        if(i & ((uint8_t)(1<<j))) break;
//    j--;

	if (j < 6) {
		if (!eeModelExists (j)) return;
    e1c2:	8c 2f       	mov	r24, r28
    e1c4:	0e 94 db 1f 	call	0x3fb6	; 0x3fb6 <_Z13eeModelExistsh>
    e1c8:	88 23       	and	r24, r24
    e1ca:	c1 f0       	breq	.+48     	; 0xe1fc <main+0xf0>

		eeLoadModel (g_eeGeneral.currModel = j);
    e1cc:	c0 93 0f 06 	sts	0x060F, r28
    e1d0:	8c 2f       	mov	r24, r28
    e1d2:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <_Z11eeLoadModelh>
		STORE_GENERALVARS;
    e1d6:	81 e0       	ldi	r24, 0x01	; 1
    e1d8:	0e 94 4e 20 	call	0x409c	; 0x409c <_Z7eeDirtyh>
		//        eeDirty(EE_GENERAL);

		lcd_clear ();
    e1dc:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <_Z9lcd_clearv>
		lcd_putsAtt (64 - 7 * FW, 0 * FH, PSTR(STR_LOADING), DBLSIZE);
    e1e0:	24 e0       	ldi	r18, 0x04	; 4
    e1e2:	4c ed       	ldi	r20, 0xDC	; 220
    e1e4:	51 e0       	ldi	r21, 0x01	; 1
    e1e6:	60 e0       	ldi	r22, 0x00	; 0
    e1e8:	86 e1       	ldi	r24, 0x16	; 22
    e1ea:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <_Z11lcd_putsAtthhPKch>

		putsDblSizeName (3 * FH);
    e1ee:	88 e1       	ldi	r24, 0x18	; 24
    e1f0:	0e 94 f6 11 	call	0x23ec	; 0x23ec <_Z15putsDblSizeNameh>
//        for(uint8_t i=0;i<sizeof(g_model.name);i++)
//            lcd_putcAtt(FW*2+i*2*FW-i-2, 3*FH, g_model.name[i],DBLSIZE);

		refreshDiplay ();
    e1f4:	0e 94 2d 2a 	call	0x545a	; 0x545a <_Z13refreshDiplayv>
		clearKeyEvents (); // wait for user to release key
    e1f8:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZL14clearKeyEventsv>
	//if we have a switch on backlight it will be able to turn on the backlight.

	{
//			uint8_t sm ;
//			sm = stickMoved ;
		stickMoved = 1;
    e1fc:	81 e0       	ldi	r24, 0x01	; 1
    e1fe:	80 93 68 01 	sts	0x0168, r24
		doBackLightVoice (1);
    e202:	0e 94 c0 18 	call	0x3180	; 0x3180 <_Z16doBackLightVoiceh>
		stickMoved = 0;
    e206:	10 92 68 01 	sts	0x0168, r1

//    check_backlight_voice();
	}
	// moved here and logic added to only play statup tone if splash screen enabled.
	// that way we save a bit, but keep the option for end users!
	setVolume (g_eeGeneral.volume + 7);
    e20a:	80 91 3e 06 	lds	r24, 0x063E
    e20e:	89 5f       	subi	r24, 0xF9	; 249
    e210:	0e 94 df 13 	call	0x27be	; 0x27be <_Z9setVolumeh>
//		putVoiceQueueLong( g_eeGeneral.volume + 0xFFF7 ) ;

	if ( (mcusr & (1 << WDRF)) == 0) {
    e214:	d3 fd       	sbrc	r29, 3
    e216:	77 c0       	rjmp	.+238    	; 0xe306 <main+0x1fa>
		if (!g_eeGeneral.disableSplashScreen) {
    e218:	80 91 28 06 	lds	r24, 0x0628
    e21c:	84 ff       	sbrs	r24, 4
    e21e:	05 c0       	rjmp	.+10     	; 0xe22a <main+0x11e>
		} while (tgtime != get_tmr10ms ());
	}
}

static void checkMem () {
	if (g_eeGeneral.disableMemoryWarning) return;
    e220:	80 91 25 06 	lds	r24, 0x0625
    e224:	82 fd       	sbrc	r24, 2
    e226:	48 c0       	rjmp	.+144    	; 0xe2b8 <main+0x1ac>
    e228:	3e c0       	rjmp	.+124    	; 0xe2a6 <main+0x19a>
	setVolume (g_eeGeneral.volume + 7);
//		putVoiceQueueLong( g_eeGeneral.volume + 0xFFF7 ) ;

	if ( (mcusr & (1 << WDRF)) == 0) {
		if (!g_eeGeneral.disableSplashScreen) {
			if (g_eeGeneral.speakerMode)		// Not just beeper
    e22a:	80 91 31 06 	lds	r24, 0x0631
    e22e:	88 23       	and	r24, r24
    e230:	21 f0       	breq	.+8      	; 0xe23a <main+0x12e>
			{
				audioVoiceDefevent ( AU_TADA, V_HELLO);
    e232:	6c e1       	ldi	r22, 0x1C	; 28
    e234:	87 e0       	ldi	r24, 0x07	; 7
    e236:	0e 94 7e 34 	call	0x68fc	; 0x68fc <_Z18audioVoiceDefeventhh>
#ifdef SIMU
		if (!main_thread_running) return;
		sleep(1/*ms*/);
#endif

		check_backlight_voice ();
    e23a:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <_Z21check_backlight_voicev>

		lcd_clear ();
    e23e:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <_Z9lcd_clearv>
		lcd_img (0, 0, s9xsplash, 0);
    e242:	20 e0       	ldi	r18, 0x00	; 0
    e244:	4e e2       	ldi	r20, 0x2E	; 46
    e246:	53 e0       	ldi	r21, 0x03	; 3
    e248:	60 e0       	ldi	r22, 0x00	; 0
    e24a:	80 e0       	ldi	r24, 0x00	; 0
    e24c:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <_Z7lcd_imghhPKhh>
		if (!g_eeGeneral.hideNameOnSplash) lcd_putsnAtt (0 * FW, 7 * FH, g_eeGeneral.ownerName,
    e250:	80 91 2e 06 	lds	r24, 0x062E
    e254:	84 fd       	sbrc	r24, 4
    e256:	08 c0       	rjmp	.+16     	; 0xe268 <main+0x15c>
				sizeof (g_eeGeneral.ownerName), BSS);
    e258:	00 e1       	ldi	r16, 0x10	; 16
    e25a:	2a e0       	ldi	r18, 0x0A	; 10
    e25c:	43 e3       	ldi	r20, 0x33	; 51
    e25e:	56 e0       	ldi	r21, 0x06	; 6
    e260:	68 e3       	ldi	r22, 0x38	; 56
    e262:	80 e0       	ldi	r24, 0x00	; 0
    e264:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <_Z12lcd_putsnAtthhPKchh>
//#ifdef CPUM2561
//extern uint8_t SaveMcusr ;
//				lcd_outhex4( 0*FW, 6*FH, SaveMcusr ) ;
//#endif

		refreshDiplay ();
    e268:	0e 94 2d 2a 	call	0x545a	; 0x545a <_Z13refreshDiplayv>
//				lcdSetContrast() ;

		clearKeyEvents ();
    e26c:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZL14clearKeyEventsv>
//#ifndef SIMU
//        for(uint8_t i=0; i<32; i++)
//            getADC_filt(); // init ADC array
//#endif
#ifndef SIMU
		getADC_osmp ();
    e270:	0e 94 fe 14 	call	0x29fc	; 0x29fc <_Z11getADC_osmpv>
#endif
		uint16_t inacSum = stickMoveValue ();
    e274:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <_Z14stickMoveValuev>
    e278:	8c 01       	movw	r16, r24
		//        for(uint8_t i=0; i<4; i++)
		//           inacSum += anaIn(i)/INAC_DEVISOR;

		uint16_t tgtime = get_tmr10ms () + SPLASH_TIMEOUT;
    e27a:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_Z11get_tmr10msv>
    e27e:	ec 01       	movw	r28, r24
    e280:	c0 57       	subi	r28, 0x70	; 112
    e282:	de 4f       	sbci	r29, 0xFE	; 254
		do {
			refreshDiplay ();
    e284:	0e 94 2d 2a 	call	0x545a	; 0x545a <_Z13refreshDiplayv>
			check_backlight_voice ();
    e288:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <_Z21check_backlight_voicev>
#ifdef SIMU
			if (!main_thread_running) return;
			sleep(1/*ms*/);
#else
			getADC_osmp ();
    e28c:	0e 94 fe 14 	call	0x29fc	; 0x29fc <_Z11getADC_osmpv>
#endif
			uint16_t tsum = stickMoveValue ();
    e290:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <_Z14stickMoveValuev>
    e294:	7c 01       	movw	r14, r24
			//            for(uint8_t i=0; i<4; i++)
			//               tsum += anaIn(i)/INAC_DEVISOR;

			if (keyDown () || (tsum != inacSum)) return;  //wait for key release
    e296:	36 df       	rcall	.-404    	; 0xe104 <_Z7keyDownv>
    e298:	81 11       	cpse	r24, r1
    e29a:	c2 cf       	rjmp	.-124    	; 0xe220 <main+0x114>
    e29c:	e0 16       	cp	r14, r16
    e29e:	f1 06       	cpc	r15, r17
    e2a0:	09 f4       	brne	.+2      	; 0xe2a4 <main+0x198>
    e2a2:	5d c0       	rjmp	.+186    	; 0xe35e <main+0x252>
    e2a4:	bd cf       	rjmp	.-134    	; 0xe220 <main+0x114>
	}
}

static void checkMem () {
	if (g_eeGeneral.disableMemoryWarning) return;
	if (EeFsGetFree () < 200) {
    e2a6:	0e 94 b3 22 	call	0x4566	; 0x4566 <_Z11EeFsGetFreev>
    e2aa:	88 3c       	cpi	r24, 0xC8	; 200
    e2ac:	91 05       	cpc	r25, r1
    e2ae:	20 f4       	brcc	.+8      	; 0xe2b8 <main+0x1ac>
		alert (PSTR(STR_EE_LOW_MEM));
    e2b0:	8d ec       	ldi	r24, 0xCD	; 205
    e2b2:	91 e0       	ldi	r25, 0x01	; 1
    e2b4:	0e 94 93 18 	call	0x3126	; 0x3126 <_Z5alertPKc>
			}
			doSplash ();
		}
		checkMem ();
		//setupAdc(); //before checkTHR
		getADC_osmp ();
    e2b8:	0e 94 fe 14 	call	0x29fc	; 0x29fc <_Z11getADC_osmpv>
		g_vbat100mV = anaIn (7) / 14;
    e2bc:	80 91 55 01 	lds	r24, 0x0155
    e2c0:	90 91 56 01 	lds	r25, 0x0156
    e2c4:	6e e0       	ldi	r22, 0x0E	; 14
    e2c6:	70 e0       	ldi	r23, 0x00	; 0
    e2c8:	71 d0       	rcall	.+226    	; 0xe3ac <__udivmodhi4>
    e2ca:	60 93 6c 01 	sts	0x016C, r22
		checkTHR ();
    e2ce:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <_Z8checkTHRv>
		checkSwitches ();
    e2d2:	0e 94 02 18 	call	0x3004	; 0x3004 <_Z13checkSwitchesv>
    e2d6:	90 91 25 06 	lds	r25, 0x0625
    e2da:	98 7b       	andi	r25, 0xB8	; 184
}

static void checkAlarm () // added by Gohst
{
	if (g_eeGeneral.disableAlarmWarning) return;
	if (!g_eeGeneral.beeperVal) alert (PSTR(STR_ALARMS_DISABLE));
    e2dc:	21 f4       	brne	.+8      	; 0xe2e6 <main+0x1da>
    e2de:	8d eb       	ldi	r24, 0xBD	; 189
    e2e0:	91 e0       	ldi	r25, 0x01	; 1
    e2e2:	0e 94 93 18 	call	0x3126	; 0x3126 <_Z5alertPKc>
}

static void checkWarnings () {
//    if(sysFlags & sysFLAG_OLD_EEPROM)
	if (sysFlags) {
    e2e6:	80 91 9e 01 	lds	r24, 0x019E
    e2ea:	88 23       	and	r24, r24
    e2ec:	31 f0       	breq	.+12     	; 0xe2fa <main+0x1ee>
		alert (PSTR(STR_OLD_VER_EEPROM)); //will update on next save
    e2ee:	82 e9       	ldi	r24, 0x92	; 146
    e2f0:	91 e0       	ldi	r25, 0x01	; 1
    e2f2:	0e 94 93 18 	call	0x3126	; 0x3126 <_Z5alertPKc>
//        sysFlags &= ~(sysFLAG_OLD_EEPROM); //clear flag
		sysFlags = 0; //clear flag
    e2f6:	10 92 9e 01 	sts	0x019E, r1
		g_vbat100mV = anaIn (7) / 14;
		checkTHR ();
		checkSwitches ();
		checkAlarm ();
		checkWarnings ();
		clearKeyEvents (); //make sure no keys are down before proceeding
    e2fa:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZL14clearKeyEventsv>
//    BandGap = 240 ;
		putVoiceQueueUpper (g_model.modelVoice);
    e2fe:	80 91 2b 02 	lds	r24, 0x022B
    e302:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <_Z18putVoiceQueueUpperh>
	}
	AlarmControl.VoiceCheckFlag |= 2; // Set switch current states
    e306:	90 91 05 01 	lds	r25, 0x0105
    e30a:	92 60       	ori	r25, 0x02	; 2
    e30c:	90 93 05 01 	sts	0x0105, r25
	CurrentPhase = 0;
    e310:	10 92 1a 0c 	sts	0x0C1A, r1
	perOutPhase (g_chans512, 0);
    e314:	60 e0       	ldi	r22, 0x00	; 0
    e316:	8f e7       	ldi	r24, 0x7F	; 127
    e318:	9d e0       	ldi	r25, 0x0D	; 13
    e31a:	0e 94 24 5c 	call	0xb848	; 0xb848 <_Z11perOutPhasePih>
	startPulses ();
    e31e:	0e 94 0c 32 	call	0x6418	; 0x6418 <_Z11startPulsesv>
	wdt_enable(WDTO_500MS);
    e322:	8d e0       	ldi	r24, 0x0D	; 13
    e324:	28 e1       	ldi	r18, 0x18	; 24
    e326:	30 e0       	ldi	r19, 0x00	; 0
    e328:	0f b6       	in	r0, 0x3f	; 63
    e32a:	f8 94       	cli
    e32c:	a8 95       	wdr
    e32e:	21 bd       	out	0x21, r18	; 33
    e330:	0f be       	out	0x3f, r0	; 63
    e332:	81 bd       	out	0x21, r24	; 33

//    pushMenu(menuProcModelSelect);
//    popMenu(true);
	g_menuStack[1] = menuProcModelSelect; // this is so the first instance of [MENU LONG] doesn't freak out!
    e334:	2f e5       	ldi	r18, 0x5F	; 95
    e336:	31 e4       	ldi	r19, 0x41	; 65
    e338:	30 93 7d 01 	sts	0x017D, r19
    e33c:	20 93 7c 01 	sts	0x017C, r18

//		lcdSetContrast() ;

	if (cModel != g_eeGeneral.currModel) {
    e340:	80 91 0f 06 	lds	r24, 0x060F
    e344:	d8 16       	cp	r13, r24
    e346:	29 f0       	breq	.+10     	; 0xe352 <main+0x246>
		STORE_GENERALVARS;   // if model was quick-selected, make sure it sticks
    e348:	81 e0       	ldi	r24, 0x01	; 1
    e34a:	0e 94 4e 20 	call	0x409c	; 0x409c <_Z7eeDirtyh>
		//    eeDirty(EE_GENERAL); // if model was quick-selected, make sure it sticks
		eeWaitComplete ();
    e34e:	0e 94 4c 21 	call	0x4298	; 0x4298 <_Z14eeWaitCompletev>
//#else
//			TIFR = 1 << OCF1A ;   // Clear pending interrupt
//#endif
//	    PULSEGEN_ON; // Pulse generator enable immediately before mainloop
//		}
	Main_running = 1;
    e352:	81 e0       	ldi	r24, 0x01	; 1
    e354:	80 93 1e 02 	sts	0x021E, r24
	while (1) {
		//uint16_t old10ms=get_tmr10ms();
		mainSequence ();
    e358:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <_Z12mainSequencev>
    e35c:	fd cf       	rjmp	.-6      	; 0xe358 <main+0x24c>
			//            for(uint8_t i=0; i<4; i++)
			//               tsum += anaIn(i)/INAC_DEVISOR;

			if (keyDown () || (tsum != inacSum)) return;  //wait for key release

		} while (tgtime != get_tmr10ms ());
    e35e:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <_Z11get_tmr10msv>
		uint16_t inacSum = stickMoveValue ();
		//        for(uint8_t i=0; i<4; i++)
		//           inacSum += anaIn(i)/INAC_DEVISOR;

		uint16_t tgtime = get_tmr10ms () + SPLASH_TIMEOUT;
		do {
    e362:	c8 17       	cp	r28, r24
    e364:	d9 07       	cpc	r29, r25
    e366:	09 f0       	breq	.+2      	; 0xe36a <main+0x25e>
    e368:	8d cf       	rjmp	.-230    	; 0xe284 <main+0x178>
    e36a:	5a cf       	rjmp	.-332    	; 0xe220 <main+0x114>

0000e36c <_GLOBAL__sub_I_s9xsplash>:
const prog_uint8_t APM bchout_ar[] = {
		0x1B, 0x1E, 0x27, 0x2D, 0x36, 0x39, 0x4B, 0x4E, 0x63, 0x6C, 0x72, 0x78, 0x87, 0x8D, 0x93,
		0x9C, 0xB1, 0xB4, 0xC6, 0xC9, 0xD2, 0xD8, 0xE1, 0xE4 };

//new audio object
audioQueue audio;
    e36c:	8f e9       	ldi	r24, 0x9F	; 159
    e36e:	91 e0       	ldi	r25, 0x01	; 1
    e370:	0c 94 a5 32 	jmp	0x654a	; 0x654a <_ZN10audioQueueC1Ev>

0000e374 <__mulsi3>:
    e374:	db 01       	movw	r26, r22
    e376:	8f 93       	push	r24
    e378:	9f 93       	push	r25
    e37a:	9e d0       	rcall	.+316    	; 0xe4b8 <__muluhisi3>
    e37c:	bf 91       	pop	r27
    e37e:	af 91       	pop	r26
    e380:	a2 9f       	mul	r26, r18
    e382:	80 0d       	add	r24, r0
    e384:	91 1d       	adc	r25, r1
    e386:	a3 9f       	mul	r26, r19
    e388:	90 0d       	add	r25, r0
    e38a:	b2 9f       	mul	r27, r18
    e38c:	90 0d       	add	r25, r0
    e38e:	11 24       	eor	r1, r1
    e390:	08 95       	ret

0000e392 <__divmodqi4>:
    e392:	87 fb       	bst	r24, 7
    e394:	08 2e       	mov	r0, r24
    e396:	06 26       	eor	r0, r22
    e398:	87 fd       	sbrc	r24, 7
    e39a:	81 95       	neg	r24
    e39c:	67 fd       	sbrc	r22, 7
    e39e:	61 95       	neg	r22
    e3a0:	9b d0       	rcall	.+310    	; 0xe4d8 <__udivmodqi4>
    e3a2:	0e f4       	brtc	.+2      	; 0xe3a6 <__divmodqi4_1>
    e3a4:	91 95       	neg	r25

0000e3a6 <__divmodqi4_1>:
    e3a6:	07 fc       	sbrc	r0, 7
    e3a8:	81 95       	neg	r24

0000e3aa <__divmodqi4_exit>:
    e3aa:	08 95       	ret

0000e3ac <__udivmodhi4>:
    e3ac:	aa 1b       	sub	r26, r26
    e3ae:	bb 1b       	sub	r27, r27
    e3b0:	51 e1       	ldi	r21, 0x11	; 17
    e3b2:	07 c0       	rjmp	.+14     	; 0xe3c2 <__udivmodhi4_ep>

0000e3b4 <__udivmodhi4_loop>:
    e3b4:	aa 1f       	adc	r26, r26
    e3b6:	bb 1f       	adc	r27, r27
    e3b8:	a6 17       	cp	r26, r22
    e3ba:	b7 07       	cpc	r27, r23
    e3bc:	10 f0       	brcs	.+4      	; 0xe3c2 <__udivmodhi4_ep>
    e3be:	a6 1b       	sub	r26, r22
    e3c0:	b7 0b       	sbc	r27, r23

0000e3c2 <__udivmodhi4_ep>:
    e3c2:	88 1f       	adc	r24, r24
    e3c4:	99 1f       	adc	r25, r25
    e3c6:	5a 95       	dec	r21
    e3c8:	a9 f7       	brne	.-22     	; 0xe3b4 <__udivmodhi4_loop>
    e3ca:	80 95       	com	r24
    e3cc:	90 95       	com	r25
    e3ce:	bc 01       	movw	r22, r24
    e3d0:	cd 01       	movw	r24, r26
    e3d2:	08 95       	ret

0000e3d4 <__divmodhi4>:
    e3d4:	97 fb       	bst	r25, 7
    e3d6:	07 2e       	mov	r0, r23
    e3d8:	16 f4       	brtc	.+4      	; 0xe3de <__divmodhi4+0xa>
    e3da:	00 94       	com	r0
    e3dc:	06 d0       	rcall	.+12     	; 0xe3ea <__divmodhi4_neg1>
    e3de:	77 fd       	sbrc	r23, 7
    e3e0:	08 d0       	rcall	.+16     	; 0xe3f2 <__divmodhi4_neg2>
    e3e2:	e4 df       	rcall	.-56     	; 0xe3ac <__udivmodhi4>
    e3e4:	07 fc       	sbrc	r0, 7
    e3e6:	05 d0       	rcall	.+10     	; 0xe3f2 <__divmodhi4_neg2>
    e3e8:	3e f4       	brtc	.+14     	; 0xe3f8 <__divmodhi4_exit>

0000e3ea <__divmodhi4_neg1>:
    e3ea:	90 95       	com	r25
    e3ec:	81 95       	neg	r24
    e3ee:	9f 4f       	sbci	r25, 0xFF	; 255
    e3f0:	08 95       	ret

0000e3f2 <__divmodhi4_neg2>:
    e3f2:	70 95       	com	r23
    e3f4:	61 95       	neg	r22
    e3f6:	7f 4f       	sbci	r23, 0xFF	; 255

0000e3f8 <__divmodhi4_exit>:
    e3f8:	08 95       	ret

0000e3fa <__udivmodsi4>:
    e3fa:	a1 e2       	ldi	r26, 0x21	; 33
    e3fc:	1a 2e       	mov	r1, r26
    e3fe:	aa 1b       	sub	r26, r26
    e400:	bb 1b       	sub	r27, r27
    e402:	fd 01       	movw	r30, r26
    e404:	0d c0       	rjmp	.+26     	; 0xe420 <__udivmodsi4_ep>

0000e406 <__udivmodsi4_loop>:
    e406:	aa 1f       	adc	r26, r26
    e408:	bb 1f       	adc	r27, r27
    e40a:	ee 1f       	adc	r30, r30
    e40c:	ff 1f       	adc	r31, r31
    e40e:	a2 17       	cp	r26, r18
    e410:	b3 07       	cpc	r27, r19
    e412:	e4 07       	cpc	r30, r20
    e414:	f5 07       	cpc	r31, r21
    e416:	20 f0       	brcs	.+8      	; 0xe420 <__udivmodsi4_ep>
    e418:	a2 1b       	sub	r26, r18
    e41a:	b3 0b       	sbc	r27, r19
    e41c:	e4 0b       	sbc	r30, r20
    e41e:	f5 0b       	sbc	r31, r21

0000e420 <__udivmodsi4_ep>:
    e420:	66 1f       	adc	r22, r22
    e422:	77 1f       	adc	r23, r23
    e424:	88 1f       	adc	r24, r24
    e426:	99 1f       	adc	r25, r25
    e428:	1a 94       	dec	r1
    e42a:	69 f7       	brne	.-38     	; 0xe406 <__udivmodsi4_loop>
    e42c:	60 95       	com	r22
    e42e:	70 95       	com	r23
    e430:	80 95       	com	r24
    e432:	90 95       	com	r25
    e434:	9b 01       	movw	r18, r22
    e436:	ac 01       	movw	r20, r24
    e438:	bd 01       	movw	r22, r26
    e43a:	cf 01       	movw	r24, r30
    e43c:	08 95       	ret

0000e43e <__divmodsi4>:
    e43e:	05 2e       	mov	r0, r21
    e440:	97 fb       	bst	r25, 7
    e442:	16 f4       	brtc	.+4      	; 0xe448 <__divmodsi4+0xa>
    e444:	00 94       	com	r0
    e446:	0f d0       	rcall	.+30     	; 0xe466 <__negsi2>
    e448:	57 fd       	sbrc	r21, 7
    e44a:	05 d0       	rcall	.+10     	; 0xe456 <__divmodsi4_neg2>
    e44c:	d6 df       	rcall	.-84     	; 0xe3fa <__udivmodsi4>
    e44e:	07 fc       	sbrc	r0, 7
    e450:	02 d0       	rcall	.+4      	; 0xe456 <__divmodsi4_neg2>
    e452:	46 f4       	brtc	.+16     	; 0xe464 <__divmodsi4_exit>
    e454:	08 c0       	rjmp	.+16     	; 0xe466 <__negsi2>

0000e456 <__divmodsi4_neg2>:
    e456:	50 95       	com	r21
    e458:	40 95       	com	r20
    e45a:	30 95       	com	r19
    e45c:	21 95       	neg	r18
    e45e:	3f 4f       	sbci	r19, 0xFF	; 255
    e460:	4f 4f       	sbci	r20, 0xFF	; 255
    e462:	5f 4f       	sbci	r21, 0xFF	; 255

0000e464 <__divmodsi4_exit>:
    e464:	08 95       	ret

0000e466 <__negsi2>:
    e466:	90 95       	com	r25
    e468:	80 95       	com	r24
    e46a:	70 95       	com	r23
    e46c:	61 95       	neg	r22
    e46e:	7f 4f       	sbci	r23, 0xFF	; 255
    e470:	8f 4f       	sbci	r24, 0xFF	; 255
    e472:	9f 4f       	sbci	r25, 0xFF	; 255
    e474:	08 95       	ret

0000e476 <__tablejump2__>:
    e476:	ee 0f       	add	r30, r30
    e478:	ff 1f       	adc	r31, r31

0000e47a <__tablejump__>:
    e47a:	05 90       	lpm	r0, Z+
    e47c:	f4 91       	lpm	r31, Z
    e47e:	e0 2d       	mov	r30, r0
    e480:	09 94       	ijmp

0000e482 <__mulhisi3>:
    e482:	05 d0       	rcall	.+10     	; 0xe48e <__umulhisi3>
    e484:	33 23       	and	r19, r19
    e486:	12 f4       	brpl	.+4      	; 0xe48c <__mulhisi3+0xa>
    e488:	8a 1b       	sub	r24, r26
    e48a:	9b 0b       	sbc	r25, r27
    e48c:	10 c0       	rjmp	.+32     	; 0xe4ae <__usmulhisi3_tail>

0000e48e <__umulhisi3>:
    e48e:	a2 9f       	mul	r26, r18
    e490:	b0 01       	movw	r22, r0
    e492:	b3 9f       	mul	r27, r19
    e494:	c0 01       	movw	r24, r0
    e496:	a3 9f       	mul	r26, r19
    e498:	70 0d       	add	r23, r0
    e49a:	81 1d       	adc	r24, r1
    e49c:	11 24       	eor	r1, r1
    e49e:	91 1d       	adc	r25, r1
    e4a0:	b2 9f       	mul	r27, r18
    e4a2:	70 0d       	add	r23, r0
    e4a4:	81 1d       	adc	r24, r1
    e4a6:	11 24       	eor	r1, r1
    e4a8:	91 1d       	adc	r25, r1
    e4aa:	08 95       	ret

0000e4ac <__usmulhisi3>:
    e4ac:	f0 df       	rcall	.-32     	; 0xe48e <__umulhisi3>

0000e4ae <__usmulhisi3_tail>:
    e4ae:	b7 ff       	sbrs	r27, 7
    e4b0:	08 95       	ret
    e4b2:	82 1b       	sub	r24, r18
    e4b4:	93 0b       	sbc	r25, r19
    e4b6:	08 95       	ret

0000e4b8 <__muluhisi3>:
    e4b8:	ea df       	rcall	.-44     	; 0xe48e <__umulhisi3>
    e4ba:	a5 9f       	mul	r26, r21
    e4bc:	90 0d       	add	r25, r0
    e4be:	b4 9f       	mul	r27, r20
    e4c0:	90 0d       	add	r25, r0
    e4c2:	a4 9f       	mul	r26, r20
    e4c4:	80 0d       	add	r24, r0
    e4c6:	91 1d       	adc	r25, r1
    e4c8:	11 24       	eor	r1, r1
    e4ca:	08 95       	ret

0000e4cc <__mulshisi3>:
    e4cc:	b7 ff       	sbrs	r27, 7
    e4ce:	f4 cf       	rjmp	.-24     	; 0xe4b8 <__muluhisi3>

0000e4d0 <__mulohisi3>:
    e4d0:	f3 df       	rcall	.-26     	; 0xe4b8 <__muluhisi3>
    e4d2:	82 1b       	sub	r24, r18
    e4d4:	93 0b       	sbc	r25, r19
    e4d6:	08 95       	ret

0000e4d8 <__udivmodqi4>:
    e4d8:	99 1b       	sub	r25, r25
    e4da:	79 e0       	ldi	r23, 0x09	; 9
    e4dc:	04 c0       	rjmp	.+8      	; 0xe4e6 <__udivmodqi4_ep>

0000e4de <__udivmodqi4_loop>:
    e4de:	99 1f       	adc	r25, r25
    e4e0:	96 17       	cp	r25, r22
    e4e2:	08 f0       	brcs	.+2      	; 0xe4e6 <__udivmodqi4_ep>
    e4e4:	96 1b       	sub	r25, r22

0000e4e6 <__udivmodqi4_ep>:
    e4e6:	88 1f       	adc	r24, r24
    e4e8:	7a 95       	dec	r23
    e4ea:	c9 f7       	brne	.-14     	; 0xe4de <__udivmodqi4_loop>
    e4ec:	80 95       	com	r24
    e4ee:	08 95       	ret

0000e4f0 <atoi>:
    e4f0:	fc 01       	movw	r30, r24
    e4f2:	88 27       	eor	r24, r24
    e4f4:	99 27       	eor	r25, r25
    e4f6:	e8 94       	clt
    e4f8:	21 91       	ld	r18, Z+
    e4fa:	20 32       	cpi	r18, 0x20	; 32
    e4fc:	e9 f3       	breq	.-6      	; 0xe4f8 <atoi+0x8>
    e4fe:	29 30       	cpi	r18, 0x09	; 9
    e500:	10 f0       	brcs	.+4      	; 0xe506 <atoi+0x16>
    e502:	2e 30       	cpi	r18, 0x0E	; 14
    e504:	c8 f3       	brcs	.-14     	; 0xe4f8 <atoi+0x8>
    e506:	2b 32       	cpi	r18, 0x2B	; 43
    e508:	39 f0       	breq	.+14     	; 0xe518 <atoi+0x28>
    e50a:	2d 32       	cpi	r18, 0x2D	; 45
    e50c:	31 f4       	brne	.+12     	; 0xe51a <atoi+0x2a>
    e50e:	68 94       	set
    e510:	03 c0       	rjmp	.+6      	; 0xe518 <atoi+0x28>
    e512:	31 d0       	rcall	.+98     	; 0xe576 <__mulhi_const_10>
    e514:	82 0f       	add	r24, r18
    e516:	91 1d       	adc	r25, r1
    e518:	21 91       	ld	r18, Z+
    e51a:	20 53       	subi	r18, 0x30	; 48
    e51c:	2a 30       	cpi	r18, 0x0A	; 10
    e51e:	c8 f3       	brcs	.-14     	; 0xe512 <atoi+0x22>
    e520:	1e f4       	brtc	.+6      	; 0xe528 <atoi+0x38>
    e522:	90 95       	com	r25
    e524:	81 95       	neg	r24
    e526:	9f 4f       	sbci	r25, 0xFF	; 255
    e528:	08 95       	ret

0000e52a <memmove>:
    e52a:	68 17       	cp	r22, r24
    e52c:	79 07       	cpc	r23, r25
    e52e:	68 f4       	brcc	.+26     	; 0xe54a <memmove+0x20>
    e530:	fb 01       	movw	r30, r22
    e532:	dc 01       	movw	r26, r24
    e534:	e4 0f       	add	r30, r20
    e536:	f5 1f       	adc	r31, r21
    e538:	a4 0f       	add	r26, r20
    e53a:	b5 1f       	adc	r27, r21
    e53c:	02 c0       	rjmp	.+4      	; 0xe542 <memmove+0x18>
    e53e:	02 90       	ld	r0, -Z
    e540:	0e 92       	st	-X, r0
    e542:	41 50       	subi	r20, 0x01	; 1
    e544:	50 40       	sbci	r21, 0x00	; 0
    e546:	d8 f7       	brcc	.-10     	; 0xe53e <memmove+0x14>
    e548:	08 95       	ret
    e54a:	2d c0       	rjmp	.+90     	; 0xe5a6 <memcpy>

0000e54c <memset>:
    e54c:	dc 01       	movw	r26, r24
    e54e:	01 c0       	rjmp	.+2      	; 0xe552 <memset+0x6>
    e550:	6d 93       	st	X+, r22
    e552:	41 50       	subi	r20, 0x01	; 1
    e554:	50 40       	sbci	r21, 0x00	; 0
    e556:	e0 f7       	brcc	.-8      	; 0xe550 <memset+0x4>
    e558:	08 95       	ret

0000e55a <strncmp>:
    e55a:	fb 01       	movw	r30, r22
    e55c:	dc 01       	movw	r26, r24
    e55e:	41 50       	subi	r20, 0x01	; 1
    e560:	50 40       	sbci	r21, 0x00	; 0
    e562:	30 f0       	brcs	.+12     	; 0xe570 <strncmp+0x16>
    e564:	8d 91       	ld	r24, X+
    e566:	01 90       	ld	r0, Z+
    e568:	80 19       	sub	r24, r0
    e56a:	19 f4       	brne	.+6      	; 0xe572 <strncmp+0x18>
    e56c:	00 20       	and	r0, r0
    e56e:	b9 f7       	brne	.-18     	; 0xe55e <strncmp+0x4>
    e570:	88 1b       	sub	r24, r24
    e572:	99 0b       	sbc	r25, r25
    e574:	08 95       	ret

0000e576 <__mulhi_const_10>:
    e576:	7a e0       	ldi	r23, 0x0A	; 10
    e578:	97 9f       	mul	r25, r23
    e57a:	90 2d       	mov	r25, r0
    e57c:	87 9f       	mul	r24, r23
    e57e:	80 2d       	mov	r24, r0
    e580:	91 0d       	add	r25, r1
    e582:	11 24       	eor	r1, r1
    e584:	08 95       	ret

0000e586 <__eerd_block_m64>:
    e586:	dc 01       	movw	r26, r24
    e588:	cb 01       	movw	r24, r22

0000e58a <__eerd_blraw_m64>:
    e58a:	fc 01       	movw	r30, r24
    e58c:	e1 99       	sbic	0x1c, 1	; 28
    e58e:	fe cf       	rjmp	.-4      	; 0xe58c <__eerd_blraw_m64+0x2>
    e590:	06 c0       	rjmp	.+12     	; 0xe59e <__eerd_blraw_m64+0x14>
    e592:	ff bb       	out	0x1f, r31	; 31
    e594:	ee bb       	out	0x1e, r30	; 30
    e596:	e0 9a       	sbi	0x1c, 0	; 28
    e598:	31 96       	adiw	r30, 0x01	; 1
    e59a:	0d b2       	in	r0, 0x1d	; 29
    e59c:	0d 92       	st	X+, r0
    e59e:	41 50       	subi	r20, 0x01	; 1
    e5a0:	50 40       	sbci	r21, 0x00	; 0
    e5a2:	b8 f7       	brcc	.-18     	; 0xe592 <__eerd_blraw_m64+0x8>
    e5a4:	08 95       	ret

0000e5a6 <memcpy>:
    e5a6:	fb 01       	movw	r30, r22
    e5a8:	dc 01       	movw	r26, r24
    e5aa:	02 c0       	rjmp	.+4      	; 0xe5b0 <memcpy+0xa>
    e5ac:	01 90       	ld	r0, Z+
    e5ae:	0d 92       	st	X+, r0
    e5b0:	41 50       	subi	r20, 0x01	; 1
    e5b2:	50 40       	sbci	r21, 0x00	; 0
    e5b4:	d8 f7       	brcc	.-10     	; 0xe5ac <memcpy+0x6>
    e5b6:	08 95       	ret

0000e5b8 <_exit>:
    e5b8:	f8 94       	cli

0000e5ba <__stop_program>:
    e5ba:	ff cf       	rjmp	.-2      	; 0xe5ba <__stop_program>
